{
  "1 1 1 1": {
    "cards": "1 1 1 1",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 2": {
    "cards": "1 1 1 2",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 3": {
    "cards": "1 1 1 3",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 4": {
    "cards": "1 1 1 4",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 5": {
    "cards": "1 1 1 5",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 6": {
    "cards": "1 1 1 6",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 7": {
    "cards": "1 1 1 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 8": {
    "cards": "1 1 1 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((1 + 1) + 1) * 8",
      "(1 + (1 + 1)) * 8",
      "8 * (1 + (1 + 1))",
      "8 * ((1 + 1) + 1)"
    ]
  },
  "1 1 1 9": {
    "cards": "1 1 1 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 10": {
    "cards": "1 1 1 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 1 11": {
    "cards": "1 1 1 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 + 1) * (11 + 1)",
      "(1 + 11) * (1 + 1)",
      "(1 + 1) * (1 + 11)",
      "(11 + 1) * (1 + 1)"
    ]
  },
  "1 1 1 12": {
    "cards": "1 1 1 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "12 * ((1 * 1) + 1)",
      "12 * (1 * (1 + 1))",
      "(1 + 1) * (1 * 12)",
      "(1 + 1) * (12 / 1)",
      "(1 + 1) * (12 * 1)",
      "12 * ((1 + 1) / 1)",
      "1 * (12 * (1 + 1))",
      "12 * (1 + (1 * 1))",
      "12 / (1 / (1 + 1))",
      "((1 + 1) * 12) * 1",
      "(12 * (1 + 1)) / 1",
      "((1 + 1) * 1) * 12",
      "12 * ((1 + 1) * 1)",
      "(12 / 1) * (1 + 1)",
      "1 * ((1 + 1) * 12)",
      "(1 * (1 + 1)) * 12",
      "12 * ((1 / 1) + 1)",
      "((1 + 1) / 1) * 12",
      "(1 + (1 / 1)) * 12",
      "(12 * (1 + 1)) * 1",
      "(1 + (1 * 1)) * 12",
      "(1 * 12) * (1 + 1)",
      "(1 + 1) / (1 / 12)",
      "((1 / 1) + 1) * 12",
      "((1 + 1) * 12) / 1",
      "((1 * 1) + 1) * 12",
      "12 * (1 + (1 / 1))",
      "(12 * 1) * (1 + 1)"
    ]
  },
  "1 1 1 13": {
    "cards": "1 1 1 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(13 - 1) * (1 + 1)",
      "(1 + 1) * (13 - 1)"
    ]
  },
  "1 1 2 2": {
    "cards": "1 1 2 2",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 2 3": {
    "cards": "1 1 2 3",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 2 4": {
    "cards": "1 1 2 4",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 2 5": {
    "cards": "1 1 2 5",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 2 6": {
    "cards": "1 1 2 6",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "6 * (1 + (1 + 2))",
      "(6 * 2) * (1 + 1)",
      "((1 + 2) + 1) * 6",
      "6 * ((1 + 2) + 1)",
      "6 * ((2 + 1) + 1)",
      "6 * (1 + (2 + 1))",
      "(2 * 6) * (1 + 1)",
      "6 * (2 * (1 + 1))",
      "((1 + 1) + 2) * 6",
      "(2 * (1 + 1)) * 6",
      "6 * ((1 + 1) * 2)",
      "(1 + 1) * (2 * 6)",
      "(2 + (1 + 1)) * 6",
      "6 * (2 + (1 + 1))",
      "((1 + 1) * 6) * 2",
      "2 * ((1 + 1) * 6)",
      "6 * ((1 + 1) + 2)",
      "(1 + 1) * (6 * 2)",
      "((1 + 1) * 2) * 6",
      "(1 + (2 + 1)) * 6",
      "((2 + 1) + 1) * 6",
      "2 * (6 * (1 + 1))",
      "(1 + (1 + 2)) * 6",
      "(6 * (1 + 1)) * 2"
    ]
  },
  "1 1 2 7": {
    "cards": "1 1 2 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 + 1) * (2 + 1)",
      "(1 + 7) * (2 + 1)",
      "(2 + 1) * (1 + 7)",
      "(2 + 1) * (7 + 1)",
      "(1 + 7) * (1 + 2)",
      "(7 + 1) * (1 + 2)",
      "(1 + 2) * (7 + 1)",
      "(1 + 2) * (1 + 7)"
    ]
  },
  "1 1 2 8": {
    "cards": "1 1 2 8",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(1 + 2) / (1 / 8)",
      "8 / (1 / (1 + 2))",
      "(8 / 1) * (1 + 2)",
      "(1 * (2 + 1)) * 8",
      "8 * ((2 + 1) / 1)",
      "((2 * 1) + 1) * 8",
      "((1 + 2) / 1) * 8",
      "(2 + 1) * (8 * 1)",
      "8 * ((2 / 1) + 1)",
      "8 * (2 + (1 / 1))",
      "(1 * 8) * (2 + 1)",
      "(2 + 1) * (1 * 8)",
      "((2 / 1) + 1) * 8",
      "(1 + 2) * (8 / 1)",
      "((2 + 1) * 1) * 8",
      "(2 + (1 / 1)) * 8",
      "(1 + 2) * (1 * 8)",
      "8 * (1 + (2 / 1))",
      "8 * ((1 * 1) + 2)",
      "((1 / 1) + 2) * 8",
      "(1 + (2 / 1)) * 8",
      "(8 * (2 + 1)) * 1",
      "1 * ((1 + 2) * 8)",
      "8 * (2 + (1 * 1))",
      "(1 + (2 * 1)) * 8",
      "8 / (1 / (2 + 1))",
      "8 * ((1 / 1) + 2)",
      "8 * ((1 + 2) / 1)",
      "(8 * (2 + 1)) / 1",
      "(1 * (1 + 2)) * 8",
      "8 * ((1 * 2) + 1)",
      "((2 + 1) * 8) * 1",
      "8 * (1 + (2 * 1))",
      "1 * (8 * (2 + 1))",
      "8 * ((2 + 1) * 1)",
      "8 * ((1 + 2) * 1)",
      "(8 / 1) * (2 + 1)",
      "8 * (1 * (1 + 2))",
      "8 * (1 * (2 + 1))",
      "((2 + 1) / 1) * 8",
      "(8 * (1 + 2)) / 1",
      "((1 * 1) + 2) * 8",
      "(2 + 1) * (8 / 1)",
      "((1 + 2) * 1) * 8",
      "(2 + (1 * 1)) * 8",
      "((1 * 2) + 1) * 8",
      "8 * ((2 * 1) + 1)",
      "((2 + 1) * 8) / 1",
      "(1 * 8) * (1 + 2)",
      "(2 + 1) / (1 / 8)",
      "(1 + 2) * (8 * 1)",
      "(8 * 1) * (2 + 1)",
      "(8 * 1) * (1 + 2)",
      "((1 + 2) * 8) / 1",
      "8 * (1 + (1 * 2))",
      "(1 + (1 * 2)) * 8",
      "1 * (8 * (1 + 2))",
      "((1 + 2) * 8) * 1",
      "1 * ((2 + 1) * 8)",
      "(8 * (1 + 2)) * 1"
    ]
  },
  "1 1 2 9": {
    "cards": "1 1 2 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 + 1) * (9 - 1)",
      "(9 - 1) * (1 + 2)",
      "(9 - 1) * (2 + 1)",
      "(1 + 2) * (9 - 1)"
    ]
  },
  "1 1 2 10": {
    "cards": "1 1 2 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "2 * (1 + (1 + 10))",
      "(2 + 10) * (1 + 1)",
      "2 * ((1 + 10) + 1)",
      "2 * ((1 + 1) + 10)",
      "2 * ((10 + 1) + 1)",
      "((1 + 1) + 10) * 2",
      "(10 + (1 + 1)) * 2",
      "(1 + (1 + 10)) * 2",
      "(10 + 2) * (1 + 1)",
      "(1 + (10 + 1)) * 2",
      "((1 + 10) + 1) * 2",
      "((10 + 1) + 1) * 2",
      "2 * (1 + (10 + 1))",
      "(1 + 1) * (10 + 2)",
      "(1 + 1) * (2 + 10)",
      "2 * (10 + (1 + 1))"
    ]
  },
  "1 1 2 11": {
    "cards": "1 1 2 11",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "(1 + (11 * 1)) * 2",
      "(1 + 1) + (2 * 11)",
      "(2 * (11 + 1)) / 1",
      "(11 + 1) * (2 / 1)",
      "((11 + 1) * 2) * 1",
      "((1 * 1) + 11) * 2",
      "((11 * 2) + 1) + 1",
      "(2 * (1 + 11)) / 1",
      "(2 * (1 + 11)) * 1",
      "(2 * 1) * (1 + 11)",
      "(2 * (11 + 1)) * 1",
      "2 * (1 + (1 * 11))",
      "((1 + 11) * 2) * 1",
      "(11 + (1 * 1)) * 2",
      "1 + (1 + (2 * 11))",
      "(1 + 11) * (2 * 1)",
      "(1 * 2) * (1 + 11)",
      "((11 + 1) * 1) * 2",
      "2 / (1 / (11 + 1))",
      "1 * ((11 + 1) * 2)",
      "(1 + (11 / 1)) * 2",
      "(2 / 1) * (1 + 11)",
      "(11 * (1 + 1)) + 2",
      "((11 * 1) + 1) * 2",
      "((11 + 1) / 1) * 2",
      "2 * (11 + (1 / 1))",
      "2 * (1 + (11 / 1))",
      "(11 + 1) / (1 / 2)",
      "(1 + 11) / (1 / 2)",
      "2 * ((1 + 11) / 1)",
      "(1 * (1 + 11)) * 2",
      "1 + (1 + (11 * 2))",
      "((11 + 1) * 2) / 1",
      "((2 * 11) + 1) + 1",
      "2 * (1 * (1 + 11))",
      "2 * ((1 + 11) * 1)",
      "((1 + 11) / 1) * 2",
      "2 * ((11 / 1) + 1)",
      "2 * (11 + (1 * 1))",
      "(1 * (11 + 1)) * 2",
      "1 * ((1 + 11) * 2)",
      "2 * (1 + (11 * 1))",
      "2 * ((11 + 1) / 1)",
      "(1 + (2 * 11)) + 1",
      "(1 + 11) * (1 * 2)",
      "(1 + (1 * 11)) * 2",
      "1 * (2 * (11 + 1))",
      "(2 / 1) * (11 + 1)",
      "1 + ((11 * 2) + 1)",
      "(1 * 2) * (11 + 1)",
      "(1 + 11) * (2 / 1)",
      "1 + ((2 * 11) + 1)",
      "((1 * 11) + 1) * 2",
      "2 / (1 / (1 + 11))",
      "((1 + 11) * 1) * 2",
      "(2 * 1) * (11 + 1)",
      "2 * (1 * (11 + 1))",
      "(2 * 11) + (1 + 1)",
      "(1 + (11 * 2)) + 1",
      "2 * ((1 * 11) + 1)",
      "((1 + 1) * 11) + 2",
      "2 * ((11 + 1) * 1)",
      "((11 / 1) + 1) * 2",
      "((1 + 11) * 2) / 1",
      "2 + (11 * (1 + 1))",
      "1 * (2 * (1 + 11))",
      "(11 + 1) * (2 * 1)",
      "(1 + 1) + (11 * 2)",
      "(11 + (1 / 1)) * 2",
      "2 * ((1 * 1) + 11)",
      "(11 + 1) * (1 * 2)",
      "(11 * 2) + (1 + 1)",
      "2 * ((1 / 1) + 11)",
      "2 * ((11 * 1) + 1)",
      "((1 / 1) + 11) * 2",
      "2 + ((1 + 1) * 11)"
    ]
  },
  "1 1 2 12": {
    "cards": "1 1 2 12",
    "has_solution": "Y",
    "num_solutions": 229,
    "solutions": [
      "(1 * 2) / (1 / 12)",
      "((12 * 2) + 1) - 1",
      "(2 * (12 * 1)) / 1",
      "12 * ((1 / 1) * 2)",
      "(1 * (2 * 12)) / 1",
      "((1 * 1) * 12) * 2",
      "2 * ((1 - 1) + 12)",
      "12 * ((2 / 1) * 1)",
      "(2 / (1 / 12)) / 1",
      "1 * (2 * (1 * 12))",
      "(2 * (1 * 12)) * 1",
      "(12 * 2) - (1 - 1)",
      "((2 * 1) * 12) / 1",
      "1 * ((2 * 12) / 1)",
      "2 / (1 / (12 * 1))",
      "(2 / 1) / (1 / 12)",
      "((2 * 12) * 1) / 1",
      "((2 * 1) * 1) * 12",
      "12 * (1 / (1 / 2))",
      "(1 + (12 * 2)) - 1",
      "12 * (2 / (1 / 1))",
      "(1 * 1) * (12 * 2)",
      "(2 / 1) * (12 / 1)",
      "2 * ((12 - 1) + 1)",
      "1 * ((1 * 12) * 2)",
      "(1 * (12 / 1)) * 2",
      "(12 / 1) * (1 * 2)",
      "12 * ((2 * 1) * 1)",
      "((1 - 1) + 12) * 2",
      "(2 * 12) + (1 - 1)",
      "(1 * 2) * (12 * 1)",
      "1 / ((1 / 2) / 12)",
      "2 / ((1 * 1) / 12)",
      "(12 * (1 * 1)) * 2",
      "12 * ((2 * 1) / 1)",
      "1 / ((1 / 12) / 2)",
      "((12 * 2) * 1) * 1",
      "2 * (12 * (1 / 1))",
      "(2 / (1 / 1)) * 12",
      "(2 * 12) - (1 - 1)",
      "(1 + (2 * 12)) - 1",
      "(12 * (1 * 2)) / 1",
      "1 / (1 / (12 * 2))",
      "((1 + 2) - 1) * 12",
      "((12 / 1) * 2) * 1",
      "((2 / 1) * 1) * 12",
      "((2 * 12) + 1) - 1",
      "(12 / 1) * (2 / 1)",
      "1 * (1 * (12 * 2))",
      "12 * (2 - (1 - 1))",
      "(1 * (2 * 1)) * 12",
      "((1 - 1) + 2) * 12",
      "(1 * 1) * (2 * 12)",
      "1 * ((12 / 1) * 2)",
      "12 / (1 / (1 * 2))",
      "(12 * (1 / 1)) * 2",
      "(12 * 1) * (2 * 1)",
      "(1 / 1) * (2 * 12)",
      "((2 * 12) / 1) * 1",
      "12 * (1 + (2 - 1))",
      "((1 * 2) * 12) / 1",
      "((2 + 1) - 1) * 12",
      "(2 * 1) * (12 / 1)",
      "1 / (1 / (2 * 12))",
      "12 / (1 / (2 / 1))",
      "(1 * (2 / 1)) * 12",
      "1 * (1 * (2 * 12))",
      "12 * ((1 - 1) + 2)",
      "12 * ((2 - 1) + 1)",
      "2 * ((12 * 1) * 1)",
      "((2 * 1) / 1) * 12",
      "((2 / 1) * 12) * 1",
      "1 * (2 / (1 / 12))",
      "(1 * (1 * 2)) * 12",
      "(1 / (1 / 12)) * 2",
      "(2 * (12 * 1)) * 1",
      "((12 * 2) * 1) / 1",
      "1 * (12 * (1 * 2))",
      "(2 / 1) * (1 * 12)",
      "2 * (12 - (1 - 1))",
      "2 * ((1 * 1) * 12)",
      "((1 + 12) - 1) * 2",
      "((2 / 1) / 1) * 12",
      "((2 - 1) + 1) * 12",
      "2 * (1 / (1 / 12))",
      "((1 * 12) * 2) / 1",
      "(12 / (1 / 2)) / 1",
      "(1 + (12 - 1)) * 2",
      "(1 * 12) * (2 / 1)",
      "(12 / (1 * 1)) * 2",
      "((12 * 1) * 2) * 1",
      "1 * ((12 * 2) * 1)",
      "1 * (12 * (2 / 1))",
      "1 * (2 * (12 / 1))",
      "(2 / 1) * (12 * 1)",
      "((2 * 1) * 12) * 1",
      "(2 - (1 - 1)) * 12",
      "((1 / 1) * 12) * 2",
      "((1 * 12) * 1) * 2",
      "(12 * 1) * (1 * 2)",
      "12 * (1 - (1 - 2))",
      "(12 * 1) / (1 / 2)",
      "12 * (2 * (1 / 1))",
      "((12 * 1) * 2) / 1",
      "(1 * (12 * 2)) / 1",
      "((2 * 12) * 1) * 1",
      "(1 * (12 * 1)) * 2",
      "1 * ((2 * 1) * 12)",
      "((1 * 12) * 2) * 1",
      "((12 + 1) - 1) * 2",
      "12 / ((1 * 1) / 2)",
      "(1 * 12) * (1 * 2)",
      "12 * (1 * (2 / 1))",
      "((2 * 12) / 1) / 1",
      "2 / (1 / (12 / 1))",
      "(2 / (1 * 1)) * 12",
      "2 * ((12 + 1) - 1)",
      "(12 * 1) * (2 / 1)",
      "(1 * (2 * 12)) * 1",
      "(12 / 1) / (1 / 2)",
      "((2 / 1) * 12) / 1",
      "12 * ((1 + 2) - 1)",
      "(12 * 2) / (1 * 1)",
      "(12 + (1 - 1)) * 2",
      "(1 * 12) * (2 * 1)",
      "(12 * (1 * 2)) * 1",
      "(1 * 12) / (1 / 2)",
      "1 * (2 * (12 * 1))",
      "(12 / (1 / 2)) * 1",
      "1 * ((12 * 1) * 2)",
      "2 * (12 / (1 / 1))",
      "(2 / (1 / 12)) * 1",
      "(1 * 2) * (1 * 12)",
      "((1 * 12) / 1) * 2",
      "(12 * (2 / 1)) * 1",
      "(2 * (1 * 12)) / 1",
      "2 * (12 * (1 * 1))",
      "2 * (1 - (1 - 12))",
      "2 / ((1 / 1) / 12)",
      "12 * (2 / (1 * 1))",
      "(2 * 12) * (1 * 1)",
      "2 * (1 * (12 / 1))",
      "((12 / 1) * 1) * 2",
      "2 * ((12 / 1) / 1)",
      "(2 * (12 / 1)) * 1",
      "(2 * 12) * (1 / 1)",
      "((12 / 1) * 2) / 1",
      "((12 / 1) / 1) * 2",
      "(1 * (12 * 2)) * 1",
      "(12 * (2 / 1)) / 1",
      "12 * (1 * (1 * 2))",
      "(12 * 2) * (1 / 1)",
      "((1 * 2) * 12) * 1",
      "12 * (1 * (2 * 1))",
      "2 * ((1 * 12) * 1)",
      "((12 * 2) / 1) * 1",
      "(12 * 2) + (1 - 1)",
      "12 / (1 / (2 * 1))",
      "(1 - (1 - 12)) * 2",
      "(2 + (1 - 1)) * 12",
      "((1 / 1) * 2) * 12",
      "2 * (1 * (1 * 12))",
      "2 * ((1 + 12) - 1)",
      "2 / ((1 / 12) * 1)",
      "1 * ((2 / 1) * 12)",
      "((12 * 1) * 1) * 2",
      "12 * ((2 / 1) / 1)",
      "(1 - 1) + (12 * 2)",
      "(2 * (1 * 1)) * 12",
      "((2 * 12) - 1) + 1",
      "12 / (1 - (1 / 2))",
      "2 * (12 / (1 * 1))",
      "1 - (1 - (2 * 12))",
      "2 / (1 * (1 / 12))",
      "(2 * 12) / (1 / 1)",
      "12 * ((2 + 1) - 1)",
      "((12 * 2) - 1) + 1",
      "(2 * (1 / 1)) * 12",
      "(2 * (12 / 1)) / 1",
      "(12 * 2) * (1 * 1)",
      "1 + ((12 * 2) - 1)",
      "(1 * (1 * 12)) * 2",
      "12 / (1 * (1 / 2))",
      "1 * (12 * (2 * 1))",
      "((1 * 2) / 1) * 12",
      "((1 * 2) * 1) * 12",
      "((12 * 2) / 1) / 1",
      "(1 * 2) * (12 / 1)",
      "2 * ((1 / 1) * 12)",
      "((12 - 1) + 1) * 2",
      "12 / ((1 / 2) / 1)",
      "1 + ((2 * 12) - 1)",
      "1 * ((2 * 12) * 1)",
      "2 * ((1 * 12) / 1)",
      "2 * ((12 * 1) / 1)",
      "12 * ((1 * 2) / 1)",
      "(1 - 1) + (2 * 12)",
      "2 / ((1 / 12) / 1)",
      "1 * ((1 * 2) * 12)",
      "(2 * 1) * (12 * 1)",
      "((12 * 1) / 1) * 2",
      "2 * (12 + (1 - 1))",
      "(1 / 1) * (12 * 2)",
      "1 * (12 / (1 / 2))",
      "12 * (2 + (1 - 1))",
      "(12 / 1) * (2 * 1)",
      "(1 / (1 / 2)) * 12",
      "2 * (1 + (12 - 1))",
      "1 - (1 - (12 * 2))",
      "(2 * 1) * (1 * 12)",
      "(2 * 1) / (1 / 12)",
      "(12 * (2 * 1)) / 1",
      "2 * (1 * (12 * 1))",
      "12 * ((1 * 2) * 1)",
      "(2 * 12) / (1 * 1)",
      "2 / (1 / (1 * 12))",
      "12 * ((1 * 1) * 2)",
      "(1 - (1 - 2)) * 12",
      "(12 - (1 - 1)) * 2",
      "2 * ((12 / 1) * 1)",
      "(1 + (2 - 1)) * 12",
      "12 / ((1 / 1) / 2)",
      "12 * (2 * (1 * 1))",
      "12 / ((1 / 2) * 1)",
      "(12 * (2 * 1)) * 1",
      "(12 / (1 / 1)) * 2",
      "(12 * 2) / (1 / 1)",
      "((1 * 1) * 2) * 12",
      "1 * ((12 * 2) / 1)"
    ]
  },
  "1 1 2 13": {
    "cards": "1 1 2 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "((13 - 1) / 1) * 2",
      "(13 - (1 / 1)) * 2",
      "(2 * (13 - 1)) / 1",
      "(2 / 1) * (13 - 1)",
      "2 * ((13 * 1) - 1)",
      "((13 * 1) - 1) * 2",
      "2 * (1 * (13 - 1))",
      "2 * (13 - (1 / 1))",
      "(1 * (13 - 1)) * 2",
      "((13 - 1) * 2) / 1",
      "((13 - 1) * 1) * 2",
      "1 * (2 * (13 - 1))",
      "2 * (13 - (1 * 1))",
      "2 * ((13 - 1) * 1)",
      "(13 - 1) / (1 / 2)",
      "((1 * 13) - 1) * 2",
      "(2 * (13 - 1)) * 1",
      "(2 * 13) - (1 + 1)",
      "((1 + 1) * 13) - 2",
      "(13 - 1) * (2 / 1)",
      "((2 * 13) - 1) - 1",
      "2 / (1 / (13 - 1))",
      "2 * ((1 * 13) - 1)",
      "(13 - (1 * 1)) * 2",
      "2 * ((13 - 1) / 1)",
      "(13 - 1) * (2 * 1)",
      "2 * ((13 / 1) - 1)",
      "((13 - 1) * 2) * 1",
      "(1 * 2) * (13 - 1)",
      "(2 * 1) * (13 - 1)",
      "1 * ((13 - 1) * 2)",
      "(13 * (1 + 1)) - 2",
      "((13 * 2) - 1) - 1",
      "(13 * 2) - (1 + 1)",
      "(13 - 1) * (1 * 2)",
      "((13 / 1) - 1) * 2"
    ]
  },
  "1 1 3 3": {
    "cards": "1 1 3 3",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 3 4": {
    "cards": "1 1 3 4",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(1 + 1) * (3 * 4)",
      "(3 * (1 + 1)) * 4",
      "(4 * 3) * (1 + 1)",
      "(3 * 4) * (1 + 1)",
      "4 * (3 * (1 + 1))",
      "4 * ((1 + 1) * 3)",
      "((1 + 1) * 4) * 3",
      "3 * (4 * (1 + 1))",
      "(1 + 1) * (4 * 3)",
      "((1 + 1) * 3) * 4",
      "(4 * (1 + 1)) * 3",
      "3 * ((1 + 1) * 4)"
    ]
  },
  "1 1 3 5": {
    "cards": "1 1 3 5",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 + 1) * (1 + 3)",
      "(1 + 5) * (1 + 3)",
      "(1 + 3) * (1 + 5)",
      "(1 + 5) * (3 + 1)",
      "(1 + 3) * (5 + 1)",
      "(5 + 1) * (3 + 1)",
      "(3 + 1) * (5 + 1)",
      "(3 + 1) * (1 + 5)"
    ]
  },
  "1 1 3 6": {
    "cards": "1 1 3 6",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "(1 * 6) * (3 + 1)",
      "6 * (3 + (1 * 1))",
      "(6 / 1) * (1 + 3)",
      "(1 * (1 + 3)) * 6",
      "((3 + 1) / 1) * 6",
      "(3 + 1) * (1 * 6)",
      "((6 + 1) + 1) * 3",
      "6 * ((1 / 1) + 3)",
      "(6 * (3 + 1)) / 1",
      "((1 + 6) + 1) * 3",
      "6 * (1 + (1 * 3))",
      "3 * (1 + (1 + 6))",
      "((3 / 1) + 1) * 6",
      "(1 + (3 / 1)) * 6",
      "(6 * 1) * (3 + 1)",
      "6 * (1 + (3 * 1))",
      "((3 + 1) * 1) * 6",
      "(6 / 1) * (3 + 1)",
      "1 * ((1 + 3) * 6)",
      "6 * ((3 * 1) + 1)",
      "3 * ((1 + 1) + 6)",
      "6 / (1 / (3 + 1))",
      "6 * (1 + (3 / 1))",
      "6 * ((3 / 1) + 1)",
      "1 * (6 * (1 + 3))",
      "(1 + 3) * (1 * 6)",
      "6 * ((1 * 1) + 3)",
      "1 * ((3 + 1) * 6)",
      "6 * (1 * (1 + 3))",
      "(1 + (6 + 1)) * 3",
      "((3 + 1) * 6) / 1",
      "(3 + 1) * (6 / 1)",
      "6 * (3 + (1 / 1))",
      "6 * ((3 + 1) / 1)",
      "6 * (1 * (3 + 1))",
      "(1 + (1 * 3)) * 6",
      "((1 * 1) + 3) * 6",
      "((3 + 1) * 6) * 1",
      "(3 + 1) / (1 / 6)",
      "3 * ((1 + 6) + 1)",
      "(1 + 3) * (6 / 1)",
      "(1 * 6) * (1 + 3)",
      "(6 * (3 + 1)) * 1",
      "((1 + 3) * 6) * 1",
      "(6 * (1 + 3)) / 1",
      "6 * ((1 + 3) / 1)",
      "((1 / 1) + 3) * 6",
      "3 * (1 + (6 + 1))",
      "(1 + (1 + 6)) * 3",
      "((3 * 1) + 1) * 6",
      "(6 * (1 + 3)) * 1",
      "(6 + (1 + 1)) * 3",
      "(1 + 3) / (1 / 6)",
      "((1 + 3) / 1) * 6",
      "3 * ((6 + 1) + 1)",
      "(3 + (1 / 1)) * 6",
      "((1 + 1) + 6) * 3",
      "6 * ((1 * 3) + 1)",
      "((1 + 3) * 1) * 6",
      "((1 * 3) + 1) * 6",
      "3 * (6 + (1 + 1))",
      "(3 + 1) * (6 * 1)",
      "((1 + 3) * 6) / 1",
      "(1 + 3) * (6 * 1)",
      "6 / (1 / (1 + 3))",
      "(6 * 1) * (1 + 3)",
      "6 * ((1 + 3) * 1)",
      "6 * ((3 + 1) * 1)",
      "(3 + (1 * 1)) * 6",
      "(1 * (3 + 1)) * 6",
      "1 * (6 * (3 + 1))",
      "(1 + (3 * 1)) * 6"
    ]
  },
  "1 1 3 7": {
    "cards": "1 1 3 7",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(1 + 7) * (3 * 1)",
      "(3 * (7 + 1)) / 1",
      "(1 * 3) * (7 + 1)",
      "(3 * 1) * (7 + 1)",
      "(3 * (1 + 7)) / 1",
      "(1 + 7) * (1 * 3)",
      "(3 / 1) * (1 + 7)",
      "(7 + 1) * (3 * 1)",
      "(1 + 3) * (7 - 1)",
      "3 * ((1 + 7) / 1)",
      "1 * ((1 + 7) * 3)",
      "((7 * 1) + 1) * 3",
      "(7 + (1 * 1)) * 3",
      "(7 + (1 / 1)) * 3",
      "(1 + 7) * (3 / 1)",
      "(3 + 1) * (7 - 1)",
      "3 * ((1 * 1) + 7)",
      "(1 + (1 * 7)) * 3",
      "(1 * (1 + 7)) * 3",
      "3 * ((7 / 1) + 1)",
      "3 * ((7 * 1) + 1)",
      "(3 * (1 + 7)) * 1",
      "((1 + 7) * 3) * 1",
      "3 / (1 / (7 + 1))",
      "((7 + 1) * 1) * 3",
      "((7 / 1) + 1) * 3",
      "3 * (1 + (7 * 1))",
      "1 * (3 * (7 + 1))",
      "((1 * 1) + 7) * 3",
      "(1 + 7) / (1 / 3)",
      "(1 + (7 * 1)) * 3",
      "(7 - 1) * (3 + 1)",
      "3 * (1 * (1 + 7))",
      "((7 + 1) / 1) * 3",
      "3 * (7 + (1 / 1))",
      "((1 * 7) + 1) * 3",
      "3 * ((1 + 7) * 1)",
      "3 * ((1 / 1) + 7)",
      "3 * (1 + (1 * 7))",
      "1 * ((7 + 1) * 3)",
      "(7 + 1) * (3 / 1)",
      "((1 + 7) / 1) * 3",
      "(7 + 1) * (1 * 3)",
      "((1 + 7) * 3) / 1",
      "(1 + (7 / 1)) * 3",
      "(3 / 1) * (7 + 1)",
      "(1 * 3) * (1 + 7)",
      "3 * (1 + (7 / 1))",
      "1 * (3 * (1 + 7))",
      "3 * ((1 * 7) + 1)",
      "(7 + 1) / (1 / 3)",
      "3 * ((7 + 1) / 1)",
      "((7 + 1) * 3) / 1",
      "(1 * (7 + 1)) * 3",
      "(3 * 1) * (1 + 7)",
      "3 / (1 / (1 + 7))",
      "((7 + 1) * 3) * 1",
      "((1 + 7) * 1) * 3",
      "((1 / 1) + 7) * 3",
      "3 * ((7 + 1) * 1)",
      "3 * (1 * (7 + 1))",
      "(7 - 1) * (1 + 3)",
      "3 * (7 + (1 * 1))",
      "(3 * (7 + 1)) * 1"
    ]
  },
  "1 1 3 8": {
    "cards": "1 1 3 8",
    "has_solution": "Y",
    "num_solutions": 228,
    "solutions": [
      "((8 + 1) - 1) * 3",
      "(3 * 1) * (8 / 1)",
      "3 * (8 * (1 * 1))",
      "1 * (8 * (3 * 1))",
      "((1 - 1) + 3) * 8",
      "3 * ((1 * 8) / 1)",
      "3 * (8 / (1 * 1))",
      "((8 / 1) * 1) * 3",
      "(8 / 1) * (3 * 1)",
      "8 * ((1 / 1) * 3)",
      "3 / (1 / (8 * 1))",
      "1 * ((3 * 8) / 1)",
      "((8 * 3) + 1) - 1",
      "8 * ((1 - 1) + 3)",
      "1 * (8 / (1 / 3))",
      "1 + ((8 * 3) - 1)",
      "(8 * 3) * (1 / 1)",
      "3 / (1 * (1 / 8))",
      "1 * ((8 / 1) * 3)",
      "3 * ((8 / 1) * 1)",
      "(8 * (1 * 3)) / 1",
      "(3 * (1 * 8)) / 1",
      "8 / (1 / (1 * 3))",
      "(1 * (8 * 3)) / 1",
      "(1 / (1 / 8)) * 3",
      "8 * (3 * (1 / 1))",
      "(1 * (3 * 8)) * 1",
      "3 / (1 / (1 * 8))",
      "3 * ((8 * 1) / 1)",
      "3 * (1 + (8 - 1))",
      "(1 * 1) * (8 * 3)",
      "(3 * 8) + (1 - 1)",
      "8 / ((1 / 3) / 1)",
      "((1 + 3) - 1) * 8",
      "3 * ((8 + 1) - 1)",
      "(1 * 3) * (8 * 1)",
      "((1 - 1) + 8) * 3",
      "1 * ((3 * 1) * 8)",
      "(3 * (8 / 1)) * 1",
      "(1 / (1 / 3)) * 8",
      "((8 * 3) * 1) / 1",
      "8 / (1 / (3 * 1))",
      "3 * ((1 * 8) * 1)",
      "1 * ((3 * 8) * 1)",
      "1 * (3 / (1 / 8))",
      "(1 * 8) * (3 * 1)",
      "8 * ((3 * 1) * 1)",
      "(8 * 3) * (1 * 1)",
      "(3 / (1 / 8)) / 1",
      "1 * (1 * (3 * 8))",
      "1 * (8 * (3 / 1))",
      "8 * (3 / (1 * 1))",
      "(1 - 1) + (8 * 3)",
      "(8 + (1 - 1)) * 3",
      "((3 * 1) / 1) * 8",
      "8 * ((1 * 3) * 1)",
      "8 * (1 * (1 * 3))",
      "3 * (1 - (1 - 8))",
      "(8 * (3 / 1)) * 1",
      "1 * ((8 * 3) / 1)",
      "((1 / 1) * 8) * 3",
      "(3 / (1 / 1)) * 8",
      "(1 * 1) * (3 * 8)",
      "(1 / 1) * (8 * 3)",
      "3 / ((1 / 8) / 1)",
      "(8 * 1) / (1 / 3)",
      "1 * (3 * (1 * 8))",
      "(8 * 1) * (3 / 1)",
      "8 * ((3 - 1) + 1)",
      "(8 * 3) / (1 / 1)",
      "1 / (1 / (3 * 8))",
      "3 * ((1 + 8) - 1)",
      "((3 + 1) - 1) * 8",
      "((8 * 1) / 1) * 3",
      "1 / ((1 / 8) / 3)",
      "1 * ((8 * 3) * 1)",
      "3 / ((1 * 1) / 8)",
      "((3 / 1) * 8) / 1",
      "8 * ((3 + 1) - 1)",
      "((8 / 1) * 3) * 1",
      "(8 * 3) / (1 * 1)",
      "(8 * 3) + (1 - 1)",
      "8 * ((1 * 1) * 3)",
      "((8 / 1) * 3) / 1",
      "((8 * 3) / 1) * 1",
      "((3 * 1) * 8) * 1",
      "(3 * (1 * 8)) * 1",
      "8 / ((1 * 1) / 3)",
      "1 * (1 * (8 * 3))",
      "8 * (3 / (1 / 1))",
      "3 * ((8 / 1) / 1)",
      "(1 * 8) * (3 / 1)",
      "8 * ((1 + 3) - 1)",
      "(1 * (8 * 3)) * 1",
      "8 * ((3 * 1) / 1)",
      "((8 * 3) / 1) / 1",
      "8 * ((3 / 1) * 1)",
      "((3 * 8) + 1) - 1",
      "(1 - (1 - 3)) * 8",
      "(1 + (3 - 1)) * 8",
      "((8 * 3) - 1) + 1",
      "((3 / 1) * 8) * 1",
      "3 * ((1 / 1) * 8)",
      "3 * ((8 - 1) + 1)",
      "(3 / 1) * (1 * 8)",
      "(3 / 1) / (1 / 8)",
      "(3 * (1 * 1)) * 8",
      "3 * ((8 * 1) * 1)",
      "(1 / 1) * (3 * 8)",
      "(1 * 8) * (1 * 3)",
      "((1 * 1) * 8) * 3",
      "((1 * 8) * 1) * 3",
      "3 * (8 / (1 / 1))",
      "8 * ((3 / 1) / 1)",
      "(1 * (1 * 3)) * 8",
      "(1 - (1 - 8)) * 3",
      "1 * ((1 * 3) * 8)",
      "3 * (1 * (8 / 1))",
      "((1 * 8) * 3) * 1",
      "(8 * (3 * 1)) * 1",
      "8 * (1 * (3 / 1))",
      "((3 * 1) * 8) / 1",
      "(1 * (8 * 1)) * 3",
      "3 / (1 / (8 / 1))",
      "8 * (3 - (1 - 1))",
      "(3 / 1) * (8 / 1)",
      "3 / ((1 / 8) * 1)",
      "1 - (1 - (3 * 8))",
      "(1 * 3) * (8 / 1)",
      "((1 * 3) * 8) / 1",
      "((3 * 8) / 1) / 1",
      "3 * (1 * (1 * 8))",
      "(8 / (1 / 3)) * 1",
      "(8 / 1) * (3 / 1)",
      "(1 * (3 * 8)) / 1",
      "(1 + (3 * 8)) - 1",
      "(3 / (1 * 1)) * 8",
      "(8 / (1 * 1)) * 3",
      "(8 * 1) * (1 * 3)",
      "((3 / 1) / 1) * 8",
      "8 * (1 * (3 * 1))",
      "(3 * 1) * (1 * 8)",
      "3 / ((1 / 1) / 8)",
      "(1 * (3 * 1)) * 8",
      "((1 * 8) * 3) / 1",
      "((8 * 1) * 3) * 1",
      "3 * ((1 * 1) * 8)",
      "(3 + (1 - 1)) * 8",
      "1 * (3 * (8 * 1))",
      "(3 * 8) - (1 - 1)",
      "8 / ((1 / 3) * 1)",
      "8 / (1 / (3 / 1))",
      "((1 + 8) - 1) * 3",
      "(3 * (8 * 1)) * 1",
      "((1 * 1) * 3) * 8",
      "8 * (1 - (1 - 3))",
      "(3 * 8) * (1 / 1)",
      "3 * (1 * (8 * 1))",
      "(8 * (3 / 1)) / 1",
      "(8 * (1 / 1)) * 3",
      "((8 * 1) * 3) / 1",
      "(8 * (3 * 1)) / 1",
      "(8 - (1 - 1)) * 3",
      "(1 * (3 / 1)) * 8",
      "((3 / 1) * 1) * 8",
      "(3 / (1 / 8)) * 1",
      "8 / (1 * (1 / 3))",
      "1 + ((3 * 8) - 1)",
      "((3 * 8) * 1) * 1",
      "1 * (3 * (8 / 1))",
      "3 * (8 + (1 - 1))",
      "3 * (1 / (1 / 8))",
      "(3 * 8) / (1 / 1)",
      "(1 - 1) + (3 * 8)",
      "(8 * (1 * 3)) * 1",
      "((3 - 1) + 1) * 8",
      "8 * ((1 * 3) / 1)",
      "1 * ((8 * 1) * 3)",
      "8 * (1 + (3 - 1))",
      "(1 * 8) / (1 / 3)",
      "(3 * 8) / (1 * 1)",
      "(8 / 1) * (1 * 3)",
      "(8 * 1) * (3 * 1)",
      "((8 * 1) * 1) * 3",
      "(3 * 1) / (1 / 8)",
      "3 * ((1 - 1) + 8)",
      "(3 * (8 * 1)) / 1",
      "((3 * 8) / 1) * 1",
      "8 * (3 * (1 * 1))",
      "(3 / 1) * (8 * 1)",
      "((1 * 3) * 1) * 8",
      "8 * (3 + (1 - 1))",
      "((1 / 1) * 3) * 8",
      "1 - (1 - (8 * 3))",
      "((3 * 1) * 1) * 8",
      "8 / ((1 / 1) / 3)",
      "(3 * 8) * (1 * 1)",
      "(8 * 3) - (1 - 1)",
      "3 * (8 - (1 - 1))",
      "((1 * 8) / 1) * 3",
      "(8 * (1 * 1)) * 3",
      "((8 * 3) * 1) * 1",
      "((8 / 1) / 1) * 3",
      "((3 * 8) * 1) / 1",
      "1 * ((3 / 1) * 8)",
      "(1 + (8 - 1)) * 3",
      "(3 * 1) * (8 * 1)",
      "1 / (1 / (8 * 3))",
      "(1 * (1 * 8)) * 3",
      "1 * ((1 * 8) * 3)",
      "((1 * 3) / 1) * 8",
      "(8 / 1) / (1 / 3)",
      "(1 * (8 / 1)) * 3",
      "(1 * 3) * (1 * 8)",
      "(8 / (1 / 1)) * 3",
      "(1 + (8 * 3)) - 1",
      "(1 * 3) / (1 / 8)",
      "(8 / (1 / 3)) / 1",
      "1 / ((1 / 3) / 8)",
      "3 * (8 * (1 / 1))",
      "((8 - 1) + 1) * 3",
      "(3 * (1 / 1)) * 8",
      "(3 - (1 - 1)) * 8",
      "1 * (8 * (1 * 3))",
      "((3 * 8) - 1) + 1",
      "((1 * 3) * 8) * 1",
      "8 * (1 / (1 / 3))",
      "(3 * (8 / 1)) / 1"
    ]
  },
  "1 1 3 9": {
    "cards": "1 1 3 9",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "3 * ((9 - 1) * 1)",
      "((9 / 1) - 1) * 3",
      "(9 - (1 * 1)) * 3",
      "((9 - 1) * 1) * 3",
      "3 * ((9 / 1) - 1)",
      "((9 - 1) * 3) * 1",
      "(3 * 1) * (9 - 1)",
      "(9 + 3) * (1 + 1)",
      "(9 - 1) * (3 / 1)",
      "3 / (1 / (9 - 1))",
      "(1 + 1) * (9 + 3)",
      "((1 * 9) - 1) * 3",
      "(1 + 1) * (3 + 9)",
      "(9 - 1) / (1 / 3)",
      "(3 / 1) * (9 - 1)",
      "(3 + 9) * (1 + 1)",
      "3 * (9 - (1 * 1))",
      "(3 * (9 - 1)) * 1",
      "((9 - 1) / 1) * 3",
      "3 * (9 - (1 / 1))",
      "3 * ((9 - 1) / 1)",
      "((9 - 1) * 3) / 1",
      "(1 * 3) * (9 - 1)",
      "(9 - 1) * (1 * 3)",
      "3 * ((9 * 1) - 1)",
      "1 * (3 * (9 - 1))",
      "(1 * (9 - 1)) * 3",
      "(3 * (9 - 1)) / 1",
      "(9 - 1) * (3 * 1)",
      "((9 * 1) - 1) * 3",
      "(9 - (1 / 1)) * 3",
      "1 * ((9 - 1) * 3)",
      "3 * (1 * (9 - 1))",
      "3 * ((1 * 9) - 1)"
    ]
  },
  "1 1 3 10": {
    "cards": "1 1 3 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "3 * (10 - (1 + 1))",
      "((10 - 1) - 1) * 3",
      "(10 - (1 + 1)) * 3",
      "3 * ((10 - 1) - 1)"
    ]
  },
  "1 1 3 11": {
    "cards": "1 1 3 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(11 + 1) * (3 - 1)",
      "(3 - 1) * (11 + 1)",
      "(1 + 11) * (3 - 1)",
      "(3 - 1) * (1 + 11)"
    ]
  },
  "1 1 3 12": {
    "cards": "1 1 3 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "((3 - 1) / 1) * 12",
      "((1 * 3) - 1) * 12",
      "(1 * (3 - 1)) * 12",
      "12 * ((3 - 1) / 1)",
      "((3 - 1) * 12) * 1",
      "12 * ((3 * 1) - 1)",
      "(3 - 1) * (1 * 12)",
      "((3 * 1) - 1) * 12",
      "1 * (12 * (3 - 1))",
      "(12 / 1) * (3 - 1)",
      "(3 - (1 * 1)) * 12",
      "(1 * 12) * (3 - 1)",
      "12 * ((3 / 1) - 1)",
      "(12 * (3 - 1)) / 1",
      "12 * (3 - (1 * 1))",
      "((3 - 1) * 12) / 1",
      "(12 * (3 - 1)) * 1",
      "(3 - 1) / (1 / 12)",
      "(12 * 1) * (3 - 1)",
      "1 * ((3 - 1) * 12)",
      "((3 - 1) * 1) * 12",
      "(3 - 1) * (12 * 1)",
      "(3 - (1 / 1)) * 12",
      "((3 / 1) - 1) * 12",
      "12 * (3 - (1 / 1))",
      "12 * (1 * (3 - 1))",
      "12 * ((3 - 1) * 1)",
      "(3 - 1) * (12 / 1)",
      "12 * ((1 * 3) - 1)",
      "12 / (1 / (3 - 1))"
    ]
  },
  "1 1 3 13": {
    "cards": "1 1 3 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 1) * (3 - 1)",
      "(1 - 3) * (1 - 13)",
      "(1 - 13) * (1 - 3)",
      "(3 - 1) * (13 - 1)"
    ]
  },
  "1 1 4 4": {
    "cards": "1 1 4 4",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "4 * (1 + (4 + 1))",
      "(1 + (4 + 1)) * 4",
      "(4 + (1 + 1)) * 4",
      "((1 + 1) + 4) * 4",
      "((4 + 1) + 1) * 4",
      "(1 + (1 + 4)) * 4",
      "4 * ((1 + 4) + 1)",
      "4 * ((1 + 1) + 4)",
      "4 * (1 + (1 + 4))",
      "4 * ((4 + 1) + 1)",
      "((1 + 4) + 1) * 4",
      "4 * (4 + (1 + 1))"
    ]
  },
  "1 1 4 5": {
    "cards": "1 1 4 5",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(5 + (1 * 1)) * 4",
      "((5 + 1) * 4) / 1",
      "((1 + 5) / 1) * 4",
      "(4 * (1 + 5)) / 1",
      "4 * ((5 * 1) + 1)",
      "((1 + 4) * 5) - 1",
      "1 * (4 * (5 + 1))",
      "4 * (5 + (1 * 1))",
      "(4 * (5 + 1)) / 1",
      "4 * (1 * (5 + 1))",
      "((5 + 1) / 1) * 4",
      "(5 + 1) / (1 / 4)",
      "((1 + 5) * 1) * 4",
      "4 * (1 * (1 + 5))",
      "4 / (1 / (1 + 5))",
      "1 * ((5 + 1) * 4)",
      "4 * ((5 + 1) * 1)",
      "4 * ((1 * 5) + 1)",
      "(1 * 4) * (1 + 5)",
      "(4 * (1 + 5)) * 1",
      "(4 / 1) * (5 + 1)",
      "4 * (1 + (5 * 1))",
      "4 / (1 / (5 + 1))",
      "(4 * (5 + 1)) * 1",
      "(4 / 1) * (1 + 5)",
      "(5 + 1) * (4 / 1)",
      "((5 + 1) * 1) * 4",
      "(1 + 5) / (1 / 4)",
      "4 * ((1 + 5) / 1)",
      "((1 * 1) + 5) * 4",
      "((5 + 1) * 4) * 1",
      "(5 + 1) * (4 * 1)",
      "(1 + (5 / 1)) * 4",
      "((4 + 1) * 5) - 1",
      "1 * ((1 + 5) * 4)",
      "(1 * (5 + 1)) * 4",
      "4 * (5 + (1 / 1))",
      "(5 + 1) * (1 * 4)",
      "((1 + 5) * 4) * 1",
      "(4 * 1) * (5 + 1)",
      "4 * ((5 + 1) / 1)",
      "(5 + (1 / 1)) * 4",
      "((5 / 1) + 1) * 4",
      "((1 + 5) * 4) / 1",
      "(1 + (5 * 1)) * 4",
      "4 * ((5 / 1) + 1)",
      "(1 * (1 + 5)) * 4",
      "((5 * 1) + 1) * 4",
      "4 * ((1 + 5) * 1)",
      "1 * (4 * (1 + 5))",
      "(5 * (1 + 4)) - 1",
      "(5 * (4 + 1)) - 1",
      "(1 + (1 * 5)) * 4",
      "(1 + 5) * (4 * 1)",
      "4 * ((1 * 1) + 5)",
      "((1 * 5) + 1) * 4",
      "4 * ((1 / 1) + 5)",
      "(4 * 1) * (1 + 5)",
      "4 * (1 + (1 * 5))",
      "(1 + 5) * (4 / 1)",
      "(1 + 5) * (1 * 4)",
      "(1 * 4) * (5 + 1)",
      "4 * (1 + (5 / 1))",
      "((1 / 1) + 5) * 4"
    ]
  },
  "1 1 4 6": {
    "cards": "1 1 4 6",
    "has_solution": "Y",
    "num_solutions": 228,
    "solutions": [
      "1 * (6 * (1 * 4))",
      "1 * (6 * (4 * 1))",
      "6 / ((1 / 4) / 1)",
      "1 / (1 / (4 * 6))",
      "6 * (4 * (1 * 1))",
      "(6 * 1) * (4 / 1)",
      "((6 * 4) * 1) * 1",
      "6 * (1 - (1 - 4))",
      "((4 / 1) * 1) * 6",
      "6 * (4 / (1 * 1))",
      "(6 / (1 / 4)) * 1",
      "6 / ((1 / 1) / 4)",
      "6 * ((1 + 4) - 1)",
      "(1 * (4 / 1)) * 6",
      "4 / (1 / (6 / 1))",
      "4 * (1 * (6 * 1))",
      "((4 * 6) - 1) + 1",
      "((1 * 4) * 6) * 1",
      "((6 + 1) - 1) * 4",
      "1 * ((6 * 4) * 1)",
      "((4 / 1) * 6) * 1",
      "(1 * 1) * (6 * 4)",
      "(4 + (1 - 1)) * 6",
      "(6 * 4) * (1 / 1)",
      "((4 * 6) + 1) - 1",
      "((1 / 1) * 6) * 4",
      "6 * ((4 / 1) * 1)",
      "(4 * 6) / (1 / 1)",
      "(1 - (1 - 6)) * 4",
      "(1 * 6) * (1 * 4)",
      "4 / ((1 / 6) / 1)",
      "1 * ((6 * 4) / 1)",
      "((1 * 6) * 1) * 4",
      "4 * (6 * (1 * 1))",
      "1 * ((1 * 6) * 4)",
      "(4 / 1) * (1 * 6)",
      "((4 * 6) * 1) * 1",
      "(4 / (1 / 1)) * 6",
      "6 * ((1 / 1) * 4)",
      "((1 + 4) - 1) * 6",
      "(4 / (1 * 1)) * 6",
      "6 * ((4 * 1) * 1)",
      "4 * ((1 + 6) - 1)",
      "(1 / 1) * (4 * 6)",
      "(1 * (4 * 6)) / 1",
      "(6 * 4) - (1 - 1)",
      "4 / (1 / (6 * 1))",
      "(6 / (1 / 1)) * 4",
      "(6 * (4 / 1)) * 1",
      "1 * (1 * (4 * 6))",
      "1 * (6 / (1 / 4))",
      "(4 * (6 / 1)) * 1",
      "1 * ((6 * 1) * 4)",
      "(4 * 1) * (1 * 6)",
      "4 * (1 - (1 - 6))",
      "(1 / (1 / 6)) * 4",
      "(1 * (6 * 4)) / 1",
      "6 / ((1 / 4) * 1)",
      "6 * ((1 - 1) + 4)",
      "((6 / 1) * 1) * 4",
      "1 * (1 * (6 * 4))",
      "4 / ((1 / 1) / 6)",
      "((6 * 4) / 1) / 1",
      "((6 * 1) * 4) / 1",
      "(1 * 4) * (1 * 6)",
      "((1 - 1) + 4) * 6",
      "1 * (4 / (1 / 6))",
      "((1 * 4) / 1) * 6",
      "(4 * (6 / 1)) / 1",
      "(6 + (1 - 1)) * 4",
      "1 * ((4 * 1) * 6)",
      "(4 * 6) / (1 * 1)",
      "6 * (1 * (4 / 1))",
      "1 * ((6 / 1) * 4)",
      "6 * (4 + (1 - 1))",
      "((1 + 6) - 1) * 4",
      "((4 / 1) / 1) * 6",
      "((6 / 1) * 4) / 1",
      "((1 * 6) / 1) * 4",
      "((1 * 6) * 4) / 1",
      "6 * ((4 - 1) + 1)",
      "(1 * 4) * (6 / 1)",
      "(6 * (4 / 1)) / 1",
      "1 * (6 * (4 / 1))",
      "((4 * 1) * 1) * 6",
      "6 * (1 * (1 * 4))",
      "6 * ((1 * 4) * 1)",
      "(4 * 6) * (1 * 1)",
      "(1 * (6 * 1)) * 4",
      "4 * (1 + (6 - 1))",
      "4 / (1 / (1 * 6))",
      "4 * ((1 - 1) + 6)",
      "((4 * 1) * 6) / 1",
      "(1 / (1 / 4)) * 6",
      "((4 + 1) - 1) * 6",
      "((6 * 1) * 1) * 4",
      "(4 * (6 * 1)) * 1",
      "((4 * 6) * 1) / 1",
      "(6 * (1 * 4)) / 1",
      "(4 * (1 * 6)) / 1",
      "(1 * (1 * 4)) * 6",
      "((6 * 4) - 1) + 1",
      "((1 * 1) * 6) * 4",
      "(4 * 1) * (6 / 1)",
      "(1 * 6) * (4 * 1)",
      "6 / ((1 * 1) / 4)",
      "4 / (1 * (1 / 6))",
      "6 / (1 / (1 * 4))",
      "(4 / 1) * (6 * 1)",
      "1 / (1 / (6 * 4))",
      "(6 * 1) / (1 / 4)",
      "(1 * 6) / (1 / 4)",
      "(6 - (1 - 1)) * 4",
      "(4 / (1 / 6)) * 1",
      "(4 * 1) * (6 * 1)",
      "6 * (1 / (1 / 4))",
      "((4 * 1) * 6) * 1",
      "4 * ((1 * 6) * 1)",
      "(1 / 1) * (6 * 4)",
      "(4 * 6) + (1 - 1)",
      "(1 * 4) / (1 / 6)",
      "(1 * (6 * 4)) * 1",
      "(6 / 1) * (4 / 1)",
      "(6 * 4) / (1 * 1)",
      "((1 * 4) * 1) * 6",
      "(6 * 4) * (1 * 1)",
      "4 * (1 / (1 / 6))",
      "(6 * (4 * 1)) * 1",
      "(4 / (1 / 6)) / 1",
      "4 * (1 * (6 / 1))",
      "4 * (6 - (1 - 1))",
      "(4 * (1 * 6)) * 1",
      "(6 / 1) * (4 * 1)",
      "4 * (6 / (1 / 1))",
      "6 * ((4 / 1) / 1)",
      "(4 * 6) * (1 / 1)",
      "((1 / 1) * 4) * 6",
      "(6 * (1 / 1)) * 4",
      "(1 + (6 - 1)) * 4",
      "6 * ((4 * 1) / 1)",
      "1 / ((1 / 4) / 6)",
      "6 * ((4 + 1) - 1)",
      "6 * ((1 * 1) * 4)",
      "(6 * (4 * 1)) / 1",
      "((4 * 6) / 1) * 1",
      "(4 / 1) / (1 / 6)",
      "1 + ((6 * 4) - 1)",
      "((6 * 4) + 1) - 1",
      "((6 * 1) / 1) * 4",
      "(4 * (1 * 1)) * 6",
      "4 * ((1 / 1) * 6)",
      "4 * ((1 * 6) / 1)",
      "1 - (1 - (4 * 6))",
      "((6 - 1) + 1) * 4",
      "(1 + (4 - 1)) * 6",
      "((4 / 1) * 6) / 1",
      "((6 / 1) / 1) * 4",
      "4 * (6 + (1 - 1))",
      "(4 * (6 * 1)) / 1",
      "1 * ((4 / 1) * 6)",
      "1 * (4 * (1 * 6))",
      "6 * ((1 * 4) / 1)",
      "(1 * 6) * (4 / 1)",
      "4 * ((6 / 1) * 1)",
      "(1 * (4 * 1)) * 6",
      "((6 / 1) * 4) * 1",
      "4 * (6 / (1 * 1))",
      "(6 / 1) * (1 * 4)",
      "(1 * (4 * 6)) * 1",
      "(6 * (1 * 4)) * 1",
      "(6 * 4) + (1 - 1)",
      "(1 * 1) * (4 * 6)",
      "1 + ((4 * 6) - 1)",
      "(6 * 1) * (1 * 4)",
      "(1 + (6 * 4)) - 1",
      "(1 * 4) * (6 * 1)",
      "4 * (6 * (1 / 1))",
      "6 * (4 - (1 - 1))",
      "4 * ((6 + 1) - 1)",
      "1 * (4 * (6 / 1))",
      "(6 / (1 * 1)) * 4",
      "1 - (1 - (6 * 4))",
      "6 / (1 / (4 / 1))",
      "(1 - 1) + (4 * 6)",
      "((4 * 6) / 1) / 1",
      "4 * ((1 * 1) * 6)",
      "6 * (1 * (4 * 1))",
      "(4 / 1) * (6 / 1)",
      "((4 - 1) + 1) * 6",
      "4 * ((6 * 1) * 1)",
      "(4 * 1) / (1 / 6)",
      "(1 + (4 * 6)) - 1",
      "(1 * (1 * 6)) * 4",
      "((1 * 6) * 4) * 1",
      "6 * (4 * (1 / 1))",
      "((1 * 1) * 4) * 6",
      "4 * ((6 * 1) / 1)",
      "4 / ((1 * 1) / 6)",
      "1 * ((1 * 4) * 6)",
      "6 / (1 / (4 * 1))",
      "(6 / (1 / 4)) / 1",
      "((1 * 4) * 6) / 1",
      "(6 * 1) * (4 * 1)",
      "(6 * (1 * 1)) * 4",
      "1 * (4 * (6 * 1))",
      "1 / ((1 / 6) / 4)",
      "6 / (1 * (1 / 4))",
      "(1 - (1 - 4)) * 6",
      "(1 * (6 / 1)) * 4",
      "4 * (1 * (1 * 6))",
      "((6 * 4) / 1) * 1",
      "4 * ((6 - 1) + 1)",
      "4 * ((6 / 1) / 1)",
      "(4 * 6) - (1 - 1)",
      "(4 - (1 - 1)) * 6",
      "6 * (4 / (1 / 1))",
      "((6 * 4) * 1) / 1",
      "(1 - 1) + (6 * 4)",
      "4 / ((1 / 6) * 1)",
      "((6 * 1) * 4) * 1",
      "(4 * (1 / 1)) * 6",
      "1 * ((4 * 6) * 1)",
      "(6 * 4) / (1 / 1)",
      "1 * ((4 * 6) / 1)",
      "(6 / 1) / (1 / 4)",
      "6 * (1 + (4 - 1))",
      "((4 * 1) / 1) * 6",
      "((1 - 1) + 6) * 4"
    ]
  },
  "1 1 4 7": {
    "cards": "1 1 4 7",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(4 - 1) * (1 + 7)",
      "1 * (4 * (7 - 1))",
      "(4 * (7 - 1)) / 1",
      "(7 - 1) * (1 * 4)",
      "(7 - 1) * (4 / 1)",
      "((7 * 1) - 1) * 4",
      "4 * ((7 - 1) / 1)",
      "1 * ((7 - 1) * 4)",
      "((7 - 1) * 1) * 4",
      "4 * ((1 * 7) - 1)",
      "4 * ((7 * 1) - 1)",
      "(4 / 1) * (7 - 1)",
      "(7 - (1 / 1)) * 4",
      "((7 / 1) - 1) * 4",
      "(7 - (1 * 1)) * 4",
      "(7 + 1) * (4 - 1)",
      "((1 * 7) - 1) * 4",
      "((7 - 1) / 1) * 4",
      "((7 - 1) * 4) * 1",
      "(7 - 1) * (4 * 1)",
      "(1 * 4) * (7 - 1)",
      "(1 + 7) * (4 - 1)",
      "(4 * 1) * (7 - 1)",
      "4 * (7 - (1 * 1))",
      "(4 * (7 - 1)) * 1",
      "(7 - 1) / (1 / 4)",
      "4 * (7 - (1 / 1))",
      "4 / (1 / (7 - 1))",
      "((7 - 1) * 4) / 1",
      "4 * ((7 / 1) - 1)",
      "(1 * (7 - 1)) * 4",
      "4 * ((7 - 1) * 1)",
      "(4 - 1) * (7 + 1)",
      "4 * (1 * (7 - 1))"
    ]
  },
  "1 1 4 8": {
    "cards": "1 1 4 8",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "(1 + 1) * (4 + 8)",
      "8 * ((4 / 1) - 1)",
      "(4 - 1) * (8 / 1)",
      "(1 * (4 - 1)) * 8",
      "1 * ((4 - 1) * 8)",
      "4 * ((8 - 1) - 1)",
      "(1 + 1) * (8 + 4)",
      "8 * ((4 - 1) * 1)",
      "8 / (1 / (4 - 1))",
      "((4 - 1) * 8) / 1",
      "((8 - 1) - 1) * 4",
      "(4 - (1 / 1)) * 8",
      "(8 - (1 + 1)) * 4",
      "((4 / 1) - 1) * 8",
      "(4 + 8) * (1 + 1)",
      "1 * (8 * (4 - 1))",
      "(4 - (1 * 1)) * 8",
      "(8 * (4 - 1)) / 1",
      "8 * ((4 * 1) - 1)",
      "8 * ((1 * 4) - 1)",
      "8 * ((4 - 1) / 1)",
      "((4 - 1) / 1) * 8",
      "((4 - 1) * 8) * 1",
      "((1 * 4) - 1) * 8",
      "((4 * 1) - 1) * 8",
      "(8 * (4 - 1)) * 1",
      "(4 - 1) * (8 * 1)",
      "(8 / 1) * (4 - 1)",
      "(8 * 1) * (4 - 1)",
      "((4 - 1) * 1) * 8",
      "8 * (4 - (1 / 1))",
      "(4 - 1) / (1 / 8)",
      "8 * (1 * (4 - 1))",
      "4 * (8 - (1 + 1))",
      "(8 + 4) * (1 + 1)",
      "8 * (4 - (1 * 1))",
      "(4 - 1) * (1 * 8)",
      "(1 * 8) * (4 - 1)"
    ]
  },
  "1 1 4 9": {
    "cards": "1 1 4 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 - 9) * (1 - 4)",
      "(1 - 4) * (1 - 9)",
      "(4 - 1) * (9 - 1)",
      "(9 - 1) * (4 - 1)"
    ]
  },
  "1 1 4 10": {
    "cards": "1 1 4 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "4 + (10 * (1 + 1))",
      "(10 * (1 + 1)) + 4",
      "4 + ((1 + 1) * 10)",
      "((1 + 1) * 10) + 4"
    ]
  },
  "1 1 4 11": {
    "cards": "1 1 4 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 4 12": {
    "cards": "1 1 4 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(4 - (1 + 1)) * 12",
      "4 / ((1 + 1) / 12)",
      "(12 * 4) / (1 + 1)",
      "12 * (4 / (1 + 1))",
      "12 * ((4 - 1) - 1)",
      "4 * (12 / (1 + 1))",
      "12 * (4 - (1 + 1))",
      "12 / ((1 + 1) / 4)",
      "(4 * 12) / (1 + 1)",
      "((4 - 1) - 1) * 12",
      "(4 / (1 + 1)) * 12",
      "(12 / (1 + 1)) * 4"
    ]
  },
  "1 1 4 13": {
    "cards": "1 1 4 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 5 5": {
    "cards": "1 1 5 5",
    "has_solution": "Y",
    "num_solutions": 19,
    "solutions": [
      "(5 * (5 * 1)) - 1",
      "(5 / (1 / 5)) - 1",
      "((5 * 5) - 1) * 1",
      "(5 * (5 / 1)) - 1",
      "((1 * 5) * 5) - 1",
      "(1 + 5) * (5 - 1)",
      "((5 * 5) * 1) - 1",
      "(5 + 1) * (5 - 1)",
      "1 * ((5 * 5) - 1)",
      "(5 - 1) * (5 + 1)",
      "((5 / 1) * 5) - 1",
      "((5 * 1) * 5) - 1",
      "(5 - 1) * (1 + 5)",
      "(5 * 5) - (1 / 1)",
      "(5 * 5) - (1 * 1)",
      "((5 * 5) / 1) - 1",
      "((5 * 5) - 1) / 1",
      "(1 * (5 * 5)) - 1",
      "(5 * (1 * 5)) - 1"
    ]
  },
  "1 1 5 6": {
    "cards": "1 1 5 6",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "1 * (6 * (5 - 1))",
      "(5 - 1) * (6 * 1)",
      "6 * (5 - (1 * 1))",
      "(5 * (6 - 1)) - 1",
      "1 * ((5 - 1) * 6)",
      "6 * ((5 * 1) - 1)",
      "((6 - 1) * 5) - 1",
      "(1 * 6) * (5 - 1)",
      "6 / (1 / (5 - 1))",
      "(6 / 1) * (5 - 1)",
      "(5 - 1) * (1 * 6)",
      "(5 - (1 * 1)) * 6",
      "(6 * (5 - 1)) * 1",
      "6 * ((5 - 1) / 1)",
      "((5 - 1) * 6) * 1",
      "6 * ((5 / 1) - 1)",
      "((1 * 5) - 1) * 6",
      "(5 - 1) / (1 / 6)",
      "6 * ((5 - 1) * 1)",
      "(1 * (5 - 1)) * 6",
      "(5 - 1) * (6 / 1)",
      "((5 - 1) / 1) * 6",
      "6 * (5 - (1 / 1))",
      "((5 - 1) * 6) / 1",
      "(5 - (1 / 1)) * 6",
      "((5 - 1) * 1) * 6",
      "6 * (1 * (5 - 1))",
      "(6 * 1) * (5 - 1)",
      "(6 * (5 - 1)) / 1",
      "((5 / 1) - 1) * 6",
      "((5 * 1) - 1) * 6",
      "6 * ((1 * 5) - 1)"
    ]
  },
  "1 1 5 7": {
    "cards": "1 1 5 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 + 7) * (1 + 1)",
      "(1 + 1) * (5 + 7)",
      "(7 - 1) * (5 - 1)",
      "(1 + 1) * (7 + 5)",
      "(5 - 1) * (7 - 1)",
      "(1 - 5) * (1 - 7)",
      "(1 - 7) * (1 - 5)",
      "(7 + 5) * (1 + 1)"
    ]
  },
  "1 1 5 8": {
    "cards": "1 1 5 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((5 - 1) - 1) * 8",
      "8 * ((5 - 1) - 1)",
      "8 * (5 - (1 + 1))",
      "(5 - (1 + 1)) * 8"
    ]
  },
  "1 1 5 9": {
    "cards": "1 1 5 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 5 10": {
    "cards": "1 1 5 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 5 11": {
    "cards": "1 1 5 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 5 12": {
    "cards": "1 1 5 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 5 13": {
    "cards": "1 1 5 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 6 6": {
    "cards": "1 1 6 6",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(6 - (1 + 1)) * 6",
      "6 * (6 - (1 + 1))",
      "(6 + 6) * (1 + 1)",
      "6 * ((6 - 1) - 1)",
      "((6 - 1) - 1) * 6",
      "(1 + 1) * (6 + 6)"
    ]
  },
  "1 1 6 7": {
    "cards": "1 1 6 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 6 8": {
    "cards": "1 1 6 8",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(8 / (1 + 1)) * 6",
      "8 * (6 / (1 + 1))",
      "(6 * 8) / (1 + 1)",
      "(8 * 6) / (1 + 1)",
      "8 / ((1 + 1) / 6)",
      "6 * (8 / (1 + 1))",
      "(6 / (1 + 1)) * 8",
      "6 / ((1 + 1) / 8)"
    ]
  },
  "1 1 6 9": {
    "cards": "1 1 6 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 * (1 + 1)) + 6",
      "6 + ((1 + 1) * 9)",
      "((1 + 1) * 9) + 6",
      "6 + (9 * (1 + 1))"
    ]
  },
  "1 1 6 10": {
    "cards": "1 1 6 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 6 11": {
    "cards": "1 1 6 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 6 12": {
    "cards": "1 1 6 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(6 * (1 + 1)) + 12",
      "((1 + 1) * 6) + 12",
      "12 + (6 * (1 + 1))",
      "12 + ((1 + 1) * 6)"
    ]
  },
  "1 1 6 13": {
    "cards": "1 1 6 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 7": {
    "cards": "1 1 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 8": {
    "cards": "1 1 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 9": {
    "cards": "1 1 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 10": {
    "cards": "1 1 7 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 * (1 + 1)) + 10",
      "((1 + 1) * 7) + 10",
      "10 + ((1 + 1) * 7)",
      "10 + (7 * (1 + 1))"
    ]
  },
  "1 1 7 11": {
    "cards": "1 1 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 12": {
    "cards": "1 1 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 7 13": {
    "cards": "1 1 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 8 8": {
    "cards": "1 1 8 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((1 + 1) * 8) + 8",
      "8 + ((1 + 1) * 8)",
      "(8 * (1 + 1)) + 8",
      "8 + (8 * (1 + 1))"
    ]
  },
  "1 1 8 9": {
    "cards": "1 1 8 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 8 10": {
    "cards": "1 1 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 8 11": {
    "cards": "1 1 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 8 12": {
    "cards": "1 1 8 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 8 13": {
    "cards": "1 1 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 9 9": {
    "cards": "1 1 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 9 10": {
    "cards": "1 1 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 9 11": {
    "cards": "1 1 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 9 12": {
    "cards": "1 1 9 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 9 13": {
    "cards": "1 1 9 13",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "((1 + 9) + 13) + 1",
      "13 + (1 + (9 + 1))",
      "1 + ((9 + 13) + 1)",
      "1 + (13 + (1 + 9))",
      "1 + (13 + (9 + 1))",
      "(9 + 1) + (13 + 1)",
      "1 + ((13 + 1) + 9)",
      "9 + (1 + (1 + 13))",
      "13 + ((9 + 1) + 1)",
      "((1 + 1) + 9) + 13",
      "1 + ((9 + 1) + 13)",
      "1 + ((13 + 9) + 1)",
      "(1 + 1) + (9 + 13)",
      "((1 + 9) + 1) + 13",
      "(9 + (1 + 1)) + 13",
      "((9 + 13) + 1) + 1",
      "(1 + 13) + (9 + 1)",
      "(13 + (1 + 9)) + 1",
      "((13 + 1) + 9) + 1",
      "(1 + (9 + 13)) + 1",
      "13 + ((1 + 1) + 9)",
      "((13 + 9) + 1) + 1",
      "(1 + 9) + (1 + 13)",
      "9 + (13 + (1 + 1))",
      "((1 + 1) + 13) + 9",
      "1 + ((1 + 13) + 9)",
      "1 + (9 + (1 + 13))",
      "(1 + 9) + (13 + 1)",
      "(1 + (1 + 9)) + 13",
      "((9 + 1) + 13) + 1",
      "1 + (9 + (13 + 1))",
      "(9 + 1) + (1 + 13)",
      "(1 + (9 + 1)) + 13",
      "(1 + (13 + 1)) + 9",
      "((9 + 1) + 1) + 13",
      "13 + (9 + (1 + 1))",
      "(13 + 1) + (9 + 1)",
      "(1 + (1 + 13)) + 9",
      "1 + (1 + (9 + 13))",
      "(13 + 9) + (1 + 1)",
      "(13 + (1 + 1)) + 9",
      "9 + (1 + (13 + 1))",
      "((1 + 13) + 9) + 1",
      "9 + ((13 + 1) + 1)",
      "(13 + 1) + (1 + 9)",
      "((1 + 13) + 1) + 9",
      "1 + (1 + (13 + 9))",
      "1 + ((1 + 9) + 13)",
      "(9 + (13 + 1)) + 1",
      "(13 + (9 + 1)) + 1",
      "(1 + (13 + 9)) + 1",
      "(9 + (1 + 13)) + 1",
      "9 + ((1 + 1) + 13)",
      "(1 + 13) + (1 + 9)",
      "13 + ((1 + 9) + 1)",
      "(1 + 1) + (13 + 9)",
      "(9 + 13) + (1 + 1)",
      "9 + ((1 + 13) + 1)",
      "13 + (1 + (1 + 9))",
      "((13 + 1) + 1) + 9"
    ]
  },
  "1 1 10 10": {
    "cards": "1 1 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 10 11": {
    "cards": "1 1 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 1 10 12": {
    "cards": "1 1 10 12",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "10 + (1 + (1 + 12))",
      "(10 + (1 + 1)) + 12",
      "1 + ((10 + 1) + 12)",
      "1 + (1 + (12 + 10))",
      "10 + ((1 + 12) + 1)",
      "1 + ((12 + 10) + 1)",
      "1 + (10 + (12 + 1))",
      "((1 + 12) + 1) + 10",
      "(12 + 1) + (10 + 1)",
      "1 + ((10 + 12) + 1)",
      "10 + (1 + (12 + 1))",
      "1 + ((1 + 12) + 10)",
      "(1 + 1) + (12 + 10)",
      "12 + ((10 + 1) + 1)",
      "12 + (1 + (1 + 10))",
      "(1 + 10) + (12 + 1)",
      "1 + ((12 + 1) + 10)",
      "((10 + 12) + 1) + 1",
      "1 + ((1 + 10) + 12)",
      "((1 + 10) + 1) + 12",
      "((12 + 1) + 1) + 10",
      "12 + ((1 + 10) + 1)",
      "((1 + 1) + 12) + 10",
      "((1 + 10) + 12) + 1",
      "(12 + (10 + 1)) + 1",
      "(12 + (1 + 1)) + 10",
      "1 + (1 + (10 + 12))",
      "1 + (12 + (10 + 1))",
      "((1 + 12) + 10) + 1",
      "(1 + (12 + 10)) + 1",
      "((10 + 1) + 12) + 1",
      "12 + (10 + (1 + 1))",
      "(1 + 1) + (10 + 12)",
      "10 + ((1 + 1) + 12)",
      "10 + ((12 + 1) + 1)",
      "(12 + 10) + (1 + 1)",
      "(10 + 1) + (12 + 1)",
      "(10 + (12 + 1)) + 1",
      "((1 + 1) + 10) + 12",
      "(1 + (10 + 1)) + 12",
      "((12 + 1) + 10) + 1",
      "(1 + 10) + (1 + 12)",
      "((12 + 10) + 1) + 1",
      "(1 + (1 + 10)) + 12",
      "10 + (12 + (1 + 1))",
      "1 + (10 + (1 + 12))",
      "((10 + 1) + 1) + 12",
      "12 + (1 + (10 + 1))",
      "(1 + (12 + 1)) + 10",
      "(10 + 1) + (1 + 12)",
      "(12 + 1) + (1 + 10)",
      "1 + (12 + (1 + 10))",
      "(12 + (1 + 10)) + 1",
      "(10 + 12) + (1 + 1)",
      "(10 + (1 + 12)) + 1",
      "(1 + 12) + (10 + 1)",
      "(1 + 12) + (1 + 10)",
      "(1 + (1 + 12)) + 10",
      "(1 + (10 + 12)) + 1",
      "12 + ((1 + 1) + 10)"
    ]
  },
  "1 1 10 13": {
    "cards": "1 1 10 13",
    "has_solution": "Y",
    "num_solutions": 168,
    "solutions": [
      "((10 + 1) * 1) + 13",
      "1 + (1 * (13 + 10))",
      "(10 + (1 / 1)) + 13",
      "1 + (10 + (13 / 1))",
      "1 + (10 + (13 * 1))",
      "(1 * (1 + 10)) + 13",
      "(1 + 13) + (1 * 10)",
      "(1 + (13 + 10)) * 1",
      "10 + (1 * (1 + 13))",
      "((13 + 1) + 10) / 1",
      "(10 + 1) + (1 * 13)",
      "((1 + 10) + 13) * 1",
      "13 + (1 + (1 * 10))",
      "(10 + (13 / 1)) + 1",
      "((10 * 1) + 1) + 13",
      "((1 * 1) + 13) + 10",
      "(13 + (10 / 1)) + 1",
      "10 + ((13 / 1) + 1)",
      "1 * (13 + (10 + 1))",
      "(13 + (1 * 10)) + 1",
      "(13 + 1) + (10 / 1)",
      "(13 + 1) + (1 * 10)",
      "(13 * 1) + (10 + 1)",
      "(10 + 1) + (13 * 1)",
      "(10 + 1) + (13 / 1)",
      "(1 + (13 * 1)) + 10",
      "((1 / 1) + 13) + 10",
      "1 * (13 + (1 + 10))",
      "(1 * 10) + (13 + 1)",
      "13 + ((1 * 10) + 1)",
      "((1 + 10) + 13) / 1",
      "13 + (1 + (10 / 1))",
      "1 + (10 + (1 * 13))",
      "1 * ((13 + 1) + 10)",
      "1 + ((13 + 10) / 1)",
      "((10 + 13) + 1) / 1",
      "((10 + 13) * 1) + 1",
      "(1 / 1) + (10 + 13)",
      "13 + ((10 + 1) / 1)",
      "(13 + (1 / 1)) + 10",
      "1 + (1 * (10 + 13))",
      "(13 + (1 + 10)) * 1",
      "13 + ((1 + 10) / 1)",
      "1 * ((10 + 13) + 1)",
      "(1 + 10) + (13 * 1)",
      "(1 * (1 + 13)) + 10",
      "(10 + (1 * 1)) + 13",
      "(1 * 10) + (1 + 13)",
      "(10 + (13 * 1)) + 1",
      "((13 + 1) + 10) * 1",
      "(1 / 1) + (13 + 10)",
      "(1 + (10 + 13)) * 1",
      "1 + ((10 * 1) + 13)",
      "10 + ((1 * 1) + 13)",
      "((10 + 13) / 1) + 1",
      "(10 / 1) + (13 + 1)",
      "10 + (13 + (1 * 1))",
      "(13 + 10) + (1 / 1)",
      "1 + (13 + (1 * 10))",
      "(1 * (10 + 1)) + 13",
      "(10 + (13 + 1)) / 1",
      "(10 + 13) + (1 * 1)",
      "(10 * 1) + (1 + 13)",
      "13 + ((10 + 1) * 1)",
      "((1 + 13) * 1) + 10",
      "(1 + (1 * 10)) + 13",
      "10 + (1 + (13 / 1))",
      "(1 + (10 + 13)) / 1",
      "(13 + (1 * 1)) + 10",
      "((10 + 1) + 13) / 1",
      "(1 + 10) + (13 / 1)",
      "1 * ((13 + 10) + 1)",
      "1 * ((10 + 1) + 13)",
      "(13 / 1) + (10 + 1)",
      "(13 / 1) + (1 + 10)",
      "13 + ((1 / 1) + 10)",
      "13 + ((10 / 1) + 1)",
      "(1 * 13) + (1 + 10)",
      "13 + ((1 * 1) + 10)",
      "10 + (1 * (13 + 1))",
      "(13 + (10 * 1)) + 1",
      "(1 * (13 + 10)) + 1",
      "13 + (1 * (1 + 10))",
      "1 + ((1 * 13) + 10)",
      "1 + (13 + (10 * 1))",
      "(1 + (13 + 10)) / 1",
      "(1 * 1) + (10 + 13)",
      "((13 * 1) + 10) + 1",
      "10 + ((1 + 13) * 1)",
      "(13 + (10 + 1)) / 1",
      "((13 + 10) / 1) + 1",
      "1 + ((13 + 10) * 1)",
      "(1 * (10 + 13)) + 1",
      "((1 + 13) + 10) / 1",
      "(1 * 1) + (13 + 10)",
      "(13 + (1 + 10)) / 1",
      "10 + ((13 + 1) / 1)",
      "((1 + 13) / 1) + 10",
      "((13 / 1) + 1) + 10",
      "1 + ((10 / 1) + 13)",
      "10 + (1 + (13 * 1))",
      "(1 + (10 / 1)) + 13",
      "((1 * 13) + 10) + 1",
      "1 + ((13 * 1) + 10)",
      "10 + ((1 * 13) + 1)",
      "(1 + (13 / 1)) + 10",
      "1 + (13 + (10 / 1))",
      "(1 + 13) + (10 / 1)",
      "10 + (1 + (1 * 13))",
      "1 * (10 + (13 + 1))",
      "(1 + (10 * 1)) + 13",
      "13 + (10 + (1 / 1))",
      "13 + ((10 * 1) + 1)",
      "((1 / 1) + 10) + 13",
      "((13 + 10) * 1) + 1",
      "(13 + 10) + (1 * 1)",
      "1 * (1 + (13 + 10))",
      "(13 + (10 + 1)) * 1",
      "((10 + 1) / 1) + 13",
      "10 + ((1 / 1) + 13)",
      "((13 * 1) + 1) + 10",
      "10 + ((1 + 13) / 1)",
      "((13 / 1) + 10) + 1",
      "13 + (1 * (10 + 1))",
      "(1 + (1 * 13)) + 10",
      "((13 + 1) * 1) + 10",
      "10 + ((13 * 1) + 1)",
      "((1 * 1) + 10) + 13",
      "(13 * 1) + (1 + 10)",
      "((10 / 1) + 1) + 13",
      "((1 + 10) * 1) + 13",
      "((1 * 10) + 1) + 13",
      "(10 + (1 + 13)) / 1",
      "((10 + 1) + 13) * 1",
      "13 + ((1 + 10) * 1)",
      "((13 + 1) / 1) + 10",
      "1 * (1 + (10 + 13))",
      "((10 / 1) + 13) + 1",
      "(10 + 13) + (1 / 1)",
      "10 + (13 + (1 / 1))",
      "(1 + 10) + (1 * 13)",
      "((13 + 10) + 1) / 1",
      "(1 * (13 + 1)) + 10",
      "1 + ((13 / 1) + 10)",
      "1 + ((1 * 10) + 13)",
      "((10 + 13) + 1) * 1",
      "((1 * 10) + 13) + 1",
      "1 * (10 + (1 + 13))",
      "1 + ((10 + 13) / 1)",
      "(1 + 13) + (10 * 1)",
      "((1 * 13) + 1) + 10",
      "13 + (10 + (1 * 1))",
      "(1 * 13) + (10 + 1)",
      "(10 + (1 + 13)) * 1",
      "1 * ((1 + 13) + 10)",
      "((13 + 10) + 1) * 1",
      "((1 + 10) / 1) + 13",
      "13 + (1 + (10 * 1))",
      "((10 * 1) + 13) + 1",
      "(10 * 1) + (13 + 1)",
      "10 + ((13 + 1) * 1)",
      "(10 + (1 * 13)) + 1",
      "(13 + 1) + (10 * 1)",
      "1 + ((10 + 13) * 1)",
      "1 * ((1 + 10) + 13)",
      "(10 + (13 + 1)) * 1",
      "((1 + 13) + 10) * 1",
      "(10 / 1) + (1 + 13)"
    ]
  },
  "1 1 11 11": {
    "cards": "1 1 11 11",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "1 + ((11 + 1) + 11)",
      "1 + ((11 + 11) + 1)",
      "((11 + 1) + 11) + 1",
      "(1 + 1) + (11 + 11)",
      "(1 + 11) + (11 + 1)",
      "1 + (11 + (11 + 1))",
      "(11 + (1 + 1)) + 11",
      "11 + ((1 + 11) + 1)",
      "(1 + (11 + 11)) + 1",
      "(11 + 1) + (1 + 11)",
      "(1 + (11 + 1)) + 11",
      "((1 + 11) + 1) + 11",
      "1 + (1 + (11 + 11))",
      "11 + (1 + (11 + 1))",
      "(11 + 11) + (1 + 1)",
      "((1 + 1) + 11) + 11",
      "(11 + (11 + 1)) + 1",
      "1 + (11 + (1 + 11))",
      "11 + (11 + (1 + 1))",
      "11 + ((11 + 1) + 1)",
      "11 + (1 + (1 + 11))",
      "((1 + 11) + 11) + 1",
      "11 + ((1 + 1) + 11)",
      "(1 + 11) + (1 + 11)",
      "(11 + (1 + 11)) + 1",
      "((11 + 1) + 1) + 11",
      "((11 + 11) + 1) + 1",
      "1 + ((1 + 11) + 11)",
      "(11 + 1) + (11 + 1)",
      "(1 + (1 + 11)) + 11"
    ]
  },
  "1 1 11 12": {
    "cards": "1 1 11 12",
    "has_solution": "Y",
    "num_solutions": 168,
    "solutions": [
      "(1 / 1) + (12 + 11)",
      "(1 * 12) + (1 + 11)",
      "1 + ((11 + 12) * 1)",
      "12 + ((1 + 11) / 1)",
      "((12 * 1) + 11) + 1",
      "((11 + 12) + 1) / 1",
      "(1 + 12) + (11 / 1)",
      "(1 + (12 + 11)) * 1",
      "(11 + (1 / 1)) + 12",
      "((12 + 11) + 1) * 1",
      "((1 + 12) * 1) + 11",
      "((11 / 1) + 1) + 12",
      "((1 / 1) + 11) + 12",
      "(1 * 1) + (12 + 11)",
      "(12 + 11) + (1 * 1)",
      "(12 + (11 * 1)) + 1",
      "(1 + (11 / 1)) + 12",
      "(11 + (12 / 1)) + 1",
      "(11 * 1) + (1 + 12)",
      "12 + (11 + (1 * 1))",
      "(1 * (12 + 11)) + 1",
      "(11 + (12 * 1)) + 1",
      "(12 + 1) + (1 * 11)",
      "1 * (11 + (1 + 12))",
      "(1 * (12 + 1)) + 11",
      "((11 + 1) * 1) + 12",
      "((11 * 1) + 1) + 12",
      "11 + ((1 + 12) / 1)",
      "(11 + (1 * 12)) + 1",
      "11 + (12 + (1 / 1))",
      "1 + ((1 * 12) + 11)",
      "1 + (12 + (1 * 11))",
      "(1 + 12) + (1 * 11)",
      "((11 * 1) + 12) + 1",
      "12 + (11 + (1 / 1))",
      "((1 + 11) + 12) / 1",
      "1 * ((1 + 12) + 11)",
      "1 + (1 * (11 + 12))",
      "((1 + 12) / 1) + 11",
      "1 + (11 + (1 * 12))",
      "1 + (11 + (12 / 1))",
      "1 + ((12 / 1) + 11)",
      "((12 + 1) + 11) / 1",
      "((12 + 11) * 1) + 1",
      "11 + ((1 * 12) + 1)",
      "((1 * 1) + 12) + 11",
      "(12 + (11 + 1)) / 1",
      "(11 + (1 + 12)) * 1",
      "11 + ((1 * 1) + 12)",
      "11 + (1 * (1 + 12))",
      "((1 * 12) + 1) + 11",
      "1 * ((12 + 1) + 11)",
      "((1 * 1) + 11) + 12",
      "(12 + (1 * 11)) + 1",
      "(12 + 11) + (1 / 1)",
      "((11 + 1) + 12) * 1",
      "1 + ((11 * 1) + 12)",
      "(11 / 1) + (1 + 12)",
      "((12 + 11) / 1) + 1",
      "1 + (12 + (11 * 1))",
      "((1 + 12) + 11) * 1",
      "(1 * (11 + 1)) + 12",
      "(12 + (1 + 11)) * 1",
      "11 + (12 + (1 * 1))",
      "(1 * 1) + (11 + 12)",
      "((11 + 12) * 1) + 1",
      "11 + (1 + (12 / 1))",
      "(11 / 1) + (12 + 1)",
      "((11 + 12) / 1) + 1",
      "(1 + (1 * 12)) + 11",
      "11 + ((12 * 1) + 1)",
      "((1 + 11) + 12) * 1",
      "1 * (12 + (1 + 11))",
      "1 + ((1 * 11) + 12)",
      "(11 * 1) + (12 + 1)",
      "(11 + (1 + 12)) / 1",
      "1 + (1 * (12 + 11))",
      "(11 + 1) + (12 * 1)",
      "11 + ((1 / 1) + 12)",
      "(1 * (1 + 12)) + 11",
      "11 + (1 * (12 + 1))",
      "(12 / 1) + (1 + 11)",
      "(1 + 12) + (11 * 1)",
      "(1 + (1 * 11)) + 12",
      "11 + ((12 + 1) / 1)",
      "1 + ((12 * 1) + 11)",
      "((1 + 12) + 11) / 1",
      "1 * ((11 + 12) + 1)",
      "(1 + 11) + (12 / 1)",
      "((1 / 1) + 12) + 11",
      "((1 * 11) + 1) + 12",
      "1 + ((12 + 11) / 1)",
      "(1 + (11 * 1)) + 12",
      "((1 * 11) + 12) + 1",
      "12 + (1 * (1 + 11))",
      "1 * (1 + (12 + 11))",
      "((11 / 1) + 12) + 1",
      "1 + (12 + (11 / 1))",
      "(11 + (12 + 1)) / 1",
      "11 + ((12 + 1) * 1)",
      "((12 * 1) + 1) + 11",
      "1 * (1 + (11 + 12))",
      "((12 / 1) + 11) + 1",
      "(1 + (11 + 12)) * 1",
      "((12 + 11) + 1) / 1",
      "(12 + (1 * 1)) + 11",
      "(1 * (11 + 12)) + 1",
      "1 + ((11 / 1) + 12)",
      "(1 + (12 + 11)) / 1",
      "((12 + 1) + 11) * 1",
      "12 + (1 + (11 / 1))",
      "12 + ((1 * 11) + 1)",
      "1 * ((1 + 11) + 12)",
      "((12 + 1) / 1) + 11",
      "(12 + (1 / 1)) + 11",
      "12 + ((1 * 1) + 11)",
      "12 + (1 * (11 + 1))",
      "(12 * 1) + (11 + 1)",
      "((1 * 12) + 11) + 1",
      "(12 * 1) + (1 + 11)",
      "(1 + 11) + (1 * 12)",
      "(11 + 1) + (1 * 12)",
      "(1 + 11) + (12 * 1)",
      "((1 + 11) / 1) + 12",
      "(12 + (1 + 11)) / 1",
      "11 + ((1 + 12) * 1)",
      "1 * ((11 + 1) + 12)",
      "1 + ((11 + 12) / 1)",
      "(1 + (12 / 1)) + 11",
      "(12 + 1) + (11 / 1)",
      "(11 + 1) + (12 / 1)",
      "12 + ((11 + 1) * 1)",
      "((11 + 1) / 1) + 12",
      "(12 + (11 + 1)) * 1",
      "((11 + 1) + 12) / 1",
      "1 + (11 + (12 * 1))",
      "(11 + 12) + (1 * 1)",
      "(11 + (1 * 1)) + 12",
      "11 + ((12 / 1) + 1)",
      "(12 / 1) + (11 + 1)",
      "((1 + 11) * 1) + 12",
      "(11 + 12) + (1 / 1)",
      "12 + (1 + (11 * 1))",
      "(1 + (11 + 12)) / 1",
      "((12 + 1) * 1) + 11",
      "(1 * 12) + (11 + 1)",
      "12 + ((1 + 11) * 1)",
      "((11 + 12) + 1) * 1",
      "12 + ((11 / 1) + 1)",
      "(11 + (12 + 1)) * 1",
      "1 * (12 + (11 + 1))",
      "1 * (11 + (12 + 1))",
      "((12 / 1) + 1) + 11",
      "(12 + 1) + (11 * 1)",
      "12 + ((11 + 1) / 1)",
      "(1 * (1 + 11)) + 12",
      "(1 * 11) + (12 + 1)",
      "(1 / 1) + (11 + 12)",
      "11 + (1 + (12 * 1))",
      "11 + (1 + (1 * 12))",
      "1 + ((12 + 11) * 1)",
      "(12 + (11 / 1)) + 1",
      "12 + ((1 / 1) + 11)",
      "1 * ((12 + 11) + 1)",
      "12 + ((11 * 1) + 1)",
      "12 + (1 + (1 * 11))",
      "(1 + (12 * 1)) + 11",
      "(1 * 11) + (1 + 12)"
    ]
  },
  "1 1 11 13": {
    "cards": "1 1 11 13",
    "has_solution": "Y",
    "num_solutions": 240,
    "solutions": [
      "((13 - 1) + 1) + 11",
      "((1 + 11) + 13) - 1",
      "((1 * 11) * 1) + 13",
      "(1 - 1) + (13 + 11)",
      "11 - (1 - (1 + 13))",
      "(1 - 1) + (11 + 13)",
      "((1 * 13) + 11) / 1",
      "((13 + 11) * 1) / 1",
      "((11 / 1) * 1) + 13",
      "(1 * (1 * 13)) + 11",
      "(11 / (1 * 1)) + 13",
      "1 * ((13 * 1) + 11)",
      "(1 + 11) - (1 - 13)",
      "13 + (1 * (11 * 1))",
      "(13 - (1 - 1)) + 11",
      "1 * ((11 * 1) + 13)",
      "13 + ((1 * 1) * 11)",
      "(13 + 11) + (1 - 1)",
      "11 + ((1 - 1) + 13)",
      "(1 * 11) + (13 / 1)",
      "1 * (1 * (13 + 11))",
      "((13 * 1) * 1) + 11",
      "((1 / 1) * 13) + 11",
      "((13 + 11) / 1) / 1",
      "(1 * (13 * 1)) + 11",
      "1 * (11 + (13 * 1))",
      "(11 / 1) + (13 / 1)",
      "(13 + (11 - 1)) + 1",
      "(13 * (1 / 1)) + 11",
      "11 + (1 - (1 - 13))",
      "(13 / 1) + (1 * 11)",
      "11 + (1 * (13 / 1))",
      "1 + ((13 - 1) + 11)",
      "(1 / (1 / 13)) + 11",
      "1 + (11 - (1 - 13))",
      "(11 + (1 * 13)) / 1",
      "13 - ((1 - 1) - 11)",
      "((11 / 1) / 1) + 13",
      "(11 / 1) + (13 * 1)",
      "1 * (13 + (11 * 1))",
      "(1 * (13 + 11)) / 1",
      "((11 / 1) + 13) / 1",
      "13 + (1 + (11 - 1))",
      "(1 + (11 - 1)) + 13",
      "(1 - (1 - 11)) + 13",
      "((13 + 11) - 1) + 1",
      "13 + (1 / (1 / 11))",
      "1 * (11 + (13 / 1))",
      "(11 + (13 - 1)) + 1",
      "1 * (1 * (11 + 13))",
      "13 + ((11 / 1) / 1)",
      "11 + ((1 / 1) * 13)",
      "(11 - 1) + (13 + 1)",
      "(11 + (13 * 1)) * 1",
      "((13 - 1) + 11) + 1",
      "11 + ((13 / 1) / 1)",
      "11 + (1 * (13 * 1))",
      "11 + (1 + (13 - 1))",
      "((11 / 1) + 13) * 1",
      "(11 + (13 * 1)) / 1",
      "(13 + (1 - 1)) + 11",
      "13 + ((1 / 1) * 11)",
      "((11 + 13) * 1) / 1",
      "(11 * (1 * 1)) + 13",
      "11 - ((1 - 1) - 13)",
      "(11 + 13) + (1 - 1)",
      "((11 * 1) + 13) / 1",
      "(13 + (11 * 1)) / 1",
      "(11 * 1) + (1 * 13)",
      "11 + (13 / (1 * 1))",
      "13 + (11 - (1 - 1))",
      "((13 / 1) * 1) + 11",
      "11 + ((13 * 1) * 1)",
      "1 * ((13 + 11) * 1)",
      "(13 + (1 * 11)) * 1",
      "(1 * (1 * 11)) + 13",
      "((11 + 13) / 1) * 1",
      "13 + (1 * (11 / 1))",
      "((11 + 13) - 1) + 1",
      "(1 * 13) + (11 * 1)",
      "(13 + (11 / 1)) / 1",
      "(1 + 13) + (11 - 1)",
      "((11 + 13) / 1) / 1",
      "1 * (13 + (1 * 11))",
      "(1 * (13 + 11)) * 1",
      "11 + ((1 * 13) / 1)",
      "(1 / 1) * (11 + 13)",
      "((11 * 1) + 13) * 1",
      "(13 * 1) + (11 * 1)",
      "1 * ((11 / 1) + 13)",
      "13 + ((1 * 11) * 1)",
      "(13 / 1) + (11 * 1)",
      "(1 + (11 + 13)) - 1",
      "(11 + 1) - (1 - 13)",
      "(13 / (1 * 1)) + 11",
      "13 + ((11 + 1) - 1)",
      "13 + ((1 - 1) + 11)",
      "1 + (11 + (13 - 1))",
      "1 + (13 + (11 - 1))",
      "((11 + 1) + 13) - 1",
      "1 + ((11 - 1) + 13)",
      "11 + (1 * (1 * 13))",
      "(11 + (13 / 1)) * 1",
      "(13 + (11 + 1)) - 1",
      "13 + ((11 * 1) / 1)",
      "(1 * (13 / 1)) + 11",
      "(11 + 1) + (13 - 1)",
      "((13 / 1) / 1) + 11",
      "(11 * (1 / 1)) + 13",
      "11 + ((1 * 13) * 1)",
      "((1 - 1) + 11) + 13",
      "((13 * 1) + 11) * 1",
      "((1 + 13) - 1) + 11",
      "((13 / 1) + 11) / 1",
      "1 * ((13 + 11) / 1)",
      "11 - (1 - (13 + 1))",
      "((11 + 13) + 1) - 1",
      "13 + (11 + (1 - 1))",
      "(13 * (1 * 1)) + 11",
      "11 + ((13 - 1) + 1)",
      "1 * ((1 * 11) + 13)",
      "1 + ((13 + 11) - 1)",
      "11 + (13 * (1 / 1))",
      "(11 + (1 + 13)) - 1",
      "(13 / (1 / 1)) + 11",
      "(13 + 1) + (11 - 1)",
      "13 + ((11 - 1) + 1)",
      "(1 * (11 / 1)) + 13",
      "((13 * 1) + 11) / 1",
      "((13 / 1) + 11) * 1",
      "((11 + 13) * 1) * 1",
      "(1 * 1) * (11 + 13)",
      "((13 * 1) / 1) + 11",
      "11 + ((13 * 1) / 1)",
      "((1 * 13) * 1) + 11",
      "1 - ((1 - 13) - 11)",
      "13 + ((1 + 11) - 1)",
      "((1 - 1) + 13) + 11",
      "(1 * 13) + (11 / 1)",
      "(13 + 11) * (1 / 1)",
      "(1 + 13) - (1 - 11)",
      "11 + (13 - (1 - 1))",
      "(13 + (11 / 1)) * 1",
      "(11 / 1) + (1 * 13)",
      "(13 + 11) * (1 * 1)",
      "(11 * 1) + (13 / 1)",
      "(1 * (11 + 13)) * 1",
      "(1 * 13) + (1 * 11)",
      "11 + (13 * (1 * 1))",
      "((1 + 13) + 11) - 1",
      "(13 - 1) + (11 + 1)",
      "((1 * 11) / 1) + 13",
      "1 + ((11 + 13) - 1)",
      "((13 + 11) * 1) * 1",
      "((1 * 13) + 11) * 1",
      "11 + ((1 + 13) - 1)",
      "13 + ((11 * 1) * 1)",
      "(13 * 1) + (1 * 11)",
      "13 + (1 - (1 - 11))",
      "11 + ((13 / 1) * 1)",
      "(11 / (1 / 1)) + 13",
      "1 / (1 / (11 + 13))",
      "1 - (1 - (11 + 13))",
      "1 - (1 - (13 + 11))",
      "(13 + (1 * 11)) / 1",
      "1 * (13 + (11 / 1))",
      "11 + (13 / (1 / 1))",
      "13 + (11 / (1 / 1))",
      "11 + ((1 * 1) * 13)",
      "(1 * (11 + 13)) / 1",
      "(11 - 1) + (1 + 13)",
      "1 * ((13 / 1) + 11)",
      "((1 + 11) - 1) + 13",
      "((13 + 1) - 1) + 11",
      "(1 - (1 - 13)) + 11",
      "((11 - 1) + 13) + 1",
      "(11 + 13) * (1 * 1)",
      "(11 + (1 - 1)) + 13",
      "1 * ((11 + 13) / 1)",
      "(13 + (11 * 1)) * 1",
      "((13 + 1) + 11) - 1",
      "((11 - 1) + 1) + 13",
      "13 - (1 - (11 + 1))",
      "((13 + 11) / 1) * 1",
      "(1 + 11) + (13 - 1)",
      "((11 + 1) - 1) + 13",
      "(1 * 11) + (1 * 13)",
      "1 * (11 + (1 * 13))",
      "(11 + 13) - (1 - 1)",
      "11 + (13 + (1 - 1))",
      "11 + (1 / (1 / 13))",
      "((1 * 13) / 1) + 11",
      "13 + (11 / (1 * 1))",
      "(1 / (1 / 11)) + 13",
      "((11 * 1) * 1) + 13",
      "(11 - (1 - 13)) + 1",
      "((1 * 1) * 11) + 13",
      "(11 + 13) * (1 / 1)",
      "13 + (1 * (1 * 11))",
      "(13 + (1 + 11)) - 1",
      "(13 * 1) + (11 / 1)",
      "(13 + 11) / (1 * 1)",
      "(11 * 1) + (13 * 1)",
      "((1 * 1) * 13) + 11",
      "(13 - (1 - 11)) + 1",
      "(11 - (1 - 1)) + 13",
      "(1 + (13 + 11)) - 1",
      "1 + (13 - (1 - 11))",
      "(13 + 11) / (1 / 1)",
      "(1 * 11) + (13 * 1)",
      "11 + ((13 + 1) - 1)",
      "13 + ((1 * 11) / 1)",
      "((1 * 11) + 13) / 1",
      "1 - ((1 - 11) - 13)",
      "13 + (11 * (1 * 1))",
      "(1 * 1) * (13 + 11)",
      "(11 + 13) / (1 * 1)",
      "((1 * 11) + 13) * 1",
      "1 * ((1 * 13) + 11)",
      "(1 * (11 * 1)) + 13",
      "13 + (11 * (1 / 1))",
      "13 + ((11 / 1) * 1)",
      "((11 * 1) / 1) + 13",
      "(13 / 1) + (11 / 1)",
      "(13 + 1) - (1 - 11)",
      "(1 / 1) * (13 + 11)",
      "(11 + (13 / 1)) / 1",
      "(11 + (13 + 1)) - 1",
      "(11 + (1 * 13)) * 1",
      "1 * ((11 + 13) * 1)",
      "((13 + 11) + 1) - 1",
      "(13 + 11) - (1 - 1)",
      "(13 - 1) + (1 + 11)",
      "13 - ((1 - 11) - 1)",
      "13 - (1 - (1 + 11))",
      "1 / (1 / (13 + 11))",
      "(11 + 13) / (1 / 1)",
      "(1 + (13 - 1)) + 11",
      "11 - ((1 - 13) - 1)",
      "((1 / 1) * 11) + 13"
    ]
  },
  "1 1 12 12": {
    "cards": "1 1 12 12",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "(1 / (1 / 12)) + 12",
      "12 + (12 + (1 - 1))",
      "1 - (1 - (12 + 12))",
      "12 + ((1 * 12) * 1)",
      "(1 * (12 * 1)) + 12",
      "12 - ((1 - 1) - 12)",
      "(12 / 1) + (1 * 12)",
      "(12 + 12) * (1 * 1)",
      "(12 + 12) / (1 / 1)",
      "(1 + (12 - 1)) + 12",
      "(12 + 12) + (1 - 1)",
      "((1 + 12) + 12) - 1",
      "(1 + (12 + 12)) - 1",
      "(1 * (12 + 12)) * 1",
      "(12 * 1) + (1 * 12)",
      "12 + ((12 * 1) * 1)",
      "12 + (12 / (1 / 1))",
      "12 + (12 * (1 * 1))",
      "((12 / 1) * 1) + 12",
      "(12 + (12 * 1)) / 1",
      "1 * (12 + (12 * 1))",
      "((1 + 12) - 1) + 12",
      "((12 + 12) * 1) * 1",
      "((12 + 12) / 1) * 1",
      "1 + (12 + (12 - 1))",
      "((12 * 1) / 1) + 12",
      "1 * ((12 + 12) * 1)",
      "12 + (12 * (1 / 1))",
      "(12 / (1 / 1)) + 12",
      "12 + ((1 * 1) * 12)",
      "((1 * 12) / 1) + 12",
      "(12 * (1 / 1)) + 12",
      "((12 - 1) + 1) + 12",
      "((1 / 1) * 12) + 12",
      "12 - (1 - (12 + 1))",
      "(12 + (1 * 12)) / 1",
      "12 + (1 + (12 - 1))",
      "(12 + 1) - (1 - 12)",
      "(1 / 1) * (12 + 12)",
      "(12 + 1) + (12 - 1)",
      "((1 * 12) + 12) / 1",
      "12 + ((1 + 12) - 1)",
      "(12 * 1) + (12 * 1)",
      "1 * ((1 * 12) + 12)",
      "12 + ((12 / 1) * 1)",
      "(1 * (1 * 12)) + 12",
      "12 + (1 - (1 - 12))",
      "(12 + 12) * (1 / 1)",
      "12 + (1 * (12 * 1))",
      "((12 + 12) - 1) + 1",
      "(12 + (1 - 1)) + 12",
      "12 + ((12 / 1) / 1)",
      "12 + ((1 * 12) / 1)",
      "12 + (12 / (1 * 1))",
      "(1 * (12 / 1)) + 12",
      "12 + (1 * (1 * 12))",
      "((12 + 12) * 1) / 1",
      "1 * (12 + (1 * 12))",
      "(12 + (1 + 12)) - 1",
      "((12 / 1) + 12) / 1",
      "((1 * 12) * 1) + 12",
      "(12 + (12 + 1)) - 1",
      "((12 - 1) + 12) + 1",
      "12 + ((12 - 1) + 1)",
      "((12 + 1) + 12) - 1",
      "1 - ((1 - 12) - 12)",
      "12 - ((1 - 12) - 1)",
      "((12 / 1) / 1) + 12",
      "((1 * 12) + 12) * 1",
      "(12 - (1 - 12)) + 1",
      "12 + ((1 - 1) + 12)",
      "12 + ((1 / 1) * 12)",
      "(12 / 1) + (12 * 1)",
      "(1 - 1) + (12 + 12)",
      "(12 - 1) + (12 + 1)",
      "(12 / (1 * 1)) + 12",
      "((1 * 1) * 12) + 12",
      "1 * ((12 * 1) + 12)",
      "(12 + (12 / 1)) / 1",
      "(12 + (1 * 12)) * 1",
      "1 + ((12 - 1) + 12)",
      "(12 + (12 * 1)) * 1",
      "((12 * 1) + 12) * 1",
      "(12 + (12 / 1)) * 1",
      "(12 - (1 - 1)) + 12",
      "(1 * 1) * (12 + 12)",
      "(1 + 12) - (1 - 12)",
      "(1 * (12 + 12)) / 1",
      "(1 * 12) + (12 / 1)",
      "(12 / 1) + (12 / 1)",
      "(1 + 12) + (12 - 1)",
      "((12 + 12) + 1) - 1",
      "1 / (1 / (12 + 12))",
      "(1 * 12) + (12 * 1)",
      "12 + (12 - (1 - 1))",
      "((12 + 1) - 1) + 12",
      "(1 * 12) + (1 * 12)",
      "1 * (1 * (12 + 12))",
      "12 - (1 - (1 + 12))",
      "(12 - 1) + (1 + 12)",
      "1 + ((12 + 12) - 1)",
      "((12 + 12) / 1) / 1",
      "1 * ((12 / 1) + 12)",
      "(12 + 12) / (1 * 1)",
      "1 * ((12 + 12) / 1)",
      "12 + ((12 * 1) / 1)",
      "12 + (1 * (12 / 1))",
      "(12 * (1 * 1)) + 12",
      "(12 * 1) + (12 / 1)",
      "(1 - (1 - 12)) + 12",
      "(12 + (12 - 1)) + 1",
      "((12 * 1) * 1) + 12",
      "((12 / 1) + 12) * 1",
      "((1 - 1) + 12) + 12",
      "(12 + 12) - (1 - 1)",
      "12 + ((12 + 1) - 1)",
      "((12 * 1) + 12) / 1",
      "12 + (1 / (1 / 12))",
      "1 * (12 + (12 / 1))",
      "1 + (12 - (1 - 12))"
    ]
  },
  "1 1 12 13": {
    "cards": "1 1 12 13",
    "has_solution": "Y",
    "num_solutions": 112,
    "solutions": [
      "((12 + 13) * 1) - 1",
      "(13 * 1) + (12 - 1)",
      "13 + ((12 / 1) - 1)",
      "13 - ((1 * 1) - 12)",
      "1 * (13 - (1 - 12))",
      "12 + ((13 - 1) / 1)",
      "((13 - 1) + 12) * 1",
      "12 + ((13 / 1) - 1)",
      "(1 * 12) + (13 - 1)",
      "12 - ((1 / 1) - 13)",
      "((13 * 1) + 12) - 1",
      "13 + ((12 - 1) / 1)",
      "(13 + (1 * 12)) - 1",
      "(12 / 1) - (1 - 13)",
      "13 + ((12 - 1) * 1)",
      "((13 / 1) + 12) - 1",
      "(13 + (12 - 1)) * 1",
      "1 * (12 + (13 - 1))",
      "1 * (12 - (1 - 13))",
      "(13 - 1) + (12 / 1)",
      "(12 + (13 / 1)) - 1",
      "(13 - (1 - 12)) / 1",
      "(12 * 1) + (13 - 1)",
      "12 + (13 - (1 * 1))",
      "(12 + (13 - 1)) / 1",
      "((12 / 1) + 13) - 1",
      "((1 * 13) + 12) - 1",
      "12 - ((1 - 13) * 1)",
      "((13 - 1) * 1) + 12",
      "12 - (1 - (1 * 13))",
      "((13 * 1) - 1) + 12",
      "(13 - (1 - 12)) * 1",
      "((12 * 1) + 13) - 1",
      "12 + (13 - (1 / 1))",
      "(1 * (13 + 12)) - 1",
      "((12 + 13) - 1) / 1",
      "1 * (13 + (12 - 1))",
      "((1 * 12) - 1) + 13",
      "((12 * 1) - 1) + 13",
      "13 - ((1 - 12) * 1)",
      "(13 + 12) - (1 / 1)",
      "(13 - 1) + (1 * 12)",
      "13 + ((12 * 1) - 1)",
      "12 - ((1 - 13) / 1)",
      "((13 / 1) - 1) + 12",
      "(12 + 13) - (1 / 1)",
      "((12 - 1) * 1) + 13",
      "(1 * (13 - 1)) + 12",
      "((13 + 12) / 1) - 1",
      "((13 - 1) / 1) + 12",
      "(12 - (1 - 13)) * 1",
      "13 - ((1 - 12) / 1)",
      "13 + (12 - (1 / 1))",
      "(12 + (1 * 13)) - 1",
      "(12 - 1) + (13 / 1)",
      "12 - ((1 * 1) - 13)",
      "(13 + (12 - 1)) / 1",
      "((13 + 12) - 1) * 1",
      "12 + ((13 - 1) * 1)",
      "1 * ((13 - 1) + 12)",
      "((1 * 12) + 13) - 1",
      "12 + ((13 * 1) - 1)",
      "13 + (12 - (1 * 1))",
      "13 + (1 * (12 - 1))",
      "1 * ((12 + 13) - 1)",
      "(12 - 1) + (13 * 1)",
      "((12 + 13) - 1) * 1",
      "((12 - 1) / 1) + 13",
      "13 - (1 - (12 * 1))",
      "(1 * (12 - 1)) + 13",
      "(12 - (1 - 13)) / 1",
      "13 - (1 * (1 - 12))",
      "(1 * (12 + 13)) - 1",
      "((13 + 12) - 1) / 1",
      "(12 - (1 / 1)) + 13",
      "(13 - 1) + (12 * 1)",
      "((12 - 1) + 13) * 1",
      "(12 * 1) - (1 - 13)",
      "1 * ((12 - 1) + 13)",
      "13 - (1 - (1 * 12))",
      "(12 - 1) + (1 * 13)",
      "(13 + (12 * 1)) - 1",
      "((12 - 1) + 13) / 1",
      "12 - (1 * (1 - 13))",
      "(13 / 1) + (12 - 1)",
      "12 + (1 * (13 - 1))",
      "(13 * 1) - (1 - 12)",
      "(12 + (13 - 1)) * 1",
      "1 * ((13 + 12) - 1)",
      "(12 - (1 * 1)) + 13",
      "((12 + 13) / 1) - 1",
      "(12 + (13 * 1)) - 1",
      "(13 + 12) - (1 * 1)",
      "12 - (1 - (13 * 1))",
      "((13 - 1) + 12) / 1",
      "13 + ((1 * 12) - 1)",
      "13 - ((1 / 1) - 12)",
      "13 - (1 - (12 / 1))",
      "(13 / 1) - (1 - 12)",
      "(13 - (1 / 1)) + 12",
      "((13 + 12) * 1) - 1",
      "(13 + (12 / 1)) - 1",
      "((12 / 1) - 1) + 13",
      "(1 * 13) - (1 - 12)",
      "((1 * 13) - 1) + 12",
      "(1 * 12) - (1 - 13)",
      "12 + ((1 * 13) - 1)",
      "(13 - (1 * 1)) + 12",
      "12 - (1 - (13 / 1))",
      "(12 + 13) - (1 * 1)",
      "(12 / 1) + (13 - 1)",
      "(1 * 13) + (12 - 1)"
    ]
  },
  "1 1 13 13": {
    "cards": "1 1 13 13",
    "has_solution": "Y",
    "num_solutions": 15,
    "solutions": [
      "13 - ((1 - 13) + 1)",
      "(13 - (1 - 13)) - 1",
      "13 + ((13 - 1) - 1)",
      "13 - ((1 + 1) - 13)",
      "(13 - 1) - (1 - 13)",
      "((13 - 1) + 13) - 1",
      "13 + (13 - (1 + 1))",
      "(13 - (1 + 1)) + 13",
      "13 - (1 - (13 - 1))",
      "(13 + (13 - 1)) - 1",
      "(13 + 13) - (1 + 1)",
      "((13 + 13) - 1) - 1",
      "((13 - 1) - 1) + 13",
      "13 - (1 + (1 - 13))",
      "(13 - 1) + (13 - 1)"
    ]
  },
  "1 2 2 2": {
    "cards": "1 2 2 2",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 2 3": {
    "cards": "1 2 2 3",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 2 4": {
    "cards": "1 2 2 4",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "4 * (2 * (2 + 1))",
      "((2 + 1) * 4) * 2",
      "2 * ((1 + 2) * 4)",
      "2 * ((2 + 1) * 4)",
      "(4 * (2 + 1)) * 2",
      "4 * ((2 + 1) * 2)",
      "2 * (4 * (1 + 2))",
      "2 * (4 * (2 + 1))",
      "(2 * 4) * (2 + 1)",
      "(4 * 2) * (1 + 2)",
      "(1 + 2) * (4 * 2)",
      "(2 + 1) * (4 * 2)",
      "((2 + 1) * 2) * 4",
      "(4 * (1 + 2)) * 2",
      "(2 + 1) * (2 * 4)",
      "(2 * (2 + 1)) * 4",
      "(2 * (1 + 2)) * 4",
      "(2 * 4) * (1 + 2)",
      "(4 * 2) * (2 + 1)",
      "4 * (2 * (1 + 2))",
      "(1 + 2) * (2 * 4)",
      "((1 + 2) * 4) * 2",
      "4 * ((1 + 2) * 2)",
      "((1 + 2) * 2) * 4"
    ]
  },
  "1 2 2 5": {
    "cards": "1 2 2 5",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((1 + 5) * 2) * 2",
      "(1 + 5) * (2 * 2)",
      "(5 + 1) * (2 + 2)",
      "(2 * (5 + 1)) * 2",
      "(2 + 2) * (1 + 5)",
      "2 * ((1 + 5) * 2)",
      "(5 + 1) * (2 * 2)",
      "(2 * 2) * (1 + 5)",
      "(2 * 2) * (5 + 1)",
      "(1 + 5) * (2 + 2)",
      "(2 * (1 + 5)) * 2",
      "2 * ((5 + 1) * 2)",
      "(2 + 2) * (5 + 1)",
      "((5 + 1) * 2) * 2",
      "2 * (2 * (1 + 5))",
      "2 * (2 * (5 + 1))"
    ]
  },
  "1 2 2 6": {
    "cards": "1 2 2 6",
    "has_solution": "Y",
    "num_solutions": 145,
    "solutions": [
      "2 * ((6 * 2) * 1)",
      "(6 / (1 / 2)) * 2",
      "2 / ((1 / 6) / 2)",
      "((6 / 1) * 2) * 2",
      "6 * (2 * (1 * 2))",
      "6 * (1 * (2 + 2))",
      "(2 / (1 / 2)) * 6",
      "((2 * 6) * 2) / 1",
      "6 * (1 * (2 * 2))",
      "(2 + (2 * 1)) * 6",
      "(2 / 1) * (2 * 6)",
      "(2 + 2) * (1 * 6)",
      "(6 * (2 * 2)) / 1",
      "(6 * 2) / (1 / 2)",
      "(6 * (2 + 2)) / 1",
      "(1 + 2) * (2 + 6)",
      "(2 + 6) * (2 + 1)",
      "(2 * 6) * (2 / 1)",
      "((6 * 2) * 1) * 2",
      "2 * (1 * (6 * 2))",
      "2 * (6 * (1 * 2))",
      "(2 * (6 * 2)) / 1",
      "(1 * (2 + 2)) * 6",
      "(2 + 1) * (2 + 6)",
      "((2 + 2) * 6) * 1",
      "((1 * 2) * 6) * 2",
      "(2 * 1) * (6 * 2)",
      "(1 * (2 * 6)) * 2",
      "2 * ((1 * 2) * 6)",
      "(2 * (1 * 6)) * 2",
      "6 / (1 / (2 * 2))",
      "1 * ((2 + 2) * 6)",
      "(6 / 1) * (2 + 2)",
      "((2 * 1) + 2) * 6",
      "(6 * 1) * (2 + 2)",
      "(1 * (2 * 2)) * 6",
      "6 * (2 + (1 * 2))",
      "((6 * 2) * 2) / 1",
      "(6 * 2) * (2 * 1)",
      "(1 * 2) * (6 * 2)",
      "6 * ((1 * 2) + 2)",
      "(2 * (1 * 2)) * 6",
      "1 * (6 * (2 * 2))",
      "1 * (2 * (6 * 2))",
      "6 * ((2 * 2) * 1)",
      "6 * (2 * (2 * 1))",
      "((2 / 1) * 2) * 6",
      "(6 * 2) * (1 * 2)",
      "(6 * (2 * 1)) * 2",
      "((6 * 2) / 1) * 2",
      "((2 * 2) / 1) * 6",
      "2 * ((6 * 2) / 1)",
      "(1 * (6 * 2)) * 2",
      "((2 * 2) * 6) * 1",
      "2 * ((6 * 1) * 2)",
      "6 / ((1 / 2) / 2)",
      "((2 / 1) * 6) * 2",
      "1 * (6 * (2 + 2))",
      "(2 * (2 * 6)) / 1",
      "(6 * (2 * 2)) * 1",
      "(6 / 1) * (2 * 2)",
      "(1 * 6) * (2 * 2)",
      "6 * (2 / (1 / 2))",
      "2 * ((6 / 1) * 2)",
      "((2 * 1) * 6) * 2",
      "2 * (6 * (2 / 1))",
      "((2 * 1) * 2) * 6",
      "2 / (1 / (2 * 6))",
      "1 * ((2 * 6) * 2)",
      "((6 * 1) * 2) * 2",
      "(6 * 2) * (2 / 1)",
      "(2 * 2) * (6 * 1)",
      "(2 * (2 / 1)) * 6",
      "6 * ((2 + 2) / 1)",
      "2 * (2 * (6 * 1))",
      "((6 * 2) * 2) * 1",
      "(2 + (2 / 1)) * 6",
      "(2 + 2) / (1 / 6)",
      "6 * ((2 * 1) + 2)",
      "(2 + 2) * (6 / 1)",
      "(1 * 6) * (2 + 2)",
      "(2 + 6) * (1 + 2)",
      "(2 * 2) * (6 / 1)",
      "(6 + 2) * (1 + 2)",
      "(2 * (6 * 2)) * 1",
      "1 * ((6 * 2) * 2)",
      "(2 / 1) * (6 * 2)",
      "6 * (2 + (2 / 1))",
      "(6 * (1 * 2)) * 2",
      "2 * (2 * (1 * 6))",
      "((2 + 2) * 1) * 6",
      "2 * ((2 / 1) * 6)",
      "2 / ((1 / 2) / 6)",
      "(2 * 6) / (1 / 2)",
      "6 / (1 / (2 + 2))",
      "(1 * 2) * (2 * 6)",
      "(2 + 1) * (6 + 2)",
      "2 * ((2 * 1) * 6)",
      "6 * ((2 * 2) / 1)",
      "((1 * 2) + 2) * 6",
      "((2 / 1) + 2) * 6",
      "2 * (2 * (6 / 1))",
      "(2 * (2 * 1)) * 6",
      "(2 * 2) * (1 * 6)",
      "2 / (1 / (6 * 2))",
      "2 * (6 / (1 / 2))",
      "2 * (2 / (1 / 6))",
      "2 * (1 * (2 * 6))",
      "6 * ((2 + 2) * 1)",
      "(6 * 1) * (2 * 2)",
      "(2 * 6) * (2 * 1)",
      "1 * ((2 * 2) * 6)",
      "(2 / (1 / 6)) * 2",
      "((2 * 2) * 6) / 1",
      "6 * ((1 * 2) * 2)",
      "((1 * 2) * 2) * 6",
      "2 * (6 * (2 * 1))",
      "(2 * (6 * 1)) * 2",
      "((2 * 2) * 1) * 6",
      "(2 * (6 / 1)) * 2",
      "6 * ((2 / 1) + 2)",
      "1 * (2 * (2 * 6))",
      "((2 * 6) * 1) * 2",
      "(2 + (1 * 2)) * 6",
      "6 * ((2 / 1) * 2)",
      "(1 + 2) * (6 + 2)",
      "6 * (2 + (2 * 1))",
      "((1 * 6) * 2) * 2",
      "2 * ((2 * 6) / 1)",
      "6 * ((2 * 1) * 2)",
      "((2 * 6) / 1) * 2",
      "(2 + 2) * (6 * 1)",
      "((2 * 6) * 2) * 1",
      "((2 + 2) / 1) * 6",
      "(2 * 2) / (1 / 6)",
      "(2 * (2 * 6)) * 1",
      "(6 * (2 / 1)) * 2",
      "(2 * 6) * (1 * 2)",
      "(6 + 2) * (2 + 1)",
      "((2 + 2) * 6) / 1",
      "2 * ((1 * 6) * 2)",
      "6 * (2 * (2 / 1))",
      "(2 * 1) * (2 * 6)",
      "2 * ((2 * 6) * 1)",
      "(6 * (2 + 2)) * 1"
    ]
  },
  "1 2 2 7": {
    "cards": "1 2 2 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(2 * (7 - 1)) * 2",
      "((7 - 1) * 2) * 2",
      "(7 - 1) * (2 + 2)",
      "(7 - 1) * (2 * 2)",
      "(2 + 2) * (7 - 1)",
      "2 * ((7 - 1) * 2)",
      "2 * (2 * (7 - 1))",
      "(2 * 2) * (7 - 1)"
    ]
  },
  "1 2 2 8": {
    "cards": "1 2 2 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((2 * 2) - 1) * 8",
      "8 * (2 - (1 - 2))",
      "8 * (2 + (2 - 1))",
      "((2 - 1) + 2) * 8",
      "8 * ((2 - 1) + 2)",
      "8 * ((2 * 2) - 1)",
      "8 * ((2 + 2) - 1)",
      "(2 - (1 - 2)) * 8",
      "(2 + (2 - 1)) * 8",
      "((2 + 2) - 1) * 8"
    ]
  },
  "1 2 2 9": {
    "cards": "1 2 2 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(2 + (9 + 1)) * 2",
      "2 * ((9 + 2) + 1)",
      "2 * (1 + (2 + 9))",
      "2 * (2 + (9 + 1))",
      "2 * (9 + (2 + 1))",
      "((2 + 9) + 1) * 2",
      "2 * ((1 + 2) + 9)",
      "(9 + (2 + 1)) * 2",
      "2 * (2 + (1 + 9))",
      "(1 + (2 + 9)) * 2",
      "2 * (1 + (9 + 2))",
      "2 * ((9 + 1) + 2)",
      "((9 + 1) + 2) * 2",
      "((1 + 2) + 9) * 2",
      "((9 + 2) + 1) * 2",
      "((2 + 1) + 9) * 2",
      "((1 + 9) + 2) * 2",
      "2 * ((2 + 1) + 9)",
      "(2 + (1 + 9)) * 2",
      "2 * ((1 + 9) + 2)",
      "2 * ((2 + 9) + 1)",
      "(9 + (1 + 2)) * 2",
      "2 * (9 + (1 + 2))",
      "(1 + (9 + 2)) * 2"
    ]
  },
  "1 2 2 10": {
    "cards": "1 2 2 10",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "(2 * (10 + 2)) / 1",
      "(10 + 2) * (2 * 1)",
      "2 * ((2 * 1) + 10)",
      "(2 + 10) * (2 * 1)",
      "((1 * 10) + 2) * 2",
      "2 * ((1 * 2) + 10)",
      "2 * (2 + (1 * 10))",
      "(10 + 2) * (2 / 1)",
      "(1 * 2) * (2 + 10)",
      "((10 + 2) * 1) * 2",
      "(1 * (2 + 10)) * 2",
      "(10 - 2) * (1 + 2)",
      "2 * ((2 / 1) + 10)",
      "1 * (2 * (2 + 10))",
      "1 * ((10 + 2) * 2)",
      "(2 * (2 + 10)) * 1",
      "2 * ((2 + 10) / 1)",
      "(2 + (10 / 1)) * 2",
      "(10 + 2) / (1 / 2)",
      "2 * (2 + (10 / 1))",
      "2 * ((1 * 10) + 2)",
      "(2 + (1 * 10)) * 2",
      "2 + ((1 + 10) * 2)",
      "((2 * 1) + 10) * 2",
      "(10 + (1 * 2)) * 2",
      "(1 * 2) * (10 + 2)",
      "((1 + 10) * 2) + 2",
      "((10 + 2) / 1) * 2",
      "(2 / 1) * (2 + 10)",
      "2 + ((10 + 1) * 2)",
      "1 * ((2 + 10) * 2)",
      "2 * (2 + (10 * 1))",
      "2 + (2 * (1 + 10))",
      "(2 / 1) * (10 + 2)",
      "((2 + 10) * 1) * 2",
      "(2 * 1) * (10 + 2)",
      "((2 + 10) * 2) / 1",
      "((10 / 1) + 2) * 2",
      "2 * (1 * (10 + 2))",
      "2 * ((10 + 2) * 1)",
      "(1 * (10 + 2)) * 2",
      "1 * (2 * (10 + 2))",
      "((2 + 10) * 2) * 1",
      "((2 / 1) + 10) * 2",
      "((10 + 1) * 2) + 2",
      "((10 * 1) + 2) * 2",
      "(2 * (2 + 10)) / 1",
      "2 + (2 * (10 + 1))",
      "(2 * (1 + 10)) + 2",
      "2 * (1 * (2 + 10))",
      "2 / (1 / (2 + 10))",
      "(2 * 1) * (2 + 10)",
      "(2 * (10 + 1)) + 2",
      "2 * ((10 * 1) + 2)",
      "(10 + (2 / 1)) * 2",
      "(2 + 10) * (1 * 2)",
      "2 * (10 + (1 * 2))",
      "2 / (1 / (10 + 2))",
      "2 * (10 + (2 / 1))",
      "2 * ((10 + 2) / 1)",
      "(2 * (10 + 2)) * 1",
      "2 * (10 + (2 * 1))",
      "(1 + 2) * (10 - 2)",
      "(2 + 10) * (2 / 1)",
      "(2 + 10) / (1 / 2)",
      "(10 + 2) * (1 * 2)",
      "((10 + 2) * 2) * 1",
      "((1 * 2) + 10) * 2",
      "(2 + (10 * 1)) * 2",
      "((2 + 10) / 1) * 2",
      "(10 - 2) * (2 + 1)",
      "((10 + 2) * 2) / 1",
      "(2 + 1) * (10 - 2)",
      "2 * ((10 / 1) + 2)",
      "(10 + (2 * 1)) * 2",
      "2 * ((2 + 10) * 1)"
    ]
  },
  "1 2 2 11": {
    "cards": "1 2 2 11",
    "has_solution": "Y",
    "num_solutions": 80,
    "solutions": [
      "(11 * 2) + (2 / 1)",
      "2 + ((11 / 1) * 2)",
      "(2 + (11 * 2)) * 1",
      "2 * ((2 + 11) - 1)",
      "2 + ((11 * 1) * 2)",
      "((2 - 1) + 11) * 2",
      "(2 + (2 * 11)) * 1",
      "2 + ((11 * 2) * 1)",
      "(1 * 2) + (11 * 2)",
      "2 + ((11 * 2) / 1)",
      "2 * ((2 - 1) + 11)",
      "(2 * 1) + (2 * 11)",
      "2 + ((1 * 2) * 11)",
      "((2 / 1) * 11) + 2",
      "(2 * (11 * 1)) + 2",
      "2 + (2 / (1 / 11))",
      "((11 + 2) - 1) * 2",
      "2 + (2 * (11 * 1))",
      "((11 / 1) * 2) + 2",
      "2 + (11 * (1 * 2))",
      "(11 * (2 * 1)) + 2",
      "(1 * (11 * 2)) + 2",
      "2 + (11 * (2 / 1))",
      "2 + (1 * (11 * 2))",
      "1 * (2 + (11 * 2))",
      "1 * ((11 * 2) + 2)",
      "2 + ((2 * 1) * 11)",
      "(2 / (1 / 11)) + 2",
      "(11 * 2) + (2 * 1)",
      "1 * (2 + (2 * 11))",
      "((2 * 11) + 2) * 1",
      "2 * (2 - (1 - 11))",
      "(2 * 1) + (11 * 2)",
      "2 * ((11 - 1) + 2)",
      "2 + (2 * (11 / 1))",
      "(2 + (11 - 1)) * 2",
      "2 + (11 * (2 * 1))",
      "((11 * 1) * 2) + 2",
      "((11 - 1) + 2) * 2",
      "((2 * 11) * 1) + 2",
      "((11 * 2) + 2) * 1",
      "2 + (11 / (1 / 2))",
      "(11 + (2 - 1)) * 2",
      "2 + ((2 / 1) * 11)",
      "(2 + (2 * 11)) / 1",
      "2 * (11 + (2 - 1))",
      "((11 * 2) + 2) / 1",
      "(2 * 11) + (2 / 1)",
      "2 + ((2 * 11) / 1)",
      "(1 * 2) + (2 * 11)",
      "(2 + (11 * 2)) / 1",
      "(2 / 1) + (2 * 11)",
      "((1 * 11) * 2) + 2",
      "1 * ((2 * 11) + 2)",
      "2 + ((2 * 11) * 1)",
      "(11 * (1 * 2)) + 2",
      "(2 * (1 * 11)) + 2",
      "(11 / (1 / 2)) + 2",
      "((2 + 11) - 1) * 2",
      "2 + (2 * (1 * 11))",
      "(11 * 2) + (1 * 2)",
      "(2 / 1) + (11 * 2)",
      "((11 * 2) / 1) + 2",
      "(2 * (11 / 1)) + 2",
      "(11 * (2 / 1)) + 2",
      "((2 * 1) * 11) + 2",
      "2 + (1 * (2 * 11))",
      "2 * (2 + (11 - 1))",
      "((2 * 11) + 2) / 1",
      "((1 * 2) * 11) + 2",
      "(2 * 11) + (2 * 1)",
      "2 * ((11 + 2) - 1)",
      "(1 * (2 * 11)) + 2",
      "(2 - (1 - 11)) * 2",
      "(11 - (1 - 2)) * 2",
      "2 + ((1 * 11) * 2)",
      "2 * (11 - (1 - 2))",
      "(2 * 11) + (1 * 2)",
      "((2 * 11) / 1) + 2",
      "((11 * 2) * 1) + 2"
    ]
  },
  "1 2 2 12": {
    "cards": "1 2 2 12",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "((12 - 1) * 2) + 2",
      "12 * ((2 - 1) * 2)",
      "2 - ((1 - 12) * 2)",
      "(1 + (2 / 2)) * 12",
      "2 * (12 * (2 - 1))",
      "(12 * 2) * (2 - 1)",
      "2 * ((2 - 1) * 12)",
      "12 * (2 / (2 - 1))",
      "((1 + 12) * 2) - 2",
      "2 + (2 * (12 - 1))",
      "(2 - 1) * (12 * 2)",
      "(2 * (12 - 1)) + 2",
      "(2 * (1 + 12)) - 2",
      "12 * (1 + (2 / 2))",
      "(12 * (2 - 1)) * 2",
      "(12 * 2) / (2 - 1)",
      "((2 - 1) * 12) * 2",
      "(2 * 12) / (2 - 1)",
      "(2 * (12 + 1)) - 2",
      "(2 * 12) * (2 - 1)",
      "2 + ((12 - 1) * 2)",
      "12 * (2 * (2 - 1))",
      "(2 * (2 - 1)) * 12",
      "(2 - 1) * (2 * 12)",
      "((2 - 1) * 2) * 12",
      "((2 / 2) + 1) * 12",
      "12 / ((2 - 1) / 2)",
      "12 * ((2 / 2) + 1)",
      "2 - (2 * (1 - 12))",
      "(2 / (2 - 1)) * 12",
      "2 / ((2 - 1) / 12)",
      "(12 / (2 - 1)) * 2",
      "((12 + 1) * 2) - 2",
      "2 * (12 / (2 - 1))"
    ]
  },
  "1 2 2 13": {
    "cards": "1 2 2 13",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(2 * (13 / 1)) - 2",
      "(2 * 13) - (1 * 2)",
      "(13 * 2) - (2 / 1)",
      "((13 * 1) * 2) - 2",
      "((2 * 1) * 13) - 2",
      "(2 * (13 * 1)) - 2",
      "2 * ((1 - 2) + 13)",
      "(2 / (1 / 13)) - 2",
      "(2 * 13) - (2 / 1)",
      "((13 + 1) - 2) * 2",
      "(1 * (13 * 2)) - 2",
      "((13 * 2) - 2) / 1",
      "(2 * 13) - (2 * 1)",
      "(1 + (13 - 2)) * 2",
      "((2 * 13) - 2) / 1",
      "2 * (1 - (2 - 13))",
      "((1 * 2) * 13) - 2",
      "(13 * (2 * 1)) - 2",
      "(13 * (2 / 1)) - 2",
      "2 * ((13 + 1) - 2)",
      "((1 + 13) - 2) * 2",
      "((2 / 1) * 13) - 2",
      "(2 * (1 * 13)) - 2",
      "((13 * 2) - 2) * 1",
      "(1 * (2 * 13)) - 2",
      "2 * (13 + (1 - 2))",
      "(13 / (1 / 2)) - 2",
      "((2 * 13) - 2) * 1",
      "2 * ((13 - 2) + 1)",
      "((13 * 2) / 1) - 2",
      "(13 * (1 * 2)) - 2",
      "2 * (13 - (2 - 1))",
      "((13 / 1) * 2) - 2",
      "1 * ((13 * 2) - 2)",
      "(13 * 2) - (1 * 2)",
      "(1 - (2 - 13)) * 2",
      "2 * (1 + (13 - 2))",
      "((1 - 2) + 13) * 2",
      "(13 + (1 - 2)) * 2",
      "((13 * 2) * 1) - 2",
      "((2 * 13) * 1) - 2",
      "((13 - 2) + 1) * 2",
      "2 * ((1 + 13) - 2)",
      "((1 * 13) * 2) - 2",
      "((2 * 13) / 1) - 2",
      "(13 - (2 - 1)) * 2",
      "1 * ((2 * 13) - 2)",
      "(13 * 2) - (2 * 1)"
    ]
  },
  "1 2 3 3": {
    "cards": "1 2 3 3",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(1 + 3) * (3 * 2)",
      "((1 + 3) * 2) * 3",
      "(3 + 1) * (2 * 3)",
      "3 * (2 * (1 + 3))",
      "((1 + 3) * 3) * 2",
      "(3 * 2) * (1 + 3)",
      "3 * ((1 + 3) * 2)",
      "2 * (3 * (3 + 1))",
      "(2 * 3) * (1 + 3)",
      "((3 + 1) * 3) * 2",
      "(3 * (1 + 3)) * 2",
      "2 * ((1 + 3) * 3)",
      "(2 * 3) * (3 + 1)",
      "2 * (3 * (1 + 3))",
      "(1 + 3) * (2 * 3)",
      "(3 * (3 + 1)) * 2",
      "2 * ((3 + 1) * 3)",
      "3 * ((3 + 1) * 2)",
      "3 * (2 * (3 + 1))",
      "(3 + 1) * (3 * 2)",
      "((3 + 1) * 2) * 3",
      "(2 * (1 + 3)) * 3",
      "(3 * 2) * (3 + 1)",
      "(2 * (3 + 1)) * 3"
    ]
  },
  "1 2 3 4": {
    "cards": "1 2 3 4",
    "has_solution": "Y",
    "num_solutions": 242,
    "solutions": [
      "((2 * 3) * 4) / 1",
      "(3 * (2 * 4)) / 1",
      "3 * (2 / (1 / 4))",
      "2 * (3 / (1 / 4))",
      "((1 * 4) * 2) * 3",
      "4 * ((3 + 1) + 2)",
      "2 * ((1 * 4) * 3)",
      "3 / (1 / (2 * 4))",
      "4 / (1 / (2 * 3))",
      "(3 / (1 / 4)) * 2",
      "(4 * 2) * (1 * 3)",
      "(4 * 2) * (3 / 1)",
      "(1 + 3) * (4 + 2)",
      "(3 + 1) * (2 + 4)",
      "(2 + (1 + 3)) * 4",
      "4 * ((3 * 2) / 1)",
      "((4 * 3) * 2) * 1",
      "2 / ((1 / 4) / 3)",
      "4 * (2 * (3 * 1))",
      "((3 * 2) * 4) / 1",
      "2 * (1 * (3 * 4))",
      "((2 + 3) + 1) * 4",
      "3 / (1 / (4 * 2))",
      "4 / ((1 / 3) / 2)",
      "((4 * 1) * 2) * 3",
      "(2 / 1) * (3 * 4)",
      "(2 * (4 * 1)) * 3",
      "(3 + (2 + 1)) * 4",
      "(2 + (3 + 1)) * 4",
      "(3 * (4 * 1)) * 2",
      "2 * (4 * (3 / 1))",
      "(4 * 2) * (3 * 1)",
      "1 * ((2 * 3) * 4)",
      "((3 + 2) + 1) * 4",
      "(1 * (2 * 3)) * 4",
      "((4 / 1) * 3) * 2",
      "4 * ((3 / 1) * 2)",
      "(2 * (1 * 4)) * 3",
      "(1 * 2) * (4 * 3)",
      "2 / (1 / (3 * 4))",
      "(2 * 3) * (4 * 1)",
      "(2 * 3) * (4 / 1)",
      "2 * ((3 * 4) / 1)",
      "3 * (4 * (2 / 1))",
      "4 * ((2 * 3) * 1)",
      "((2 * 1) * 4) * 3",
      "((1 * 2) * 4) * 3",
      "(1 * 2) * (3 * 4)",
      "(4 * (2 * 1)) * 3",
      "(2 * (4 / 1)) * 3",
      "4 * ((2 * 1) * 3)",
      "(2 + 4) * (1 + 3)",
      "(1 + (3 + 2)) * 4",
      "1 * ((2 * 4) * 3)",
      "4 * (1 + (2 + 3))",
      "((4 * 3) * 1) * 2",
      "1 * (2 * (4 * 3))",
      "3 / ((1 / 4) / 2)",
      "(4 * (3 * 2)) * 1",
      "3 * (1 * (4 * 2))",
      "(2 * 3) / (1 / 4)",
      "4 * (3 / (1 / 2))",
      "(3 * (1 * 2)) * 4",
      "4 * (2 * (1 * 3))",
      "(4 * 1) * (3 * 2)",
      "1 * (2 * (3 * 4))",
      "2 * (4 * (3 * 1))",
      "((2 / 1) * 3) * 4",
      "3 * ((4 / 1) * 2)",
      "(2 * 4) * (3 * 1)",
      "3 * ((2 * 4) * 1)",
      "4 * ((1 * 3) * 2)",
      "(1 * 3) * (4 * 2)",
      "(2 * 4) / (1 / 3)",
      "(4 * 1) * (2 * 3)",
      "((3 * 4) * 1) * 2",
      "(3 * (1 * 4)) * 2",
      "(1 * (4 * 2)) * 3",
      "1 * (4 * (2 * 3))",
      "(4 + 2) * (1 + 3)",
      "(2 * (3 / 1)) * 4",
      "(1 * 4) * (3 * 2)",
      "(3 * 2) / (1 / 4)",
      "((3 * 4) * 2) * 1",
      "4 * (1 + (3 + 2))",
      "3 * ((4 * 1) * 2)",
      "3 * (2 * (4 / 1))",
      "4 / ((1 / 2) / 3)",
      "4 * (1 * (3 * 2))",
      "(3 / (1 / 2)) * 4",
      "4 * ((3 * 2) * 1)",
      "(1 * 4) * (2 * 3)",
      "((2 * 3) * 4) * 1",
      "(3 * 4) * (2 * 1)",
      "4 * ((3 + 2) + 1)",
      "(3 * (4 / 1)) * 2",
      "((3 + 1) + 2) * 4",
      "((3 * 1) * 4) * 2",
      "((3 * 2) / 1) * 4",
      "(4 * 3) / (1 / 2)",
      "(4 * 2) / (1 / 3)",
      "4 * (3 + (1 + 2))",
      "(2 * (3 * 1)) * 4",
      "2 * (3 * (4 * 1))",
      "2 * ((3 * 4) * 1)",
      "(4 / (1 / 3)) * 2",
      "((4 * 2) * 3) / 1",
      "((2 * 4) * 3) / 1",
      "2 * ((4 * 3) * 1)",
      "((1 * 4) * 3) * 2",
      "((1 * 2) * 3) * 4",
      "2 / (1 / (4 * 3))",
      "2 * (1 * (4 * 3))",
      "2 * ((3 * 1) * 4)",
      "((4 * 3) * 2) / 1",
      "(4 * (1 * 2)) * 3",
      "1 * (4 * (3 * 2))",
      "(3 * (4 * 2)) * 1",
      "3 * ((1 * 4) * 2)",
      "((4 * 2) / 1) * 3",
      "4 * ((2 + 3) + 1)",
      "2 * (3 * (4 / 1))",
      "(3 * 2) * (4 * 1)",
      "4 * ((3 * 1) * 2)",
      "4 * ((1 + 2) + 3)",
      "((3 * 1) * 2) * 4",
      "(3 / 1) * (4 * 2)",
      "((4 * 3) / 1) * 2",
      "4 * (2 / (1 / 3))",
      "((1 + 3) + 2) * 4",
      "4 * (3 * (2 / 1))",
      "2 * (4 / (1 / 3))",
      "3 * ((2 / 1) * 4)",
      "(3 * (2 / 1)) * 4",
      "(3 * 2) * (1 * 4)",
      "4 * ((1 + 3) + 2)",
      "(2 * 1) * (3 * 4)",
      "(1 + 3) * (2 + 4)",
      "(2 * (1 * 3)) * 4",
      "3 * ((2 * 4) / 1)",
      "(2 * 4) * (3 / 1)",
      "2 * ((3 / 1) * 4)",
      "1 * ((4 * 2) * 3)",
      "3 * (4 * (2 * 1))",
      "(3 + 1) * (4 + 2)",
      "((3 * 2) * 1) * 4",
      "3 * ((4 * 2) / 1)",
      "(1 * (3 * 2)) * 4",
      "4 * (3 * (2 * 1))",
      "(2 * 3) * (1 * 4)",
      "(2 * 4) * (1 * 3)",
      "2 * (3 * (1 * 4))",
      "2 * ((4 / 1) * 3)",
      "(2 / 1) * (4 * 3)",
      "2 / ((1 / 3) / 4)",
      "(4 * (2 * 3)) * 1",
      "4 * (3 * (1 * 2))",
      "(4 * (3 * 2)) / 1",
      "(1 * (3 * 4)) * 2",
      "((4 / 1) * 2) * 3",
      "1 * ((4 * 3) * 2)",
      "3 / ((1 / 2) / 4)",
      "4 * ((2 + 1) + 3)",
      "(4 * (3 / 1)) * 2",
      "(3 * (4 * 2)) / 1",
      "(2 / (1 / 4)) * 3",
      "4 * ((1 * 2) * 3)",
      "(3 * 1) * (2 * 4)",
      "4 / (1 / (3 * 2))",
      "(4 * (1 * 3)) * 2",
      "(4 / (1 / 2)) * 3",
      "4 * (2 * (3 / 1))",
      "4 * (3 + (2 + 1))",
      "1 * (3 * (2 * 4))",
      "3 * (1 * (2 * 4))",
      "3 * (4 / (1 / 2))",
      "(4 * 3) * (2 * 1)",
      "4 * (2 + (1 + 3))",
      "4 * (1 * (2 * 3))",
      "((4 * 2) * 3) * 1",
      "3 * (2 * (4 * 1))",
      "(3 * 1) * (4 * 2)",
      "((2 * 1) * 3) * 4",
      "((3 * 2) * 4) * 1",
      "4 * (2 + (3 + 1))",
      "2 * ((1 * 3) * 4)",
      "(2 * (4 * 3)) * 1",
      "(3 + (1 + 2)) * 4",
      "(2 * (3 * 4)) * 1",
      "1 * ((3 * 2) * 4)",
      "((1 + 2) + 3) * 4",
      "((2 + 1) + 3) * 4",
      "((2 * 4) / 1) * 3",
      "1 * (3 * (4 * 2))",
      "(4 + 2) * (3 + 1)",
      "(3 * (2 * 1)) * 4",
      "(4 * (3 * 1)) * 2",
      "((1 * 3) * 4) * 2",
      "1 * ((3 * 4) * 2)",
      "2 * ((4 * 3) / 1)",
      "3 * ((2 * 1) * 4)",
      "(1 * (4 * 3)) * 2",
      "(3 * 4) * (1 * 2)",
      "((3 / 1) * 2) * 4",
      "2 * (4 * (1 * 3))",
      "((2 * 4) * 3) * 1",
      "(4 / 1) * (3 * 2)",
      "(4 * (2 / 1)) * 3",
      "(3 / 1) * (2 * 4)",
      "((2 * 3) / 1) * 4",
      "(4 * 3) * (1 * 2)",
      "(1 + (2 + 3)) * 4",
      "(4 / 1) * (2 * 3)",
      "3 * (4 * (1 * 2))",
      "((3 / 1) * 4) * 2",
      "(2 / (1 / 3)) * 4",
      "(3 * 4) / (1 / 2)",
      "(4 * (2 * 3)) / 1",
      "((4 * 1) * 3) * 2",
      "3 * ((1 * 2) * 4)",
      "((2 * 3) * 1) * 4",
      "(1 * (2 * 4)) * 3",
      "(2 * (4 * 3)) / 1",
      "3 * (2 * (1 * 4))",
      "(3 * (2 * 4)) * 1",
      "((1 * 3) * 2) * 4",
      "((3 * 4) / 1) * 2",
      "(2 + 4) * (3 + 1)",
      "(3 * 4) * (2 / 1)",
      "((2 * 4) * 1) * 3",
      "(1 * 3) * (2 * 4)",
      "(2 * (3 * 4)) / 1",
      "(3 * 2) * (4 / 1)",
      "((2 / 1) * 4) * 3",
      "3 * ((4 * 2) * 1)",
      "((3 * 4) * 2) / 1",
      "((4 * 2) * 1) * 3",
      "(2 * 1) * (4 * 3)",
      "2 * ((4 * 1) * 3)",
      "4 * ((2 * 3) / 1)",
      "4 * ((2 / 1) * 3)",
      "(4 * 3) * (2 / 1)"
    ]
  },
  "1 2 3 5": {
    "cards": "1 2 3 5",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(5 - 1) * (3 * 2)",
      "(3 + 5) * (1 + 2)",
      "3 * ((1 + 5) + 2)",
      "((3 + 2) * 5) - 1",
      "(1 + (5 + 2)) * 3",
      "(2 + (1 + 5)) * 3",
      "3 * ((5 + 2) + 1)",
      "((5 - 1) * 2) * 3",
      "((2 + 3) * 5) - 1",
      "(2 * 3) * (5 - 1)",
      "3 * ((1 + 2) + 5)",
      "3 * ((2 + 1) + 5)",
      "3 * (2 * (5 - 1))",
      "((5 + 2) + 1) * 3",
      "(1 + 2) * (5 + 3)",
      "((1 + 5) + 2) * 3",
      "3 * (2 + (1 + 5))",
      "3 * ((2 + 5) + 1)",
      "3 * ((5 + 1) + 2)",
      "(1 + 2) * (3 + 5)",
      "(5 + 3) * (2 + 1)",
      "(5 + (1 + 2)) * 3",
      "(5 * (3 + 2)) - 1",
      "3 * (5 + (1 + 2))",
      "((5 + 1) + 2) * 3",
      "((2 + 5) + 1) * 3",
      "(5 + 3) * (1 + 2)",
      "3 * (1 + (2 + 5))",
      "(5 + (2 + 1)) * 3",
      "((5 - 1) * 3) * 2",
      "2 * ((5 - 1) * 3)",
      "(3 * 2) * (5 - 1)",
      "(2 + 1) * (5 + 3)",
      "(3 * (5 - 1)) * 2",
      "(2 + (5 + 1)) * 3",
      "(5 * (2 + 3)) - 1",
      "((2 + 1) + 5) * 3",
      "3 * (1 + (5 + 2))",
      "3 * (5 + (2 + 1))",
      "(2 + 1) * (3 + 5)",
      "(1 + (2 + 5)) * 3",
      "((1 + 2) + 5) * 3",
      "3 * (2 + (5 + 1))",
      "2 * (3 * (5 - 1))",
      "3 * ((5 - 1) * 2)",
      "(5 - 1) * (2 * 3)",
      "(2 * (5 - 1)) * 3",
      "(3 + 5) * (2 + 1)"
    ]
  },
  "1 2 3 6": {
    "cards": "1 2 3 6",
    "has_solution": "Y",
    "num_solutions": 92,
    "solutions": [
      "3 * ((6 / 1) + 2)",
      "(3 * (2 + 6)) * 1",
      "(2 * (3 - 1)) * 6",
      "3 * ((6 + 2) * 1)",
      "((2 + 6) * 1) * 3",
      "3 * ((2 + 6) / 1)",
      "((2 * 1) + 6) * 3",
      "((2 + 3) - 1) * 6",
      "(6 + 2) * (3 * 1)",
      "3 / (1 / (6 + 2))",
      "1 * (3 * (6 + 2))",
      "2 * ((3 - 1) * 6)",
      "((3 - 1) + 2) * 6",
      "(3 * (2 + 6)) / 1",
      "(1 * (6 + 2)) * 3",
      "3 * (2 + (6 * 1))",
      "6 * (3 - (1 - 2))",
      "(2 + (3 - 1)) * 6",
      "((2 + 6) * 3) * 1",
      "(1 * 3) * (2 + 6)",
      "(6 + (1 * 2)) * 3",
      "((3 - 1) * 2) * 6",
      "(3 * 1) * (2 + 6)",
      "(2 - (1 - 3)) * 6",
      "(3 * (6 + 2)) / 1",
      "3 / (1 / (2 + 6))",
      "3 * ((2 * 1) + 6)",
      "(6 + 2) * (3 / 1)",
      "((1 * 2) + 6) * 3",
      "((2 - 1) + 3) * 6",
      "(3 * 1) * (6 + 2)",
      "6 * (2 * (3 - 1))",
      "3 * (2 + (6 / 1))",
      "(6 + 2) / (1 / 3)",
      "6 * ((2 + 3) - 1)",
      "3 * (2 + (1 * 6))",
      "6 * ((3 - 1) * 2)",
      "(3 / 1) * (6 + 2)",
      "6 * ((3 - 1) + 2)",
      "(1 * 3) * (6 + 2)",
      "(2 + (1 * 6)) * 3",
      "((6 + 2) * 3) * 1",
      "3 * ((6 + 2) / 1)",
      "3 * ((2 + 6) * 1)",
      "((1 * 6) + 2) * 3",
      "(3 + (2 - 1)) * 6",
      "6 * ((2 - 1) + 3)",
      "(2 + (6 / 1)) * 3",
      "1 * ((6 + 2) * 3)",
      "3 * ((2 / 1) + 6)",
      "((6 / 1) + 2) * 3",
      "((6 + 2) * 3) / 1",
      "((6 + 2) * 1) * 3",
      "((2 / 1) + 6) * 3",
      "3 * ((6 * 1) + 2)",
      "(3 - 1) * (6 * 2)",
      "((6 + 2) / 1) * 3",
      "6 * (2 - (1 - 3))",
      "3 * ((1 * 6) + 2)",
      "3 * (1 * (6 + 2))",
      "3 * (6 + (2 / 1))",
      "(2 + 6) / (1 / 3)",
      "(3 - 1) * (2 * 6)",
      "3 * (6 + (2 * 1))",
      "(6 + (2 * 1)) * 3",
      "((3 - 1) * 6) * 2",
      "3 * ((1 * 2) + 6)",
      "((3 + 2) - 1) * 6",
      "(2 + 6) * (3 * 1)",
      "((2 + 6) / 1) * 3",
      "((6 * 1) + 2) * 3",
      "(3 * (6 + 2)) * 1",
      "(2 + (6 * 1)) * 3",
      "(1 * (2 + 6)) * 3",
      "(3 - (1 - 2)) * 6",
      "(2 + 6) * (1 * 3)",
      "3 * (1 * (2 + 6))",
      "((2 + 6) * 3) / 1",
      "6 * (3 + (2 - 1))",
      "(2 + 6) * (3 / 1)",
      "(6 + (2 / 1)) * 3",
      "(6 + 2) * (1 * 3)",
      "1 * ((2 + 6) * 3)",
      "3 * (6 + (1 * 2))",
      "(3 / 1) * (2 + 6)",
      "6 * (2 + (3 - 1))",
      "(2 * 6) * (3 - 1)",
      "1 * (3 * (2 + 6))",
      "2 * (6 * (3 - 1))",
      "(6 * (3 - 1)) * 2",
      "(6 * 2) * (3 - 1)",
      "6 * ((3 + 2) - 1)"
    ]
  },
  "1 2 3 7": {
    "cards": "1 2 3 7",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(2 + (3 * 7)) + 1",
      "((3 * 7) + 2) + 1",
      "(1 + 2) + (7 * 3)",
      "1 + ((3 * 7) + 2)",
      "(7 * (2 + 1)) + 3",
      "((3 * 7) + 1) + 2",
      "3 + (7 * (2 + 1))",
      "1 + (2 + (7 * 3))",
      "3 * ((2 - 1) + 7)",
      "3 * (2 + (7 - 1))",
      "((7 - 1) + 2) * 3",
      "3 * (7 + (2 - 1))",
      "(7 * (1 + 2)) + 3",
      "1 + (2 + (3 * 7))",
      "3 + (7 * (1 + 2))",
      "(7 * 3) + (1 + 2)",
      "2 + ((7 * 3) + 1)",
      "3 * ((7 - 1) + 2)",
      "(2 - (1 - 7)) * 3",
      "2 + (1 + (3 * 7))",
      "(7 * 3) + (2 + 1)",
      "(2 + (7 - 1)) * 3",
      "2 + (1 + (7 * 3))",
      "3 * (2 - (1 - 7))",
      "(2 + (7 * 3)) + 1",
      "3 * ((2 + 7) - 1)",
      "((2 - 1) + 7) * 3",
      "3 + ((1 + 2) * 7)",
      "(7 - (1 - 2)) * 3",
      "(3 * 7) + (2 + 1)",
      "(1 + 2) + (3 * 7)",
      "((7 * 3) + 1) + 2",
      "(2 + 1) + (7 * 3)",
      "2 + ((3 * 7) + 1)",
      "((7 * 3) + 2) + 1",
      "3 * ((7 + 2) - 1)",
      "((2 + 7) - 1) * 3",
      "(7 + (2 - 1)) * 3",
      "((7 + 2) - 1) * 3",
      "((1 + 2) * 7) + 3",
      "(1 + (7 * 3)) + 2",
      "3 + ((2 + 1) * 7)",
      "(2 + 1) + (3 * 7)",
      "3 * (7 - (1 - 2))",
      "1 + ((7 * 3) + 2)",
      "(3 * 7) + (1 + 2)",
      "((2 + 1) * 7) + 3",
      "(1 + (3 * 7)) + 2"
    ]
  },
  "1 2 3 8": {
    "cards": "1 2 3 8",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "((1 + 8) + 3) * 2",
      "((3 + 8) + 1) * 2",
      "2 * (3 + (8 + 1))",
      "(2 - 1) * (3 * 8)",
      "(3 + 1) * (8 - 2)",
      "8 * ((2 - 1) * 3)",
      "2 * ((3 + 8) + 1)",
      "((8 + 1) + 3) * 2",
      "8 * (3 * (2 - 1))",
      "((2 - 1) * 8) * 3",
      "(8 * 3) / (2 - 1)",
      "(3 + (8 + 1)) * 2",
      "2 * (8 + (1 + 3))",
      "8 / ((2 - 1) / 3)",
      "(3 / (2 - 1)) * 8",
      "((8 + 3) + 1) * 2",
      "(3 * (2 - 1)) * 8",
      "(8 / (2 - 1)) * 3",
      "(3 + (1 + 8)) * 2",
      "(1 + (3 + 8)) * 2",
      "2 * (8 + (3 + 1))",
      "8 / (1 - (2 / 3))",
      "(8 - 2) * (1 + 3)",
      "(8 * 3) * (2 - 1)",
      "((1 + 3) + 8) * 2",
      "((3 + 1) + 8) * 2",
      "2 * ((8 + 3) + 1)",
      "3 * (8 * (2 - 1))",
      "(3 * 8) / (2 - 1)",
      "3 * (8 / (2 - 1))",
      "(3 * 8) * (2 - 1)",
      "3 / ((2 - 1) / 8)",
      "3 * ((2 - 1) * 8)",
      "(2 - 1) * (8 * 3)",
      "2 * ((8 + 1) + 3)",
      "(8 - 2) * (3 + 1)",
      "2 * (1 + (8 + 3))",
      "(8 * (2 - 1)) * 3",
      "8 * (3 / (2 - 1))",
      "(8 + (3 + 1)) * 2",
      "(1 + (8 + 3)) * 2",
      "2 * ((1 + 3) + 8)",
      "2 * (3 + (1 + 8))",
      "(1 + 3) * (8 - 2)",
      "((2 - 1) * 3) * 8",
      "2 * ((3 + 1) + 8)",
      "(8 + (1 + 3)) * 2",
      "2 * (1 + (3 + 8))",
      "2 * ((1 + 8) + 3)"
    ]
  },
  "1 2 3 9": {
    "cards": "1 2 3 9",
    "has_solution": "Y",
    "num_solutions": 92,
    "solutions": [
      "(3 + (9 / 1)) * 2",
      "(9 + (1 * 3)) * 2",
      "3 * ((9 - 2) + 1)",
      "2 * ((1 * 3) + 9)",
      "(3 + 9) * (2 * 1)",
      "(9 + (1 - 2)) * 3",
      "(2 / 1) * (9 + 3)",
      "2 / (1 / (3 + 9))",
      "2 * (3 + (9 * 1))",
      "(2 * 1) * (3 + 9)",
      "((3 + 9) * 1) * 2",
      "2 * (9 + (1 * 3))",
      "((9 * 3) - 1) - 2",
      "(2 * (3 + 9)) / 1",
      "((3 + 9) / 1) * 2",
      "((1 + 2) * 9) - 3",
      "((3 + 9) * 2) / 1",
      "2 * ((9 + 3) / 1)",
      "(9 * 3) - (2 + 1)",
      "1 * ((3 + 9) * 2)",
      "2 * ((9 / 1) + 3)",
      "((3 * 9) - 2) - 1",
      "(9 + 3) / (1 / 2)",
      "2 * (1 * (3 + 9))",
      "(1 * 2) * (3 + 9)",
      "2 * ((3 * 1) + 9)",
      "((9 * 3) - 2) - 1",
      "2 * ((3 + 9) * 1)",
      "(9 * (2 + 1)) - 3",
      "3 * (9 - (2 - 1))",
      "((9 - 2) + 1) * 3",
      "2 * ((1 * 9) + 3)",
      "(9 + 3) * (2 / 1)",
      "(1 - (2 - 9)) * 3",
      "2 * (9 + (3 * 1))",
      "1 * (2 * (9 + 3))",
      "((9 * 1) + 3) * 2",
      "(2 / 1) * (3 + 9)",
      "(9 + (3 * 1)) * 2",
      "3 * ((1 + 9) - 2)",
      "((9 + 3) * 2) / 1",
      "3 * (1 - (2 - 9))",
      "((3 * 1) + 9) * 2",
      "((9 + 3) * 1) * 2",
      "((1 - 2) + 9) * 3",
      "3 * ((9 + 1) - 2)",
      "2 * ((3 + 9) / 1)",
      "((1 * 9) + 3) * 2",
      "(2 * (9 + 3)) * 1",
      "2 * (3 + (1 * 9))",
      "((1 + 9) - 2) * 3",
      "(3 + (1 * 9)) * 2",
      "((3 / 1) + 9) * 2",
      "(3 + 9) * (2 / 1)",
      "3 * (1 + (9 - 2))",
      "(1 * 2) * (9 + 3)",
      "(3 * 9) - (2 + 1)",
      "1 * ((9 + 3) * 2)",
      "2 / (1 / (9 + 3))",
      "2 * ((3 / 1) + 9)",
      "((9 + 3) / 1) * 2",
      "((9 + 1) - 2) * 3",
      "1 * (2 * (3 + 9))",
      "(3 * 9) - (1 + 2)",
      "(3 + (9 * 1)) * 2",
      "((3 + 9) * 2) * 1",
      "((1 * 3) + 9) * 2",
      "2 * (3 + (9 / 1))",
      "(9 + 3) * (2 * 1)",
      "(2 * 1) * (9 + 3)",
      "2 * (9 + (3 / 1))",
      "3 * ((1 - 2) + 9)",
      "(9 * (1 + 2)) - 3",
      "(1 + (9 - 2)) * 3",
      "(2 * (9 + 3)) / 1",
      "(9 + 3) * (1 * 2)",
      "(1 * (9 + 3)) * 2",
      "(9 - (2 - 1)) * 3",
      "(9 + (3 / 1)) * 2",
      "(2 * (3 + 9)) * 1",
      "2 * ((9 + 3) * 1)",
      "2 * ((9 * 1) + 3)",
      "((9 / 1) + 3) * 2",
      "((9 + 3) * 2) * 1",
      "((3 * 9) - 1) - 2",
      "(3 + 9) / (1 / 2)",
      "2 * (1 * (9 + 3))",
      "(9 * 3) - (1 + 2)",
      "3 * (9 + (1 - 2))",
      "(1 * (3 + 9)) * 2",
      "((2 + 1) * 9) - 3",
      "(3 + 9) * (1 * 2)"
    ]
  },
  "1 2 3 10": {
    "cards": "1 2 3 10",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "((2 * 10) + 1) + 3",
      "(3 * (10 - 2)) * 1",
      "(10 - 2) * (1 * 3)",
      "(2 + 10) * (3 - 1)",
      "3 + (1 + (2 * 10))",
      "(1 + (2 * 10)) + 3",
      "(3 + (2 * 10)) + 1",
      "3 / (1 / (10 - 2))",
      "(10 - (2 * 1)) * 3",
      "((10 * 2) + 3) + 1",
      "(1 * (10 - 2)) * 3",
      "(10 + (3 - 1)) * 2",
      "((3 - 1) + 10) * 2",
      "2 * (10 + (3 - 1))",
      "3 * (1 * (10 - 2))",
      "(3 * (10 - 2)) / 1",
      "(10 * 2) + (1 + 3)",
      "((10 - 2) * 3) * 1",
      "(3 - (1 - 10)) * 2",
      "3 + ((10 * 2) + 1)",
      "2 * ((10 + 3) - 1)",
      "2 * (3 + (10 - 1))",
      "3 * ((10 * 1) - 2)",
      "1 + ((2 * 10) + 3)",
      "(3 + 1) + (10 * 2)",
      "2 * ((3 - 1) + 10)",
      "((10 - 2) * 3) / 1",
      "(10 * 2) + (3 + 1)",
      "(3 + (10 * 2)) + 1",
      "2 * ((3 + 10) - 1)",
      "1 + (3 + (10 * 2))",
      "(10 + 2) * (3 - 1)",
      "((10 * 1) - 2) * 3",
      "3 * ((10 - 2) / 1)",
      "(10 - (1 - 3)) * 2",
      "2 * (3 - (1 - 10))",
      "(1 + (10 * 2)) + 3",
      "3 * (10 - (2 * 1))",
      "(10 - (2 / 1)) * 3",
      "3 * (10 - (2 / 1))",
      "(1 * 3) * (10 - 2)",
      "(3 * 1) * (10 - 2)",
      "(3 + 1) + (2 * 10)",
      "3 * ((1 * 10) - 2)",
      "2 * ((10 - 1) + 3)",
      "((10 - 2) * 1) * 3",
      "3 * ((10 / 1) - 2)",
      "3 * (10 - (1 * 2))",
      "1 + (3 + (2 * 10))",
      "(10 - 2) / (1 / 3)",
      "(1 + 3) + (10 * 2)",
      "(2 * 10) + (3 + 1)",
      "(1 + 3) + (2 * 10)",
      "((10 * 2) + 1) + 3",
      "(10 - (1 * 2)) * 3",
      "1 * ((10 - 2) * 3)",
      "(3 - 1) * (2 + 10)",
      "((2 * 10) + 3) + 1",
      "((10 - 1) + 3) * 2",
      "(10 - 2) * (3 * 1)",
      "((10 / 1) - 2) * 3",
      "3 + (1 + (10 * 2))",
      "1 + ((10 * 2) + 3)",
      "(3 + (10 - 1)) * 2",
      "1 * (3 * (10 - 2))",
      "(10 - 2) * (3 / 1)",
      "((3 + 10) - 1) * 2",
      "((10 + 3) - 1) * 2",
      "3 + ((2 * 10) + 1)",
      "((10 - 2) / 1) * 3",
      "((1 * 10) - 2) * 3",
      "(3 - 1) * (10 + 2)",
      "3 * ((10 - 2) * 1)",
      "(2 * 10) + (1 + 3)",
      "(3 / 1) * (10 - 2)",
      "2 * (10 - (1 - 3))"
    ]
  },
  "1 2 3 11": {
    "cards": "1 2 3 11",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "3 * ((11 - 1) - 2)",
      "(1 + 2) * (11 - 3)",
      "3 * (11 - (1 + 2))",
      "(3 - 1) + (2 * 11)",
      "3 * ((11 - 2) - 1)",
      "((11 - 2) - 1) * 3",
      "3 + ((11 * 2) - 1)",
      "3 * (11 - (2 + 1))",
      "(11 - 3) * (1 + 2)",
      "(11 * 2) + (3 - 1)",
      "(2 + 1) * (11 - 3)",
      "((3 - 1) * 11) + 2",
      "((11 * 2) - 1) + 3",
      "((2 * 11) + 3) - 1",
      "(11 - 3) * (2 + 1)",
      "((2 * 11) - 1) + 3",
      "(2 * 11) + (3 - 1)",
      "((11 - 1) - 2) * 3",
      "3 - (1 - (11 * 2))",
      "2 + (11 * (3 - 1))",
      "(3 - 1) + (11 * 2)",
      "((11 * 2) + 3) - 1",
      "(11 * 2) - (1 - 3)",
      "(3 + (2 * 11)) - 1",
      "(3 + (11 * 2)) - 1",
      "(11 * (3 - 1)) + 2",
      "3 + ((2 * 11) - 1)",
      "(11 - (1 + 2)) * 3",
      "3 - (1 - (2 * 11))",
      "2 + ((3 - 1) * 11)",
      "(2 * 11) - (1 - 3)",
      "2 - (11 * (1 - 3))",
      "2 - ((1 - 3) * 11)",
      "(11 - (2 + 1)) * 3"
    ]
  },
  "1 2 3 12": {
    "cards": "1 2 3 12",
    "has_solution": "Y",
    "num_solutions": 33,
    "solutions": [
      "(1 + (3 - 2)) * 12",
      "12 / (2 / (1 + 3))",
      "(3 + (1 - 2)) * 12",
      "12 / ((3 / 2) - 1)",
      "(3 + 1) * (12 / 2)",
      "((3 - 2) + 1) * 12",
      "((1 + 3) / 2) * 12",
      "((3 + 1) * 12) / 2",
      "(1 - (2 - 3)) * 12",
      "(12 * (1 + 3)) / 2",
      "(12 * (3 + 1)) / 2",
      "((3 + 1) - 2) * 12",
      "(12 / 2) * (1 + 3)",
      "((1 + 3) - 2) * 12",
      "12 * ((1 + 3) - 2)",
      "(1 + 3) / (2 / 12)",
      "(3 + 1) / (2 / 12)",
      "((1 - 2) + 3) * 12",
      "12 * ((1 + 3) / 2)",
      "(1 + 3) * (12 / 2)",
      "(12 / 2) * (3 + 1)",
      "12 * ((3 + 1) - 2)",
      "12 * ((3 - 2) + 1)",
      "12 * (1 - (2 - 3))",
      "12 / (2 / (3 + 1))",
      "((3 + 1) / 2) * 12",
      "12 * ((1 - 2) + 3)",
      "12 * (3 - (2 - 1))",
      "((1 + 3) * 12) / 2",
      "(3 - (2 - 1)) * 12",
      "12 * ((3 + 1) / 2)",
      "12 * (1 + (3 - 2))",
      "12 * (3 + (1 - 2))"
    ]
  },
  "1 2 3 13": {
    "cards": "1 2 3 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "1 + ((13 * 2) - 3)",
      "1 - (3 - (13 * 2))",
      "(1 - 3) + (2 * 13)",
      "(13 * 2) + (1 - 3)",
      "(1 + (13 * 2)) - 3",
      "1 - (3 - (2 * 13))",
      "(13 * 2) - (3 - 1)",
      "(13 * (3 - 1)) - 2",
      "((3 - 1) * 13) - 2",
      "(1 + (2 * 13)) - 3",
      "((13 * 2) + 1) - 3",
      "(2 * 13) + (1 - 3)",
      "(1 - 3) + (13 * 2)",
      "((2 * 13) - 3) + 1",
      "((2 * 13) + 1) - 3",
      "((13 * 2) - 3) + 1",
      "(2 * 13) - (3 - 1)",
      "1 + ((2 * 13) - 3)"
    ]
  },
  "1 2 4 4": {
    "cards": "1 2 4 4",
    "has_solution": "Y",
    "num_solutions": 80,
    "solutions": [
      "(4 * (4 + 2)) * 1",
      "(1 * 4) * (4 + 2)",
      "(4 * 1) * (2 + 4)",
      "4 * ((4 / 1) + 2)",
      "((4 / 1) + 2) * 4",
      "(4 - 1) * (4 * 2)",
      "(2 + 4) * (4 / 1)",
      "4 * ((4 - 1) * 2)",
      "((2 + 4) * 1) * 4",
      "4 * ((4 * 1) + 2)",
      "(4 + (1 * 2)) * 4",
      "1 * (4 * (2 + 4))",
      "((4 + 2) * 1) * 4",
      "4 * (4 + (2 * 1))",
      "(1 * (2 + 4)) * 4",
      "4 * (2 * (4 - 1))",
      "(4 * 1) * (4 + 2)",
      "4 * ((2 + 4) / 1)",
      "4 * (1 * (2 + 4))",
      "(2 + (4 / 1)) * 4",
      "(4 / 1) * (2 + 4)",
      "4 / (1 / (4 + 2))",
      "((4 - 1) * 4) * 2",
      "4 * ((2 + 4) * 1)",
      "(2 * (4 - 1)) * 4",
      "(4 - 1) * (2 * 4)",
      "2 * ((4 - 1) * 4)",
      "((2 + 4) * 4) * 1",
      "(2 + 4) / (1 / 4)",
      "2 * (4 * (4 - 1))",
      "((4 * 1) + 2) * 4",
      "4 * (4 + (2 / 1))",
      "4 * (2 + (1 * 4))",
      "(4 * (2 + 4)) / 1",
      "((2 + 4) * 4) / 1",
      "1 * (4 * (4 + 2))",
      "(4 + 4) * (1 + 2)",
      "(4 + 2) * (4 * 1)",
      "((1 * 2) + 4) * 4",
      "(4 + (2 * 1)) * 4",
      "(4 * (4 + 2)) / 1",
      "(4 * (4 - 1)) * 2",
      "(4 + 2) / (1 / 4)",
      "((4 + 2) * 4) * 1",
      "4 * (4 + (1 * 2))",
      "(2 * 4) * (4 - 1)",
      "((2 * 1) + 4) * 4",
      "4 * (2 + (4 * 1))",
      "4 * (1 * (4 + 2))",
      "4 / (1 / (2 + 4))",
      "(4 / 1) * (4 + 2)",
      "((1 * 4) + 2) * 4",
      "(4 + 2) * (1 * 4)",
      "4 * ((2 * 1) + 4)",
      "4 * ((4 + 2) * 1)",
      "((4 + 2) * 4) / 1",
      "(4 * 2) * (4 - 1)",
      "((4 + 2) / 1) * 4",
      "1 * ((2 + 4) * 4)",
      "4 * ((2 / 1) + 4)",
      "(2 + (1 * 4)) * 4",
      "4 * ((4 + 2) / 1)",
      "((4 - 1) * 2) * 4",
      "(4 + 4) * (2 + 1)",
      "((2 + 4) / 1) * 4",
      "4 * ((1 * 2) + 4)",
      "(2 + (4 * 1)) * 4",
      "4 * ((1 * 4) + 2)",
      "(2 + 4) * (4 * 1)",
      "4 * (2 + (4 / 1))",
      "(2 + 1) * (4 + 4)",
      "(1 * 4) * (2 + 4)",
      "((2 / 1) + 4) * 4",
      "(4 + (2 / 1)) * 4",
      "(1 * (4 + 2)) * 4",
      "1 * ((4 + 2) * 4)",
      "(2 + 4) * (1 * 4)",
      "(4 + 2) * (4 / 1)",
      "(1 + 2) * (4 + 4)",
      "(4 * (2 + 4)) * 1"
    ]
  },
  "1 2 4 5": {
    "cards": "1 2 4 5",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "4 * ((5 - 1) + 2)",
      "(5 + (2 - 1)) * 4",
      "(4 + 2) * (5 - 1)",
      "4 * (5 + (2 - 1))",
      "((2 + 5) - 1) * 4",
      "(2 + 4) * (5 - 1)",
      "(5 - 1) * (4 + 2)",
      "(5 - (1 - 2)) * 4",
      "(5 - 1) * (2 + 4)",
      "4 * ((2 + 5) - 1)",
      "4 * ((2 - 1) + 5)",
      "4 * ((5 + 2) - 1)",
      "(2 - (1 - 5)) * 4",
      "4 * (2 - (1 - 5))",
      "((2 - 1) + 5) * 4",
      "4 * (2 + (5 - 1))",
      "4 * (5 - (1 - 2))",
      "(2 + (5 - 1)) * 4",
      "((5 - 1) + 2) * 4",
      "((5 + 2) - 1) * 4"
    ]
  },
  "1 2 4 6": {
    "cards": "1 2 4 6",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(4 * 6) * (2 - 1)",
      "6 / ((2 - 1) / 4)",
      "(6 * 4) / (2 - 1)",
      "(4 * (2 - 1)) * 6",
      "4 / ((2 - 1) / 6)",
      "6 * ((2 - 1) * 4)",
      "4 * ((2 - 1) * 6)",
      "(4 * 6) / (2 - 1)",
      "((2 - 1) * 4) * 6",
      "6 * (4 * (2 - 1))",
      "6 * (4 / (2 - 1))",
      "(6 * (2 - 1)) * 4",
      "(4 / (2 - 1)) * 6",
      "((2 - 1) * 6) * 4",
      "4 * (6 * (2 - 1))",
      "(2 + 6) * (4 - 1)",
      "(6 + 2) * (4 - 1)",
      "(4 - 1) * (2 + 6)",
      "(2 - 1) * (6 * 4)",
      "(6 * 4) * (2 - 1)",
      "(2 - 1) * (4 * 6)",
      "4 * (6 / (2 - 1))",
      "(6 / (2 - 1)) * 4",
      "(4 - 1) * (6 + 2)"
    ]
  },
  "1 2 4 7": {
    "cards": "1 2 4 7",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "4 * (1 - (2 - 7))",
      "((7 + 4) + 1) * 2",
      "(1 + (7 - 2)) * 4",
      "2 * (7 + (1 + 4))",
      "2 * ((1 + 4) + 7)",
      "(1 + (7 + 4)) * 2",
      "((1 + 4) + 7) * 2",
      "((7 + 1) + 4) * 2",
      "4 * (1 + (7 - 2))",
      "2 * (4 + (1 + 7))",
      "(7 + (1 + 4)) * 2",
      "2 * ((1 + 7) + 4)",
      "(4 + (7 + 1)) * 2",
      "(7 + (1 - 2)) * 4",
      "4 * (7 + (1 - 2))",
      "((7 + 1) - 2) * 4",
      "((4 + 7) + 1) * 2",
      "2 * (1 + (7 + 4))",
      "((1 - 2) + 7) * 4",
      "2 * ((4 + 1) + 7)",
      "((4 + 1) + 7) * 2",
      "((1 + 7) - 2) * 4",
      "((7 - 2) + 1) * 4",
      "4 * (7 - (2 - 1))",
      "2 * (4 + (7 + 1))",
      "2 * (7 + (4 + 1))",
      "(1 - (2 - 7)) * 4",
      "2 * ((7 + 4) + 1)",
      "((1 + 7) + 4) * 2",
      "4 * ((7 + 1) - 2)",
      "(7 - (2 - 1)) * 4",
      "2 * ((4 + 7) + 1)",
      "4 * ((7 - 2) + 1)",
      "(7 + (4 + 1)) * 2",
      "2 * (1 + (4 + 7))",
      "4 * ((1 - 2) + 7)",
      "2 * ((7 + 1) + 4)",
      "(1 + (4 + 7)) * 2",
      "4 * ((1 + 7) - 2)",
      "(4 + (1 + 7)) * 2"
    ]
  },
  "1 2 4 8": {
    "cards": "1 2 4 8",
    "has_solution": "Y",
    "num_solutions": 116,
    "solutions": [
      "8 * (1 - (2 - 4))",
      "(1 * (8 - 2)) * 4",
      "(2 / 1) * (8 + 4)",
      "((8 / 1) + 4) * 2",
      "4 * (8 - (2 / 1))",
      "((1 * 4) + 8) * 2",
      "2 * (4 + (1 * 8))",
      "(4 + (1 - 2)) * 8",
      "((8 + 4) * 1) * 2",
      "(4 + 8) / (1 / 2)",
      "((8 - 2) * 1) * 4",
      "(4 + 8) * (2 * 1)",
      "(8 + 4) * (2 / 1)",
      "((8 - 2) * 4) * 1",
      "((4 / 2) + 1) * 8",
      "(8 - 2) * (4 / 1)",
      "4 * ((8 / 1) - 2)",
      "2 * (4 + (8 * 1))",
      "(1 * (8 + 4)) * 2",
      "((1 * 8) + 4) * 2",
      "(4 * 1) * (8 - 2)",
      "4 * (8 - (2 * 1))",
      "(8 - (2 / 1)) * 4",
      "2 * ((8 + 4) * 1)",
      "((4 + 8) * 1) * 2",
      "((1 + 4) - 2) * 8",
      "((8 + 4) / 1) * 2",
      "((8 - 2) * 4) / 1",
      "2 * ((4 + 8) / 1)",
      "4 * ((1 * 8) - 2)",
      "((1 - 2) + 4) * 8",
      "(1 + (4 / 2)) * 8",
      "2 * ((1 * 4) + 8)",
      "(8 - 2) * (1 * 4)",
      "(2 * 1) * (8 + 4)",
      "(4 + 8) * (1 * 2)",
      "2 * ((8 * 1) + 4)",
      "(8 + 4) * (2 * 1)",
      "(4 * (8 - 2)) * 1",
      "2 * (1 * (8 + 4))",
      "8 * ((1 - 2) + 4)",
      "1 * ((4 + 8) * 2)",
      "4 * (1 * (8 - 2))",
      "8 * (4 - (2 - 1))",
      "(4 + 8) * (2 / 1)",
      "4 * (8 - (1 * 2))",
      "(4 + (1 * 8)) * 2",
      "((8 * 1) - 2) * 4",
      "((1 * 8) - 2) * 4",
      "((8 + 4) * 2) / 1",
      "2 * ((4 + 8) * 1)",
      "1 * (2 * (4 + 8))",
      "((4 + 8) / 1) * 2",
      "2 * (8 + (1 * 4))",
      "(8 + (4 * 1)) * 2",
      "((8 / 1) - 2) * 4",
      "(8 - (1 * 2)) * 4",
      "(8 - 2) / (1 / 4)",
      "((8 * 1) + 4) * 2",
      "(2 / 1) * (4 + 8)",
      "8 * ((4 / 2) + 1)",
      "((4 * 1) + 8) * 2",
      "1 * ((8 + 4) * 2)",
      "(2 * (8 + 4)) * 1",
      "4 * ((8 - 2) / 1)",
      "(4 + (8 * 1)) * 2",
      "((8 - 2) / 1) * 4",
      "2 / (1 / (4 + 8))",
      "((4 + 8) * 2) * 1",
      "2 * (8 + (4 * 1))",
      "(4 * (8 - 2)) / 1",
      "(8 + (4 / 1)) * 2",
      "8 * ((4 - 2) + 1)",
      "2 * (4 + (8 / 1))",
      "(1 * 4) * (8 - 2)",
      "8 * (1 + (4 - 2))",
      "(4 + (8 / 1)) * 2",
      "2 * (1 * (4 + 8))",
      "4 * ((8 - 2) * 1)",
      "(4 - (2 - 1)) * 8",
      "2 * ((4 * 1) + 8)",
      "(2 * (8 + 4)) / 1",
      "2 * ((1 * 8) + 4)",
      "8 * ((4 + 1) - 2)",
      "8 * (4 + (1 - 2))",
      "2 * ((8 + 4) / 1)",
      "4 * ((8 * 1) - 2)",
      "(2 * (4 + 8)) * 1",
      "8 * ((1 + 4) - 2)",
      "((4 + 8) * 2) / 1",
      "8 * (1 + (4 / 2))",
      "((4 / 1) + 8) * 2",
      "((4 + 1) - 2) * 8",
      "2 * (8 + (4 / 1))",
      "2 / (1 / (8 + 4))",
      "(1 + (4 - 2)) * 8",
      "(8 + (1 * 4)) * 2",
      "(1 - (2 - 4)) * 8",
      "2 * ((4 / 1) + 8)",
      "(4 / 1) * (8 - 2)",
      "1 * ((8 - 2) * 4)",
      "((8 + 4) * 2) * 1",
      "(8 - 2) * (4 * 1)",
      "1 * (4 * (8 - 2))",
      "(1 * 2) * (8 + 4)",
      "(8 + 4) / (1 / 2)",
      "2 * ((8 / 1) + 4)",
      "4 / (1 / (8 - 2))",
      "(2 * (4 + 8)) / 1",
      "(8 + 4) * (1 * 2)",
      "(2 * 1) * (4 + 8)",
      "(8 - (2 * 1)) * 4",
      "(1 * 2) * (4 + 8)",
      "((4 - 2) + 1) * 8",
      "(1 * (4 + 8)) * 2",
      "1 * (2 * (8 + 4))"
    ]
  },
  "1 2 4 9": {
    "cards": "1 2 4 9",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "4 * (9 - (1 + 2))",
      "2 * ((4 + 9) - 1)",
      "4 + ((9 + 1) * 2)",
      "((4 + 9) - 1) * 2",
      "(9 - (2 + 1)) * 4",
      "((9 - 2) - 1) * 4",
      "(4 + (9 - 1)) * 2",
      "(9 - (1 + 2)) * 4",
      "(4 - (1 - 9)) * 2",
      "2 * (9 + (4 - 1))",
      "((4 - 1) + 9) * 2",
      "(9 + (4 - 1)) * 2",
      "2 * (4 - (1 - 9))",
      "4 + (2 * (9 + 1))",
      "((9 - 1) + 4) * 2",
      "(9 - (1 - 4)) * 2",
      "((9 - 1) - 2) * 4",
      "2 * (9 - (1 - 4))",
      "2 * ((9 - 1) + 4)",
      "((9 + 1) * 2) + 4",
      "4 * ((9 - 2) - 1)",
      "4 * ((9 - 1) - 2)",
      "4 * (9 - (2 + 1))",
      "2 * ((9 + 4) - 1)",
      "4 + (2 * (1 + 9))",
      "2 * (4 + (9 - 1))",
      "(2 * (1 + 9)) + 4",
      "(2 * (9 + 1)) + 4",
      "((1 + 9) * 2) + 4",
      "((9 + 4) - 1) * 2",
      "4 + ((1 + 9) * 2)",
      "2 * ((4 - 1) + 9)"
    ]
  },
  "1 2 4 10": {
    "cards": "1 2 4 10",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "1 * ((10 * 2) + 4)",
      "4 * ((10 / 2) + 1)",
      "((2 * 10) + 4) / 1",
      "(10 * (2 * 1)) + 4",
      "4 + ((10 / 1) * 2)",
      "(1 * 4) + (2 * 10)",
      "4 + (10 * (1 * 2))",
      "((10 * 2) / 1) + 4",
      "4 + ((1 * 10) * 2)",
      "4 + (1 * (10 * 2))",
      "1 * ((2 * 10) + 4)",
      "(2 - 10) * (1 - 4)",
      "4 + ((10 * 2) / 1)",
      "4 + ((10 * 2) * 1)",
      "(2 * 10) + (4 * 1)",
      "4 + (2 * (10 * 1))",
      "(4 + (10 * 2)) * 1",
      "((10 * 1) * 2) + 4",
      "(2 * 10) + (4 / 1)",
      "((2 * 10) / 1) + 4",
      "((10 * 2) + 4) * 1",
      "(10 * 2) + (4 * 1)",
      "((2 * 10) + 4) * 1",
      "(10 * 2) + (4 / 1)",
      "(1 + (10 / 2)) * 4",
      "(4 + (10 * 2)) / 1",
      "4 + (10 * (2 * 1))",
      "(4 - 1) * (10 - 2)",
      "((1 * 2) * 10) + 4",
      "(4 * 1) + (2 * 10)",
      "4 + ((2 * 10) / 1)",
      "(1 * 4) + (10 * 2)",
      "(10 * (2 / 1)) + 4",
      "4 + ((10 * 1) * 2)",
      "(1 - 4) * (2 - 10)",
      "4 + (2 / (1 / 10))",
      "(4 + (2 * 10)) * 1",
      "4 + ((2 / 1) * 10)",
      "4 + (10 * (2 / 1))",
      "4 + ((2 * 1) * 10)",
      "(4 / 1) + (2 * 10)",
      "(4 * 1) + (10 * 2)",
      "(10 * (1 * 2)) + 4",
      "4 + ((2 * 10) * 1)",
      "(2 * (10 * 1)) + 4",
      "(4 / 1) + (10 * 2)",
      "(2 * 10) + (1 * 4)",
      "((2 / 1) * 10) + 4",
      "4 + (2 * (1 * 10))",
      "(10 - 2) * (4 - 1)",
      "((10 * 2) * 1) + 4",
      "(4 + (2 * 10)) / 1",
      "(10 / (1 / 2)) + 4",
      "((2 * 1) * 10) + 4",
      "((10 / 2) + 1) * 4",
      "1 * (4 + (2 * 10))",
      "4 + (10 / (1 / 2))",
      "4 * (1 + (10 / 2))",
      "(1 * (2 * 10)) + 4",
      "4 + ((1 * 2) * 10)",
      "(2 * (10 / 1)) + 4",
      "4 + (2 * (10 / 1))",
      "1 * (4 + (10 * 2))",
      "(1 * (10 * 2)) + 4",
      "4 + (1 * (2 * 10))",
      "((10 * 2) + 4) / 1",
      "(2 * (1 * 10)) + 4",
      "((1 * 10) * 2) + 4",
      "(10 * 2) + (1 * 4)",
      "(2 / (1 / 10)) + 4",
      "((2 * 10) * 1) + 4",
      "((10 / 1) * 2) + 4"
    ]
  },
  "1 2 4 11": {
    "cards": "1 2 4 11",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(4 / 2) * (1 + 11)",
      "4 / (2 / (11 + 1))",
      "(11 + 1) * (4 - 2)",
      "(4 * (1 + 11)) / 2",
      "(1 + 11) * (4 - 2)",
      "((11 + 1) * 4) / 2",
      "(4 / 2) * (11 + 1)",
      "4 + ((11 - 1) * 2)",
      "((1 + 11) / 2) * 4",
      "(11 + 1) * (4 / 2)",
      "4 + (2 * (11 - 1))",
      "4 - ((1 - 11) * 2)",
      "(4 - 2) * (1 + 11)",
      "(4 * (11 + 1)) / 2",
      "(11 + 1) / (2 / 4)",
      "(2 * (11 - 1)) + 4",
      "4 * ((11 + 1) / 2)",
      "4 / (2 / (1 + 11))",
      "(4 - 2) * (11 + 1)",
      "((11 - 1) * 2) + 4",
      "((1 + 11) * 4) / 2",
      "4 - (2 * (1 - 11))",
      "(1 + 11) / (2 / 4)",
      "((11 + 1) / 2) * 4",
      "4 * ((1 + 11) / 2)",
      "(1 + 11) * (4 / 2)"
    ]
  },
  "1 2 4 12": {
    "cards": "1 2 4 12",
    "has_solution": "Y",
    "num_solutions": 195,
    "solutions": [
      "(12 * (4 / 2)) / 1",
      "((4 * 1) * 12) / 2",
      "((1 / 2) * 4) * 12",
      "((1 + 2) * 4) + 12",
      "1 / ((2 / 12) / 4)",
      "4 * ((1 / 2) * 12)",
      "12 * ((4 - 2) * 1)",
      "(1 * (4 / 2)) * 12",
      "4 * (1 / (2 / 12))",
      "((1 * 12) * 4) / 2",
      "(1 / 2) * (4 * 12)",
      "12 * (1 * (4 - 2))",
      "1 * ((4 * 12) / 2)",
      "12 / (1 / (4 - 2))",
      "(4 - (2 / 1)) * 12",
      "12 + ((2 + 1) * 4)",
      "(1 / (2 / 12)) * 4",
      "12 / (2 * (1 / 4))",
      "12 * (1 * (4 / 2))",
      "(4 / 2) * (1 * 12)",
      "(4 * 1) * (12 / 2)",
      "12 / ((2 / 4) * 1)",
      "12 / (2 / (1 * 4))",
      "((4 / 2) * 12) / 1",
      "(4 * (12 * 1)) / 2",
      "1 * (4 * (12 / 2))",
      "((12 / 1) * 4) / 2",
      "4 * ((1 * 12) / 2)",
      "(4 / (2 / 1)) * 12",
      "12 * ((1 / 2) * 4)",
      "(4 / 1) * (12 / 2)",
      "(2 + 1) * (12 - 4)",
      "((12 / 2) * 4) * 1",
      "(4 / 2) / (1 / 12)",
      "(1 * 12) * (4 / 2)",
      "(12 * 1) / (2 / 4)",
      "12 + ((1 + 2) * 4)",
      "1 * ((12 / 2) * 4)",
      "((4 * 1) / 2) * 12",
      "12 / (2 / (4 / 1))",
      "12 * (4 - (1 * 2))",
      "(4 * (1 + 2)) + 12",
      "(12 * 4) * (1 / 2)",
      "(1 * (12 * 4)) / 2",
      "(1 * 12) / (2 / 4)",
      "12 / (1 * (2 / 4))",
      "((4 - 2) * 1) * 12",
      "(4 / (2 * 1)) * 12",
      "(1 * 12) * (4 - 2)",
      "(4 * 12) / (2 * 1)",
      "(12 / (2 * 1)) * 4",
      "(12 * 4) / (1 * 2)",
      "4 / (2 / (12 * 1))",
      "((4 - 2) * 12) / 1",
      "(12 / 1) * (4 / 2)",
      "4 * (12 / (1 * 2))",
      "((12 * 4) / 2) / 1",
      "(1 * 4) * (12 / 2)",
      "(12 * 4) / (2 / 1)",
      "((12 * 4) * 1) / 2",
      "(1 * (12 / 2)) * 4",
      "(1 * 4) / (2 / 12)",
      "4 / (1 * (2 / 12))",
      "(12 / 2) / (1 / 4)",
      "4 * ((12 / 2) * 1)",
      "4 / (2 * (1 / 12))",
      "12 + (4 * (2 + 1))",
      "4 / ((2 * 1) / 12)",
      "12 / (1 / (4 / 2))",
      "(1 + 2) * (12 - 4)",
      "12 * (1 / (2 / 4))",
      "((4 * 12) / 2) / 1",
      "4 / (2 / (12 / 1))",
      "(4 - (2 * 1)) * 12",
      "12 * ((4 / 2) / 1)",
      "1 / (2 / (12 * 4))",
      "4 / (2 / (1 * 12))",
      "12 / ((1 * 2) / 4)",
      "4 * ((12 / 2) / 1)",
      "(12 * (1 * 4)) / 2",
      "12 + (4 * (1 + 2))",
      "((12 * 1) * 4) / 2",
      "(4 * (2 + 1)) + 12",
      "12 * (4 * (1 / 2))",
      "((12 * 1) / 2) * 4",
      "((4 * 12) * 1) / 2",
      "1 * (12 * (4 / 2))",
      "((1 * 12) / 2) * 4",
      "(12 / (1 / 4)) / 2",
      "(12 - 4) * (2 + 1)",
      "(1 / (2 / 4)) * 12",
      "4 * ((12 * 1) / 2)",
      "(1 * (4 - 2)) * 12",
      "((4 * 12) / 2) * 1",
      "((4 / 1) * 12) / 2",
      "((1 * 4) / 2) * 12",
      "(12 * (4 - 2)) / 1",
      "12 * ((4 - 2) / 1)",
      "((12 / 2) * 1) * 4",
      "(12 - 4) * (1 + 2)",
      "(4 / (1 / 12)) / 2",
      "((1 / 2) * 12) * 4",
      "(12 * (4 * 1)) / 2",
      "(12 / (2 / 4)) * 1",
      "12 / ((2 * 1) / 4)",
      "(12 / 2) * (4 * 1)",
      "(12 * (4 / 2)) * 1",
      "12 * ((4 / 2) * 1)",
      "4 * (1 * (12 / 2))",
      "((4 * 12) / 1) / 2",
      "(4 * 12) * (1 / 2)",
      "12 * ((4 / 1) / 2)",
      "4 * ((12 / 1) / 2)",
      "(12 * 4) / (2 * 1)",
      "(12 / 2) * (4 / 1)",
      "12 / ((1 / 4) * 2)",
      "4 * (12 * (1 / 2))",
      "(12 / (2 / 4)) / 1",
      "1 * ((4 - 2) * 12)",
      "1 / ((2 / 4) / 12)",
      "1 / (2 / (4 * 12))",
      "(4 * (12 / 1)) / 2",
      "((4 / 1) / 2) * 12",
      "(4 - 2) * (12 / 1)",
      "(4 / (2 / 12)) * 1",
      "(4 * (12 / 2)) / 1",
      "4 / (1 / (12 / 2))",
      "((1 * 4) - 2) * 12",
      "(12 * (4 / 1)) / 2",
      "4 / ((2 / 12) / 1)",
      "((4 * 1) - 2) * 12",
      "(4 - 2) * (1 * 12)",
      "1 * ((12 * 4) / 2)",
      "12 / ((2 / 1) / 4)",
      "4 / ((1 / 12) * 2)",
      "((4 / 2) * 1) * 12",
      "(1 * (4 * 12)) / 2",
      "((12 / 2) * 4) / 1",
      "((12 * 4) / 2) * 1",
      "12 * ((1 * 4) - 2)",
      "(12 * 1) * (4 - 2)",
      "(4 / (2 / 12)) / 1",
      "(4 * (1 / 2)) * 12",
      "12 * (4 - (2 / 1))",
      "(12 / 2) * (1 * 4)",
      "((4 / 1) - 2) * 12",
      "((2 + 1) * 4) + 12",
      "(4 - 2) / (1 / 12)",
      "(12 / 1) * (4 - 2)",
      "((4 / 2) / 1) * 12",
      "(12 / 1) / (2 / 4)",
      "(4 / 1) / (2 / 12)",
      "((4 / 2) * 12) * 1",
      "((12 / 2) / 1) * 4",
      "(4 * (1 * 12)) / 2",
      "12 * (4 / (2 / 1))",
      "(4 - 2) * (12 * 1)",
      "12 * (4 - (2 * 1))",
      "((4 - 2) / 1) * 12",
      "(4 / 2) * (12 * 1)",
      "(12 * 1) * (4 / 2)",
      "1 * (4 / (2 / 12))",
      "12 / (1 - (2 / 4))",
      "4 / ((2 / 1) / 12)",
      "(12 * (4 - 2)) * 1",
      "(1 / 2) * (12 * 4)",
      "(12 * (1 / 2)) * 4",
      "12 * ((4 * 1) / 2)",
      "4 * (12 / (2 / 1))",
      "((12 / 1) / 2) * 4",
      "(4 * 12) / (1 * 2)",
      "12 * (4 / (1 * 2))",
      "12 * (4 / (2 * 1))",
      "1 * (12 * (4 - 2))",
      "(4 / 2) * (12 / 1)",
      "1 * (12 / (2 / 4))",
      "12 * ((4 * 1) - 2)",
      "((1 * 4) * 12) / 2",
      "12 / (2 / (4 * 1))",
      "1 * ((4 / 2) * 12)",
      "(4 * (12 / 2)) * 1",
      "(12 / (1 * 2)) * 4",
      "4 / ((1 * 2) / 12)",
      "((4 - 2) * 12) * 1",
      "(4 - (1 * 2)) * 12",
      "4 / ((2 / 12) * 1)",
      "12 / ((2 / 4) / 1)",
      "(4 * 12) / (2 / 1)",
      "4 * (12 / (2 * 1))",
      "(4 * 1) / (2 / 12)",
      "(4 / (1 * 2)) * 12",
      "(12 / (2 / 1)) * 4",
      "((12 * 4) / 1) / 2",
      "12 * ((1 * 4) / 2)",
      "12 * ((4 / 1) - 2)"
    ]
  },
  "1 2 4 13": {
    "cards": "1 2 4 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((13 + 1) * 2) - 4",
      "4 * ((13 - 1) / 2)",
      "(2 - 4) * (1 - 13)",
      "(1 - 13) * (2 - 4)",
      "((13 - 1) / 2) * 4",
      "(13 - 1) * (4 - 2)",
      "(2 * (13 + 1)) - 4",
      "(4 / 2) * (13 - 1)",
      "((13 - 1) * 4) / 2",
      "(13 - 1) / (2 / 4)",
      "(2 * (1 + 13)) - 4",
      "(4 - 2) * (13 - 1)",
      "(4 * (13 - 1)) / 2",
      "((1 + 13) * 2) - 4",
      "4 / (2 / (13 - 1))",
      "(13 - 1) * (4 / 2)"
    ]
  },
  "1 2 5 5": {
    "cards": "1 2 5 5",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(1 + (5 * 5)) - 2",
      "1 - (2 - (5 * 5))",
      "1 + ((5 * 5) - 2)",
      "(5 * 5) - (2 - 1)",
      "(1 - 2) + (5 * 5)",
      "((5 * 5) - 2) + 1",
      "(5 * 5) + (1 - 2)",
      "((5 * 5) + 1) - 2"
    ]
  },
  "1 2 5 6": {
    "cards": "1 2 5 6",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "2 * (1 + (5 + 6))",
      "(1 - (2 - 5)) * 6",
      "(1 + (5 + 6)) * 2",
      "(5 + (1 + 6)) * 2",
      "6 * (1 + (5 - 2))",
      "((6 + 5) + 1) * 2",
      "6 * ((5 - 2) + 1)",
      "((1 + 6) + 5) * 2",
      "(6 - 2) * (1 + 5)",
      "2 * (5 + (1 + 6))",
      "((1 + 5) + 6) * 2",
      "(5 + (1 - 2)) * 6",
      "6 * ((1 - 2) + 5)",
      "(6 - 2) * (5 + 1)",
      "((5 + 1) + 6) * 2",
      "6 * (5 + (1 - 2))",
      "2 * (1 + (6 + 5))",
      "2 * ((6 + 1) + 5)",
      "((5 + 6) + 1) * 2",
      "6 * (5 - (2 - 1))",
      "2 * (6 + (5 + 1))",
      "2 * (5 + (6 + 1))",
      "(6 + (5 + 1)) * 2",
      "((5 - 2) + 1) * 6",
      "((5 + 1) - 2) * 6",
      "2 * (6 + (1 + 5))",
      "(1 + 5) * (6 - 2)",
      "(5 + 1) * (6 - 2)",
      "2 * ((1 + 6) + 5)",
      "((6 + 1) + 5) * 2",
      "(1 + (5 - 2)) * 6",
      "2 * ((5 + 1) + 6)",
      "2 * ((5 + 6) + 1)",
      "((1 - 2) + 5) * 6",
      "((1 + 5) - 2) * 6",
      "2 * ((6 + 5) + 1)",
      "6 * ((1 + 5) - 2)",
      "(5 - (2 - 1)) * 6",
      "6 * (1 - (2 - 5))",
      "6 * ((5 + 1) - 2)",
      "2 * ((1 + 5) + 6)",
      "(5 + (6 + 1)) * 2",
      "(6 + (1 + 5)) * 2",
      "(1 + (6 + 5)) * 2"
    ]
  },
  "1 2 5 7": {
    "cards": "1 2 5 7",
    "has_solution": "Y",
    "num_solutions": 70,
    "solutions": [
      "2 * ((5 + 7) / 1)",
      "((5 * 1) + 7) * 2",
      "(5 + 7) * (1 * 2)",
      "(2 * (5 + 7)) * 1",
      "((7 + 5) / 1) * 2",
      "((1 * 5) + 7) * 2",
      "(2 * 1) * (5 + 7)",
      "1 * ((7 + 5) * 2)",
      "(1 * 2) * (5 + 7)",
      "1 * (2 * (5 + 7))",
      "2 * ((7 + 5) * 1)",
      "(7 + (1 * 5)) * 2",
      "(1 * (7 + 5)) * 2",
      "((7 * 1) + 5) * 2",
      "2 * ((5 * 1) + 7)",
      "((5 + 7) * 2) / 1",
      "(2 * (7 + 5)) / 1",
      "(5 * (7 - 2)) - 1",
      "(2 * (5 + 7)) / 1",
      "2 * (5 + (7 * 1))",
      "2 / (1 / (5 + 7))",
      "2 * (5 + (1 * 7))",
      "((1 * 7) + 5) * 2",
      "(2 * 1) * (7 + 5)",
      "1 * (2 * (7 + 5))",
      "2 * ((7 * 1) + 5)",
      "(5 + (7 * 1)) * 2",
      "(2 / 1) * (7 + 5)",
      "2 * ((1 * 7) + 5)",
      "(7 + 5) * (2 * 1)",
      "2 * ((5 / 1) + 7)",
      "(1 * 2) * (7 + 5)",
      "(5 - 2) * (7 + 1)",
      "2 * ((1 * 5) + 7)",
      "2 * (7 + (5 / 1))",
      "(7 + (5 * 1)) * 2",
      "2 * (7 + (1 * 5))",
      "(5 + (7 / 1)) * 2",
      "((7 + 5) * 2) * 1",
      "(7 + 1) * (5 - 2)",
      "((7 - 2) * 5) - 1",
      "(1 + 7) * (5 - 2)",
      "(5 + 7) / (1 / 2)",
      "1 * ((5 + 7) * 2)",
      "(2 * (7 + 5)) * 1",
      "(7 + 5) * (1 * 2)",
      "(5 - 2) * (1 + 7)",
      "(5 + 7) * (2 * 1)",
      "(2 / 1) * (5 + 7)",
      "2 * ((7 / 1) + 5)",
      "2 * ((5 + 7) * 1)",
      "(7 + 5) / (1 / 2)",
      "2 / (1 / (7 + 5))",
      "2 * (1 * (5 + 7))",
      "(5 + (1 * 7)) * 2",
      "(7 + (5 / 1)) * 2",
      "((5 + 7) * 1) * 2",
      "((5 / 1) + 7) * 2",
      "2 * (1 * (7 + 5))",
      "2 * (5 + (7 / 1))",
      "(1 * (5 + 7)) * 2",
      "((7 / 1) + 5) * 2",
      "(5 + 7) * (2 / 1)",
      "((7 + 5) * 2) / 1",
      "2 * (7 + (5 * 1))",
      "(7 + 5) * (2 / 1)",
      "((5 + 7) * 2) * 1",
      "2 * ((7 + 5) / 1)",
      "((5 + 7) / 1) * 2",
      "((7 + 5) * 1) * 2"
    ]
  },
  "1 2 5 8": {
    "cards": "1 2 5 8",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "(1 * (5 - 2)) * 8",
      "((5 - 1) + 8) * 2",
      "8 * ((5 - 2) * 1)",
      "8 * ((1 * 5) - 2)",
      "2 * (5 - (1 - 8))",
      "((5 * 1) - 2) * 8",
      "2 * ((5 + 8) - 1)",
      "(8 / 2) * (1 + 5)",
      "8 * (1 * (5 - 2))",
      "8 * (5 - (1 * 2))",
      "(8 + (5 - 1)) * 2",
      "((8 - 1) + 5) * 2",
      "(5 - 2) * (8 / 1)",
      "(5 - 2) * (8 * 1)",
      "(5 - 2) * (1 * 8)",
      "8 * (5 - (2 / 1))",
      "(1 + 5) * (8 / 2)",
      "(8 / 2) * (5 + 1)",
      "8 * (5 - (2 * 1))",
      "8 * ((5 + 1) / 2)",
      "2 * ((8 - 1) + 5)",
      "((5 + 8) - 1) * 2",
      "(8 / 1) * (5 - 2)",
      "2 * ((5 - 1) + 8)",
      "(5 - 2) / (1 / 8)",
      "8 / (2 / (5 + 1))",
      "((5 - 2) * 1) * 8",
      "(8 * (5 + 1)) / 2",
      "(5 - (1 - 8)) * 2",
      "(2 - 8) * (1 - 5)",
      "(5 - (2 * 1)) * 8",
      "(8 * (1 + 5)) / 2",
      "8 / (2 / (1 + 5))",
      "(1 * 8) * (5 - 2)",
      "2 * (5 + (8 - 1))",
      "8 * ((5 / 1) - 2)",
      "8 / (1 / (5 - 2))",
      "2 * ((8 + 5) - 1)",
      "2 * (8 + (5 - 1))",
      "((5 - 2) * 8) / 1",
      "((5 - 2) / 1) * 8",
      "(1 + 5) / (2 / 8)",
      "((5 + 1) / 2) * 8",
      "(5 + (8 - 1)) * 2",
      "1 * (8 * (5 - 2))",
      "(8 * 1) * (5 - 2)",
      "(8 * (5 - 2)) / 1",
      "((1 + 5) / 2) * 8",
      "((8 + 5) - 1) * 2",
      "((5 - 2) * 8) * 1",
      "((1 * 5) - 2) * 8",
      "8 * ((5 * 1) - 2)",
      "(8 - 2) * (5 - 1)",
      "8 * ((5 - 2) / 1)",
      "(8 * (5 - 2)) * 1",
      "(5 + 1) / (2 / 8)",
      "2 * (8 - (1 - 5))",
      "1 * ((5 - 2) * 8)",
      "(5 - (1 * 2)) * 8",
      "((5 / 1) - 2) * 8",
      "(5 - (2 / 1)) * 8",
      "((1 + 5) * 8) / 2",
      "(5 - 1) * (8 - 2)",
      "8 * ((1 + 5) / 2)",
      "(5 + 1) * (8 / 2)",
      "(1 - 5) * (2 - 8)",
      "((5 + 1) * 8) / 2",
      "(8 - (1 - 5)) * 2"
    ]
  },
  "1 2 5 9": {
    "cards": "1 2 5 9",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "9 + ((2 + 1) * 5)",
      "((9 * 2) + 1) + 5",
      "5 + ((9 * 2) + 1)",
      "1 + ((9 * 2) + 5)",
      "1 + ((2 * 9) + 5)",
      "(5 * (1 + 2)) + 9",
      "1 + (5 + (2 * 9))",
      "5 + (1 + (2 * 9))",
      "((2 + 1) * 5) + 9",
      "(9 * 2) + (1 + 5)",
      "(2 * 9) + (5 + 1)",
      "(1 + (2 * 9)) + 5",
      "(5 * (2 + 1)) + 9",
      "(1 + (9 * 2)) + 5",
      "(1 + 5) + (2 * 9)",
      "((9 * 2) + 5) + 1",
      "(5 + 1) + (9 * 2)",
      "(1 + 5) + (9 * 2)",
      "5 + (1 + (9 * 2))",
      "((2 * 9) + 1) + 5",
      "(2 * 9) + (1 + 5)",
      "(9 - 1) * (5 - 2)",
      "((2 * 9) + 5) + 1",
      "9 + (5 * (2 + 1))",
      "9 + (5 * (1 + 2))",
      "(2 - 5) * (1 - 9)",
      "(5 + (2 * 9)) + 1",
      "9 + ((1 + 2) * 5)",
      "(5 + 1) + (2 * 9)",
      "(5 + (9 * 2)) + 1",
      "(5 - 2) * (9 - 1)",
      "((1 + 2) * 5) + 9",
      "5 + ((2 * 9) + 1)",
      "1 + (5 + (9 * 2))",
      "(1 - 9) * (2 - 5)",
      "(9 * 2) + (5 + 1)"
    ]
  },
  "1 2 5 10": {
    "cards": "1 2 5 10",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((5 * 10) / 2) - 1",
      "(10 * 2) - (1 - 5)",
      "((5 / 2) * 10) - 1",
      "((10 * 2) + 5) - 1",
      "((10 * 2) - 1) + 5",
      "(5 - 1) + (10 * 2)",
      "5 - (1 - (10 * 2))",
      "(5 * (10 / 2)) - 1",
      "((2 * 10) + 5) - 1",
      "5 + ((2 * 10) - 1)",
      "(10 / (2 / 5)) - 1",
      "5 - (1 - (2 * 10))",
      "(5 + (10 * 2)) - 1",
      "(10 * (5 / 2)) - 1",
      "((10 / 2) * 5) - 1",
      "((2 * 10) - 1) + 5",
      "(10 * 2) + (5 - 1)",
      "(5 - 1) + (2 * 10)",
      "5 + ((10 * 2) - 1)",
      "(5 / (2 / 10)) - 1",
      "(2 * 10) - (1 - 5)",
      "((10 * 5) / 2) - 1",
      "(2 * 10) + (5 - 1)",
      "(5 + (2 * 10)) - 1"
    ]
  },
  "1 2 5 11": {
    "cards": "1 2 5 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 5 12": {
    "cards": "1 2 5 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(5 - (1 + 2)) * 12",
      "((5 - 1) - 2) * 12",
      "((5 + 1) * 2) + 12",
      "(5 - (2 + 1)) * 12",
      "(2 * (5 + 1)) + 12",
      "12 + (2 * (5 + 1))",
      "((5 - 1) * 12) / 2",
      "(12 * (5 - 1)) / 2",
      "12 / (2 / (5 - 1))",
      "12 * ((5 - 1) - 2)",
      "(5 - 1) * (12 / 2)",
      "12 * (5 - (1 + 2))",
      "12 * ((5 - 2) - 1)",
      "(5 - 1) / (2 / 12)",
      "((5 - 1) / 2) * 12",
      "12 + ((5 + 1) * 2)",
      "12 * ((5 - 1) / 2)",
      "12 + (2 * (1 + 5))",
      "12 + ((1 + 5) * 2)",
      "(12 / 2) * (5 - 1)",
      "((1 + 5) * 2) + 12",
      "12 * (5 - (2 + 1))",
      "((5 - 2) - 1) * 12",
      "(2 * (1 + 5)) + 12"
    ]
  },
  "1 2 5 13": {
    "cards": "1 2 5 13",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "1 + (13 + (2 * 5))",
      "(13 + (2 * 5)) + 1",
      "13 + (1 + (5 * 2))",
      "13 + ((2 * 5) + 1)",
      "13 + ((5 * 2) + 1)",
      "(2 * 5) + (13 + 1)",
      "(13 + 1) + (5 * 2)",
      "(13 + (5 * 2)) + 1",
      "(1 + 13) + (2 * 5)",
      "(2 * 5) + (1 + 13)",
      "(13 - 5) * (2 + 1)",
      "13 + (1 + (2 * 5))",
      "((5 * 2) + 13) + 1",
      "((2 * 5) + 1) + 13",
      "((2 * 5) + 13) + 1",
      "(1 + (2 * 5)) + 13",
      "(13 - 5) * (1 + 2)",
      "(1 + 2) * (13 - 5)",
      "(5 * 2) + (1 + 13)",
      "(1 + 13) + (5 * 2)",
      "(13 + 1) + (2 * 5)",
      "((5 * 2) + 1) + 13",
      "1 + (13 + (5 * 2))",
      "(1 + (5 * 2)) + 13",
      "(5 * 2) + (13 + 1)",
      "1 + ((2 * 5) + 13)",
      "1 + ((5 * 2) + 13)",
      "(2 + 1) * (13 - 5)"
    ]
  },
  "1 2 6 6": {
    "cards": "1 2 6 6",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "6 * ((6 * 1) - 2)",
      "2 * ((6 * 1) + 6)",
      "((6 + 6) * 2) * 1",
      "2 * (6 + (1 * 6))",
      "(6 / 1) * (6 - 2)",
      "2 * ((1 * 6) + 6)",
      "((1 + 2) * 6) + 6",
      "((6 / 1) + 6) * 2",
      "6 * (1 * (6 - 2))",
      "(6 * (6 - 2)) * 1",
      "(6 * (2 + 1)) + 6",
      "(2 / 1) * (6 + 6)",
      "((6 - 2) / 1) * 6",
      "((6 + 6) * 1) * 2",
      "6 * (6 - (1 * 2))",
      "(6 + 6) * (1 * 2)",
      "2 * ((6 + 6) * 1)",
      "(1 * 2) * (6 + 6)",
      "(1 + (6 / 2)) * 6",
      "(2 * 1) * (6 + 6)",
      "1 * (6 * (6 - 2))",
      "((6 - 2) * 6) * 1",
      "(6 * 1) * (6 - 2)",
      "(6 + (6 / 1)) * 2",
      "(6 + 6) * (2 * 1)",
      "6 * ((6 - 2) / 1)",
      "(6 - 2) * (1 * 6)",
      "6 * ((6 - 2) * 1)",
      "(6 * (6 - 2)) / 1",
      "(1 * (6 - 2)) * 6",
      "((6 - 2) * 6) / 1",
      "((6 * 1) + 6) * 2",
      "((6 / 1) - 2) * 6",
      "(6 + 6) / (1 / 2)",
      "(6 - 2) / (1 / 6)",
      "(1 * (6 + 6)) * 2",
      "((6 + 6) / 1) * 2",
      "((2 + 1) * 6) + 6",
      "2 * (6 + (6 * 1))",
      "6 + (6 * (1 + 2))",
      "(6 - (2 / 1)) * 6",
      "((6 / 2) + 1) * 6",
      "6 * ((1 * 6) - 2)",
      "((1 * 6) + 6) * 2",
      "6 * (6 - (2 * 1))",
      "6 * ((6 / 1) - 2)",
      "1 * ((6 - 2) * 6)",
      "(6 + (1 * 6)) * 2",
      "2 * (1 * (6 + 6))",
      "2 * ((6 / 1) + 6)",
      "((6 - 2) * 1) * 6",
      "((6 * 1) - 2) * 6",
      "(6 - 2) * (6 / 1)",
      "6 + (6 * (2 + 1))",
      "(6 - (1 * 2)) * 6",
      "((6 + 6) * 2) / 1",
      "1 * ((6 + 6) * 2)",
      "(6 + 6) * (2 / 1)",
      "2 * (6 + (6 / 1))",
      "(6 - 2) * (6 * 1)",
      "6 * ((6 / 2) + 1)",
      "(6 * (1 + 2)) + 6",
      "6 * (6 - (2 / 1))",
      "(1 * 6) * (6 - 2)",
      "(2 * (6 + 6)) / 1",
      "2 * ((6 + 6) / 1)",
      "1 * (2 * (6 + 6))",
      "(6 - (2 * 1)) * 6",
      "6 + ((2 + 1) * 6)",
      "6 / (1 / (6 - 2))",
      "6 + ((1 + 2) * 6)",
      "2 / (1 / (6 + 6))",
      "(6 + (6 * 1)) * 2",
      "((1 * 6) - 2) * 6",
      "(2 * (6 + 6)) * 1",
      "6 * (1 + (6 / 2))"
    ]
  },
  "1 2 6 7": {
    "cards": "1 2 6 7",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "((1 + 7) / 2) * 6",
      "(2 - 6) * (1 - 7)",
      "(6 + (7 - 1)) * 2",
      "(1 + 7) / (2 / 6)",
      "6 * ((7 - 2) - 1)",
      "((7 + 1) / 2) * 6",
      "(6 * (1 + 7)) / 2",
      "6 * (7 - (2 + 1))",
      "6 / (2 / (7 + 1))",
      "2 * (7 + (6 - 1))",
      "2 * ((6 - 1) + 7)",
      "((7 - 1) + 6) * 2",
      "((7 + 6) - 1) * 2",
      "6 * (7 - (1 + 2))",
      "((7 - 2) - 1) * 6",
      "2 * ((7 + 6) - 1)",
      "(7 - 1) * (6 - 2)",
      "((7 + 1) * 6) / 2",
      "(6 / 2) * (7 + 1)",
      "(7 - (1 + 2)) * 6",
      "(7 - (2 + 1)) * 6",
      "(6 / 2) * (1 + 7)",
      "((1 + 7) * 6) / 2",
      "(1 + 7) * (6 / 2)",
      "(6 - 2) * (7 - 1)",
      "6 * ((1 + 7) / 2)",
      "(6 * (7 + 1)) / 2",
      "(1 - 7) * (2 - 6)",
      "(7 - (1 - 6)) * 2",
      "2 * ((7 - 1) + 6)",
      "2 * (6 - (1 - 7))",
      "2 * (6 + (7 - 1))",
      "2 * ((6 + 7) - 1)",
      "6 * ((7 + 1) / 2)",
      "(7 + 1) * (6 / 2)",
      "(6 - (1 - 7)) * 2",
      "((6 + 7) - 1) * 2",
      "(7 + (6 - 1)) * 2",
      "2 * (7 - (1 - 6))",
      "6 * ((7 - 1) - 2)",
      "(7 + 1) / (2 / 6)",
      "6 / (2 / (1 + 7))",
      "((6 - 1) + 7) * 2",
      "((7 - 1) - 2) * 6"
    ]
  },
  "1 2 6 8": {
    "cards": "1 2 6 8",
    "has_solution": "Y",
    "num_solutions": 166,
    "solutions": [
      "(6 / (2 / 8)) * 1",
      "(6 / 2) * (1 * 8)",
      "(6 / 2) * (8 / 1)",
      "((6 / 2) * 8) * 1",
      "(8 * 6) * (1 / 2)",
      "((6 * 1) * 8) / 2",
      "((8 * 6) / 2) * 1",
      "8 * ((1 / 2) * 6)",
      "8 * (6 / (2 / 1))",
      "8 / ((2 * 1) / 6)",
      "(8 / 2) * (1 * 6)",
      "(6 - (1 + 2)) * 8",
      "1 * ((6 / 2) * 8)",
      "((6 * 1) / 2) * 8",
      "(2 * (1 + 8)) + 6",
      "(6 / 2) / (1 / 8)",
      "6 * (1 * (8 / 2))",
      "1 / (2 / (6 * 8))",
      "(8 * 1) / (2 / 6)",
      "8 * (1 / (2 / 6))",
      "8 * ((6 - 2) - 1)",
      "1 * ((6 * 8) / 2)",
      "8 * ((6 / 1) / 2)",
      "(1 * (6 * 8)) / 2",
      "6 / (2 / (1 * 8))",
      "((1 / 2) * 8) * 6",
      "6 * ((8 / 1) / 2)",
      "8 * ((1 * 6) / 2)",
      "8 / ((1 / 6) * 2)",
      "(6 * (1 / 2)) * 8",
      "8 / (1 * (2 / 6))",
      "8 * ((6 / 2) / 1)",
      "(8 * 1) * (6 / 2)",
      "(1 / (2 / 6)) * 8",
      "1 * ((8 * 6) / 2)",
      "(8 / 2) * (6 * 1)",
      "6 + (2 * (1 + 8))",
      "6 / (2 / (8 / 1))",
      "(1 * (8 * 6)) / 2",
      "(1 / (2 / 8)) * 6",
      "(8 * 6) / (1 * 2)",
      "((6 - 2) - 1) * 8",
      "8 * (6 - (2 + 1))",
      "((8 + 1) * 2) + 6",
      "8 * ((6 - 1) - 2)",
      "(6 * (8 / 2)) * 1",
      "((6 * 8) / 1) / 2",
      "1 * (8 * (6 / 2))",
      "(6 * (1 * 8)) / 2",
      "6 / ((2 * 1) / 8)",
      "(6 / (2 / 1)) * 8",
      "((1 * 6) * 8) / 2",
      "6 / (1 * (2 / 8))",
      "(1 * 6) / (2 / 8)",
      "(1 * (8 / 2)) * 6",
      "(8 * 6) / (2 * 1)",
      "((1 * 8) * 6) / 2",
      "(6 * 8) / (1 * 2)",
      "6 * (8 / (2 / 1))",
      "(8 * (1 / 2)) * 6",
      "(8 / (2 * 1)) * 6",
      "((6 / 1) * 8) / 2",
      "(6 * 8) / (2 / 1)",
      "((8 * 6) / 2) / 1",
      "(8 / (2 / 1)) * 6",
      "((1 / 2) * 6) * 8",
      "(1 / 2) * (6 * 8)",
      "6 * (8 / (1 * 2))",
      "8 * (6 - (1 + 2))",
      "(6 / 1) * (8 / 2)",
      "1 / ((2 / 6) / 8)",
      "(8 / (2 / 6)) * 1",
      "8 / (2 * (1 / 6))",
      "((8 / 1) / 2) * 6",
      "6 * (8 / (2 * 1))",
      "((6 / 1) / 2) * 8",
      "(8 * (6 / 2)) / 1",
      "(6 * 8) * (1 / 2)",
      "(8 * 6) / (2 / 1)",
      "6 / (2 * (1 / 8))",
      "6 / ((2 / 1) / 8)",
      "((8 * 1) * 6) / 2",
      "6 * ((8 / 2) * 1)",
      "6 * ((1 * 8) / 2)",
      "(6 - (2 + 1)) * 8",
      "(6 * (8 / 1)) / 2",
      "8 * ((6 * 1) / 2)",
      "6 + ((1 + 8) * 2)",
      "((8 * 6) * 1) / 2",
      "(6 * 1) / (2 / 8)",
      "(6 * 1) * (8 / 2)",
      "8 / (2 / (1 * 6))",
      "(6 / (1 * 2)) * 8",
      "8 / (2 / (6 * 1))",
      "(8 * (1 * 6)) / 2",
      "((6 / 2) * 8) / 1",
      "((1 * 8) / 2) * 6",
      "((1 + 8) * 2) + 6",
      "6 / ((1 * 2) / 8)",
      "((8 * 6) / 1) / 2",
      "((8 / 2) * 6) * 1",
      "(2 * (8 + 1)) + 6",
      "(8 / (1 * 2)) * 6",
      "((6 / 2) * 1) * 8",
      "(8 / 2) / (1 / 6)",
      "8 / ((2 / 1) / 6)",
      "8 / (1 / (6 / 2))",
      "((6 * 8) / 2) * 1",
      "8 / ((2 / 6) * 1)",
      "1 / ((2 / 8) / 6)",
      "6 * ((8 / 2) / 1)",
      "((8 / 2) * 1) * 6",
      "(1 * 8) / (2 / 6)",
      "((8 * 1) / 2) * 6",
      "((6 - 1) - 2) * 8",
      "(6 / 2) * (8 * 1)",
      "6 + (2 * (8 + 1))",
      "(8 * (6 / 1)) / 2",
      "(1 * 8) * (6 / 2)",
      "6 * ((1 / 2) * 8)",
      "8 * (1 * (6 / 2))",
      "6 * (8 * (1 / 2))",
      "(6 * 8) / (2 * 1)",
      "8 / ((1 * 2) / 6)",
      "(6 / 1) / (2 / 8)",
      "(6 / (1 / 8)) / 2",
      "6 * (1 / (2 / 8))",
      "8 * (6 / (2 * 1))",
      "6 / ((2 / 8) / 1)",
      "8 / ((2 / 6) / 1)",
      "((6 * 8) * 1) / 2",
      "((6 / 2) / 1) * 8",
      "(6 * (8 / 2)) / 1",
      "8 * (6 * (1 / 2))",
      "1 / (2 / (8 * 6))",
      "6 / ((2 / 8) * 1)",
      "6 / (1 / (8 / 2))",
      "6 / ((1 / 8) * 2)",
      "((6 * 8) / 2) / 1",
      "6 / (2 / (8 * 1))",
      "1 * (6 / (2 / 8))",
      "1 * ((8 / 2) * 6)",
      "8 * ((6 / 2) * 1)",
      "(1 * (6 / 2)) * 8",
      "((8 / 2) / 1) * 6",
      "(8 / (1 / 6)) / 2",
      "(8 / 2) * (6 / 1)",
      "(1 * 6) * (8 / 2)",
      "(8 * (6 * 1)) / 2",
      "6 * ((8 * 1) / 2)",
      "(8 / 1) / (2 / 6)",
      "(8 * (6 / 2)) * 1",
      "6 + ((8 + 1) * 2)",
      "1 * (6 * (8 / 2))",
      "(6 * (8 * 1)) / 2",
      "(1 / 2) * (8 * 6)",
      "8 * (6 / (1 * 2))",
      "1 * (8 / (2 / 6))",
      "(6 / (2 * 1)) * 8",
      "(6 / (2 / 8)) / 1",
      "(8 / 1) * (6 / 2)",
      "(8 / (2 / 6)) / 1",
      "((1 * 6) / 2) * 8",
      "((8 / 1) * 6) / 2",
      "8 / (2 / (6 / 1))",
      "((8 / 2) * 6) / 1"
    ]
  },
  "1 2 6 9": {
    "cards": "1 2 6 9",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "6 + ((9 / 1) * 2)",
      "(9 * 2) + (1 * 6)",
      "6 + (9 * (2 / 1))",
      "6 + ((1 * 2) * 9)",
      "(6 * (9 - 1)) / 2",
      "6 * ((9 - 1) / 2)",
      "(6 + (2 * 9)) / 1",
      "((9 - 1) * 6) / 2",
      "6 + (9 * (1 * 2))",
      "(2 * (9 / 1)) + 6",
      "((9 * 2) + 6) * 1",
      "((2 * 9) / 1) + 6",
      "6 + ((2 / 1) * 9)",
      "6 + (9 * (2 * 1))",
      "(9 * (2 * 1)) + 6",
      "(2 * (9 * 1)) + 6",
      "6 + (2 / (1 / 9))",
      "((9 - 1) / 2) * 6",
      "(6 + (9 * 2)) * 1",
      "(6 / 1) + (2 * 9)",
      "(9 * 2) + (6 / 1)",
      "(6 * 1) + (9 * 2)",
      "6 + ((9 * 2) / 1)",
      "(6 / 2) * (9 - 1)",
      "1 * ((9 * 2) + 6)",
      "((9 * 2) + 6) / 1",
      "(2 * 9) + (6 / 1)",
      "(2 / (1 / 9)) + 6",
      "6 + (2 * (1 * 9))",
      "(9 * (2 / 1)) + 6",
      "(6 + (9 * 2)) / 1",
      "6 + ((2 * 9) * 1)",
      "6 + ((2 * 9) / 1)",
      "6 + (1 * (2 * 9))",
      "6 + (1 * (9 * 2))",
      "((9 * 2) / 1) + 6",
      "(1 * (2 * 9)) + 6",
      "1 * ((2 * 9) + 6)",
      "((2 * 9) + 6) * 1",
      "(9 * 2) + (6 * 1)",
      "(9 / (1 / 2)) + 6",
      "6 + ((2 * 1) * 9)",
      "(6 + (2 * 9)) * 1",
      "((9 / 1) * 2) + 6",
      "(2 * 9) + (1 * 6)",
      "6 + ((1 * 9) * 2)",
      "((2 * 1) * 9) + 6",
      "((9 * 2) * 1) + 6",
      "(6 / 1) + (9 * 2)",
      "6 + ((9 * 1) * 2)",
      "6 + (9 / (1 / 2))",
      "(9 - 1) / (2 / 6)",
      "(2 * (1 * 9)) + 6",
      "1 * (6 + (9 * 2))",
      "(9 - 1) * (6 / 2)",
      "((1 * 2) * 9) + 6",
      "6 + (2 * (9 / 1))",
      "(1 * 6) + (2 * 9)",
      "(2 * 9) + (6 * 1)",
      "((2 * 9) + 6) / 1",
      "((2 * 9) * 1) + 6",
      "6 + (2 * (9 * 1))",
      "(1 * 6) + (9 * 2)",
      "((2 / 1) * 9) + 6",
      "6 + ((9 * 2) * 1)",
      "1 * (6 + (2 * 9))",
      "(6 * 1) + (2 * 9)",
      "((1 * 9) * 2) + 6",
      "6 / (2 / (9 - 1))",
      "(9 * (1 * 2)) + 6",
      "((9 * 1) * 2) + 6",
      "(1 * (9 * 2)) + 6"
    ]
  },
  "1 2 6 10": {
    "cards": "1 2 6 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "6 - ((1 - 10) * 2)",
      "6 - (2 * (1 - 10))",
      "((1 + 6) * 2) + 10",
      "((1 + 2) * 10) - 6",
      "10 + (2 * (6 + 1))",
      "(10 * (1 + 2)) - 6",
      "10 + ((1 + 6) * 2)",
      "((10 / 2) - 1) * 6",
      "6 + ((10 - 1) * 2)",
      "(10 * (2 + 1)) - 6",
      "10 + ((6 + 1) * 2)",
      "((6 + 1) * 2) + 10",
      "((10 - 1) * 2) + 6",
      "10 + (2 * (1 + 6))",
      "6 + (2 * (10 - 1))",
      "(2 * (10 - 1)) + 6",
      "((2 + 1) * 10) - 6",
      "6 * ((10 / 2) - 1)",
      "(2 * (6 + 1)) + 10",
      "(2 * (1 + 6)) + 10"
    ]
  },
  "1 2 6 11": {
    "cards": "1 2 6 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(6 * 2) + (1 + 11)",
      "((2 * 6) + 1) + 11",
      "(11 + (6 * 2)) + 1",
      "((6 * 2) + 1) + 11",
      "(6 * 2) + (11 + 1)",
      "1 + ((2 * 6) + 11)",
      "(1 + (2 * 6)) + 11",
      "(11 + (2 * 6)) + 1",
      "1 + ((6 * 2) + 11)",
      "11 + ((6 * 2) + 1)",
      "(1 + 11) + (2 * 6)",
      "1 + (11 + (6 * 2))",
      "(11 + 1) + (2 * 6)",
      "((6 * 2) + 11) + 1",
      "(1 + (6 * 2)) + 11",
      "11 + (1 + (6 * 2))",
      "((2 * 6) + 11) + 1",
      "(2 * 6) + (11 + 1)",
      "(2 * 6) + (1 + 11)",
      "11 + (1 + (2 * 6))",
      "11 + ((2 * 6) + 1)",
      "(11 + 1) + (6 * 2)",
      "1 + (11 + (2 * 6))",
      "(1 + 11) + (6 * 2)"
    ]
  },
  "1 2 6 12": {
    "cards": "1 2 6 12",
    "has_solution": "Y",
    "num_solutions": 82,
    "solutions": [
      "((1 * 6) * 2) + 12",
      "12 + (6 / (1 / 2))",
      "(12 * 1) + (2 * 6)",
      "(12 + (2 * 6)) / 1",
      "12 * (6 / (2 + 1))",
      "12 * (6 / (1 + 2))",
      "((2 * 6) / 1) + 12",
      "(1 * (6 * 2)) + 12",
      "12 + (2 * (6 * 1))",
      "((6 * 2) + 12) * 1",
      "((6 * 2) / 1) + 12",
      "12 + ((6 / 1) * 2)",
      "(2 * (1 * 6)) + 12",
      "(12 / 1) + (6 * 2)",
      "12 + (6 * (2 / 1))",
      "(12 + (2 * 6)) * 1",
      "6 / ((2 + 1) / 12)",
      "12 + (6 * (1 * 2))",
      "12 + ((2 * 6) * 1)",
      "((2 * 6) * 1) + 12",
      "(6 * 12) / (2 + 1)",
      "((2 * 6) + 12) / 1",
      "(6 * 2) + (12 * 1)",
      "(12 * 1) + (6 * 2)",
      "(6 / (1 + 2)) * 12",
      "(12 / (1 + 2)) * 6",
      "((6 / 2) - 1) * 12",
      "((2 / 1) * 6) + 12",
      "(6 * (2 * 1)) + 12",
      "12 + ((2 * 6) / 1)",
      "12 + (1 * (6 * 2))",
      "(2 * 6) + (1 * 12)",
      "12 + ((1 * 6) * 2)",
      "1 * ((6 * 2) + 12)",
      "6 * (12 / (2 + 1))",
      "(12 * 6) / (2 + 1)",
      "(12 + (6 * 2)) * 1",
      "(6 * 2) + (1 * 12)",
      "(1 * 12) + (6 * 2)",
      "12 + ((6 * 2) * 1)",
      "12 / ((1 + 2) / 6)",
      "12 + ((2 / 1) * 6)",
      "12 + ((1 * 2) * 6)",
      "12 + ((6 * 1) * 2)",
      "(12 / (2 + 1)) * 6",
      "12 + ((2 * 1) * 6)",
      "12 + (2 / (1 / 6))",
      "1 * (12 + (2 * 6))",
      "(12 * 6) / (1 + 2)",
      "((6 * 2) * 1) + 12",
      "(6 * (1 * 2)) + 12",
      "((6 * 1) * 2) + 12",
      "12 * ((6 / 2) - 1)",
      "12 + (1 * (2 * 6))",
      "12 / ((2 + 1) / 6)",
      "6 / ((1 + 2) / 12)",
      "(6 * 2) + (12 / 1)",
      "12 + ((6 * 2) / 1)",
      "6 * (12 / (1 + 2))",
      "12 + (2 * (1 * 6))",
      "(2 / (1 / 6)) + 12",
      "(6 * 12) / (1 + 2)",
      "(1 * 12) + (2 * 6)",
      "12 + (2 * (6 / 1))",
      "((1 * 2) * 6) + 12",
      "((2 * 1) * 6) + 12",
      "1 * ((2 * 6) + 12)",
      "(6 / (2 + 1)) * 12",
      "((2 * 6) + 12) * 1",
      "(2 * (6 / 1)) + 12",
      "(1 * (2 * 6)) + 12",
      "((6 / 1) * 2) + 12",
      "(12 + (6 * 2)) / 1",
      "(6 / (1 / 2)) + 12",
      "1 * (12 + (6 * 2))",
      "((6 * 2) + 12) / 1",
      "(6 * (2 / 1)) + 12",
      "12 + (6 * (2 * 1))",
      "(2 * 6) + (12 / 1)",
      "(2 * (6 * 1)) + 12",
      "(12 / 1) + (2 * 6)",
      "(2 * 6) + (12 * 1)"
    ]
  },
  "1 2 6 13": {
    "cards": "1 2 6 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "13 - (1 - (2 * 6))",
      "((2 * 6) + 13) - 1",
      "13 + ((6 * 2) - 1)",
      "(13 - 1) + (2 * 6)",
      "((6 * 2) - 1) + 13",
      "(2 * 6) + (13 - 1)",
      "((2 * 6) - 1) + 13",
      "(13 - 1) + (6 * 2)",
      "(13 + (2 * 6)) - 1",
      "13 - (1 - (6 * 2))",
      "13 + ((2 * 6) - 1)",
      "(6 * 2) - (1 - 13)",
      "((6 * 2) + 13) - 1",
      "(6 * 2) + (13 - 1)",
      "(13 + (6 * 2)) - 1",
      "(2 * 6) - (1 - 13)"
    ]
  },
  "1 2 7 7": {
    "cards": "1 2 7 7",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "((7 * 7) - 1) / 2"
    ]
  },
  "1 2 7 8": {
    "cards": "1 2 7 8",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "7 + ((2 * 8) + 1)",
      "(8 * 2) + (7 + 1)",
      "8 / (2 / (7 - 1))",
      "8 + (2 * (1 + 7))",
      "7 + (1 + (2 * 8))",
      "(2 * (1 + 7)) + 8",
      "8 + ((1 + 7) * 2)",
      "(7 - 1) / (2 / 8)",
      "(2 * 8) + (7 + 1)",
      "7 + ((8 * 2) + 1)",
      "1 + ((2 * 8) + 7)",
      "(1 + 7) + (8 * 2)",
      "((7 + 1) * 2) + 8",
      "((2 * 8) + 1) + 7",
      "1 + ((8 * 2) + 7)",
      "8 + (2 * (7 + 1))",
      "1 + (7 + (2 * 8))",
      "((2 * 8) + 7) + 1",
      "(2 * (7 + 1)) + 8",
      "(8 * (7 - 1)) / 2",
      "8 + ((7 + 1) * 2)",
      "(7 - 1) * (8 / 2)",
      "((7 - 1) * 8) / 2",
      "(1 + (2 * 8)) + 7",
      "(1 + (8 * 2)) + 7",
      "7 + (1 + (8 * 2))",
      "(7 + 1) + (2 * 8)",
      "(8 * 2) + (1 + 7)",
      "((1 + 7) * 2) + 8",
      "(7 + (2 * 8)) + 1",
      "(1 + 7) + (2 * 8)",
      "(8 / 2) * (7 - 1)",
      "((8 * 2) + 7) + 1",
      "((8 * 2) + 1) + 7",
      "((7 - 1) / 2) * 8",
      "(7 + (8 * 2)) + 1",
      "8 * ((7 - 1) / 2)",
      "(7 + 1) + (8 * 2)",
      "(2 * 8) + (1 + 7)",
      "1 + (7 + (8 * 2))"
    ]
  },
  "1 2 7 9": {
    "cards": "1 2 7 9",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "9 + ((2 * 7) + 1)",
      "(1 + 9) + (2 * 7)",
      "(9 + 1) + (7 * 2)",
      "((2 * 9) - 1) + 7",
      "7 - (1 - (9 * 2))",
      "(2 * 9) - (1 - 7)",
      "(7 - 1) + (2 * 9)",
      "(1 + (7 * 2)) + 9",
      "1 + ((7 * 2) + 9)",
      "((7 * 2) + 9) + 1",
      "(9 + (7 * 2)) + 1",
      "(1 + (2 * 7)) + 9",
      "(7 + (2 * 9)) - 1",
      "(2 * 9) + (7 - 1)",
      "1 + ((2 * 7) + 9)",
      "((2 * 9) + 7) - 1",
      "((2 * 7) + 9) + 1",
      "(7 + (9 * 2)) - 1",
      "(9 * 2) - (1 - 7)",
      "(9 + 1) + (2 * 7)",
      "7 + ((2 * 9) - 1)",
      "9 + (1 + (7 * 2))",
      "(7 * 2) + (1 + 9)",
      "7 + ((9 * 2) - 1)",
      "((9 * 2) + 7) - 1",
      "((7 * 2) + 1) + 9",
      "(7 * 2) + (9 + 1)",
      "(2 * 7) + (9 + 1)",
      "(7 - 1) + (9 * 2)",
      "(9 + (2 * 7)) + 1",
      "(2 * 7) + (1 + 9)",
      "7 - (1 - (2 * 9))",
      "(9 * 2) + (7 - 1)",
      "9 + ((7 * 2) + 1)",
      "1 + (9 + (2 * 7))",
      "1 + (9 + (7 * 2))",
      "9 + (1 + (2 * 7))",
      "((9 * 2) - 1) + 7",
      "(1 + 9) + (7 * 2)",
      "((2 * 7) + 1) + 9"
    ]
  },
  "1 2 7 10": {
    "cards": "1 2 7 10",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "10 + (1 * (7 * 2))",
      "((2 * 7) / 1) + 10",
      "((7 * 2) + 10) / 1",
      "10 + (2 * (1 * 7))",
      "10 + (2 * (7 * 1))",
      "(2 * (1 * 7)) + 10",
      "(7 * 2) + (10 / 1)",
      "(2 * (7 / 1)) + 10",
      "((1 * 2) * 7) + 10",
      "1 * (10 + (2 * 7))",
      "(7 * (2 / 1)) + 10",
      "(10 + (2 * 7)) / 1",
      "((1 * 7) * 2) + 10",
      "10 + ((7 / 1) * 2)",
      "((2 * 7) * 1) + 10",
      "10 + ((2 / 1) * 7)",
      "(10 + (7 * 2)) / 1",
      "10 + (1 * (2 * 7))",
      "(7 / (1 / 2)) + 10",
      "(7 * 2) + (1 * 10)",
      "10 + ((7 * 2) * 1)",
      "10 + ((7 * 1) * 2)",
      "((7 * 2) / 1) + 10",
      "((7 * 2) * 1) + 10",
      "(2 / (1 / 7)) + 10",
      "(2 * 7) + (10 / 1)",
      "(1 * (7 * 2)) + 10",
      "1 * ((7 * 2) + 10)",
      "(7 * (1 * 2)) + 10",
      "(10 / 1) + (7 * 2)",
      "10 + (7 * (2 / 1))",
      "(10 * 1) + (2 * 7)",
      "(2 * (7 * 1)) + 10",
      "(1 * (2 * 7)) + 10",
      "((7 / 1) * 2) + 10",
      "10 + ((7 * 2) / 1)",
      "10 + (2 * (7 / 1))",
      "(10 * 1) + (7 * 2)",
      "10 + (7 / (1 / 2))",
      "(2 * 7) + (10 * 1)",
      "(1 * 10) + (7 * 2)",
      "10 + (7 * (1 * 2))",
      "10 + (7 * (2 * 1))",
      "10 + ((1 * 2) * 7)",
      "(7 * (2 * 1)) + 10",
      "10 + ((2 * 1) * 7)",
      "10 + ((1 * 7) * 2)",
      "1 * ((2 * 7) + 10)",
      "(10 + (2 * 7)) * 1",
      "10 + (2 / (1 / 7))",
      "(7 * 2) + (10 * 1)",
      "10 + ((2 * 7) * 1)",
      "(1 * 10) + (2 * 7)",
      "10 + ((2 * 7) / 1)",
      "1 * (10 + (7 * 2))",
      "((7 * 2) + 10) * 1",
      "(10 / 1) + (2 * 7)",
      "(2 * 7) + (1 * 10)",
      "((2 * 7) + 10) / 1",
      "((2 * 7) + 10) * 1",
      "((7 * 1) * 2) + 10",
      "(10 + (7 * 2)) * 1",
      "((2 * 1) * 7) + 10",
      "((2 / 1) * 7) + 10"
    ]
  },
  "1 2 7 11": {
    "cards": "1 2 7 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(11 - 1) + (7 * 2)",
      "(2 * 7) - (1 - 11)",
      "(7 * 2) + (11 - 1)",
      "((7 * 2) + 11) - 1",
      "(11 + (2 * 7)) - 1",
      "11 + ((2 * 7) - 1)",
      "11 - (1 - (2 * 7))",
      "((2 * 7) + 11) - 1",
      "((7 * 2) - 1) + 11",
      "(7 * 2) - (1 - 11)",
      "(11 + (7 * 2)) - 1",
      "11 - (1 - (7 * 2))",
      "(2 * 7) + (11 - 1)",
      "(11 - 1) + (2 * 7)",
      "11 + ((7 * 2) - 1)",
      "((2 * 7) - 1) + 11"
    ]
  },
  "1 2 7 12": {
    "cards": "1 2 7 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(2 * (7 - 1)) + 12",
      "12 - ((1 - 7) * 2)",
      "12 - (2 * (1 - 7))",
      "((7 - 1) * 2) + 12",
      "12 + (2 * (7 - 1))",
      "12 + ((7 - 1) * 2)"
    ]
  },
  "1 2 7 13": {
    "cards": "1 2 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 8 8": {
    "cards": "1 2 8 8",
    "has_solution": "Y",
    "num_solutions": 66,
    "solutions": [
      "8 + ((2 * 8) / 1)",
      "((8 * 2) * 1) + 8",
      "8 + (8 * (2 / 1))",
      "((8 / 2) - 1) * 8",
      "8 + ((1 * 8) * 2)",
      "(8 * 1) + (2 * 8)",
      "8 + (2 * (8 * 1))",
      "(1 * (8 * 2)) + 8",
      "((8 * 1) * 2) + 8",
      "1 * ((2 * 8) + 8)",
      "(8 * (2 / 1)) + 8",
      "(8 * 2) + (8 / 1)",
      "((8 * 2) / 1) + 8",
      "(1 * 8) + (8 * 2)",
      "(8 / 1) + (8 * 2)",
      "((8 / 1) * 2) + 8",
      "8 + ((2 * 1) * 8)",
      "(8 + (8 * 2)) / 1",
      "8 + ((8 * 2) / 1)",
      "8 + (1 * (2 * 8))",
      "8 + ((8 / 1) * 2)",
      "(8 * (1 * 2)) + 8",
      "(8 * 2) + (8 * 1)",
      "8 + ((8 * 2) * 1)",
      "(1 * 8) + (2 * 8)",
      "8 + (1 * (8 * 2))",
      "(2 * 8) + (1 * 8)",
      "((8 * 2) + 8) * 1",
      "(2 * 8) + (8 * 1)",
      "1 * (8 + (8 * 2))",
      "(8 + (8 * 2)) * 1",
      "8 + (8 / (1 / 2))",
      "((1 * 2) * 8) + 8",
      "8 + ((8 * 1) * 2)",
      "((2 * 8) + 8) / 1",
      "1 * (8 + (2 * 8))",
      "8 + ((2 / 1) * 8)",
      "((8 * 2) + 8) / 1",
      "(8 / 1) + (2 * 8)",
      "(8 * 2) + (1 * 8)",
      "(8 + (2 * 8)) * 1",
      "8 * ((8 / 2) - 1)",
      "8 + (8 * (2 * 1))",
      "(8 * 1) + (8 * 2)",
      "(2 * (8 * 1)) + 8",
      "((1 * 8) * 2) + 8",
      "((2 * 1) * 8) + 8",
      "((2 * 8) * 1) + 8",
      "8 + (2 * (8 / 1))",
      "8 + (2 / (1 / 8))",
      "(8 / (1 / 2)) + 8",
      "(8 * (2 * 1)) + 8",
      "((2 / 1) * 8) + 8",
      "(8 + (2 * 8)) / 1",
      "((2 * 8) / 1) + 8",
      "8 + ((1 * 2) * 8)",
      "((2 * 8) + 8) * 1",
      "(2 * (1 * 8)) + 8",
      "(1 * (2 * 8)) + 8",
      "(2 * (8 / 1)) + 8",
      "8 + (8 * (1 * 2))",
      "(2 / (1 / 8)) + 8",
      "1 * ((8 * 2) + 8)",
      "8 + (2 * (1 * 8))",
      "8 + ((2 * 8) * 1)",
      "(2 * 8) + (8 / 1)"
    ]
  },
  "1 2 8 9": {
    "cards": "1 2 8 9",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "(9 + (2 * 8)) - 1",
      "8 - (2 * (1 - 9))",
      "((2 * 8) + 9) - 1",
      "(2 * 8) + (9 - 1)",
      "9 - (1 - (2 * 8))",
      "8 + ((9 - 1) * 2)",
      "9 + ((2 * 8) - 1)",
      "((9 - 1) * 2) + 8",
      "8 / ((1 + 2) / 9)",
      "9 * (8 / (1 + 2))",
      "8 * (9 / (2 + 1))",
      "8 * (9 / (1 + 2))",
      "9 / ((2 + 1) / 8)",
      "8 - ((1 - 9) * 2)",
      "(9 - 1) + (8 * 2)",
      "8 + (2 * (9 - 1))",
      "(9 * 8) / (2 + 1)",
      "9 * (8 / (2 + 1))",
      "(8 / (2 + 1)) * 9",
      "((8 * 2) + 9) - 1",
      "(2 * 8) - (1 - 9)",
      "9 + ((8 * 2) - 1)",
      "(8 * 2) + (9 - 1)",
      "(9 - 1) + (2 * 8)",
      "8 / ((2 + 1) / 9)",
      "9 - (1 - (8 * 2))",
      "(8 * 2) - (1 - 9)",
      "(9 + (8 * 2)) - 1",
      "(2 * (9 - 1)) + 8",
      "(9 / (2 + 1)) * 8",
      "(8 * 9) / (2 + 1)",
      "(9 * 8) / (1 + 2)",
      "(8 / (1 + 2)) * 9",
      "((8 * 2) - 1) + 9",
      "((2 * 8) - 1) + 9",
      "9 / ((1 + 2) / 8)",
      "(9 / (1 + 2)) * 8",
      "(8 * 9) / (1 + 2)"
    ]
  },
  "1 2 8 10": {
    "cards": "1 2 8 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "10 - (2 * (1 - 8))",
      "10 - ((1 - 8) * 2)",
      "((8 - 1) * 2) + 10",
      "10 + (2 * (8 - 1))",
      "10 + ((8 - 1) * 2)",
      "(2 * (8 - 1)) + 10"
    ]
  },
  "1 2 8 11": {
    "cards": "1 2 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 8 12": {
    "cards": "1 2 8 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 8 13": {
    "cards": "1 2 8 13",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "(13 + 8) + (2 + 1)",
      "(8 + (13 + 2)) + 1",
      "(13 + (1 + 8)) + 2",
      "2 + (8 + (1 + 13))",
      "13 + ((1 + 8) + 2)",
      "((1 + 2) + 8) + 13",
      "(1 + 2) + (13 + 8)",
      "2 + ((13 + 1) + 8)",
      "((8 + 13) + 1) + 2",
      "(13 + 8) + (1 + 2)",
      "2 + ((1 + 13) + 8)",
      "(1 + (2 + 13)) + 8",
      "2 + (13 + (8 + 1))",
      "(2 + 8) + (13 + 1)",
      "((8 + 13) + 2) + 1",
      "1 + ((8 + 2) + 13)",
      "1 + (2 + (13 + 8))",
      "8 + (1 + (2 + 13))",
      "13 + ((2 + 8) + 1)",
      "13 + (2 + (8 + 1))",
      "((1 + 13) + 2) + 8",
      "((2 + 1) + 13) + 8",
      "13 + (1 + (8 + 2))",
      "8 + (13 + (1 + 2))",
      "13 + (1 + (2 + 8))",
      "((1 + 13) + 8) + 2",
      "((1 + 2) + 13) + 8",
      "(8 + (2 + 1)) + 13",
      "((13 + 8) + 1) + 2",
      "8 + ((1 + 13) + 2)",
      "8 + ((13 + 2) + 1)",
      "((13 + 1) + 8) + 2",
      "8 + ((2 + 1) + 13)",
      "8 + ((13 + 1) + 2)",
      "2 + (8 + (13 + 1))",
      "((1 + 8) + 2) + 13",
      "(1 + 2) + (8 + 13)",
      "(1 + (8 + 2)) + 13",
      "2 + ((13 + 8) + 1)",
      "(8 + (2 + 13)) + 1",
      "(1 + 8) + (13 + 2)",
      "8 + (2 + (13 + 1))",
      "(2 + 1) + (13 + 8)",
      "(2 + 13) + (8 + 1)",
      "2 + ((1 + 8) + 13)",
      "((2 + 8) + 13) + 1",
      "1 + (13 + (2 + 8))",
      "1 + ((13 + 2) + 8)",
      "(1 + 8) + (2 + 13)",
      "13 + ((8 + 2) + 1)",
      "((8 + 1) + 2) + 13",
      "(2 + (8 + 1)) + 13",
      "(1 + 13) + (8 + 2)",
      "2 + ((8 + 13) + 1)",
      "(1 + (13 + 8)) + 2",
      "(2 + 1) + (8 + 13)",
      "13 + (2 + (1 + 8))",
      "(2 + (13 + 1)) + 8",
      "((2 + 8) + 1) + 13",
      "8 + (13 + (2 + 1))",
      "2 + ((8 + 1) + 13)",
      "(8 + 2) + (13 + 1)",
      "((13 + 1) + 2) + 8",
      "13 + (8 + (1 + 2))",
      "((2 + 1) + 8) + 13",
      "((1 + 8) + 13) + 2",
      "(8 + (1 + 13)) + 2",
      "(13 + 1) + (8 + 2)",
      "13 + ((8 + 1) + 2)",
      "(1 + (2 + 8)) + 13",
      "((2 + 13) + 8) + 1",
      "(8 + 13) + (2 + 1)",
      "1 + (8 + (13 + 2))",
      "(8 + 1) + (2 + 13)",
      "2 + (13 + (1 + 8))",
      "((8 + 2) + 1) + 13",
      "(2 + (1 + 8)) + 13",
      "((8 + 2) + 13) + 1",
      "(13 + 2) + (1 + 8)",
      "(8 + 1) + (13 + 2)",
      "((13 + 2) + 1) + 8",
      "(13 + (2 + 8)) + 1",
      "(2 + 8) + (1 + 13)",
      "1 + (2 + (8 + 13))",
      "(1 + 13) + (2 + 8)",
      "(13 + 1) + (2 + 8)",
      "((13 + 2) + 8) + 1",
      "(13 + (8 + 2)) + 1",
      "(8 + (1 + 2)) + 13",
      "13 + ((1 + 2) + 8)",
      "(8 + 13) + (1 + 2)",
      "8 + (1 + (13 + 2))",
      "(2 + (1 + 13)) + 8",
      "(1 + (13 + 2)) + 8",
      "(8 + (13 + 1)) + 2",
      "2 + (1 + (8 + 13))",
      "(2 + (13 + 8)) + 1",
      "8 + ((2 + 13) + 1)",
      "13 + (8 + (2 + 1))",
      "1 + (8 + (2 + 13))",
      "(13 + (2 + 1)) + 8",
      "(13 + (1 + 2)) + 8",
      "1 + (13 + (8 + 2))",
      "(13 + (8 + 1)) + 2",
      "8 + ((1 + 2) + 13)",
      "13 + ((2 + 1) + 8)",
      "1 + ((8 + 13) + 2)",
      "(2 + 13) + (1 + 8)",
      "(8 + 2) + (1 + 13)",
      "(2 + (8 + 13)) + 1",
      "1 + ((2 + 8) + 13)",
      "2 + (1 + (13 + 8))",
      "(1 + (8 + 13)) + 2",
      "1 + ((13 + 8) + 2)",
      "1 + ((2 + 13) + 8)",
      "((2 + 13) + 1) + 8",
      "(13 + 2) + (8 + 1)",
      "8 + (2 + (1 + 13))",
      "((13 + 8) + 2) + 1",
      "((8 + 1) + 13) + 2"
    ]
  },
  "1 2 9 9": {
    "cards": "1 2 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 9 10": {
    "cards": "1 2 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 9 11": {
    "cards": "1 2 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((2 + 1) * 11) - 9",
      "(11 * (1 + 2)) - 9",
      "((1 + 2) * 11) - 9",
      "(11 * (2 + 1)) - 9"
    ]
  },
  "1 2 9 12": {
    "cards": "1 2 9 12",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "1 + (12 + (9 + 2))",
      "((1 + 12) + 9) + 2",
      "(1 + (2 + 9)) + 12",
      "((1 + 12) + 2) + 9",
      "((1 + 2) + 9) + 12",
      "(2 + 1) + (9 + 12)",
      "(12 + 9) + (1 + 2)",
      "(1 + (9 + 2)) + 12",
      "(9 + 2) + (12 + 1)",
      "9 + (1 + (12 + 2))",
      "12 + ((1 + 9) + 2)",
      "(12 + (1 + 9)) + 2",
      "9 + (12 + (2 + 1))",
      "12 + ((2 + 9) + 1)",
      "(2 + 9) + (1 + 12)",
      "2 + (12 + (1 + 9))",
      "(1 + 12) + (9 + 2)",
      "9 + ((12 + 2) + 1)",
      "(12 + 2) + (9 + 1)",
      "(9 + 12) + (1 + 2)",
      "((2 + 9) + 1) + 12",
      "2 + (9 + (12 + 1))",
      "(2 + (12 + 9)) + 1",
      "1 + ((9 + 2) + 12)",
      "((9 + 2) + 12) + 1",
      "((2 + 1) + 12) + 9",
      "(12 + 1) + (9 + 2)",
      "1 + (2 + (12 + 9))",
      "9 + ((2 + 12) + 1)",
      "((1 + 2) + 12) + 9",
      "9 + ((1 + 2) + 12)",
      "(1 + (2 + 12)) + 9",
      "1 + (9 + (2 + 12))",
      "((12 + 1) + 2) + 9",
      "(1 + (9 + 12)) + 2",
      "(2 + (9 + 1)) + 12",
      "2 + (9 + (1 + 12))",
      "(12 + (2 + 9)) + 1",
      "2 + (1 + (9 + 12))",
      "(2 + 1) + (12 + 9)",
      "(2 + (1 + 12)) + 9",
      "(9 + (12 + 1)) + 2",
      "12 + (9 + (1 + 2))",
      "1 + (9 + (12 + 2))",
      "(1 + 9) + (12 + 2)",
      "2 + ((9 + 12) + 1)",
      "(12 + 2) + (1 + 9)",
      "((2 + 12) + 9) + 1",
      "(9 + (1 + 2)) + 12",
      "12 + ((9 + 1) + 2)",
      "2 + ((12 + 9) + 1)",
      "1 + ((12 + 9) + 2)",
      "2 + ((12 + 1) + 9)",
      "9 + ((2 + 1) + 12)",
      "((12 + 9) + 2) + 1",
      "(1 + (12 + 9)) + 2",
      "12 + (2 + (9 + 1))",
      "1 + ((2 + 9) + 12)",
      "((1 + 9) + 2) + 12",
      "9 + (1 + (2 + 12))",
      "12 + ((1 + 2) + 9)",
      "9 + (2 + (12 + 1))",
      "(9 + (2 + 12)) + 1",
      "9 + ((12 + 1) + 2)",
      "(2 + 9) + (12 + 1)",
      "(9 + (2 + 1)) + 12",
      "((9 + 12) + 2) + 1",
      "(1 + 2) + (9 + 12)",
      "1 + ((9 + 12) + 2)",
      "(1 + (12 + 2)) + 9",
      "(9 + (1 + 12)) + 2",
      "12 + (2 + (1 + 9))",
      "((12 + 2) + 1) + 9",
      "((1 + 9) + 12) + 2",
      "(1 + 9) + (2 + 12)",
      "9 + ((1 + 12) + 2)",
      "(2 + 12) + (1 + 9)",
      "((12 + 2) + 9) + 1",
      "9 + (12 + (1 + 2))",
      "(1 + 12) + (2 + 9)",
      "2 + ((1 + 12) + 9)",
      "(2 + 12) + (9 + 1)",
      "12 + (9 + (2 + 1))",
      "((9 + 1) + 12) + 2",
      "(9 + 12) + (2 + 1)",
      "(12 + (1 + 2)) + 9",
      "9 + (2 + (1 + 12))",
      "(2 + (9 + 12)) + 1",
      "2 + ((1 + 9) + 12)",
      "1 + (12 + (2 + 9))",
      "((12 + 9) + 1) + 2",
      "1 + ((2 + 12) + 9)",
      "(2 + (12 + 1)) + 9",
      "12 + ((2 + 1) + 9)",
      "(12 + 9) + (2 + 1)",
      "((9 + 2) + 1) + 12",
      "12 + (1 + (2 + 9))",
      "(9 + 1) + (12 + 2)",
      "(9 + 2) + (1 + 12)",
      "1 + ((12 + 2) + 9)",
      "1 + (2 + (9 + 12))",
      "12 + (1 + (9 + 2))",
      "((2 + 9) + 12) + 1",
      "((12 + 1) + 9) + 2",
      "12 + ((9 + 2) + 1)",
      "2 + ((9 + 1) + 12)",
      "((2 + 12) + 1) + 9",
      "2 + (1 + (12 + 9))",
      "((2 + 1) + 9) + 12",
      "(12 + (9 + 1)) + 2",
      "((9 + 1) + 2) + 12",
      "(12 + (2 + 1)) + 9",
      "((9 + 12) + 1) + 2",
      "(1 + 2) + (12 + 9)",
      "(2 + (1 + 9)) + 12",
      "2 + (12 + (9 + 1))",
      "(12 + (9 + 2)) + 1",
      "(12 + 1) + (2 + 9)",
      "(9 + 1) + (2 + 12)",
      "(9 + (12 + 2)) + 1"
    ]
  },
  "1 2 9 13": {
    "cards": "1 2 9 13",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "((9 + 13) * 1) + 2",
      "(13 + 2) + (1 * 9)",
      "(1 * (2 + 13)) + 9",
      "(13 + (2 + 9)) * 1",
      "((9 + 2) * 1) + 13",
      "9 + ((1 * 13) + 2)",
      "(2 + (9 + 13)) / 1",
      "(1 * (9 + 13)) + 2",
      "13 + ((9 * 1) + 2)",
      "2 + (9 + (13 * 1))",
      "((2 * 1) + 13) + 9",
      "13 + ((9 + 2) * 1)",
      "(2 + (9 * 1)) + 13",
      "(2 + 9) + (13 * 1)",
      "9 + (13 + (1 * 2))",
      "2 + (9 + (1 * 13))",
      "2 + ((13 * 1) + 9)",
      "13 + ((2 + 9) / 1)",
      "(1 * (9 + 2)) + 13",
      "(2 * 1) + (9 + 13)",
      "(9 + (13 + 2)) / 1",
      "((13 * 1) + 2) + 9",
      "(9 + (13 + 2)) * 1",
      "((13 + 2) + 9) / 1",
      "(9 + 13) + (2 * 1)",
      "1 * ((9 + 13) + 2)",
      "((9 + 2) + 13) / 1",
      "(9 * 1) + (2 + 13)",
      "(9 + (2 / 1)) + 13",
      "9 + (13 + (2 / 1))",
      "(9 / 1) + (13 + 2)",
      "((13 + 9) * 1) + 2",
      "(2 + 13) + (9 * 1)",
      "1 * ((9 + 2) + 13)",
      "(13 + 9) + (2 / 1)",
      "13 + (1 * (9 + 2))",
      "13 + ((2 + 9) * 1)",
      "((1 * 9) + 13) + 2",
      "((9 + 2) + 13) * 1",
      "((13 + 2) / 1) + 9",
      "2 + (9 + (13 / 1))",
      "13 + ((2 / 1) + 9)",
      "9 + (2 + (13 / 1))",
      "((1 * 13) + 9) + 2",
      "((2 / 1) + 13) + 9",
      "2 + ((1 * 13) + 9)",
      "(13 + 2) + (9 * 1)",
      "(9 + 2) + (1 * 13)",
      "((13 + 2) * 1) + 9",
      "1 * ((13 + 9) + 2)",
      "((2 * 1) + 9) + 13",
      "(13 + (2 * 1)) + 9",
      "13 + (1 * (2 + 9))",
      "(13 + (2 / 1)) + 9",
      "13 + (2 + (9 / 1))",
      "((2 + 13) / 1) + 9",
      "((13 * 1) + 9) + 2",
      "13 + (9 + (2 * 1))",
      "((1 * 2) + 9) + 13",
      "9 + (13 + (2 * 1))",
      "13 + ((9 + 2) / 1)",
      "((2 / 1) + 9) + 13",
      "(2 + 9) + (1 * 13)",
      "(13 + (9 + 2)) * 1",
      "((2 + 13) + 9) / 1",
      "9 + ((13 + 2) / 1)",
      "(2 + 13) + (9 / 1)",
      "2 + ((13 / 1) + 9)",
      "(2 / 1) + (13 + 9)",
      "9 + (1 * (13 + 2))",
      "2 + (13 + (1 * 9))",
      "(2 + 13) + (1 * 9)",
      "9 + ((13 / 1) + 2)",
      "(9 + 13) + (1 * 2)",
      "13 + (2 + (9 * 1))",
      "(13 / 1) + (9 + 2)",
      "13 + (9 + (1 * 2))",
      "((9 + 13) + 2) * 1",
      "9 + ((2 + 13) * 1)",
      "(9 + (2 + 13)) * 1",
      "1 * (9 + (2 + 13))",
      "((1 * 2) + 13) + 9",
      "(9 * 1) + (13 + 2)",
      "13 + ((9 / 1) + 2)",
      "9 + ((2 * 1) + 13)",
      "(2 + (1 * 13)) + 9",
      "9 + ((13 + 2) * 1)",
      "(9 + (2 + 13)) / 1",
      "(2 + (1 * 9)) + 13",
      "(13 + 9) + (1 * 2)",
      "1 * (2 + (9 + 13))",
      "2 + ((9 * 1) + 13)",
      "(9 + (13 / 1)) + 2",
      "9 + (1 * (2 + 13))",
      "1 * (13 + (2 + 9))",
      "(9 / 1) + (2 + 13)",
      "(13 * 1) + (9 + 2)",
      "((1 * 13) + 2) + 9",
      "2 + (13 + (9 * 1))",
      "(1 * (2 + 9)) + 13",
      "(13 + 2) + (9 / 1)",
      "1 * ((2 + 9) + 13)",
      "((13 + 2) + 9) * 1",
      "(13 + (9 / 1)) + 2",
      "2 + ((9 + 13) * 1)",
      "((13 + 9) + 2) * 1",
      "(13 + (9 * 1)) + 2",
      "((9 + 13) + 2) / 1",
      "((2 + 9) / 1) + 13",
      "2 + ((9 / 1) + 13)",
      "13 + ((1 * 9) + 2)",
      "(9 + 13) + (2 / 1)",
      "((13 / 1) + 2) + 9",
      "(2 + (13 / 1)) + 9",
      "9 + ((2 + 13) / 1)",
      "((1 * 9) + 2) + 13",
      "13 + ((1 * 2) + 9)",
      "(1 * 13) + (9 + 2)",
      "((9 + 13) / 1) + 2",
      "1 * (2 + (13 + 9))",
      "(13 + (1 * 2)) + 9",
      "(13 + (2 + 9)) / 1",
      "(2 + (13 + 9)) * 1",
      "1 * ((13 + 2) + 9)",
      "(1 * 2) + (13 + 9)",
      "(1 * (13 + 9)) + 2",
      "(9 + 2) + (13 * 1)",
      "2 + ((13 + 9) / 1)",
      "(2 + (9 + 13)) * 1",
      "(2 + (13 * 1)) + 9",
      "(1 * 2) + (9 + 13)",
      "(9 + 2) + (13 / 1)",
      "((2 + 13) + 9) * 1",
      "(13 * 1) + (2 + 9)",
      "(9 + (2 * 1)) + 13",
      "((9 + 2) / 1) + 13",
      "2 + ((1 * 9) + 13)",
      "9 + ((1 * 2) + 13)",
      "2 + (13 + (9 / 1))",
      "((9 * 1) + 2) + 13",
      "(1 * (13 + 2)) + 9",
      "((13 / 1) + 9) + 2",
      "(2 + (9 / 1)) + 13",
      "13 + (9 + (2 / 1))",
      "(2 * 1) + (13 + 9)",
      "(1 * 9) + (2 + 13)",
      "((9 / 1) + 13) + 2",
      "(1 * 9) + (13 + 2)",
      "(13 + 9) + (2 * 1)",
      "(1 * 13) + (2 + 9)",
      "1 * (9 + (13 + 2))",
      "((9 * 1) + 13) + 2",
      "(2 + (13 + 9)) / 1",
      "((9 / 1) + 2) + 13",
      "2 + ((9 + 13) / 1)",
      "2 + ((13 + 9) * 1)",
      "1 * (13 + (9 + 2))",
      "1 * ((2 + 13) + 9)",
      "(9 + (1 * 13)) + 2",
      "(9 + (13 * 1)) + 2",
      "9 + ((2 / 1) + 13)",
      "2 + (1 * (13 + 9))",
      "(13 + (1 * 9)) + 2",
      "(2 / 1) + (9 + 13)",
      "(2 + 9) + (13 / 1)",
      "(9 + (1 * 2)) + 13",
      "((2 + 9) + 13) / 1",
      "(13 + (9 + 2)) / 1",
      "9 + ((13 * 1) + 2)",
      "((2 + 9) + 13) * 1",
      "(13 / 1) + (2 + 9)",
      "((13 + 9) + 2) / 1",
      "2 + (1 * (9 + 13))",
      "9 + (2 + (1 * 13))",
      "((2 + 9) * 1) + 13",
      "9 + (2 + (13 * 1))",
      "13 + ((2 * 1) + 9)",
      "((2 + 13) * 1) + 9",
      "((13 + 9) / 1) + 2",
      "13 + (2 + (1 * 9))"
    ]
  },
  "1 2 10 10": {
    "cards": "1 2 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 2 10 11": {
    "cards": "1 2 10 11",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "10 + ((2 + 11) + 1)",
      "(1 + (11 + 10)) + 2",
      "11 + ((1 + 2) + 10)",
      "2 + ((10 + 1) + 11)",
      "((11 + 2) + 1) + 10",
      "(10 + (1 + 2)) + 11",
      "((10 + 11) + 1) + 2",
      "2 + (11 + (1 + 10))",
      "(10 + (1 + 11)) + 2",
      "10 + ((1 + 2) + 11)",
      "11 + (2 + (10 + 1))",
      "1 + ((2 + 10) + 11)",
      "11 + ((10 + 1) + 2)",
      "(10 + 2) + (1 + 11)",
      "((10 + 2) + 11) + 1",
      "(10 + (11 + 1)) + 2",
      "((2 + 10) + 1) + 11",
      "(2 + (11 + 1)) + 10",
      "1 + (2 + (10 + 11))",
      "((11 + 1) + 2) + 10",
      "(2 + 10) + (11 + 1)",
      "1 + (10 + (11 + 2))",
      "(11 + 2) + (10 + 1)",
      "1 + ((11 + 10) + 2)",
      "(1 + 11) + (10 + 2)",
      "((1 + 10) + 11) + 2",
      "(1 + (10 + 11)) + 2",
      "((10 + 1) + 11) + 2",
      "(2 + 10) + (1 + 11)",
      "(10 + 11) + (1 + 2)",
      "10 + (11 + (1 + 2))",
      "((11 + 1) + 10) + 2",
      "((10 + 11) + 2) + 1",
      "10 + (2 + (11 + 1))",
      "11 + (10 + (1 + 2))",
      "(2 + (10 + 1)) + 11",
      "1 + ((11 + 2) + 10)",
      "(11 + 1) + (2 + 10)",
      "(1 + (11 + 2)) + 10",
      "2 + ((1 + 11) + 10)",
      "2 + (11 + (10 + 1))",
      "1 + (2 + (11 + 10))",
      "11 + (1 + (10 + 2))",
      "(2 + 11) + (10 + 1)",
      "1 + ((2 + 11) + 10)",
      "(1 + 10) + (2 + 11)",
      "(1 + (2 + 10)) + 11",
      "((2 + 11) + 10) + 1",
      "11 + (1 + (2 + 10))",
      "10 + ((11 + 1) + 2)",
      "((1 + 11) + 2) + 10",
      "(11 + (10 + 2)) + 1",
      "1 + ((10 + 2) + 11)",
      "(2 + (1 + 11)) + 10",
      "11 + ((2 + 1) + 10)",
      "2 + (10 + (11 + 1))",
      "(2 + (10 + 11)) + 1",
      "(2 + 1) + (11 + 10)",
      "10 + ((1 + 11) + 2)",
      "11 + ((2 + 10) + 1)",
      "(11 + (2 + 10)) + 1",
      "(10 + (2 + 11)) + 1",
      "(1 + 10) + (11 + 2)",
      "((1 + 2) + 10) + 11",
      "(11 + 10) + (1 + 2)",
      "(10 + 2) + (11 + 1)",
      "1 + ((10 + 11) + 2)",
      "10 + (1 + (11 + 2))",
      "(11 + (1 + 2)) + 10",
      "10 + (1 + (2 + 11))",
      "2 + ((11 + 1) + 10)",
      "((11 + 10) + 1) + 2",
      "(1 + (10 + 2)) + 11",
      "((10 + 1) + 2) + 11",
      "(11 + 1) + (10 + 2)",
      "((2 + 10) + 11) + 1",
      "10 + (11 + (2 + 1))",
      "(11 + (10 + 1)) + 2",
      "((1 + 10) + 2) + 11",
      "(11 + (1 + 10)) + 2",
      "((1 + 11) + 10) + 2",
      "(11 + (2 + 1)) + 10",
      "(10 + 1) + (11 + 2)",
      "(1 + 2) + (11 + 10)",
      "(10 + (11 + 2)) + 1",
      "(10 + 11) + (2 + 1)",
      "((2 + 1) + 10) + 11",
      "(2 + (1 + 10)) + 11",
      "11 + (10 + (2 + 1))",
      "10 + (2 + (1 + 11))",
      "11 + (2 + (1 + 10))",
      "(10 + (2 + 1)) + 11",
      "2 + (1 + (10 + 11))",
      "2 + ((11 + 10) + 1)",
      "(1 + 11) + (2 + 10)",
      "2 + ((10 + 11) + 1)",
      "11 + ((10 + 2) + 1)",
      "1 + (11 + (10 + 2))",
      "((1 + 2) + 11) + 10",
      "((2 + 11) + 1) + 10",
      "1 + (10 + (2 + 11))",
      "((2 + 1) + 11) + 10",
      "2 + ((1 + 10) + 11)",
      "2 + (1 + (11 + 10))",
      "10 + ((2 + 1) + 11)",
      "((11 + 2) + 10) + 1",
      "(1 + (2 + 11)) + 10",
      "(2 + (11 + 10)) + 1",
      "11 + ((1 + 10) + 2)",
      "(10 + 1) + (2 + 11)",
      "((10 + 2) + 1) + 11",
      "1 + (11 + (2 + 10))",
      "(11 + 10) + (2 + 1)",
      "((11 + 10) + 2) + 1",
      "(11 + 2) + (1 + 10)",
      "(2 + 11) + (1 + 10)",
      "(2 + 1) + (10 + 11)",
      "(1 + 2) + (10 + 11)",
      "2 + (10 + (1 + 11))",
      "10 + ((11 + 2) + 1)"
    ]
  },
  "1 2 10 12": {
    "cards": "1 2 10 12",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "10 + (1 * (12 + 2))",
      "((12 + 2) + 10) * 1",
      "((12 / 1) + 10) + 2",
      "10 + ((12 + 2) * 1)",
      "(2 + 10) + (1 * 12)",
      "1 * ((12 + 10) + 2)",
      "(2 / 1) + (10 + 12)",
      "(12 + 10) + (2 / 1)",
      "(12 + (2 / 1)) + 10",
      "((2 + 12) * 1) + 10",
      "(12 + (1 * 10)) + 2",
      "(12 / 1) + (2 + 10)",
      "(2 + (12 / 1)) + 10",
      "(2 + (12 + 10)) / 1",
      "1 * ((2 + 10) + 12)",
      "2 + ((10 + 12) / 1)",
      "((10 + 12) / 1) + 2",
      "10 + ((12 + 2) / 1)",
      "((2 * 1) + 10) + 12",
      "(2 + 12) + (1 * 10)",
      "((2 + 10) * 1) + 12",
      "((12 * 1) + 2) + 10",
      "10 + ((2 / 1) + 12)",
      "(12 + 2) + (1 * 10)",
      "((12 * 1) + 10) + 2",
      "1 * (10 + (2 + 12))",
      "((1 * 2) + 10) + 12",
      "((12 + 10) * 1) + 2",
      "(1 * 2) + (10 + 12)",
      "12 + (2 + (10 * 1))",
      "(10 + 12) + (2 * 1)",
      "(1 * 12) + (2 + 10)",
      "1 * ((10 + 12) + 2)",
      "12 + (10 + (1 * 2))",
      "((10 + 12) + 2) * 1",
      "12 + ((2 + 10) / 1)",
      "1 * (12 + (2 + 10))",
      "(10 + 2) + (12 * 1)",
      "(10 + (2 + 12)) * 1",
      "(10 / 1) + (12 + 2)",
      "(1 * (12 + 2)) + 10",
      "((2 + 10) + 12) / 1",
      "1 * (10 + (12 + 2))",
      "10 + ((1 * 2) + 12)",
      "(12 + (10 + 2)) / 1",
      "12 + ((2 * 1) + 10)",
      "((10 + 12) * 1) + 2",
      "10 + (12 + (1 * 2))",
      "(12 + 2) + (10 / 1)",
      "((1 * 2) + 12) + 10",
      "2 + ((12 + 10) * 1)",
      "(1 * 2) + (12 + 10)",
      "(12 * 1) + (10 + 2)",
      "(10 + (12 / 1)) + 2",
      "2 + ((12 + 10) / 1)",
      "(2 + (10 + 12)) / 1",
      "((2 + 10) + 12) * 1",
      "((2 * 1) + 12) + 10",
      "(2 * 1) + (10 + 12)",
      "((10 / 1) + 12) + 2",
      "12 + ((10 / 1) + 2)",
      "((2 + 10) / 1) + 12",
      "(1 * (2 + 10)) + 12",
      "(10 * 1) + (2 + 12)",
      "(1 * (10 + 2)) + 12",
      "((1 * 10) + 12) + 2",
      "(10 + (2 + 12)) / 1",
      "(1 * 12) + (10 + 2)",
      "(1 * (2 + 12)) + 10",
      "(2 + 12) + (10 * 1)",
      "((10 + 2) / 1) + 12",
      "(10 + (12 + 2)) * 1",
      "12 + ((2 + 10) * 1)",
      "10 + ((2 * 1) + 12)",
      "(12 + (2 + 10)) / 1",
      "(2 + (1 * 12)) + 10",
      "((10 + 2) + 12) / 1",
      "12 + (10 + (2 / 1))",
      "((12 / 1) + 2) + 10",
      "(10 + (12 * 1)) + 2",
      "(10 + (2 * 1)) + 12",
      "(10 + (2 / 1)) + 12",
      "2 + (10 + (1 * 12))",
      "10 + (2 + (1 * 12))",
      "((12 + 10) + 2) * 1",
      "((10 + 2) + 12) * 1",
      "(2 * 1) + (12 + 10)",
      "2 + ((10 + 12) * 1)",
      "(2 + (10 * 1)) + 12",
      "(1 * (10 + 12)) + 2",
      "(2 + (10 / 1)) + 12",
      "(1 * 10) + (12 + 2)",
      "10 + ((12 * 1) + 2)",
      "((12 + 2) + 10) / 1",
      "12 + (1 * (10 + 2))",
      "1 * ((12 + 2) + 10)",
      "((10 / 1) + 2) + 12",
      "10 + (2 + (12 / 1))",
      "((12 + 10) + 2) / 1",
      "2 + ((1 * 10) + 12)",
      "((12 + 10) / 1) + 2",
      "(2 + (10 + 12)) * 1",
      "(2 + 12) + (10 / 1)",
      "((10 * 1) + 2) + 12",
      "(10 + 12) + (1 * 2)",
      "12 + ((1 * 2) + 10)",
      "2 + ((1 * 12) + 10)",
      "10 + (12 + (2 * 1))",
      "((12 + 2) / 1) + 10",
      "(1 * (12 + 10)) + 2",
      "(10 + 2) + (12 / 1)",
      "(2 + (1 * 10)) + 12",
      "1 * (2 + (12 + 10))",
      "((10 + 12) + 2) / 1",
      "2 + (1 * (12 + 10))",
      "2 + (12 + (10 * 1))",
      "(12 + (10 + 2)) * 1",
      "(12 + (10 / 1)) + 2",
      "((12 + 2) * 1) + 10",
      "2 + ((10 / 1) + 12)",
      "(2 + 10) + (12 * 1)",
      "10 + ((2 + 12) * 1)",
      "((10 * 1) + 12) + 2",
      "2 + (1 * (10 + 12))",
      "(2 + (12 + 10)) * 1",
      "((1 * 10) + 2) + 12",
      "(10 + (12 + 2)) / 1",
      "1 * ((10 + 2) + 12)",
      "1 * (2 + (10 + 12))",
      "2 + ((10 * 1) + 12)",
      "10 + (12 + (2 / 1))",
      "(12 + 10) + (1 * 2)",
      "2 + ((12 / 1) + 10)",
      "(2 / 1) + (12 + 10)",
      "12 + (2 + (1 * 10))",
      "((2 + 12) / 1) + 10",
      "(12 * 1) + (2 + 10)",
      "((2 / 1) + 12) + 10",
      "1 * ((2 + 12) + 10)",
      "12 + ((1 * 10) + 2)",
      "2 + (10 + (12 * 1))",
      "(2 + 10) + (12 / 1)",
      "(12 + (10 * 1)) + 2",
      "10 + ((12 / 1) + 2)",
      "(12 / 1) + (10 + 2)",
      "((1 * 12) + 2) + 10",
      "(10 / 1) + (2 + 12)",
      "12 + (2 + (10 / 1))",
      "10 + (2 + (12 * 1))",
      "(2 + (12 * 1)) + 10",
      "12 + ((10 + 2) * 1)",
      "(12 + 2) + (10 * 1)",
      "((10 + 2) * 1) + 12",
      "10 + (1 * (2 + 12))",
      "(10 + 2) + (1 * 12)",
      "2 + (12 + (1 * 10))",
      "(12 + 10) + (2 * 1)",
      "10 + ((1 * 12) + 2)",
      "2 + (12 + (10 / 1))",
      "(10 + (1 * 2)) + 12",
      "((2 + 12) + 10) / 1",
      "(10 + 12) + (2 / 1)",
      "12 + (1 * (2 + 10))",
      "(12 + (1 * 2)) + 10",
      "12 + ((10 * 1) + 2)",
      "((2 / 1) + 10) + 12",
      "12 + (10 + (2 * 1))",
      "((1 * 12) + 10) + 2",
      "(1 * 10) + (2 + 12)",
      "1 * (12 + (10 + 2))",
      "12 + ((2 / 1) + 10)",
      "(10 * 1) + (12 + 2)",
      "(12 + (2 + 10)) * 1",
      "(10 + (1 * 12)) + 2",
      "((2 + 12) + 10) * 1",
      "12 + ((10 + 2) / 1)",
      "2 + (10 + (12 / 1))",
      "10 + ((2 + 12) / 1)",
      "(12 + (2 * 1)) + 10",
      "2 + ((12 * 1) + 10)"
    ]
  },
  "1 2 10 13": {
    "cards": "1 2 10 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "13 - (1 - (2 + 10))",
      "13 - ((1 - 2) - 10)",
      "2 + (10 - (1 - 13))",
      "10 - (1 - (13 + 2))",
      "((10 - 1) + 2) + 13",
      "(2 + (13 - 1)) + 10",
      "((2 + 13) + 10) - 1",
      "(2 - 1) + (10 + 13)",
      "2 - (1 - (13 + 10))",
      "13 + ((2 - 1) + 10)",
      "(2 - 1) + (13 + 10)",
      "2 - ((1 - 10) - 13)",
      "((13 + 10) + 2) - 1",
      "(2 + 13) + (10 - 1)",
      "(13 + (2 + 10)) - 1",
      "2 + (13 - (1 - 10))",
      "((13 - 1) + 2) + 10",
      "(13 + 10) + (2 - 1)",
      "(2 + 13) - (1 - 10)",
      "13 + (2 - (1 - 10))",
      "13 + ((10 - 1) + 2)",
      "(2 - (1 - 10)) + 13",
      "(2 - (1 - 13)) + 10",
      "((10 + 13) - 1) + 2",
      "13 - (1 - (10 + 2))",
      "10 + (2 + (13 - 1))",
      "((2 + 13) - 1) + 10",
      "((10 + 2) - 1) + 13",
      "2 - (1 - (10 + 13))",
      "((13 + 2) - 1) + 10",
      "10 + ((13 - 1) + 2)",
      "((2 - 1) + 13) + 10",
      "(13 + (2 - 1)) + 10",
      "10 - (1 - (2 + 13))",
      "(10 + 13) + (2 - 1)",
      "(2 + (10 + 13)) - 1",
      "((13 + 2) + 10) - 1",
      "(10 + 2) + (13 - 1)",
      "(13 - 1) + (10 + 2)",
      "13 + ((2 + 10) - 1)",
      "2 + (13 + (10 - 1))",
      "(10 + (13 - 1)) + 2",
      "2 + ((13 + 10) - 1)",
      "(10 + (13 + 2)) - 1",
      "2 + ((10 - 1) + 13)",
      "(10 - 1) + (2 + 13)",
      "13 + (10 + (2 - 1))",
      "(13 - (1 - 2)) + 10",
      "10 - ((1 - 2) - 13)",
      "(2 + (13 + 10)) - 1",
      "10 + ((13 + 2) - 1)",
      "((10 + 13) + 2) - 1",
      "(13 + 2) + (10 - 1)",
      "13 + (2 + (10 - 1))",
      "(13 - 1) + (2 + 10)",
      "(10 + 13) - (1 - 2)",
      "2 + ((13 - 1) + 10)",
      "(10 + 2) - (1 - 13)",
      "(10 + (2 + 13)) - 1",
      "((2 + 10) - 1) + 13",
      "10 + ((2 + 13) - 1)",
      "(13 + (10 + 2)) - 1",
      "13 + ((10 + 2) - 1)",
      "2 + ((10 + 13) - 1)",
      "((2 - 1) + 10) + 13",
      "(10 + (2 - 1)) + 13",
      "(2 + 10) + (13 - 1)",
      "(2 + (10 - 1)) + 13",
      "10 + (13 - (1 - 2))",
      "((13 + 10) - 1) + 2",
      "((2 + 10) + 13) - 1",
      "(2 + 10) - (1 - 13)",
      "((10 - 1) + 13) + 2",
      "10 + (13 + (2 - 1))",
      "(13 + 2) - (1 - 10)",
      "((13 - 1) + 10) + 2",
      "(10 - 1) + (13 + 2)",
      "(10 - (1 - 2)) + 13",
      "2 - ((1 - 13) - 10)",
      "13 + (10 - (1 - 2))",
      "10 - ((1 - 13) - 2)",
      "(13 + (10 - 1)) + 2",
      "(13 + 10) - (1 - 2)",
      "13 - ((1 - 10) - 2)",
      "2 + (10 + (13 - 1))",
      "(13 - (1 - 10)) + 2",
      "((10 + 2) + 13) - 1",
      "10 + (2 - (1 - 13))",
      "(10 - (1 - 13)) + 2",
      "10 + ((2 - 1) + 13)"
    ]
  },
  "1 2 11 11": {
    "cards": "1 2 11 11",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "11 + ((11 * 1) + 2)",
      "2 + ((11 + 11) * 1)",
      "((11 + 2) * 1) + 11",
      "11 + (11 + (2 * 1))",
      "(2 + 11) + (11 / 1)",
      "1 * ((2 + 11) + 11)",
      "2 + ((1 * 11) + 11)",
      "((2 * 1) + 11) + 11",
      "((11 + 2) + 11) / 1",
      "1 * (11 + (11 + 2))",
      "(1 * (11 + 2)) + 11",
      "(11 + 11) + (2 * 1)",
      "(11 + (11 + 2)) / 1",
      "(2 + (11 / 1)) + 11",
      "2 + (11 + (11 / 1))",
      "(11 + (11 + 2)) * 1",
      "((2 / 1) + 11) + 11",
      "(1 * 11) + (2 + 11)",
      "(11 + (2 * 1)) + 11",
      "11 + ((2 + 11) * 1)",
      "(2 + (11 + 11)) * 1",
      "(11 + 2) + (11 / 1)",
      "((11 * 1) + 2) + 11",
      "((2 + 11) + 11) * 1",
      "11 + (1 * (2 + 11))",
      "((2 + 11) / 1) + 11",
      "(1 * (11 + 11)) + 2",
      "(11 + 2) + (1 * 11)",
      "(11 / 1) + (2 + 11)",
      "((2 + 11) + 11) / 1",
      "((11 / 1) + 11) + 2",
      "(2 + 11) + (11 * 1)",
      "((11 + 2) + 11) * 1",
      "(11 * 1) + (2 + 11)",
      "11 + (2 + (11 * 1))",
      "1 * ((11 + 11) + 2)",
      "(11 + (11 / 1)) + 2",
      "(2 * 1) + (11 + 11)",
      "(2 + (11 * 1)) + 11",
      "2 + ((11 * 1) + 11)",
      "11 + ((2 / 1) + 11)",
      "(11 + (2 + 11)) * 1",
      "(1 * 11) + (11 + 2)",
      "((1 * 2) + 11) + 11",
      "1 * (2 + (11 + 11))",
      "11 + ((1 * 11) + 2)",
      "((11 + 11) * 1) + 2",
      "11 + (11 + (2 / 1))",
      "11 + (1 * (11 + 2))",
      "(11 * 1) + (11 + 2)",
      "(11 + (2 + 11)) / 1",
      "2 + ((11 + 11) / 1)",
      "((1 * 11) + 11) + 2",
      "((11 + 2) / 1) + 11",
      "11 + ((11 + 2) / 1)",
      "(2 + 11) + (1 * 11)",
      "(11 + (2 / 1)) + 11",
      "((11 / 1) + 2) + 11",
      "2 + (11 + (1 * 11))",
      "((11 + 11) / 1) + 2",
      "(11 + (1 * 2)) + 11",
      "11 + (2 + (1 * 11))",
      "(2 + (1 * 11)) + 11",
      "(11 + 11) + (1 * 2)",
      "11 + (2 + (11 / 1))",
      "2 + (11 + (11 * 1))",
      "11 + ((11 / 1) + 2)",
      "(1 * (2 + 11)) + 11",
      "(11 + (1 * 11)) + 2",
      "11 + ((2 * 1) + 11)",
      "11 + (11 + (1 * 2))",
      "11 + ((11 + 2) * 1)",
      "(11 / 1) + (11 + 2)",
      "2 + ((11 / 1) + 11)",
      "(1 * 2) + (11 + 11)",
      "(2 + (11 + 11)) / 1",
      "(11 + (11 * 1)) + 2",
      "2 + (1 * (11 + 11))",
      "((2 + 11) * 1) + 11",
      "(11 + 2) + (11 * 1)",
      "((11 + 11) + 2) / 1",
      "((11 * 1) + 11) + 2",
      "11 + ((1 * 2) + 11)",
      "11 + ((2 + 11) / 1)",
      "1 * (11 + (2 + 11))",
      "(11 + 11) + (2 / 1)",
      "(2 / 1) + (11 + 11)",
      "1 * ((11 + 2) + 11)",
      "((1 * 11) + 2) + 11",
      "((11 + 11) + 2) * 1"
    ]
  },
  "1 2 11 12": {
    "cards": "1 2 11 12",
    "has_solution": "Y",
    "num_solutions": 91,
    "solutions": [
      "2 + ((12 + 11) - 1)",
      "((11 + 12) - 1) + 2",
      "12 - (1 - (2 + 11))",
      "12 - (1 - (11 + 2))",
      "((2 + 11) - 1) + 12",
      "(2 - 1) + (11 + 12)",
      "((11 - 1) + 2) + 12",
      "2 + (12 + (11 - 1))",
      "2 - ((1 - 11) - 12)",
      "(11 - 1) + (12 + 2)",
      "(12 - 1) + (2 + 11)",
      "(2 - (1 - 11)) + 12",
      "(12 + 11) + (2 - 1)",
      "(2 + 11) + (12 - 1)",
      "((11 + 12) + 2) - 1",
      "(2 - (1 - 12)) + 11",
      "11 + (12 - (1 - 2))",
      "((2 - 1) + 12) + 11",
      "(11 + (2 + 12)) - 1",
      "(11 - 1) + (2 + 12)",
      "2 - ((1 - 12) - 11)",
      "2 - (1 - (11 + 12))",
      "2 + (11 + (12 - 1))",
      "(2 + 12) - (1 - 11)",
      "((2 + 12) + 11) - 1",
      "((2 - 1) + 11) + 12",
      "11 - (1 - (2 + 12))",
      "(2 + (12 - 1)) + 11",
      "(12 - (1 - 2)) + 11",
      "(11 + 12) - (1 - 2)",
      "(11 + 2) + (12 - 1)",
      "2 + ((11 - 1) + 12)",
      "(12 - (1 - 11)) + 2",
      "12 + ((2 + 11) - 1)",
      "((12 + 11) - 1) + 2",
      "11 + (12 + (2 - 1))",
      "2 / (1 - (11 / 12))",
      "2 + (12 - (1 - 11))",
      "11 + ((12 - 1) + 2)",
      "2 + ((11 + 12) - 1)",
      "(11 + (12 - 1)) + 2",
      "11 + (2 + (12 - 1))",
      "(2 - 1) + (12 + 11)",
      "11 + ((12 + 2) - 1)",
      "12 - ((1 - 2) - 11)",
      "((12 + 2) - 1) + 11",
      "12 + ((2 - 1) + 11)",
      "2 - (1 - (12 + 11))",
      "11 - ((1 - 2) - 12)",
      "(11 + (12 + 2)) - 1",
      "((12 - 1) + 2) + 11",
      "12 + (2 + (11 - 1))",
      "(2 + 11) - (1 - 12)",
      "11 + ((2 - 1) + 12)",
      "((12 - 1) + 11) + 2",
      "((12 + 2) + 11) - 1",
      "(12 + (2 - 1)) + 11",
      "(11 - (1 - 12)) + 2",
      "((2 + 11) + 12) - 1",
      "11 - (1 - (12 + 2))",
      "2 + (11 - (1 - 12))",
      "2 + ((12 - 1) + 11)",
      "12 + ((11 + 2) - 1)",
      "((11 + 2) + 12) - 1",
      "(12 + (11 - 1)) + 2",
      "(11 + 2) - (1 - 12)",
      "(11 + 12) + (2 - 1)",
      "12 + ((11 - 1) + 2)",
      "((2 + 12) - 1) + 11",
      "(12 + 11) - (1 - 2)",
      "12 + (2 - (1 - 11))",
      "12 - ((1 - 11) - 2)",
      "(2 + 12) + (11 - 1)",
      "((11 + 2) - 1) + 12",
      "(12 + 2) + (11 - 1)",
      "(12 + (2 + 11)) - 1",
      "(12 + 2) - (1 - 11)",
      "12 + (11 - (1 - 2))",
      "((12 + 11) + 2) - 1",
      "(12 - 1) + (11 + 2)",
      "11 + (2 - (1 - 12))",
      "(11 - (1 - 2)) + 12",
      "12 + (11 + (2 - 1))",
      "11 + ((2 + 12) - 1)",
      "(11 + (2 - 1)) + 12",
      "(2 + (11 + 12)) - 1",
      "(2 + (11 - 1)) + 12",
      "(2 + (12 + 11)) - 1",
      "(12 + (11 + 2)) - 1",
      "((11 - 1) + 12) + 2",
      "11 - ((1 - 12) - 2)"
    ]
  },
  "1 2 11 13": {
    "cards": "1 2 11 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "13 + (11 * (2 - 1))",
      "(11 + 13) / (2 - 1)",
      "(11 + 13) * (2 - 1)",
      "(13 * (2 - 1)) + 11",
      "((2 - 1) * 13) + 11",
      "13 - (11 / (1 - 2))",
      "11 - (13 / (1 - 2))",
      "(13 / (2 - 1)) + 11",
      "13 + ((2 - 1) * 11)",
      "(2 - 1) * (13 + 11)",
      "11 - (13 * (1 - 2))",
      "13 - ((1 - 2) * 11)",
      "(13 + 11) * (2 - 1)",
      "(13 + 11) / (2 - 1)",
      "13 - (11 * (1 - 2))",
      "11 - ((1 - 2) * 13)",
      "(11 * (2 - 1)) + 13",
      "((2 - 1) * 11) + 13",
      "11 + (13 / (2 - 1))",
      "11 + ((2 - 1) * 13)",
      "13 + (11 / (2 - 1))",
      "11 + (13 * (2 - 1))",
      "(11 / (2 - 1)) + 13",
      "(2 - 1) * (11 + 13)"
    ]
  },
  "1 2 12 12": {
    "cards": "1 2 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 - (12 / (1 - 2))",
      "(2 - 1) * (12 + 12)",
      "(12 + 12) / (2 - 1)",
      "((2 + 1) * 12) - 12",
      "12 + (12 * (2 - 1))",
      "(12 + 12) * (2 - 1)",
      "12 + ((2 - 1) * 12)",
      "((1 + 2) * 12) - 12",
      "(12 * (2 - 1)) + 12",
      "((2 - 1) * 12) + 12",
      "(12 * (1 + 2)) - 12",
      "(12 / (2 - 1)) + 12",
      "12 - ((1 - 2) * 12)",
      "12 - (12 * (1 - 2))",
      "12 + (12 / (2 - 1))",
      "(12 * (2 + 1)) - 12"
    ]
  },
  "1 2 12 13": {
    "cards": "1 2 12 13",
    "has_solution": "Y",
    "num_solutions": 91,
    "solutions": [
      "(13 + 12) - (2 - 1)",
      "(13 - 2) + (1 + 12)",
      "(12 + (13 - 2)) + 1",
      "((13 - 2) + 12) + 1",
      "((13 + 1) + 12) - 2",
      "(12 + (1 - 2)) + 13",
      "(1 + (13 - 2)) + 12",
      "((13 + 12) - 2) + 1",
      "(1 - (2 - 13)) + 12",
      "((1 + 13) + 12) - 2",
      "12 - (2 - (1 + 13))",
      "1 - ((2 - 13) - 12)",
      "(1 - 2) + (12 + 13)",
      "(1 + 12) - (2 - 13)",
      "1 + (13 - (2 - 12))",
      "13 + (1 - (2 - 12))",
      "2 / ((13 / 12) - 1)",
      "((12 + 13) + 1) - 2",
      "(12 + 13) + (1 - 2)",
      "(1 + (13 + 12)) - 2",
      "12 + (13 - (2 - 1))",
      "1 - (2 - (12 + 13))",
      "1 + ((12 - 2) + 13)",
      "((1 - 2) + 12) + 13",
      "((13 - 2) + 1) + 12",
      "(13 + 1) - (2 - 12)",
      "(12 - (2 - 13)) + 1",
      "(1 + 12) + (13 - 2)",
      "13 - (2 - (12 + 1))",
      "12 + ((1 - 2) + 13)",
      "(1 - (2 - 12)) + 13",
      "12 + (1 - (2 - 13))",
      "((12 + 1) + 13) - 2",
      "((12 + 13) - 2) + 1",
      "(13 - (2 - 12)) + 1",
      "(13 + (1 + 12)) - 2",
      "(12 + 13) - (2 - 1)",
      "13 + (12 + (1 - 2))",
      "(1 + (12 - 2)) + 13",
      "(13 + 12) + (1 - 2)",
      "((1 + 12) - 2) + 13",
      "1 + ((12 + 13) - 2)",
      "1 + (12 - (2 - 13))",
      "13 + (12 - (2 - 1))",
      "((13 + 12) + 1) - 2",
      "13 - ((2 - 1) - 12)",
      "12 + ((13 + 1) - 2)",
      "12 + ((13 - 2) + 1)",
      "13 - (2 - (1 + 12))",
      "((1 + 13) - 2) + 12",
      "(13 - (2 - 1)) + 12",
      "1 + ((13 - 2) + 12)",
      "(12 + (13 + 1)) - 2",
      "(13 + 1) + (12 - 2)",
      "(13 + (1 - 2)) + 12",
      "12 - ((2 - 13) - 1)",
      "12 + (1 + (13 - 2))",
      "(1 + 13) - (2 - 12)",
      "1 - ((2 - 12) - 13)",
      "(1 + 13) + (12 - 2)",
      "(13 + (12 - 2)) + 1",
      "(12 - 2) + (1 + 13)",
      "13 + (1 + (12 - 2))",
      "12 + ((1 + 13) - 2)",
      "(1 + (12 + 13)) - 2",
      "12 - (2 - (13 + 1))",
      "1 + (13 + (12 - 2))",
      "((12 - 2) + 1) + 13",
      "(12 + 1) - (2 - 13)",
      "(13 - 2) + (12 + 1)",
      "((13 + 1) - 2) + 12",
      "((12 + 1) - 2) + 13",
      "1 + ((13 + 12) - 2)",
      "13 + ((12 - 2) + 1)",
      "(12 + (1 + 13)) - 2",
      "13 + ((1 - 2) + 12)",
      "13 + ((12 + 1) - 2)",
      "(12 + 1) + (13 - 2)",
      "13 - ((2 - 12) - 1)",
      "(1 - 2) + (13 + 12)",
      "((1 - 2) + 13) + 12",
      "(12 - 2) + (13 + 1)",
      "12 + (13 + (1 - 2))",
      "((12 - 2) + 13) + 1",
      "((1 + 12) + 13) - 2",
      "(13 + (12 + 1)) - 2",
      "1 + (12 + (13 - 2))",
      "12 - ((2 - 1) - 13)",
      "13 + ((1 + 12) - 2)",
      "1 - (2 - (13 + 12))",
      "(12 - (2 - 1)) + 13"
    ]
  },
  "1 2 13 13": {
    "cards": "1 2 13 13",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(13 - (1 * 2)) + 13",
      "((13 * 1) + 13) - 2",
      "13 + (13 - (2 * 1))",
      "13 - ((2 - 13) / 1)",
      "(13 * 1) + (13 - 2)",
      "(1 * (13 - 2)) + 13",
      "(13 / 1) - (2 - 13)",
      "13 + ((1 * 13) - 2)",
      "13 - ((2 / 1) - 13)",
      "((13 - 2) * 1) + 13",
      "((13 - 2) + 13) / 1",
      "(13 - 2) + (13 / 1)",
      "1 * ((13 - 2) + 13)",
      "(13 + 13) - (2 / 1)",
      "((13 + 13) / 1) - 2",
      "((13 + 13) - 2) * 1",
      "((1 * 13) - 2) + 13",
      "1 * ((13 + 13) - 2)",
      "(13 + (1 * 13)) - 2",
      "13 - ((1 * 2) - 13)",
      "((13 - 2) / 1) + 13",
      "13 + (1 * (13 - 2))",
      "((13 + 13) - 2) / 1",
      "(13 + 13) - (2 * 1)",
      "13 + ((13 - 2) * 1)",
      "(13 + (13 * 1)) - 2",
      "13 - (1 * (2 - 13))",
      "13 - (2 - (13 * 1))",
      "((13 * 1) - 2) + 13",
      "(13 + (13 / 1)) - 2",
      "13 - (2 - (13 / 1))",
      "(13 + 13) - (1 * 2)",
      "13 + ((13 * 1) - 2)",
      "(1 * 13) + (13 - 2)",
      "(1 * (13 + 13)) - 2",
      "1 * (13 + (13 - 2))",
      "((13 + 13) * 1) - 2",
      "((13 - 2) + 13) * 1",
      "13 + (13 - (1 * 2))",
      "13 + (13 - (2 / 1))",
      "13 - ((2 * 1) - 13)",
      "(13 - 2) + (1 * 13)",
      "1 * (13 - (2 - 13))",
      "((1 * 13) + 13) - 2",
      "(1 * 13) - (2 - 13)",
      "(13 - (2 * 1)) + 13",
      "((13 / 1) - 2) + 13",
      "((13 / 1) + 13) - 2",
      "(13 + (13 - 2)) * 1",
      "13 - (2 - (1 * 13))",
      "(13 * 1) - (2 - 13)",
      "(13 - 2) + (13 * 1)",
      "13 - ((2 - 13) * 1)",
      "13 + ((13 / 1) - 2)",
      "(13 / 1) + (13 - 2)",
      "(13 - (2 - 13)) * 1",
      "(13 - (2 / 1)) + 13",
      "(13 + (13 - 2)) / 1",
      "13 + ((13 - 2) / 1)",
      "(13 - (2 - 13)) / 1"
    ]
  },
  "1 3 3 3": {
    "cards": "1 3 3 3",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(3 + 3) * (3 + 1)",
      "(3 + 3) * (1 + 3)",
      "(3 + 1) * (3 + 3)",
      "((3 * 3) - 1) * 3",
      "3 * ((3 * 3) - 1)",
      "(1 + 3) * (3 + 3)"
    ]
  },
  "1 3 3 4": {
    "cards": "1 3 3 4",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "((3 + 3) / 1) * 4",
      "((3 + 3) * 1) * 4",
      "(4 * (3 + 3)) / 1",
      "4 * (3 + (3 / 1))",
      "4 * ((3 + 3) * 1)",
      "3 * ((3 - 1) * 4)",
      "((3 + 1) + 4) * 3",
      "((3 + 3) * 4) / 1",
      "3 * (3 + (4 + 1))",
      "((1 + 4) + 3) * 3",
      "((3 + 4) + 1) * 3",
      "(3 * 4) * (3 - 1)",
      "(4 * 3) * (3 - 1)",
      "(3 + (3 * 1)) * 4",
      "(4 * (3 - 1)) * 3",
      "4 * ((3 / 1) + 3)",
      "4 * ((3 * 1) + 3)",
      "3 * (4 + (3 + 1))",
      "(1 * (3 + 3)) * 4",
      "(1 + (3 + 4)) * 3",
      "3 * (1 + (4 + 3))",
      "(3 + (3 / 1)) * 4",
      "((4 + 3) + 1) * 3",
      "4 * (3 + (3 * 1))",
      "4 * (1 * (3 + 3))",
      "3 * (4 + (1 + 3))",
      "(1 + (4 + 3)) * 3",
      "3 * ((3 + 4) + 1)",
      "(3 + 3) * (4 / 1)",
      "4 * ((3 + 3) / 1)",
      "3 * ((1 + 3) + 4)",
      "(3 + (4 + 1)) * 3",
      "((4 + 1) + 3) * 3",
      "(3 + (1 + 4)) * 3",
      "(3 - 1) * (3 * 4)",
      "3 * ((1 + 4) + 3)",
      "4 / (1 / (3 + 3))",
      "(4 / 1) * (3 + 3)",
      "((3 - 1) * 3) * 4",
      "(4 * 1) * (3 + 3)",
      "3 * (4 * (3 - 1))",
      "4 * (3 + (1 * 3))",
      "4 * ((3 - 1) * 3)",
      "4 * ((1 * 3) + 3)",
      "3 * (3 + (1 + 4))",
      "(4 * (3 + 3)) * 1",
      "((3 / 1) + 3) * 4",
      "((3 - 1) * 4) * 3",
      "1 * ((3 + 3) * 4)",
      "(3 - 1) * (4 * 3)",
      "(3 + (1 * 3)) * 4",
      "((1 * 3) + 3) * 4",
      "(3 * (3 - 1)) * 4",
      "(3 + 3) / (1 / 4)",
      "((3 * 1) + 3) * 4",
      "4 * (3 * (3 - 1))",
      "(1 * 4) * (3 + 3)",
      "(4 + (3 + 1)) * 3",
      "(3 + 3) * (4 * 1)",
      "3 * ((3 + 1) + 4)",
      "((3 + 3) * 4) * 1",
      "3 * (1 + (3 + 4))",
      "3 * ((4 + 1) + 3)",
      "3 * ((4 + 3) + 1)",
      "(4 + (1 + 3)) * 3",
      "(3 + 3) * (1 * 4)",
      "1 * (4 * (3 + 3))",
      "((1 + 3) + 4) * 3"
    ]
  },
  "1 3 3 5": {
    "cards": "1 3 3 5",
    "has_solution": "Y",
    "num_solutions": 66,
    "solutions": [
      "3 * (3 + (5 * 1))",
      "((5 / 1) + 3) * 3",
      "(3 + (5 / 1)) * 3",
      "(3 + (5 * 1)) * 3",
      "3 * (5 + (3 * 1))",
      "1 * (3 * (5 + 3))",
      "(3 * 1) * (3 + 5)",
      "(3 + 5) * (3 * 1)",
      "(3 + 3) * (5 - 1)",
      "((1 * 3) + 5) * 3",
      "((3 + 5) / 1) * 3",
      "((3 + 5) * 3) / 1",
      "3 * ((5 + 3) * 1)",
      "((3 * 1) + 5) * 3",
      "(3 + 5) * (1 * 3)",
      "(1 * 3) * (3 + 5)",
      "(5 + 3) / (1 / 3)",
      "(1 * 3) * (5 + 3)",
      "(3 + 5) / (1 / 3)",
      "((1 * 5) + 3) * 3",
      "3 * ((3 * 1) + 5)",
      "(5 + (3 * 1)) * 3",
      "3 * ((3 / 1) + 5)",
      "(3 / 1) * (3 + 5)",
      "(1 * (5 + 3)) * 3",
      "3 * ((5 + 3) / 1)",
      "((3 + 5) * 1) * 3",
      "(5 + 3) * (3 * 1)",
      "((5 + 3) / 1) * 3",
      "((5 * 1) + 3) * 3",
      "1 * (3 * (3 + 5))",
      "3 * ((3 + 5) / 1)",
      "((5 + 3) * 1) * 3",
      "((3 / 1) + 5) * 3",
      "3 * (1 * (3 + 5))",
      "(3 / 1) * (5 + 3)",
      "3 * (3 + (1 * 5))",
      "(5 + (3 / 1)) * 3",
      "((5 + 3) * 3) * 1",
      "3 * (5 + (3 / 1))",
      "(3 * (3 + 5)) / 1",
      "3 * ((1 * 3) + 5)",
      "(1 * (3 + 5)) * 3",
      "((5 + 3) * 3) / 1",
      "3 * ((3 + 5) * 1)",
      "(5 - 1) * (3 + 3)",
      "(5 + (1 * 3)) * 3",
      "(5 + 3) * (3 / 1)",
      "(3 + 5) * (3 / 1)",
      "3 / (1 / (5 + 3))",
      "3 * ((5 / 1) + 3)",
      "(3 + (1 * 5)) * 3",
      "(5 + 3) * (1 * 3)",
      "(3 * (5 + 3)) * 1",
      "1 * ((5 + 3) * 3)",
      "3 * (3 + (5 / 1))",
      "((3 + 5) * 3) * 1",
      "(3 * 1) * (5 + 3)",
      "3 / (1 / (3 + 5))",
      "3 * (5 + (1 * 3))",
      "(3 * (3 + 5)) * 1",
      "3 * ((5 * 1) + 3)",
      "(3 * (5 + 3)) / 1",
      "3 * (1 * (5 + 3))",
      "3 * ((1 * 5) + 3)",
      "1 * ((3 + 5) * 3)"
    ]
  },
  "1 3 3 6": {
    "cards": "1 3 3 6",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((1 + 6) * 3) + 3",
      "3 + ((6 + 1) * 3)",
      "(6 - (1 - 3)) * 3",
      "3 * (3 + (6 - 1))",
      "(3 * (1 + 6)) + 3",
      "((6 - 1) + 3) * 3",
      "((6 + 1) * 3) + 3",
      "3 + (3 * (1 + 6))",
      "(3 + (6 - 1)) * 3",
      "3 + ((1 + 6) * 3)",
      "3 + (3 * (6 + 1))",
      "((3 - 1) + 6) * 3",
      "3 * ((3 + 6) - 1)",
      "(3 - (1 - 6)) * 3",
      "(3 * (6 + 1)) + 3",
      "3 * ((6 - 1) + 3)",
      "3 * (6 + (3 - 1))",
      "3 * ((3 - 1) + 6)",
      "3 * (6 - (1 - 3))",
      "(6 + (3 - 1)) * 3",
      "3 * ((6 + 3) - 1)",
      "((3 + 6) - 1) * 3",
      "((6 + 3) - 1) * 3",
      "3 * (3 - (1 - 6))"
    ]
  },
  "1 3 3 7": {
    "cards": "1 3 3 7",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "((7 * 3) * 1) + 3",
      "1 * (3 + (3 * 7))",
      "(3 + (3 * 7)) * 1",
      "(7 * 3) + (3 * 1)",
      "(3 + (7 * 3)) / 1",
      "(3 * 7) + (1 * 3)",
      "((3 * 7) + 3) / 1",
      "3 + (7 * (3 * 1))",
      "(3 * (7 * 1)) + 3",
      "((3 * 7) * 1) + 3",
      "(1 * (3 * 7)) + 3",
      "3 + ((7 * 1) * 3)",
      "((3 * 1) * 7) + 3",
      "(7 * 3) + (3 / 1)",
      "3 + ((7 * 3) / 1)",
      "3 + ((3 / 1) * 7)",
      "(3 * 7) + (3 * 1)",
      "((7 * 3) + 3) / 1",
      "(7 * 3) + (1 * 3)",
      "3 + (1 * (3 * 7))",
      "3 + (1 * (7 * 3))",
      "3 + (3 * (7 * 1))",
      "((7 * 1) * 3) + 3",
      "(3 / 1) + (7 * 3)",
      "(1 * (7 * 3)) + 3",
      "(3 / (1 / 7)) + 3",
      "(3 + (7 * 3)) * 1",
      "((1 * 3) * 7) + 3",
      "(3 * 1) + (7 * 3)",
      "((3 / 1) * 7) + 3",
      "(7 * (3 * 1)) + 3",
      "3 + ((1 * 3) * 7)",
      "(3 / 1) + (3 * 7)",
      "(1 * 3) + (7 * 3)",
      "1 * (3 + (7 * 3))",
      "(3 * (7 / 1)) + 3",
      "3 + (7 / (1 / 3))",
      "(3 * 7) + (3 / 1)",
      "3 + (7 * (3 / 1))",
      "(7 * (3 / 1)) + 3",
      "3 + (7 * (1 * 3))",
      "((1 * 7) * 3) + 3",
      "(7 * (1 * 3)) + 3",
      "3 + ((3 * 7) / 1)",
      "1 * ((7 * 3) + 3)",
      "3 + ((3 * 1) * 7)",
      "3 + ((7 * 3) * 1)",
      "((3 * 7) + 3) * 1",
      "(3 + (3 * 7)) / 1",
      "((7 * 3) + 3) * 1",
      "3 + (3 * (1 * 7))",
      "3 + ((3 * 7) * 1)",
      "((7 * 3) / 1) + 3",
      "1 * ((3 * 7) + 3)",
      "3 + ((1 * 7) * 3)",
      "(1 * 3) + (3 * 7)",
      "3 + (3 / (1 / 7))",
      "3 + (3 * (7 / 1))",
      "(7 / (1 / 3)) + 3",
      "((7 / 1) * 3) + 3",
      "(3 * (1 * 7)) + 3",
      "((3 * 7) / 1) + 3",
      "(3 * 1) + (3 * 7)",
      "3 + ((7 / 1) * 3)"
    ]
  },
  "1 3 3 8": {
    "cards": "1 3 3 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "3 - (3 * (1 - 8))",
      "(3 * (1 + 8)) - 3",
      "3 - ((1 - 8) * 3)",
      "3 + ((8 - 1) * 3)",
      "3 + (3 * (8 - 1))",
      "(3 * (8 + 1)) - 3",
      "(3 * (8 - 1)) + 3",
      "((1 + 8) * 3) - 3",
      "((8 - 1) * 3) + 3",
      "((8 + 1) * 3) - 3"
    ]
  },
  "1 3 3 9": {
    "cards": "1 3 3 9",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "(3 * 9) - (3 / 1)",
      "((1 * 9) * 3) - 3",
      "(3 - (1 / 3)) * 9",
      "(9 * (3 * 1)) - 3",
      "(9 - 3) * (1 + 3)",
      "((9 * 3) - 3) * 1",
      "((3 * 9) / 1) - 3",
      "(9 * (1 * 3)) - 3",
      "(3 * (9 * 1)) - 3",
      "(3 - 1) * (9 + 3)",
      "(9 - 3) * (3 + 1)",
      "((9 / 1) * 3) - 3",
      "1 * ((3 * 9) - 3)",
      "(9 * 3) - (3 / 1)",
      "(9 / (1 / 3)) - 3",
      "(3 + 1) * (9 - 3)",
      "(9 * 3) - (3 * 1)",
      "(1 * (3 * 9)) - 3",
      "(9 * (3 / 1)) - 3",
      "((9 * 3) - 3) / 1",
      "((9 * 1) * 3) - 3",
      "(3 + 9) * (3 - 1)",
      "(1 * (9 * 3)) - 3",
      "((9 * 3) / 1) - 3",
      "(3 * 9) - (3 * 1)",
      "9 * (3 - (1 / 3))",
      "((3 * 9) * 1) - 3",
      "((1 * 3) * 9) - 3",
      "(3 / (1 / 9)) - 3",
      "(9 * 3) - (1 * 3)",
      "1 * ((9 * 3) - 3)",
      "((3 * 9) - 3) / 1",
      "(3 * (1 * 9)) - 3",
      "(3 * 9) - (1 * 3)",
      "((3 * 9) - 3) * 1",
      "((3 / 1) * 9) - 3",
      "(3 * (9 / 1)) - 3",
      "(3 - 1) * (3 + 9)",
      "(9 + 3) * (3 - 1)",
      "(1 + 3) * (9 - 3)",
      "((9 * 3) * 1) - 3",
      "((3 * 1) * 9) - 3"
    ]
  },
  "1 3 3 10": {
    "cards": "1 3 3 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "3 * (1 - (3 - 10))",
      "((10 - 1) * 3) - 3",
      "((10 + 1) - 3) * 3",
      "3 * ((1 + 10) - 3)",
      "((1 - 3) + 10) * 3",
      "(1 - (3 - 10)) * 3",
      "(1 + (10 - 3)) * 3",
      "3 * (10 - (3 - 1))",
      "3 * ((1 - 3) + 10)",
      "(3 * (10 - 1)) - 3",
      "3 * (10 + (1 - 3))",
      "3 * ((10 + 1) - 3)",
      "3 * (1 + (10 - 3))",
      "(10 - (3 - 1)) * 3",
      "((1 + 10) - 3) * 3",
      "((10 - 3) + 1) * 3",
      "3 * ((10 - 3) + 1)",
      "(10 + (1 - 3)) * 3"
    ]
  },
  "1 3 3 11": {
    "cards": "1 3 3 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "3 * (11 - (3 / 1))",
      "3 * ((11 / 1) - 3)",
      "(11 - 3) / (1 / 3)",
      "3 * ((1 * 11) - 3)",
      "((11 - 3) * 1) * 3",
      "((11 * 1) - 3) * 3",
      "((1 * 11) - 3) * 3",
      "3 * (1 * (11 - 3))",
      "(11 - 3) * (1 * 3)",
      "(1 * (11 - 3)) * 3",
      "(11 - 3) * (3 * 1)",
      "3 * (11 - (3 * 1))",
      "(3 * 1) * (11 - 3)",
      "1 * (3 * (11 - 3))",
      "(3 / 1) * (11 - 3)",
      "(11 - (1 * 3)) * 3",
      "(11 - (3 / 1)) * 3",
      "((11 - 3) * 3) * 1",
      "1 * ((11 - 3) * 3)",
      "(3 * (11 - 3)) / 1",
      "3 / (1 / (11 - 3))",
      "(11 - (3 * 1)) * 3",
      "(3 * (11 - 3)) * 1",
      "(11 - 3) * (3 / 1)",
      "3 * ((11 - 3) / 1)",
      "((11 - 3) * 3) / 1",
      "3 * ((11 - 3) * 1)",
      "3 * (11 - (1 * 3))",
      "(1 * 3) * (11 - 3)",
      "3 * ((11 * 1) - 3)",
      "((11 - 3) / 1) * 3",
      "((11 / 1) - 3) * 3"
    ]
  },
  "1 3 3 12": {
    "cards": "1 3 3 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(12 - (3 + 1)) * 3",
      "12 * ((3 / 3) + 1)",
      "((3 + 1) * 3) + 12",
      "(1 + (3 / 3)) * 12",
      "12 * (1 + (3 / 3))",
      "(3 * (1 + 3)) + 12",
      "12 + ((1 + 3) * 3)",
      "12 + ((3 + 1) * 3)",
      "12 + (3 * (3 + 1))",
      "3 * (12 - (3 + 1))",
      "((12 - 3) - 1) * 3",
      "3 * ((12 - 3) - 1)",
      "((12 - 1) - 3) * 3",
      "(3 * (3 + 1)) + 12",
      "12 + (3 * (1 + 3))",
      "3 * (12 - (1 + 3))",
      "3 * ((12 - 1) - 3)",
      "(12 - (1 + 3)) * 3",
      "((3 / 3) + 1) * 12",
      "((1 + 3) * 3) + 12"
    ]
  },
  "1 3 3 13": {
    "cards": "1 3 3 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 3 4 4": {
    "cards": "1 3 4 4",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "4 * (3 - (1 - 4))",
      "(4 + (3 - 1)) * 4",
      "4 * ((3 - 1) + 4)",
      "(4 + (1 * 4)) * 3",
      "((4 + 4) * 1) * 3",
      "3 * (4 + (1 * 4))",
      "1 * ((4 + 4) * 3)",
      "3 * ((4 / 1) + 4)",
      "(4 + (4 * 1)) * 3",
      "((4 + 3) - 1) * 4",
      "3 * (1 * (4 + 4))",
      "4 * ((3 + 4) - 1)",
      "4 * (4 + (3 - 1))",
      "(4 + (4 / 1)) * 3",
      "(3 * 1) * (4 + 4)",
      "(1 * (4 + 4)) * 3",
      "((4 + 4) / 1) * 3",
      "((4 + 4) * 3) / 1",
      "((3 + 4) - 1) * 4",
      "3 * ((4 + 4) * 1)",
      "4 * (4 - (1 - 3))",
      "(3 / 1) * (4 + 4)",
      "3 / (1 / (4 + 4))",
      "4 * ((4 - 1) + 3)",
      "(3 + (4 - 1)) * 4",
      "4 * ((4 + 3) - 1)",
      "(4 + 4) * (3 * 1)",
      "(4 + 4) / (1 / 3)",
      "(4 - (1 - 3)) * 4",
      "((4 * 1) + 4) * 3",
      "3 * ((4 * 1) + 4)",
      "4 * (3 + (4 - 1))",
      "((3 - 1) + 4) * 4",
      "((4 / 1) + 4) * 3",
      "(1 * 3) * (4 + 4)",
      "(4 + 4) * (3 / 1)",
      "1 * (3 * (4 + 4))",
      "3 * (4 + (4 / 1))",
      "(3 * (4 + 4)) * 1",
      "3 * ((4 + 4) / 1)",
      "((1 * 4) + 4) * 3",
      "(4 + 4) * (1 * 3)",
      "(3 - (1 - 4)) * 4",
      "(3 * (4 + 4)) / 1",
      "3 * (4 + (4 * 1))",
      "3 * ((1 * 4) + 4)",
      "((4 - 1) + 3) * 4",
      "((4 + 4) * 3) * 1"
    ]
  },
  "1 3 4 5": {
    "cards": "1 3 4 5",
    "has_solution": "Y",
    "num_solutions": 52,
    "solutions": [
      "(4 - 1) * (3 + 5)",
      "(1 + 3) + (5 * 4)",
      "3 * (5 - (1 - 4))",
      "(5 * 4) + (3 + 1)",
      "((5 + 4) - 1) * 3",
      "3 + (1 + (5 * 4))",
      "3 + ((4 * 5) + 1)",
      "((4 * 5) + 1) + 3",
      "3 * (4 - (1 - 5))",
      "(5 * (1 + 3)) + 4",
      "(4 - 1) * (5 + 3)",
      "(5 * (3 + 1)) + 4",
      "(4 - (1 - 5)) * 3",
      "3 + ((5 * 4) + 1)",
      "(5 + (4 - 1)) * 3",
      "1 + (3 + (4 * 5))",
      "((1 + 3) * 5) + 4",
      "4 + ((3 + 1) * 5)",
      "(1 + (5 * 4)) + 3",
      "3 + (1 + (4 * 5))",
      "((4 * 5) + 3) + 1",
      "3 * ((5 - 1) + 4)",
      "(5 * 4) + (1 + 3)",
      "1 + ((4 * 5) + 3)",
      "(3 + 1) + (4 * 5)",
      "1 + (3 + (5 * 4))",
      "((5 - 1) + 4) * 3",
      "((5 * 4) + 3) + 1",
      "(4 + (5 - 1)) * 3",
      "(3 + 1) + (5 * 4)",
      "(3 + (5 * 4)) + 1",
      "(4 * 5) + (3 + 1)",
      "(1 + 3) + (4 * 5)",
      "3 * ((4 - 1) + 5)",
      "(4 * 5) + (1 + 3)",
      "1 + ((5 * 4) + 3)",
      "3 * (5 + (4 - 1))",
      "(1 + (4 * 5)) + 3",
      "3 * (4 + (5 - 1))",
      "3 * ((4 + 5) - 1)",
      "4 + ((1 + 3) * 5)",
      "4 + (5 * (1 + 3))",
      "3 * ((5 + 4) - 1)",
      "((3 + 1) * 5) + 4",
      "4 + (5 * (3 + 1))",
      "(3 + 5) * (4 - 1)",
      "((4 + 5) - 1) * 3",
      "(5 + 3) * (4 - 1)",
      "((5 * 4) + 1) + 3",
      "(5 - (1 - 4)) * 3",
      "(3 + (4 * 5)) + 1",
      "((4 - 1) + 5) * 3"
    ]
  },
  "1 3 4 6": {
    "cards": "1 3 4 6",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "6 / (1 - (3 / 4))"
    ]
  },
  "1 3 4 7": {
    "cards": "1 3 4 7",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(4 + (7 * 3)) - 1",
      "(4 - 1) + (3 * 7)",
      "((3 * 7) + 4) - 1",
      "3 - (7 * (1 - 4))",
      "(7 * (3 + 1)) - 4",
      "(7 * 3) + (4 - 1)",
      "(4 * 7) - (3 + 1)",
      "((4 - 1) * 7) + 3",
      "(7 * (1 + 3)) - 4",
      "3 + ((4 - 1) * 7)",
      "3 - ((1 - 4) * 7)",
      "4 - (1 - (3 * 7))",
      "(7 * 4) - (3 + 1)",
      "(7 * 4) - (1 + 3)",
      "(7 * 3) - (1 - 4)",
      "4 + ((3 * 7) - 1)",
      "((4 * 7) - 3) - 1",
      "(4 + (3 * 7)) - 1",
      "4 + ((7 * 3) - 1)",
      "((7 * 3) + 4) - 1",
      "((7 * 3) - 1) + 4",
      "3 + (7 * (4 - 1))",
      "(4 * 7) - (1 + 3)",
      "((7 * 4) - 3) - 1",
      "(3 * 7) + (4 - 1)",
      "(4 - 1) + (7 * 3)",
      "((3 * 7) - 1) + 4",
      "((3 + 1) * 7) - 4",
      "((1 + 3) * 7) - 4",
      "(3 * 7) - (1 - 4)",
      "((7 * 4) - 1) - 3",
      "((4 * 7) - 1) - 3",
      "4 - (1 - (7 * 3))",
      "(7 * (4 - 1)) + 3"
    ]
  },
  "1 3 4 8": {
    "cards": "1 3 4 8",
    "has_solution": "Y",
    "num_solutions": 29,
    "solutions": [
      "(3 - 1) * (4 + 8)",
      "4 * (1 - (3 - 8))",
      "(8 + (1 - 3)) * 4",
      "(4 * (3 + 1)) + 8",
      "(4 * (1 + 3)) + 8",
      "(4 + 8) * (3 - 1)",
      "4 * ((8 + 1) - 3)",
      "(3 - 1) * (8 + 4)",
      "8 + ((1 + 3) * 4)",
      "((1 + 3) * 4) + 8",
      "8 + (4 * (1 + 3))",
      "4 * ((1 + 8) - 3)",
      "((1 + 8) - 3) * 4",
      "((3 + 1) * 4) + 8",
      "(8 + 4) * (3 - 1)",
      "4 * (8 + (1 - 3))",
      "4 * ((8 - 3) + 1)",
      "(1 + (8 - 3)) * 4",
      "4 * (8 - (3 - 1))",
      "8 + ((3 + 1) * 4)",
      "8 + (4 * (3 + 1))",
      "((8 - 3) + 1) * 4",
      "((1 - 3) + 8) * 4",
      "(8 - (3 - 1)) * 4",
      "((8 + 1) - 3) * 4",
      "8 / ((4 / 3) - 1)",
      "4 * (1 + (8 - 3))",
      "(1 - (3 - 8)) * 4",
      "4 * ((1 - 3) + 8)"
    ]
  },
  "1 3 4 9": {
    "cards": "1 3 4 9",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "9 + (3 * (4 + 1))",
      "4 * ((1 * 9) - 3)",
      "4 * (1 * (9 - 3))",
      "((1 + 4) * 3) + 9",
      "(9 - 3) / (1 / 4)",
      "1 * ((9 - 3) * 4)",
      "(1 - 4) + (9 * 3)",
      "(3 * (1 + 4)) + 9",
      "9 + ((1 + 4) * 3)",
      "4 * ((9 - 3) / 1)",
      "((9 - 3) * 1) * 4",
      "((9 * 3) - 4) + 1",
      "(1 - 4) + (3 * 9)",
      "4 * (9 - (1 * 3))",
      "((3 * 9) - 4) + 1",
      "((1 * 9) - 3) * 4",
      "4 * ((9 * 1) - 3)",
      "4 / (1 / (9 - 3))",
      "((9 * 1) - 3) * 4",
      "(9 * (4 - 1)) - 3",
      "9 + ((4 + 1) * 3)",
      "1 + ((9 * 3) - 4)",
      "((4 + 1) * 3) + 9",
      "(9 - (1 * 3)) * 4",
      "4 * (9 - (3 * 1))",
      "(4 * 1) * (9 - 3)",
      "(4 / 1) * (9 - 3)",
      "(9 - (3 * 1)) * 4",
      "(4 * (9 - 3)) / 1",
      "((9 - 3) / 1) * 4",
      "((3 * 9) + 1) - 4",
      "9 + (3 * (1 + 4))",
      "4 * ((9 / 1) - 3)",
      "(4 * (9 - 3)) * 1",
      "(1 + (3 * 9)) - 4",
      "((9 - 3) * 4) / 1",
      "(9 - (3 / 1)) * 4",
      "4 * (9 - (3 / 1))",
      "1 - (4 - (3 * 9))",
      "(3 * 9) - (4 - 1)",
      "(9 - 3) * (4 * 1)",
      "(9 * 3) + (1 - 4)",
      "((9 / 1) - 3) * 4",
      "((9 * 3) + 1) - 4",
      "((4 - 1) * 9) - 3",
      "(1 * (9 - 3)) * 4",
      "(9 - 3) * (1 * 4)",
      "(1 * 4) * (9 - 3)",
      "(9 * 3) - (4 - 1)",
      "1 - (4 - (9 * 3))",
      "4 * ((9 - 3) * 1)",
      "(1 + (9 * 3)) - 4",
      "((9 - 3) * 4) * 1",
      "(3 * (4 + 1)) + 9",
      "1 + ((3 * 9) - 4)",
      "(3 * 9) + (1 - 4)",
      "1 * (4 * (9 - 3))",
      "(9 - 3) * (4 / 1)"
    ]
  },
  "1 3 4 10": {
    "cards": "1 3 4 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(10 * (3 - 1)) + 4",
      "(10 - 4) * (3 + 1)",
      "4 - (10 * (1 - 3))",
      "4 + ((3 - 1) * 10)",
      "((10 - 1) - 3) * 4",
      "(3 + 1) * (10 - 4)",
      "(10 - 4) * (1 + 3)",
      "4 * (10 - (1 + 3))",
      "(10 - (3 + 1)) * 4",
      "((10 - 3) - 1) * 4",
      "4 - ((1 - 3) * 10)",
      "4 * ((10 - 1) - 3)",
      "4 * ((10 - 3) - 1)",
      "(10 - (1 + 3)) * 4",
      "((3 - 1) * 10) + 4",
      "4 * (10 - (3 + 1))",
      "4 + (10 * (3 - 1))",
      "(1 + 3) * (10 - 4)"
    ]
  },
  "1 3 4 11": {
    "cards": "1 3 4 11",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "3 * (1 - (4 - 11))",
      "3 * (1 + (11 - 4))",
      "((4 * 3) + 1) + 11",
      "(11 + (3 * 4)) + 1",
      "3 * (11 - (4 - 1))",
      "(11 + (1 - 4)) * 3",
      "((1 - 4) + 11) * 3",
      "(11 - (4 - 1)) * 3",
      "(1 - (4 - 11)) * 3",
      "((3 * 4) + 1) + 11",
      "(4 * 3) + (11 + 1)",
      "(3 * 4) + (11 + 1)",
      "(1 - 4) * (3 - 11)",
      "1 + (11 + (3 * 4))",
      "11 + ((3 * 4) + 1)",
      "1 + (11 + (4 * 3))",
      "((3 * 4) + 11) + 1",
      "3 * (11 + (1 - 4))",
      "((4 * 3) + 11) + 1",
      "3 * ((11 - 4) + 1)",
      "(11 + 1) + (4 * 3)",
      "(1 + (3 * 4)) + 11",
      "(1 + 11) + (3 * 4)",
      "11 + (1 + (3 * 4))",
      "1 + ((4 * 3) + 11)",
      "3 * ((11 + 1) - 4)",
      "(11 + 1) + (3 * 4)",
      "((1 + 11) - 4) * 3",
      "((11 + 1) - 4) * 3",
      "(3 * 4) + (1 + 11)",
      "(4 * 3) + (1 + 11)",
      "((11 - 4) + 1) * 3",
      "11 + ((4 * 3) + 1)",
      "3 * ((1 + 11) - 4)",
      "(1 + (11 - 4)) * 3",
      "(11 - 3) * (4 - 1)",
      "(1 + 11) + (4 * 3)",
      "(3 - 11) * (1 - 4)",
      "1 + ((3 * 4) + 11)",
      "(11 + (4 * 3)) + 1",
      "11 + (1 + (4 * 3))",
      "3 * ((1 - 4) + 11)",
      "(4 - 1) * (11 - 3)",
      "(1 + (4 * 3)) + 11"
    ]
  },
  "1 3 4 12": {
    "cards": "1 3 4 12",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "((4 * 3) / 1) + 12",
      "((12 * 1) - 4) * 3",
      "((4 - 3) + 1) * 12",
      "3 * ((12 / 1) - 4)",
      "(12 / 1) + (3 * 4)",
      "(1 * (3 * 4)) + 12",
      "((1 * 4) * 3) + 12",
      "(1 - (3 - 4)) * 12",
      "3 * (12 - (1 * 4))",
      "12 + ((3 / 1) * 4)",
      "(4 * (3 / 1)) + 12",
      "12 + ((4 / 1) * 3)",
      "(3 * 1) * (12 - 4)",
      "((1 + 4) - 3) * 12",
      "3 * ((12 * 1) - 4)",
      "((4 + 1) - 3) * 12",
      "12 + (3 * (4 / 1))",
      "(3 / 1) * (12 - 4)",
      "12 * (4 - (3 - 1))",
      "(12 + (3 * 4)) * 1",
      "(12 * 4) / (3 - 1)",
      "((1 - 3) + 4) * 12",
      "(3 * (12 - 4)) / 1",
      "12 * (4 + (1 - 3))",
      "((3 * 4) + 12) * 1",
      "1 * ((4 * 3) + 12)",
      "(1 + (4 - 3)) * 12",
      "12 + (3 * (4 * 1))",
      "3 * ((12 - 4) * 1)",
      "12 + ((4 * 3) / 1)",
      "(4 - (3 - 1)) * 12",
      "12 + ((1 * 4) * 3)",
      "(4 / (3 - 1)) * 12",
      "(12 - 4) / (1 / 3)",
      "((4 * 1) * 3) + 12",
      "12 + ((4 * 3) * 1)",
      "((12 - 4) * 3) * 1",
      "(12 - 4) * (1 * 3)",
      "12 + ((3 * 4) / 1)",
      "(3 * 4) + (1 * 12)",
      "12 * (1 + (4 - 3))",
      "(3 * 4) + (12 / 1)",
      "12 * (4 / (3 - 1))",
      "((12 / 1) - 4) * 3",
      "(4 * (1 * 3)) + 12",
      "(3 * 4) + (12 * 1)",
      "(4 + (1 - 3)) * 12",
      "(3 * (1 * 4)) + 12",
      "(4 * 3) + (12 / 1)",
      "(12 / (3 - 1)) * 4",
      "(12 + (4 * 3)) / 1",
      "12 + ((4 * 1) * 3)",
      "(12 - 4) * (3 / 1)",
      "((3 / 1) * 4) + 12",
      "(12 + (3 * 4)) / 1",
      "(12 * 1) + (4 * 3)",
      "(12 - 4) * (3 * 1)",
      "(12 + (4 * 3)) * 1",
      "((3 * 1) * 4) + 12",
      "((12 - 4) * 1) * 3",
      "((3 * 4) * 1) + 12",
      "12 + (4 * (3 * 1))",
      "12 * ((4 + 1) - 3)",
      "12 * ((1 - 3) + 4)",
      "((4 / 1) * 3) + 12",
      "(3 * (4 * 1)) + 12",
      "12 + (4 / (1 / 3))",
      "3 * ((12 - 4) / 1)",
      "((4 * 3) * 1) + 12",
      "(12 - (4 * 1)) * 3",
      "(1 * 12) + (3 * 4)",
      "12 + (1 * (3 * 4))",
      "3 * ((1 * 12) - 4)",
      "12 + (3 * (1 * 4))",
      "(1 * (12 - 4)) * 3",
      "(4 / (1 / 3)) + 12",
      "12 + (4 * (3 / 1))",
      "(12 / 1) + (4 * 3)",
      "4 / ((3 - 1) / 12)",
      "12 + ((3 * 4) * 1)",
      "(4 * 3) + (12 * 1)",
      "1 * ((12 - 4) * 3)",
      "(12 * 1) + (3 * 4)",
      "(4 * 12) / (3 - 1)",
      "3 * (12 - (4 * 1))",
      "(4 * (3 * 1)) + 12",
      "(12 - (1 * 4)) * 3",
      "((12 - 4) / 1) * 3",
      "((3 * 4) / 1) + 12",
      "1 * (12 + (4 * 3))",
      "(1 * 12) + (4 * 3)",
      "1 * (3 * (12 - 4))",
      "(1 * (4 * 3)) + 12",
      "((1 * 12) - 4) * 3",
      "12 + (1 * (4 * 3))",
      "(3 * (12 - 4)) * 1",
      "((4 * 3) + 12) * 1",
      "4 * (12 / (3 - 1))",
      "((1 * 3) * 4) + 12",
      "12 + (3 / (1 / 4))",
      "12 / ((3 - 1) / 4)",
      "(4 * 3) + (1 * 12)",
      "1 * (12 + (3 * 4))",
      "((4 * 3) + 12) / 1",
      "12 * ((4 - 3) + 1)",
      "12 * (1 - (3 - 4))",
      "3 / (1 / (12 - 4))",
      "12 * ((1 + 4) - 3)",
      "3 * (1 * (12 - 4))",
      "3 * (12 - (4 / 1))",
      "(1 * 3) * (12 - 4)",
      "12 + ((1 * 3) * 4)",
      "(3 * (4 / 1)) + 12",
      "(12 - (4 / 1)) * 3",
      "((12 - 4) * 3) / 1",
      "(3 / (1 / 4)) + 12",
      "12 + ((3 * 1) * 4)",
      "1 * ((3 * 4) + 12)",
      "12 + (4 * (1 * 3))",
      "((3 * 4) + 12) / 1"
    ]
  },
  "1 3 4 13": {
    "cards": "1 3 4 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(3 * 4) - (1 - 13)",
      "((3 * 4) + 13) - 1",
      "13 + ((3 * 4) - 1)",
      "(13 - 1) + (3 * 4)",
      "(13 - (1 + 4)) * 3",
      "((4 * 3) + 13) - 1",
      "((13 - 4) - 1) * 3",
      "13 - (1 - (4 * 3))",
      "(13 + (4 * 3)) - 1",
      "(4 * 3) - (1 - 13)",
      "3 * ((13 - 1) - 4)",
      "(13 + (3 * 4)) - 1",
      "(3 * 4) + (13 - 1)",
      "13 - (1 - (3 * 4))",
      "3 * (13 - (4 + 1))",
      "(13 - (4 + 1)) * 3",
      "3 * ((13 - 4) - 1)",
      "((3 * 4) - 1) + 13",
      "((4 * 3) - 1) + 13",
      "(4 * 3) + (13 - 1)",
      "13 + ((4 * 3) - 1)",
      "3 * (13 - (1 + 4))",
      "((13 - 1) - 4) * 3",
      "(13 - 1) + (4 * 3)"
    ]
  },
  "1 3 5 5": {
    "cards": "1 3 5 5",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 3 5 6": {
    "cards": "1 3 5 6",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(5 + (6 * 3)) + 1",
      "1 + ((3 * 6) + 5)",
      "(6 * 3) + (5 + 1)",
      "5 + (1 + (6 * 3))",
      "5 + ((6 * 3) + 1)",
      "(1 + 5) + (3 * 6)",
      "(1 + 5) + (6 * 3)",
      "(5 + (3 * 6)) + 1",
      "6 + ((1 + 5) * 3)",
      "((6 * 3) + 5) + 1",
      "1 + ((6 * 3) + 5)",
      "(1 + (3 * 6)) + 5",
      "(3 * (5 + 1)) + 6",
      "5 + (1 + (3 * 6))",
      "6 + ((5 + 1) * 3)",
      "((3 * 6) + 5) + 1",
      "1 + (5 + (3 * 6))",
      "5 + ((3 * 6) + 1)",
      "((5 + 1) * 3) + 6",
      "(3 * (1 + 5)) + 6",
      "(6 * 3) + (1 + 5)",
      "(3 * 6) + (5 + 1)",
      "6 + (3 * (1 + 5))",
      "6 + (3 * (5 + 1))",
      "(5 + 1) + (3 * 6)",
      "(3 * 6) + (1 + 5)",
      "(5 + 1) + (6 * 3)",
      "((1 + 5) * 3) + 6",
      "((6 * 3) + 1) + 5",
      "(1 + (6 * 3)) + 5",
      "1 + (5 + (6 * 3))",
      "((3 * 6) + 1) + 5"
    ]
  },
  "1 3 5 7": {
    "cards": "1 3 5 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(3 - 1) * (7 + 5)",
      "(7 - 3) * (1 + 5)",
      "(3 - 1) * (5 + 7)",
      "(7 - 3) * (5 + 1)",
      "(5 + 7) * (3 - 1)",
      "(1 + 5) * (7 - 3)",
      "(7 + 5) * (3 - 1)",
      "(5 + 1) * (7 - 3)"
    ]
  },
  "1 3 5 8": {
    "cards": "1 3 5 8",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "1 + (8 + (3 * 5))",
      "(5 * 3) + (1 + 8)",
      "(1 + (3 * 5)) + 8",
      "((8 - 3) * 5) - 1",
      "8 + ((5 * 3) + 1)",
      "(1 - (3 - 5)) * 8",
      "8 + (1 + (5 * 3))",
      "8 * (5 + (1 - 3))",
      "((3 * 5) + 8) + 1",
      "((3 * 5) + 1) + 8",
      "(1 + 8) + (3 * 5)",
      "8 * (5 - (3 - 1))",
      "(3 * 5) + (1 + 8)",
      "((5 + 1) - 3) * 8",
      "(5 * 3) + (8 + 1)",
      "(1 + (5 * 3)) + 8",
      "(8 + 1) + (5 * 3)",
      "1 + (8 + (5 * 3))",
      "8 * (1 - (3 - 5))",
      "((1 + 5) - 3) * 8",
      "((5 * 3) + 1) + 8",
      "((5 - 3) + 1) * 8",
      "(1 + (5 - 3)) * 8",
      "(5 - (3 - 1)) * 8",
      "1 + ((3 * 5) + 8)",
      "(1 + 8) + (5 * 3)",
      "(8 + 1) + (3 * 5)",
      "8 * (1 + (5 - 3))",
      "(5 * (8 - 3)) - 1",
      "8 + ((3 * 5) + 1)",
      "8 * ((1 - 3) + 5)",
      "((5 * 3) + 8) + 1",
      "((1 - 3) + 5) * 8",
      "(8 + (3 * 5)) + 1",
      "8 * ((5 - 3) + 1)",
      "8 * ((1 + 5) - 3)",
      "(3 * 5) + (8 + 1)",
      "(5 + (1 - 3)) * 8",
      "8 + (1 + (3 * 5))",
      "(8 + (5 * 3)) + 1",
      "1 + ((5 * 3) + 8)",
      "8 * ((5 + 1) - 3)"
    ]
  },
  "1 3 5 9": {
    "cards": "1 3 5 9",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "(9 + (5 * 3)) / 1",
      "(1 * (3 * 5)) + 9",
      "9 + (5 * (3 / 1))",
      "((3 / 1) * 5) + 9",
      "(3 * (5 * 1)) + 9",
      "(5 * (1 * 3)) + 9",
      "(5 * (3 / 1)) + 9",
      "(5 * (3 * 1)) + 9",
      "9 + ((3 / 1) * 5)",
      "1 * (9 + (3 * 5))",
      "((3 * 5) / 1) + 9",
      "9 + ((3 * 5) * 1)",
      "(9 - 3) * (5 - 1)",
      "9 + (3 * (5 / 1))",
      "(1 * 9) + (5 * 3)",
      "((5 * 1) * 3) + 9",
      "((5 * 3) / 1) + 9",
      "9 + (1 * (3 * 5))",
      "9 + ((3 * 1) * 5)",
      "(1 - 5) * (3 - 9)",
      "((1 * 5) * 3) + 9",
      "(9 * 1) + (3 * 5)",
      "(5 * 3) + (9 / 1)",
      "((1 * 3) * 5) + 9",
      "((5 / 1) * 3) + 9",
      "((5 * 3) + 9) * 1",
      "1 * ((5 * 3) + 9)",
      "9 + ((5 * 3) / 1)",
      "(9 / 1) + (5 * 3)",
      "(9 + (3 * 5)) * 1",
      "9 + (3 / (1 / 5))",
      "9 + ((5 * 1) * 3)",
      "9 + (5 * (3 * 1))",
      "(1 * 9) + (3 * 5)",
      "(5 * 3) + (9 * 1)",
      "9 + ((5 / 1) * 3)",
      "9 + (5 * (1 * 3))",
      "((5 * 3) + 9) / 1",
      "((5 / 3) + 1) * 9",
      "(9 + (5 * 3)) * 1",
      "(3 * 5) + (9 / 1)",
      "9 + ((1 * 3) * 5)",
      "9 * ((5 / 3) + 1)",
      "(1 + (5 / 3)) * 9",
      "((3 * 5) + 9) / 1",
      "(9 / 1) + (3 * 5)",
      "(1 * (5 * 3)) + 9",
      "(3 * 5) + (9 * 1)",
      "1 * (9 + (5 * 3))",
      "(5 / (1 / 3)) + 9",
      "9 + ((3 * 5) / 1)",
      "(3 * (5 / 1)) + 9",
      "((5 * 3) * 1) + 9",
      "9 + ((1 * 5) * 3)",
      "(3 - 9) * (1 - 5)",
      "1 * ((3 * 5) + 9)",
      "(3 * (1 * 5)) + 9",
      "(5 * 3) + (1 * 9)",
      "(3 / (1 / 5)) + 9",
      "(9 * 1) + (5 * 3)",
      "9 + (3 * (1 * 5))",
      "((3 * 5) + 9) * 1",
      "9 + (3 * (5 * 1))",
      "((3 * 5) * 1) + 9",
      "9 + ((5 * 3) * 1)",
      "(3 * 5) + (1 * 9)",
      "9 * (1 + (5 / 3))",
      "(5 - 1) * (9 - 3)",
      "9 + (5 / (1 / 3))",
      "9 + (1 * (5 * 3))",
      "((3 * 1) * 5) + 9",
      "(9 + (3 * 5)) / 1"
    ]
  },
  "1 3 5 10": {
    "cards": "1 3 5 10",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((10 * 3) - 5) - 1",
      "(10 + (3 * 5)) - 1",
      "((5 * 3) - 1) + 10",
      "(10 - 1) + (5 * 3)",
      "(3 * 5) + (10 - 1)",
      "(3 * 5) - (1 - 10)",
      "(3 * 10) - (1 + 5)",
      "((3 * 10) - 5) - 1",
      "(10 * 3) - (1 + 5)",
      "(10 - 1) + (3 * 5)",
      "(10 * 3) - (5 + 1)",
      "10 + ((5 * 3) - 1)",
      "10 + ((3 * 5) - 1)",
      "((5 * 3) + 10) - 1",
      "(5 * 3) + (10 - 1)",
      "((3 * 10) - 1) - 5",
      "(5 * 3) - (1 - 10)",
      "(3 * 10) - (5 + 1)",
      "((3 * 5) + 10) - 1",
      "((3 * 5) - 1) + 10",
      "((10 * 3) - 1) - 5",
      "10 - (1 - (3 * 5))",
      "(10 + (5 * 3)) - 1",
      "10 - (1 - (5 * 3))"
    ]
  },
  "1 3 5 11": {
    "cards": "1 3 5 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(1 + 3) * (11 - 5)",
      "(11 - 5) * (3 + 1)",
      "(3 + 1) * (11 - 5)",
      "(11 + 1) * (5 - 3)",
      "(11 - 5) * (1 + 3)",
      "(5 - 3) * (1 + 11)",
      "(1 + 11) * (5 - 3)",
      "(5 - 3) * (11 + 1)"
    ]
  },
  "1 3 5 12": {
    "cards": "1 3 5 12",
    "has_solution": "Y",
    "num_solutions": 70,
    "solutions": [
      "3 * ((12 - 5) + 1)",
      "(1 + 5) * (12 / 3)",
      "((5 / 1) - 3) * 12",
      "(5 + 1) * (12 / 3)",
      "((5 - 1) * 3) + 12",
      "12 * (1 * (5 - 3))",
      "12 * ((5 - 3) / 1)",
      "12 * ((5 - 3) * 1)",
      "12 / (3 / (5 + 1))",
      "(5 - (3 / 1)) * 12",
      "(12 * (5 - 3)) / 1",
      "((5 - 3) * 12) * 1",
      "(5 - (3 * 1)) * 12",
      "3 * (1 + (12 - 5))",
      "((5 * 1) - 3) * 12",
      "12 - ((1 - 5) * 3)",
      "12 * ((5 * 1) - 3)",
      "12 + ((5 - 1) * 3)",
      "(1 * 12) * (5 - 3)",
      "(5 - 3) * (1 * 12)",
      "(12 + (1 - 5)) * 3",
      "(12 / 3) * (1 + 5)",
      "1 * (12 * (5 - 3))",
      "(12 * 1) * (5 - 3)",
      "3 * (12 - (5 - 1))",
      "((5 + 1) * 12) / 3",
      "(12 * (1 + 5)) / 3",
      "(5 - 3) / (1 / 12)",
      "((1 + 5) / 3) * 12",
      "((1 + 12) - 5) * 3",
      "(12 * (5 + 1)) / 3",
      "12 * ((1 * 5) - 3)",
      "12 * ((5 / 1) - 3)",
      "12 * (5 - (3 * 1))",
      "(5 - 3) * (12 / 1)",
      "12 + (3 * (5 - 1))",
      "3 * ((1 + 12) - 5)",
      "(5 - 3) * (12 * 1)",
      "(3 * (5 - 1)) + 12",
      "(12 - (5 - 1)) * 3",
      "12 * (5 - (3 / 1))",
      "3 * (12 + (1 - 5))",
      "((5 - 3) * 1) * 12",
      "3 * ((12 + 1) - 5)",
      "1 * ((5 - 3) * 12)",
      "(12 / 1) * (5 - 3)",
      "(12 / 3) * (5 + 1)",
      "12 / (1 / (5 - 3))",
      "12 / (3 / (1 + 5))",
      "((5 + 1) / 3) * 12",
      "((12 - 5) + 1) * 3",
      "12 * (5 - (1 * 3))",
      "(1 - (5 - 12)) * 3",
      "(5 - (1 * 3)) * 12",
      "12 * ((5 + 1) / 3)",
      "(12 * (5 - 3)) * 1",
      "12 - (3 * (1 - 5))",
      "(5 + 1) / (3 / 12)",
      "(1 + 5) / (3 / 12)",
      "(1 + (12 - 5)) * 3",
      "(1 * (5 - 3)) * 12",
      "((1 - 5) + 12) * 3",
      "3 * ((1 - 5) + 12)",
      "((5 - 3) * 12) / 1",
      "3 * (1 - (5 - 12))",
      "((1 * 5) - 3) * 12",
      "((5 - 3) / 1) * 12",
      "((12 + 1) - 5) * 3",
      "((1 + 5) * 12) / 3",
      "12 * ((1 + 5) / 3)"
    ]
  },
  "1 3 5 13": {
    "cards": "1 3 5 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "1 * (3 * (13 - 5))",
      "(1 * (13 - 5)) * 3",
      "(3 / 1) * (13 - 5)",
      "3 * ((13 * 1) - 5)",
      "(13 - (5 / 1)) * 3",
      "((13 / 1) - 5) * 3",
      "3 * (13 - (5 * 1))",
      "((13 - 5) * 3) / 1",
      "(3 - 5) * (1 - 13)",
      "((13 * 1) - 5) * 3",
      "(13 - 1) * (5 - 3)",
      "((1 * 13) - 5) * 3",
      "3 * (13 - (5 / 1))",
      "(13 - 5) / (1 / 3)",
      "(13 - 5) * (3 / 1)",
      "3 * (13 - (1 * 5))",
      "(1 - 13) * (3 - 5)",
      "((13 - 5) / 1) * 3",
      "3 * ((13 - 5) * 1)",
      "(13 - 5) * (3 * 1)",
      "((13 - 5) * 3) * 1",
      "3 * (1 * (13 - 5))",
      "(1 * 3) * (13 - 5)",
      "(13 - 5) * (1 * 3)",
      "((13 - 5) * 1) * 3",
      "(3 * (13 - 5)) / 1",
      "(3 * (13 - 5)) * 1",
      "(5 - 3) * (13 - 1)",
      "3 * ((13 - 5) / 1)",
      "3 * ((1 * 13) - 5)",
      "(3 * 1) * (13 - 5)",
      "(13 - (1 * 5)) * 3",
      "1 * ((13 - 5) * 3)",
      "(13 - (5 * 1)) * 3",
      "3 / (1 / (13 - 5))",
      "3 * ((13 / 1) - 5)"
    ]
  },
  "1 3 6 6": {
    "cards": "1 3 6 6",
    "has_solution": "Y",
    "num_solutions": 82,
    "solutions": [
      "(3 * 6) + (1 * 6)",
      "(3 * (6 / 1)) + 6",
      "6 + ((6 * 3) * 1)",
      "6 * ((1 + 6) - 3)",
      "(1 * 6) + (6 * 3)",
      "(6 * 1) + (3 * 6)",
      "((3 * 6) / 1) + 6",
      "1 * (6 + (6 * 3))",
      "(6 * (1 * 3)) + 6",
      "(6 / 1) + (6 * 3)",
      "((3 * 6) + 6) / 1",
      "6 * (6 + (1 - 3))",
      "((3 / 1) * 6) + 6",
      "6 + (6 / (1 / 3))",
      "(6 + (3 * 6)) * 1",
      "6 + ((3 * 6) / 1)",
      "(1 + (6 - 3)) * 6",
      "6 * ((6 - 3) + 1)",
      "(3 - 1) * (6 + 6)",
      "6 + (1 * (3 * 6))",
      "((6 + 1) - 3) * 6",
      "6 * ((6 + 1) - 3)",
      "(3 * 6) + (6 / 1)",
      "(6 / (1 / 3)) + 6",
      "6 + (6 * (3 / 1))",
      "6 + ((3 / 1) * 6)",
      "((6 - 3) + 1) * 6",
      "6 + ((3 * 6) * 1)",
      "6 * (6 - (3 - 1))",
      "6 * (1 - (3 - 6))",
      "((3 * 6) * 1) + 6",
      "(3 * 6) + (6 * 1)",
      "(6 * 3) + (6 * 1)",
      "(6 + 6) * (3 - 1)",
      "(6 * (3 / 1)) + 6",
      "(3 * (6 * 1)) + 6",
      "6 + ((3 * 1) * 6)",
      "1 * (6 + (3 * 6))",
      "6 * ((1 - 3) + 6)",
      "((1 * 3) * 6) + 6",
      "6 + (6 * (3 * 1))",
      "(6 + (1 - 3)) * 6",
      "(6 - (3 - 1)) * 6",
      "((6 * 3) / 1) + 6",
      "(3 / (1 / 6)) + 6",
      "(6 / 1) + (3 * 6)",
      "(3 * (1 * 6)) + 6",
      "6 + (3 * (6 / 1))",
      "((6 * 3) + 6) * 1",
      "6 + (1 * (6 * 3))",
      "((3 * 1) * 6) + 6",
      "((6 * 3) * 1) + 6",
      "((3 * 6) + 6) * 1",
      "((1 + 6) - 3) * 6",
      "(6 * 1) + (6 * 3)",
      "6 + (3 * (1 * 6))",
      "((6 * 3) + 6) / 1",
      "(6 + (6 * 3)) * 1",
      "1 * ((3 * 6) + 6)",
      "6 + (3 / (1 / 6))",
      "6 + ((1 * 3) * 6)",
      "(1 * (6 * 3)) + 6",
      "1 * ((6 * 3) + 6)",
      "((6 * 1) * 3) + 6",
      "((1 - 3) + 6) * 6",
      "((1 * 6) * 3) + 6",
      "(6 * (3 * 1)) + 6",
      "(1 * (3 * 6)) + 6",
      "(1 * 6) + (3 * 6)",
      "6 + ((6 * 3) / 1)",
      "6 + (6 * (1 * 3))",
      "6 + ((6 * 1) * 3)",
      "6 + ((1 * 6) * 3)",
      "(6 * 3) + (6 / 1)",
      "6 + ((6 / 1) * 3)",
      "(6 + (6 * 3)) / 1",
      "6 * (1 + (6 - 3))",
      "(1 - (3 - 6)) * 6",
      "6 + (3 * (6 * 1))",
      "((6 / 1) * 3) + 6",
      "(6 * 3) + (1 * 6)",
      "(6 + (3 * 6)) / 1"
    ]
  },
  "1 3 6 7": {
    "cards": "1 3 6 7",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "((6 * 3) - 1) + 7",
      "(7 + (3 * 6)) - 1",
      "6 - (3 * (1 - 7))",
      "((1 * 7) - 3) * 6",
      "1 * ((7 - 3) * 6)",
      "(7 - 3) / (1 / 6)",
      "(7 - 3) * (1 * 6)",
      "(7 - (3 * 1)) * 6",
      "(6 * 3) - (1 - 7)",
      "(1 * 6) * (7 - 3)",
      "((7 * 1) - 3) * 6",
      "(6 / 1) * (7 - 3)",
      "(6 - 3) * (7 + 1)",
      "6 * (7 - (3 * 1))",
      "6 - ((1 - 7) * 3)",
      "6 * ((7 - 3) / 1)",
      "7 - (1 - (6 * 3))",
      "6 / (1 / (7 - 3))",
      "((7 - 3) * 1) * 6",
      "7 + ((6 * 3) - 1)",
      "((7 / 1) - 3) * 6",
      "(6 * 1) * (7 - 3)",
      "((3 * 6) + 7) - 1",
      "((7 - 3) / 1) * 6",
      "(7 + 1) * (6 - 3)",
      "(6 * (7 - 3)) / 1",
      "(1 * (7 - 3)) * 6",
      "6 * (1 * (7 - 3))",
      "(7 + (6 * 3)) - 1",
      "6 * ((1 * 7) - 3)",
      "(6 * 3) + (7 - 1)",
      "6 * ((7 / 1) - 3)",
      "6 + (3 * (7 - 1))",
      "(7 - 1) + (3 * 6)",
      "6 * ((7 * 1) - 3)",
      "((7 - 3) * 6) / 1",
      "6 * ((7 - 3) * 1)",
      "(7 - 3) * (6 / 1)",
      "(1 + 7) * (6 - 3)",
      "6 * (7 - (1 * 3))",
      "((6 * 3) + 7) - 1",
      "(7 - (1 * 3)) * 6",
      "6 * (7 - (3 / 1))",
      "7 - (1 - (3 * 6))",
      "((7 - 3) * 6) * 1",
      "(6 - 3) * (1 + 7)",
      "(7 - 3) * (6 * 1)",
      "(3 * (7 - 1)) + 6",
      "(3 * 6) + (7 - 1)",
      "6 + ((7 - 1) * 3)",
      "7 + ((3 * 6) - 1)",
      "(3 * 6) - (1 - 7)",
      "1 * (6 * (7 - 3))",
      "((7 - 1) * 3) + 6",
      "(7 - (3 / 1)) * 6",
      "(6 * (7 - 3)) * 1",
      "(7 - 1) + (6 * 3)",
      "((3 * 6) - 1) + 7"
    ]
  },
  "1 3 6 8": {
    "cards": "1 3 6 8",
    "has_solution": "Y",
    "num_solutions": 52,
    "solutions": [
      "(6 / (3 - 1)) * 8",
      "1 * ((6 - 3) * 8)",
      "6 * (8 - (3 + 1))",
      "8 / (1 / (6 - 3))",
      "(8 / 1) * (6 - 3)",
      "(8 - (3 + 1)) * 6",
      "8 * (1 + (6 / 3))",
      "(1 * (6 - 3)) * 8",
      "(6 - 3) / (1 / 8)",
      "((6 - 3) * 8) / 1",
      "6 * ((8 - 1) - 3)",
      "(6 * 8) / (3 - 1)",
      "((6 / 3) + 1) * 8",
      "(8 * (6 - 3)) * 1",
      "8 * ((6 - 3) * 1)",
      "(6 - 3) * (1 * 8)",
      "8 * ((1 * 6) - 3)",
      "8 * ((6 / 1) - 3)",
      "(8 * (6 - 3)) / 1",
      "((6 * 1) - 3) * 8",
      "(8 * 6) / (3 - 1)",
      "(8 / (3 - 1)) * 6",
      "8 * ((6 * 1) - 3)",
      "8 * (6 - (3 / 1))",
      "(8 - (1 + 3)) * 6",
      "((8 - 3) - 1) * 6",
      "8 * ((6 - 3) / 1)",
      "((6 - 3) / 1) * 8",
      "((1 * 6) - 3) * 8",
      "(6 - (3 * 1)) * 8",
      "8 * (6 - (1 * 3))",
      "(6 - (3 / 1)) * 8",
      "6 * (8 - (1 + 3))",
      "((8 - 1) - 3) * 6",
      "6 / ((3 - 1) / 8)",
      "(6 - 3) * (8 * 1)",
      "6 * (8 / (3 - 1))",
      "((6 / 1) - 3) * 8",
      "((6 - 3) * 8) * 1",
      "(1 + (6 / 3)) * 8",
      "6 * ((8 - 3) - 1)",
      "8 * ((6 / 3) + 1)",
      "8 / ((3 - 1) / 6)",
      "8 * (6 - (3 * 1))",
      "(1 * 8) * (6 - 3)",
      "(8 * 1) * (6 - 3)",
      "(6 - 3) * (8 / 1)",
      "8 * (1 * (6 - 3))",
      "8 * (6 / (3 - 1))",
      "1 * (8 * (6 - 3))",
      "((6 - 3) * 1) * 8",
      "(6 - (1 * 3)) * 8"
    ]
  },
  "1 3 6 9": {
    "cards": "1 3 6 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "6 * (1 + (9 / 3))",
      "6 * ((9 / 3) + 1)",
      "(3 * (1 + 9)) - 6",
      "6 - ((1 - 3) * 9)",
      "(3 * (6 - 1)) + 9",
      "(3 * (9 + 1)) - 6",
      "(3 - 6) * (1 - 9)",
      "(9 - 1) * (6 - 3)",
      "((3 - 1) * 9) + 6",
      "(9 * (3 - 1)) + 6",
      "((9 / 3) + 1) * 6",
      "9 - (3 * (1 - 6))",
      "(1 + (9 / 3)) * 6",
      "((9 + 1) * 3) - 6",
      "(1 - 9) * (3 - 6)",
      "6 + ((3 - 1) * 9)",
      "((1 + 9) * 3) - 6",
      "6 - (9 * (1 - 3))",
      "((6 - 1) * 3) + 9",
      "9 - ((1 - 6) * 3)",
      "9 + ((6 - 1) * 3)",
      "9 + (3 * (6 - 1))",
      "6 + (9 * (3 - 1))",
      "(6 - 3) * (9 - 1)"
    ]
  },
  "1 3 6 10": {
    "cards": "1 3 6 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(1 * (3 * 10)) - 6",
      "((1 * 10) * 3) - 6",
      "((10 * 3) / 1) - 6",
      "(10 * 3) - (6 / 1)",
      "(3 * 10) - (6 / 1)",
      "(3 * (10 * 1)) - 6",
      "(3 * (10 / 1)) - 6",
      "1 * ((3 * 10) - 6)",
      "((10 / 1) * 3) - 6",
      "((3 * 10) - 6) * 1",
      "((10 * 3) - 6) * 1",
      "((10 * 3) - 6) / 1",
      "1 * ((10 * 3) - 6)",
      "((3 / 1) * 10) - 6",
      "((10 * 1) * 3) - 6",
      "(3 * 10) - (1 * 6)",
      "(3 * 10) - (6 * 1)",
      "((3 * 10) * 1) - 6",
      "(10 / (1 / 3)) - 6",
      "(1 * (10 * 3)) - 6",
      "((1 * 3) * 10) - 6",
      "(10 * 3) - (1 * 6)",
      "(10 * (3 * 1)) - 6",
      "(10 * 3) - (6 * 1)",
      "(3 / (1 / 10)) - 6",
      "((3 * 10) / 1) - 6",
      "((10 * 3) * 1) - 6",
      "(10 * (3 / 1)) - 6",
      "(10 * (1 * 3)) - 6",
      "((3 * 10) - 6) / 1",
      "((3 * 1) * 10) - 6",
      "(3 * (1 * 10)) - 6"
    ]
  },
  "1 3 6 11": {
    "cards": "1 3 6 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((1 + 11) / 3) * 6",
      "(6 * (1 + 11)) / 3",
      "(6 / 3) * (11 + 1)",
      "6 / (3 / (11 + 1))",
      "((11 + 1) / 3) * 6",
      "(6 * (11 + 1)) / 3",
      "(3 * (11 - 1)) - 6",
      "(11 + 1) / (3 / 6)",
      "(6 / 3) * (1 + 11)",
      "(1 + 11) * (6 / 3)",
      "(11 + 1) * (6 / 3)",
      "((11 - 1) * 3) - 6",
      "6 / (3 / (1 + 11))",
      "((11 + 1) * 6) / 3",
      "6 * ((11 + 1) / 3)",
      "(1 + 11) / (3 / 6)",
      "6 * ((1 + 11) / 3)",
      "((1 + 11) * 6) / 3"
    ]
  },
  "1 3 6 12": {
    "cards": "1 3 6 12",
    "has_solution": "Y",
    "num_solutions": 169,
    "solutions": [
      "(12 * 6) * (1 / 3)",
      "12 / (3 * (1 / 6))",
      "12 * ((6 / 3) / 1)",
      "(1 + 3) * (12 - 6)",
      "12 - (6 * (1 - 3))",
      "6 / ((1 * 3) / 12)",
      "12 * ((6 / 1) / 3)",
      "(6 / 1) * (12 / 3)",
      "(12 * (1 / 3)) * 6",
      "12 * (6 - (3 + 1))",
      "(1 / 3) * (6 * 12)",
      "(6 * 12) / (3 * 1)",
      "6 * ((12 / 1) / 3)",
      "12 / (3 / (6 / 1))",
      "(12 / 3) * (6 / 1)",
      "12 * (6 / (3 * 1))",
      "((12 / 1) / 3) * 6",
      "(6 * (12 / 3)) / 1",
      "1 * ((12 / 3) * 6)",
      "((6 * 12) / 3) / 1",
      "12 * ((6 / 3) * 1)",
      "(6 / (1 / 12)) / 3",
      "1 * (6 * (12 / 3))",
      "12 / (3 / (1 * 6))",
      "(6 / 3) * (12 * 1)",
      "6 * ((1 / 3) * 12)",
      "6 / (1 / (12 / 3))",
      "(12 / 1) * (6 / 3)",
      "((6 / 1) * 12) / 3",
      "(6 * 12) / (3 / 1)",
      "((12 * 1) * 6) / 3",
      "(12 / (1 / 6)) / 3",
      "((12 * 6) / 3) / 1",
      "((12 * 6) / 3) * 1",
      "12 * (6 * (1 / 3))",
      "12 * ((6 - 3) - 1)",
      "6 / ((3 * 1) / 12)",
      "((12 / 3) * 6) * 1",
      "((12 * 6) * 1) / 3",
      "((12 / 3) * 1) * 6",
      "12 / ((3 / 6) * 1)",
      "(6 / 3) * (12 / 1)",
      "(12 * 1) / (3 / 6)",
      "((12 / 1) * 6) / 3",
      "(1 / 3) * (12 * 6)",
      "(1 * 12) * (6 / 3)",
      "((12 * 6) / 1) / 3",
      "(1 * 6) / (3 / 12)",
      "12 * ((1 * 6) / 3)",
      "((6 * 1) / 3) * 12",
      "(6 * (12 / 1)) / 3",
      "12 - ((1 - 3) * 6)",
      "(6 * (3 - 1)) + 12",
      "((6 / 3) / 1) * 12",
      "12 / ((3 * 1) / 6)",
      "(12 * 6) / (1 * 3)",
      "((6 * 12) / 3) * 1",
      "((12 / 3) / 1) * 6",
      "12 * (6 / (3 / 1))",
      "(6 * 12) / (1 * 3)",
      "1 * (12 * (6 / 3))",
      "(6 * (1 * 12)) / 3",
      "12 + ((3 - 1) * 6)",
      "6 / (3 * (1 / 12))",
      "(6 * (12 / 3)) * 1",
      "((12 * 1) / 3) * 6",
      "((1 * 12) * 6) / 3",
      "((3 - 1) * 6) + 12",
      "(1 * (6 * 12)) / 3",
      "(12 * 6) / (3 * 1)",
      "6 * ((12 / 3) * 1)",
      "(12 / (3 / 6)) / 1",
      "6 * (12 / (3 * 1))",
      "12 / ((1 * 3) / 6)",
      "(6 * 1) * (12 / 3)",
      "((1 / 3) * 6) * 12",
      "((6 * 1) * 12) / 3",
      "1 * ((6 * 12) / 3)",
      "(1 * 12) / (3 / 6)",
      "(12 / (3 * 1)) * 6",
      "6 * ((1 * 12) / 3)",
      "(1 / (3 / 6)) * 12",
      "12 / (1 * (3 / 6))",
      "(6 / 1) / (3 / 12)",
      "(6 * (1 / 3)) * 12",
      "6 * (12 * (1 / 3))",
      "6 * ((12 / 3) / 1)",
      "((6 * 12) * 1) / 3",
      "1 / ((3 / 12) / 6)",
      "(6 / (3 / 12)) / 1",
      "((6 * 12) / 1) / 3",
      "12 * ((6 * 1) / 3)",
      "6 * ((12 * 1) / 3)",
      "(1 * (12 * 6)) / 3",
      "((1 * 6) * 12) / 3",
      "((6 / 3) * 12) / 1",
      "(12 / 3) * (1 * 6)",
      "12 * ((1 / 3) * 6)",
      "12 / ((3 / 6) / 1)",
      "12 / ((1 / 6) * 3)",
      "1 / (3 / (6 * 12))",
      "12 / ((3 / 1) / 6)",
      "(6 / (3 / 1)) * 12",
      "((6 / 1) / 3) * 12",
      "(1 * 6) * (12 / 3)",
      "(12 - 6) * (1 + 3)",
      "(6 * (12 * 1)) / 3",
      "(6 * 1) / (3 / 12)",
      "6 * (1 / (3 / 12))",
      "((6 / 3) * 12) * 1",
      "12 / (1 / (6 / 3))",
      "(12 * 6) / (3 / 1)",
      "((1 * 6) / 3) * 12",
      "12 * ((6 - 1) - 3)",
      "12 / (1 - (3 / 6))",
      "((6 - 1) - 3) * 12",
      "6 / (3 / (12 / 1))",
      "1 / (3 / (12 * 6))",
      "1 * ((12 * 6) / 3)",
      "((1 / 3) * 12) * 6",
      "(6 / (1 * 3)) * 12",
      "((6 / 3) * 1) * 12",
      "12 * (6 / (1 * 3))",
      "((12 / 3) * 6) / 1",
      "(6 - (1 + 3)) * 12",
      "(12 / (3 / 6)) * 1",
      "12 * (1 / (3 / 6))",
      "((6 - 3) - 1) * 12",
      "1 * ((6 / 3) * 12)",
      "6 / ((3 / 12) / 1)",
      "(12 * (1 * 6)) / 3",
      "(12 * (6 / 1)) / 3",
      "1 / ((3 / 6) / 12)",
      "(6 / 3) / (1 / 12)",
      "6 / ((1 / 12) * 3)",
      "1 * (6 / (3 / 12))",
      "(12 * (6 * 1)) / 3",
      "(6 / (3 / 12)) * 1",
      "(12 - 6) * (3 + 1)",
      "(12 * 1) * (6 / 3)",
      "(12 / (1 * 3)) * 6",
      "6 * (12 / (3 / 1))",
      "(12 / (3 / 1)) * 6",
      "12 / (3 / (6 * 1))",
      "12 + (6 * (3 - 1))",
      "(6 - (3 + 1)) * 12",
      "(1 * (12 / 3)) * 6",
      "6 * (1 * (12 / 3))",
      "((1 * 12) / 3) * 6",
      "6 / (3 / (1 * 12))",
      "(1 * (6 / 3)) * 12",
      "1 * (12 / (3 / 6))",
      "6 * (12 / (1 * 3))",
      "12 * (6 - (1 + 3))",
      "(6 / (3 * 1)) * 12",
      "(6 / 3) * (1 * 12)",
      "(1 / (3 / 12)) * 6",
      "12 * (1 * (6 / 3))",
      "6 / ((3 / 12) * 1)",
      "(6 * 12) * (1 / 3)",
      "6 / (1 * (3 / 12))",
      "6 / ((3 / 1) / 12)",
      "(12 / 3) * (6 * 1)",
      "(12 / 3) / (1 / 6)",
      "(12 * (6 / 3)) / 1",
      "(3 + 1) * (12 - 6)",
      "(12 / 1) / (3 / 6)",
      "6 / (3 / (12 * 1))",
      "(12 * (6 / 3)) * 1"
    ]
  },
  "1 3 6 13": {
    "cards": "1 3 6 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "3 * ((13 - 6) + 1)",
      "((1 - 6) + 13) * 3",
      "3 * ((13 + 1) - 6)",
      "((1 + 13) - 6) * 3",
      "3 * ((1 + 13) - 6)",
      "(13 - 1) * (6 / 3)",
      "3 * (13 + (1 - 6))",
      "(13 + (1 - 6)) * 3",
      "((13 - 1) * 6) / 3",
      "3 * (13 - (6 - 1))",
      "(6 * (13 - 1)) / 3",
      "(6 / 3) * (13 - 1)",
      "3 * ((1 - 6) + 13)",
      "((13 - 1) / 3) * 6",
      "3 * (1 + (13 - 6))",
      "(13 - (6 - 1)) * 3",
      "(1 + (13 - 6)) * 3",
      "((13 + 1) - 6) * 3",
      "3 * (1 - (6 - 13))",
      "(1 - (6 - 13)) * 3",
      "6 / (3 / (13 - 1))",
      "((13 - 6) + 1) * 3",
      "6 * ((13 - 1) / 3)",
      "(13 - 1) / (3 / 6)"
    ]
  },
  "1 3 7 7": {
    "cards": "1 3 7 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(3 - 7) * (1 - 7)",
      "(1 - 7) * (3 - 7)",
      "(7 - 3) * (7 - 1)",
      "(7 - 1) * (7 - 3)"
    ]
  },
  "1 3 7 8": {
    "cards": "1 3 7 8",
    "has_solution": "Y",
    "num_solutions": 9,
    "solutions": [
      "((7 - 1) - 3) * 8",
      "8 * ((7 - 3) - 1)",
      "8 * (7 - (3 + 1))",
      "(7 - (3 + 1)) * 8",
      "((7 - 3) - 1) * 8",
      "3 / (1 - (7 / 8))",
      "8 * (7 - (1 + 3))",
      "8 * ((7 - 1) - 3)",
      "(7 - (1 + 3)) * 8"
    ]
  },
  "1 3 7 9": {
    "cards": "1 3 7 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 * (1 + 7)) / 3",
      "((1 + 7) / 3) * 9",
      "((7 + 1) / 3) * 9",
      "(7 + 1) / (3 / 9)",
      "(9 / 3) * (1 + 7)",
      "9 / (3 / (7 + 1))",
      "((7 + 1) * 9) / 3",
      "(7 + 1) * (9 / 3)",
      "(9 * (7 + 1)) / 3",
      "(9 / 3) * (7 + 1)",
      "9 * ((1 + 7) / 3)",
      "9 * ((7 + 1) / 3)",
      "((1 + 7) * 9) / 3",
      "(1 + 7) / (3 / 9)",
      "9 / (3 / (1 + 7))",
      "(1 + 7) * (9 / 3)"
    ]
  },
  "1 3 7 10": {
    "cards": "1 3 7 10",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((3 * 10) - 7) + 1",
      "1 + ((3 * 10) - 7)",
      "10 - ((1 - 3) * 7)",
      "10 + ((3 - 1) * 7)",
      "(3 * 10) - (7 - 1)",
      "(10 * 3) - (7 - 1)",
      "((10 * 3) - 7) + 1",
      "(7 * (3 - 1)) + 10",
      "(3 * 10) + (1 - 7)",
      "1 - (7 - (3 * 10))",
      "1 - (7 - (10 * 3))",
      "10 + (7 * (3 - 1))",
      "(1 - 7) + (3 * 10)",
      "(10 * 3) + (1 - 7)",
      "((3 * 10) + 1) - 7",
      "1 + ((10 * 3) - 7)",
      "(1 + (3 * 10)) - 7",
      "((10 * 3) + 1) - 7",
      "((3 - 1) * 7) + 10",
      "(1 - 7) + (10 * 3)",
      "(1 + (10 * 3)) - 7",
      "10 - (7 * (1 - 3))"
    ]
  },
  "1 3 7 11": {
    "cards": "1 3 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 3 7 12": {
    "cards": "1 3 7 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 * (7 - 1)) / 3",
      "(7 - 1) / (3 / 12)",
      "(7 - 1) * (12 / 3)",
      "12 * ((7 - 1) / 3)",
      "12 / (3 / (7 - 1))",
      "((7 - 1) / 3) * 12",
      "(12 / 3) * (7 - 1)",
      "((7 - 1) * 12) / 3"
    ]
  },
  "1 3 7 13": {
    "cards": "1 3 7 13",
    "has_solution": "Y",
    "num_solutions": 124,
    "solutions": [
      "(13 + 7) + (1 + 3)",
      "((3 + 1) + 13) + 7",
      "(7 + 3) + (13 + 1)",
      "3 + (13 + (7 + 1))",
      "((13 + 7) + 1) + 3",
      "13 + (3 + (7 + 1))",
      "(13 + (3 + 1)) + 7",
      "(1 + (3 + 7)) + 13",
      "((13 + 3) + 7) + 1",
      "13 + ((1 + 3) + 7)",
      "13 + ((1 + 7) + 3)",
      "(13 + (1 + 7)) + 3",
      "(3 + 7) + (1 + 13)",
      "(3 + (1 + 13)) + 7",
      "3 + ((7 + 1) + 13)",
      "((3 + 13) + 7) + 1",
      "(13 - 7) * (3 + 1)",
      "(7 + 1) + (13 + 3)",
      "7 + ((13 + 1) + 3)",
      "1 + ((7 + 13) + 3)",
      "1 + (7 + (13 + 3))",
      "(1 + 13) + (7 + 3)",
      "(3 + (13 + 1)) + 7",
      "((7 + 3) + 13) + 1",
      "1 + ((3 + 13) + 7)",
      "(3 + 1) + (13 + 7)",
      "(13 + 7) + (3 + 1)",
      "3 + (7 + (13 + 1))",
      "(13 + 1) + (7 + 3)",
      "((13 + 1) + 7) + 3",
      "3 + ((1 + 7) + 13)",
      "((13 + 1) + 3) + 7",
      "1 + (7 + (3 + 13))",
      "(1 + (7 + 13)) + 3",
      "(1 + 7) + (3 + 13)",
      "1 + (13 + (7 + 3))",
      "(7 + (1 + 3)) + 13",
      "(13 + (7 + 3)) + 1",
      "(7 + 3) + (1 + 13)",
      "(13 + (7 + 1)) + 3",
      "((1 + 13) + 3) + 7",
      "((1 + 3) + 13) + 7",
      "3 + (13 + (1 + 7))",
      "(13 + (3 + 7)) + 1",
      "(7 + (13 + 3)) + 1",
      "(1 + (13 + 7)) + 3",
      "(13 - 7) * (1 + 3)",
      "((3 + 1) + 7) + 13",
      "(3 + (7 + 13)) + 1",
      "((1 + 3) + 7) + 13",
      "(1 + 3) + (13 + 7)",
      "7 + (3 + (13 + 1))",
      "(3 + 13) + (7 + 1)",
      "((7 + 3) + 1) + 13",
      "(13 + (1 + 3)) + 7",
      "(13 + 1) + (3 + 7)",
      "(1 + 3) + (7 + 13)",
      "7 + ((1 + 13) + 3)",
      "((1 + 7) + 13) + 3",
      "(7 + (1 + 13)) + 3",
      "7 + (3 + (1 + 13))",
      "3 + (1 + (13 + 7))",
      "(1 + (7 + 3)) + 13",
      "1 + (3 + (7 + 13))",
      "((3 + 7) + 13) + 1",
      "(3 + 7) + (13 + 1)",
      "(7 + (13 + 1)) + 3",
      "((7 + 13) + 1) + 3",
      "13 + (1 + (7 + 3))",
      "3 + (7 + (1 + 13))",
      "13 + ((7 + 3) + 1)",
      "(13 + 3) + (1 + 7)",
      "3 + (1 + (7 + 13))",
      "((7 + 13) + 3) + 1",
      "(3 + 1) + (7 + 13)",
      "3 + ((1 + 13) + 7)",
      "(13 + 3) + (7 + 1)",
      "7 + (13 + (1 + 3))",
      "3 + ((13 + 1) + 7)",
      "7 + ((1 + 3) + 13)",
      "((7 + 1) + 13) + 3",
      "(7 + 13) + (3 + 1)",
      "13 + (7 + (3 + 1))",
      "13 + (1 + (3 + 7))",
      "(1 + (3 + 13)) + 7",
      "(3 + (1 + 7)) + 13",
      "1 + (3 + (13 + 7))",
      "((13 + 3) + 1) + 7",
      "13 + (7 + (1 + 3))",
      "(7 + 1) + (3 + 13)",
      "1 + ((3 + 7) + 13)",
      "1 + (13 + (3 + 7))",
      "(7 + (3 + 13)) + 1",
      "((3 + 13) + 1) + 7",
      "3 + ((7 + 13) + 1)",
      "(3 + (7 + 1)) + 13",
      "((13 + 7) + 3) + 1",
      "7 + (1 + (3 + 13))",
      "(1 + (13 + 3)) + 7",
      "(3 + 1) * (13 - 7)",
      "1 + ((7 + 3) + 13)",
      "13 + (3 + (1 + 7))",
      "((3 + 7) + 1) + 13",
      "7 + ((13 + 3) + 1)",
      "13 + ((3 + 1) + 7)",
      "((7 + 1) + 3) + 13",
      "13 + ((7 + 1) + 3)",
      "(3 + 13) + (1 + 7)",
      "7 + ((3 + 1) + 13)",
      "(1 + 13) + (3 + 7)",
      "1 + ((13 + 7) + 3)",
      "((1 + 13) + 7) + 3",
      "(3 + (13 + 7)) + 1",
      "7 + (1 + (13 + 3))",
      "1 + ((13 + 3) + 7)",
      "((1 + 7) + 3) + 13",
      "(7 + 13) + (1 + 3)",
      "(1 + 3) * (13 - 7)",
      "7 + (13 + (3 + 1))",
      "(7 + (3 + 1)) + 13",
      "13 + ((3 + 7) + 1)",
      "3 + ((13 + 7) + 1)",
      "7 + ((3 + 13) + 1)",
      "(1 + 7) + (13 + 3)"
    ]
  },
  "1 3 8 8": {
    "cards": "1 3 8 8",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "8 + (8 * (3 - 1))",
      "8 - (8 * (1 - 3))",
      "8 * ((8 + 1) / 3)",
      "(1 + 8) * (8 / 3)",
      "(1 + 8) / (3 / 8)",
      "8 - ((1 - 3) * 8)",
      "((1 + 8) / 3) * 8",
      "(8 / 3) * (1 + 8)",
      "(8 * (8 + 1)) / 3",
      "8 * ((1 + 8) / 3)",
      "((1 + 8) * 8) / 3",
      "((8 + 1) * 8) / 3",
      "8 + ((3 - 1) * 8)",
      "(8 * (1 + 3)) - 8",
      "((3 + 1) * 8) - 8",
      "(8 * (1 + 8)) / 3",
      "(8 + 1) / (3 / 8)",
      "8 / (3 / (1 + 8))",
      "(8 * (3 - 1)) + 8",
      "(8 / 3) * (8 + 1)",
      "(8 + 1) * (8 / 3)",
      "8 / (3 / (8 + 1))",
      "(8 * (3 + 1)) - 8",
      "((8 + 1) / 3) * 8",
      "((1 + 3) * 8) - 8",
      "((3 - 1) * 8) + 8"
    ]
  },
  "1 3 8 9": {
    "cards": "1 3 8 9",
    "has_solution": "Y",
    "num_solutions": 151,
    "solutions": [
      "(9 / (3 / 1)) * 8",
      "((1 * 9) * 8) / 3",
      "(1 * 8) / (3 / 9)",
      "((9 / 3) / 1) * 8",
      "1 * (8 / (3 / 9))",
      "(9 * 8) / (3 / 1)",
      "8 * (9 / (1 * 3))",
      "((8 * 1) * 9) / 3",
      "8 * (9 / (3 / 1))",
      "9 / ((3 / 1) / 8)",
      "8 * ((9 / 3) / 1)",
      "(9 / (3 / 8)) * 1",
      "((9 * 8) / 3) * 1",
      "1 * ((8 / 3) * 9)",
      "9 * ((1 / 3) * 8)",
      "8 * ((9 / 3) * 1)",
      "(1 * 9) / (3 / 8)",
      "((1 * 8) * 9) / 3",
      "((8 * 9) / 3) / 1",
      "((8 / 1) / 3) * 9",
      "9 * (8 / (3 / 1))",
      "1 * (8 * (9 / 3))",
      "(8 * 1) * (9 / 3)",
      "9 * ((8 / 1) / 3)",
      "1 * (9 * (8 / 3))",
      "(8 / 3) * (1 * 9)",
      "((8 / 3) * 9) / 1",
      "(9 * (8 / 3)) * 1",
      "(8 / (3 * 1)) * 9",
      "((8 / 3) / 1) * 9",
      "1 * ((9 / 3) * 8)",
      "9 * ((8 * 1) / 3)",
      "9 / (1 * (3 / 8))",
      "9 * (8 / (3 * 1))",
      "8 / (3 * (1 / 9))",
      "((1 * 9) / 3) * 8",
      "(8 / (3 / 9)) * 1",
      "((8 / 3) * 1) * 9",
      "8 / (1 / (9 / 3))",
      "(1 / (3 / 9)) * 8",
      "(8 * (9 / 3)) * 1",
      "(9 * (1 * 8)) / 3",
      "(8 / 3) / (1 / 9)",
      "((8 * 9) / 3) * 1",
      "(8 / (3 / 9)) / 1",
      "(9 / 3) / (1 / 8)",
      "8 / ((1 * 3) / 9)",
      "9 / ((3 * 1) / 8)",
      "(8 / 1) * (9 / 3)",
      "9 / (1 / (8 / 3))",
      "1 * ((9 * 8) / 3)",
      "8 * (9 / (3 * 1))",
      "(9 * (8 * 1)) / 3",
      "1 * ((8 * 9) / 3)",
      "9 / ((1 / 8) * 3)",
      "(9 / (1 * 3)) * 8",
      "9 * (8 / (1 * 3))",
      "(8 / 1) / (3 / 9)",
      "(8 * (9 * 1)) / 3",
      "(1 / (3 / 8)) * 9",
      "8 * ((1 * 9) / 3)",
      "8 / ((3 / 9) * 1)",
      "((9 / 3) * 8) * 1",
      "9 / ((3 / 8) * 1)",
      "8 / (1 * (3 / 9))",
      "((8 * 9) * 1) / 3",
      "((9 * 8) / 3) / 1",
      "(9 / 1) * (8 / 3)",
      "(9 / 1) / (3 / 8)",
      "(1 * 9) * (8 / 3)",
      "(8 / 3) * (9 / 1)",
      "9 / (3 / (8 / 1))",
      "(8 * 9) * (1 / 3)",
      "(9 / 3) * (1 * 8)",
      "(9 * (8 / 1)) / 3",
      "1 / ((3 / 9) / 8)",
      "(1 * (9 * 8)) / 3",
      "9 / ((1 * 3) / 8)",
      "(1 / 3) * (8 * 9)",
      "(9 * 8) / (3 * 1)",
      "8 * (9 * (1 / 3))",
      "((9 * 1) / 3) * 8",
      "9 / (3 * (1 / 8))",
      "(8 / (1 * 3)) * 9",
      "(9 * 1) * (8 / 3)",
      "(8 / (1 / 9)) / 3",
      "8 * ((9 / 1) / 3)",
      "(8 * (1 / 3)) * 9",
      "(9 / 3) * (8 / 1)",
      "8 / (3 / (9 / 1))",
      "(8 / 3) * (9 * 1)",
      "8 / ((3 / 1) / 9)",
      "1 / ((3 / 8) / 9)",
      "8 / (3 / (9 * 1))",
      "8 / ((3 * 1) / 9)",
      "(8 * (1 * 9)) / 3",
      "1 / (3 / (8 * 9))",
      "((1 * 8) / 3) * 9",
      "9 * (1 / (3 / 8))",
      "(8 * 9) / (3 * 1)",
      "1 / (3 / (9 * 8))",
      "9 * ((1 * 8) / 3)",
      "(1 * (8 / 3)) * 9",
      "((8 / 1) * 9) / 3",
      "((9 * 8) / 1) / 3",
      "8 / ((3 / 9) / 1)",
      "(9 / 3) * (8 * 1)",
      "9 * ((8 / 3) / 1)",
      "(1 * (9 / 3)) * 8",
      "8 / (3 / (1 * 9))",
      "((8 * 9) / 1) / 3",
      "(9 / (1 / 8)) / 3",
      "((1 / 3) * 9) * 8",
      "(9 / (3 * 1)) * 8",
      "(9 * (8 / 3)) / 1",
      "8 * (1 * (9 / 3))",
      "8 * ((1 / 3) * 9)",
      "(8 * 9) / (1 * 3)",
      "8 * ((9 * 1) / 3)",
      "(1 / 3) * (9 * 8)",
      "8 / ((1 / 9) * 3)",
      "((1 / 3) * 8) * 9",
      "9 * (1 * (8 / 3))",
      "(8 * 1) / (3 / 9)",
      "(9 * 8) * (1 / 3)",
      "((9 * 1) * 8) / 3",
      "3 / ((9 / 8) - 1)",
      "((8 / 3) * 9) * 1",
      "9 * ((8 / 3) * 1)",
      "(1 * (8 * 9)) / 3",
      "((9 / 3) * 1) * 8",
      "(8 * 9) / (3 / 1)",
      "(1 * 8) * (9 / 3)",
      "((9 / 1) / 3) * 8",
      "((9 * 8) * 1) / 3",
      "(8 / (3 / 1)) * 9",
      "9 / (3 / (8 * 1))",
      "(9 / (3 / 8)) / 1",
      "((8 * 1) / 3) * 9",
      "1 * (9 / (3 / 8))",
      "(9 * 1) / (3 / 8)",
      "9 / (3 / (1 * 8))",
      "(8 * (9 / 3)) / 1",
      "9 * (8 * (1 / 3))",
      "((9 / 3) * 8) / 1",
      "9 / ((3 / 8) / 1)",
      "(8 * (9 / 1)) / 3",
      "8 * (1 / (3 / 9))",
      "(9 * (1 / 3)) * 8",
      "(9 * 8) / (1 * 3)",
      "((9 / 1) * 8) / 3"
    ]
  },
  "1 3 8 10": {
    "cards": "1 3 8 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((10 - 1) / 3) * 8",
      "8 / (3 / (10 - 1))",
      "8 * ((10 - 1) / 3)",
      "(10 - 1) * (8 / 3)",
      "(10 - 1) / (3 / 8)",
      "(8 / 3) * (10 - 1)",
      "((10 - 1) * 8) / 3",
      "(8 * (10 - 1)) / 3"
    ]
  },
  "1 3 8 11": {
    "cards": "1 3 8 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 * 3) - 8) - 1",
      "(3 * 11) - (1 + 8)",
      "((3 * 11) - 1) - 8",
      "((11 * 3) - 1) - 8",
      "((3 * 11) - 8) - 1",
      "(3 * 11) - (8 + 1)",
      "(11 * 3) - (8 + 1)",
      "(11 * 3) - (1 + 8)"
    ]
  },
  "1 3 8 12": {
    "cards": "1 3 8 12",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "(3 + 1) + (12 + 8)",
      "(12 + (8 + 1)) + 3",
      "8 * (12 / (3 + 1))",
      "((12 + 1) + 8) + 3",
      "(3 + (1 + 12)) + 8",
      "3 + (1 + (12 + 8))",
      "((1 + 12) + 3) + 8",
      "((8 + 1) + 3) + 12",
      "((12 + 3) + 1) + 8",
      "(12 / (3 + 1)) * 8",
      "(8 / (1 + 3)) * 12",
      "12 + ((1 + 3) + 8)",
      "1 + (8 + (3 + 12))",
      "((12 + 8) + 3) + 1",
      "(8 + 12) + (3 + 1)",
      "(12 + (1 + 8)) + 3",
      "(12 + (3 + 1)) + 8",
      "(12 + 3) + (1 + 8)",
      "3 + (12 + (1 + 8))",
      "((1 + 3) + 12) + 8",
      "(3 + 12) + (8 + 1)",
      "12 + ((8 + 3) + 1)",
      "(12 * 8) / (1 + 3)",
      "3 + ((12 + 8) + 1)",
      "(8 + 1) + (12 + 3)",
      "(12 + (3 + 8)) + 1",
      "(8 + (3 + 12)) + 1",
      "((8 + 3) + 1) + 12",
      "12 / ((3 + 1) / 8)",
      "((12 + 8) + 1) + 3",
      "1 + (12 + (8 + 3))",
      "(12 + (8 + 3)) + 1",
      "(8 + (3 + 1)) + 12",
      "1 + ((12 + 8) + 3)",
      "((3 + 1) + 12) + 8",
      "(3 + (1 + 8)) + 12",
      "1 + (8 + (12 + 3))",
      "(1 + 3) + (8 + 12)",
      "(12 + (1 + 3)) + 8",
      "(1 + (3 + 12)) + 8",
      "(1 + 3) + (12 + 8)",
      "3 + ((1 + 8) + 12)",
      "1 + ((8 + 12) + 3)",
      "12 + ((3 + 1) + 8)",
      "((3 + 12) + 1) + 8",
      "(12 + 8) + (3 + 1)",
      "(8 * 12) / (3 + 1)",
      "(8 + (1 + 3)) + 12",
      "8 + ((1 + 3) + 12)",
      "8 + (3 + (12 + 1))",
      "12 * (8 / (1 + 3))",
      "(1 + (12 + 8)) + 3",
      "(3 + 12) + (1 + 8)",
      "((1 + 12) + 8) + 3",
      "12 + (3 + (1 + 8))",
      "((12 + 1) + 3) + 8",
      "12 + (8 + (1 + 3))",
      "((8 + 1) + 12) + 3",
      "8 + (1 + (12 + 3))",
      "1 + ((3 + 8) + 12)",
      "8 + ((3 + 12) + 1)",
      "12 + (1 + (8 + 3))",
      "((3 + 1) + 8) + 12",
      "(3 + (8 + 1)) + 12",
      "(3 + (8 + 12)) + 1",
      "3 + (8 + (12 + 1))",
      "12 + (8 + (3 + 1))",
      "((12 / 3) - 1) * 8",
      "12 * (8 / (3 + 1))",
      "8 * (12 / (1 + 3))",
      "(8 + 3) + (1 + 12)",
      "(8 + 1) + (3 + 12)",
      "(12 + 1) + (3 + 8)",
      "(1 + (3 + 8)) + 12",
      "(3 + 1) + (8 + 12)",
      "(8 + (12 + 1)) + 3",
      "((1 + 8) + 12) + 3",
      "8 + ((3 + 1) + 12)",
      "((3 + 8) + 12) + 1",
      "8 / ((3 + 1) / 12)",
      "3 + (1 + (8 + 12))",
      "1 + ((8 + 3) + 12)",
      "(12 + 8) + (1 + 3)",
      "(1 + (8 + 12)) + 3",
      "(8 / (3 + 1)) * 12",
      "((1 + 8) + 3) + 12",
      "3 + ((12 + 1) + 8)",
      "((3 + 12) + 8) + 1",
      "(12 * 8) / (3 + 1)",
      "8 + ((12 + 3) + 1)",
      "1 + ((3 + 12) + 8)",
      "1 + (3 + (12 + 8))",
      "(1 + 12) + (3 + 8)",
      "(12 / (1 + 3)) * 8",
      "3 + ((1 + 12) + 8)",
      "((1 + 3) + 8) + 12",
      "((3 + 8) + 1) + 12",
      "12 + (3 + (8 + 1))",
      "3 + ((8 + 12) + 1)",
      "(1 + 12) + (8 + 3)",
      "12 / ((1 + 3) / 8)",
      "(1 + 8) + (12 + 3)",
      "(3 + (12 + 8)) + 1",
      "1 + ((12 + 3) + 8)",
      "12 + ((8 + 1) + 3)",
      "3 + ((8 + 1) + 12)",
      "1 + (3 + (8 + 12))",
      "((8 + 12) + 1) + 3",
      "8 + (3 + (1 + 12))",
      "3 + (12 + (8 + 1))",
      "12 + ((3 + 8) + 1)",
      "1 + (12 + (3 + 8))",
      "8 + (1 + (3 + 12))",
      "(1 + (12 + 3)) + 8",
      "(8 * 12) / (1 + 3)",
      "(12 + 3) + (8 + 1)",
      "((8 + 12) + 3) + 1",
      "(3 + (12 + 1)) + 8",
      "8 + ((12 + 1) + 3)",
      "((8 + 3) + 12) + 1",
      "(8 + 3) + (12 + 1)",
      "(8 + 12) + (1 + 3)",
      "(1 + 8) + (3 + 12)",
      "(1 + (8 + 3)) + 12",
      "12 + ((1 + 8) + 3)",
      "(8 + (12 + 3)) + 1",
      "(3 + 8) + (1 + 12)",
      "8 * ((12 / 3) - 1)",
      "8 + ((1 + 12) + 3)",
      "8 / ((1 + 3) / 12)",
      "12 + (1 + (3 + 8))",
      "((12 + 3) + 8) + 1",
      "(3 + 8) + (12 + 1)",
      "8 + (12 + (1 + 3))",
      "(8 + (1 + 12)) + 3",
      "8 + (12 + (3 + 1))",
      "(12 + 1) + (8 + 3)",
      "3 + (8 + (1 + 12))"
    ]
  },
  "1 3 8 13": {
    "cards": "1 3 8 13",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "(1 * (13 + 8)) + 3",
      "(1 * (3 + 8)) + 13",
      "(13 + 3) + (1 * 8)",
      "((1 * 8) + 13) + 3",
      "(8 + (13 / 1)) + 3",
      "((8 + 13) / 1) + 3",
      "3 + ((8 * 1) + 13)",
      "(3 + (13 + 8)) / 1",
      "(8 * 1) + (3 + 13)",
      "((3 + 8) + 13) / 1",
      "13 + (3 + (1 * 8))",
      "(3 + (13 * 1)) + 8",
      "((8 + 3) / 1) + 13",
      "((3 + 8) + 13) * 1",
      "(8 / 1) + (3 + 13)",
      "8 + ((1 * 13) + 3)",
      "((3 / 1) + 8) + 13",
      "3 + ((8 / 1) + 13)",
      "(3 + 13) + (1 * 8)",
      "1 * ((13 + 3) + 8)",
      "(3 * 1) + (13 + 8)",
      "((13 + 8) + 3) * 1",
      "(13 + 3) + (8 / 1)",
      "13 + (1 * (3 + 8))",
      "((3 / 1) + 13) + 8",
      "(1 * 3) + (8 + 13)",
      "((8 + 3) + 13) / 1",
      "(1 * (13 + 3)) + 8",
      "((1 * 13) + 3) + 8",
      "(3 + (13 / 1)) + 8",
      "3 + (13 + (1 * 8))",
      "3 + ((8 + 13) * 1)",
      "(8 + 13) + (3 / 1)",
      "3 + (13 + (8 / 1))",
      "(8 + (1 * 3)) + 13",
      "(8 + 3) + (13 * 1)",
      "((3 + 13) / 1) + 8",
      "3 + (8 + (13 * 1))",
      "8 + (3 + (13 / 1))",
      "((8 + 3) + 13) * 1",
      "1 * (13 + (8 + 3))",
      "3 + (1 * (13 + 8))",
      "(8 + 13) + (3 * 1)",
      "3 + (8 + (1 * 13))",
      "(8 + (13 + 3)) * 1",
      "3 + (13 + (8 * 1))",
      "(8 + (13 + 3)) / 1",
      "(13 + (3 + 8)) / 1",
      "((13 + 8) + 3) / 1",
      "(3 + (8 * 1)) + 13",
      "1 * ((13 + 8) + 3)",
      "(13 + (8 * 1)) + 3",
      "13 + (1 * (8 + 3))",
      "(13 + (3 / 1)) + 8",
      "((3 + 8) / 1) + 13",
      "8 + ((13 * 1) + 3)",
      "(8 * 1) + (13 + 3)",
      "(8 + (3 + 13)) * 1",
      "13 + ((3 + 8) * 1)",
      "3 + ((13 + 8) / 1)",
      "(8 + (13 * 1)) + 3",
      "13 + ((8 + 3) / 1)",
      "(13 + (8 + 3)) * 1",
      "3 + ((13 + 8) * 1)",
      "(1 * 8) + (13 + 3)",
      "(8 + 3) + (1 * 13)",
      "8 + ((3 * 1) + 13)",
      "1 * ((3 + 13) + 8)",
      "8 + ((13 + 3) / 1)",
      "(3 + (1 * 8)) + 13",
      "(13 + (8 + 3)) / 1",
      "(3 + 8) + (1 * 13)",
      "8 + (13 + (1 * 3))",
      "8 + ((3 / 1) + 13)",
      "(13 / 1) + (3 + 8)",
      "1 * ((8 + 3) + 13)",
      "((8 * 1) + 13) + 3",
      "13 + ((8 + 3) * 1)",
      "8 + ((13 + 3) * 1)",
      "(3 + (8 / 1)) + 13",
      "3 + (1 * (8 + 13))",
      "(3 + 8) + (13 / 1)",
      "(3 * 1) + (8 + 13)",
      "(13 + (1 * 8)) + 3",
      "(13 + (1 * 3)) + 8",
      "(13 + 8) + (3 * 1)",
      "(8 + (3 * 1)) + 13",
      "((13 * 1) + 3) + 8",
      "1 * (3 + (8 + 13))",
      "((8 / 1) + 13) + 3",
      "(1 * (8 + 3)) + 13",
      "((1 * 8) + 3) + 13",
      "3 + ((13 / 1) + 8)",
      "(8 + 3) + (13 / 1)",
      "(8 + (1 * 13)) + 3",
      "8 + (13 + (3 / 1))",
      "((3 + 13) + 8) * 1",
      "8 + (1 * (13 + 3))",
      "(13 / 1) + (8 + 3)",
      "(1 * 3) + (13 + 8)",
      "1 * (8 + (13 + 3))",
      "(13 + 8) + (3 / 1)",
      "((13 + 8) * 1) + 3",
      "((8 * 1) + 3) + 13",
      "((8 / 1) + 3) + 13",
      "(1 * (3 + 13)) + 8",
      "1 * (13 + (3 + 8))",
      "((13 + 3) / 1) + 8",
      "(13 * 1) + (3 + 8)",
      "((13 + 3) + 8) * 1",
      "13 + (8 + (1 * 3))",
      "13 + (3 + (8 * 1))",
      "((13 + 3) + 8) / 1",
      "((3 + 13) * 1) + 8",
      "(3 + (8 + 13)) * 1",
      "((8 + 13) + 3) / 1",
      "8 + ((13 / 1) + 3)",
      "((8 + 3) * 1) + 13",
      "((1 * 3) + 13) + 8",
      "((13 / 1) + 8) + 3",
      "(13 + (3 * 1)) + 8",
      "((3 + 8) * 1) + 13",
      "(1 * (8 + 13)) + 3",
      "3 + (8 + (13 / 1))",
      "3 + ((8 + 13) / 1)",
      "(8 + 13) + (1 * 3)",
      "((8 + 13) * 1) + 3",
      "(13 + 3) + (8 * 1)",
      "(3 + 13) + (8 / 1)",
      "13 + ((8 * 1) + 3)",
      "(3 + (8 + 13)) / 1",
      "(1 * 8) + (3 + 13)",
      "1 * ((8 + 13) + 3)",
      "8 + (3 + (13 * 1))",
      "3 + ((13 * 1) + 8)",
      "((13 + 3) * 1) + 8",
      "13 + (8 + (3 / 1))",
      "((8 + 13) + 3) * 1",
      "13 + (8 + (3 * 1))",
      "8 + (1 * (3 + 13))",
      "8 + (13 + (3 * 1))",
      "(13 + (3 + 8)) * 1",
      "(3 + (1 * 13)) + 8",
      "(1 * 13) + (3 + 8)",
      "1 * ((3 + 8) + 13)",
      "8 + ((1 * 3) + 13)",
      "13 + ((3 * 1) + 8)",
      "13 + ((3 + 8) / 1)",
      "(13 + 8) + (1 * 3)",
      "(3 + 13) + (8 * 1)",
      "8 + ((3 + 13) * 1)",
      "((3 * 1) + 13) + 8",
      "13 + ((3 / 1) + 8)",
      "8 + ((3 + 13) / 1)",
      "((3 * 1) + 8) + 13",
      "((13 * 1) + 8) + 3",
      "((1 * 13) + 8) + 3",
      "(8 + (3 + 13)) / 1",
      "((3 + 13) + 8) / 1",
      "(3 / 1) + (13 + 8)",
      "((1 * 3) + 8) + 13",
      "((13 / 1) + 3) + 8",
      "13 + ((1 * 3) + 8)",
      "(3 + 8) + (13 * 1)",
      "(8 / 1) + (13 + 3)",
      "((13 + 8) / 1) + 3",
      "13 + ((1 * 8) + 3)",
      "1 * (8 + (3 + 13))",
      "13 + (3 + (8 / 1))",
      "(13 * 1) + (8 + 3)",
      "(1 * 13) + (8 + 3)",
      "(3 / 1) + (8 + 13)",
      "3 + ((1 * 8) + 13)",
      "8 + (3 + (1 * 13))",
      "(8 + (3 / 1)) + 13",
      "1 * (3 + (13 + 8))",
      "(3 + (13 + 8)) * 1",
      "3 + ((1 * 13) + 8)",
      "13 + ((8 / 1) + 3)",
      "(13 + (8 / 1)) + 3"
    ]
  },
  "1 3 9 9": {
    "cards": "1 3 9 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "9 / (3 / (9 - 1))",
      "((9 - 1) / 3) * 9",
      "((9 - 1) * 9) / 3",
      "9 * ((9 - 1) / 3)",
      "(9 / 3) * (9 - 1)",
      "(9 - 1) / (3 / 9)",
      "(9 - 1) * (9 / 3)",
      "(9 * (9 - 1)) / 3"
    ]
  },
  "1 3 9 10": {
    "cards": "1 3 9 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((10 + 1) * 3) - 9",
      "((1 + 10) * 3) - 9",
      "(3 * (1 + 10)) - 9",
      "(3 * (10 + 1)) - 9"
    ]
  },
  "1 3 9 11": {
    "cards": "1 3 9 11",
    "has_solution": "Y",
    "num_solutions": 154,
    "solutions": [
      "((3 + 1) + 11) + 9",
      "((1 + 9) + 3) + 11",
      "(9 + (11 + 3)) + 1",
      "11 + (3 + (1 + 9))",
      "9 + ((11 + 3) + 1)",
      "(1 + 3) + (9 + 11)",
      "(3 * (11 / 1)) - 9",
      "9 + (11 + (3 + 1))",
      "((11 / 1) * 3) - 9",
      "((11 / 3) - 1) * 9",
      "(1 + (11 + 9)) + 3",
      "11 + (9 + (3 + 1))",
      "(11 + (1 + 3)) + 9",
      "(1 + (11 + 3)) + 9",
      "(9 + (1 + 3)) + 11",
      "((3 * 11) / 1) - 9",
      "(11 * 3) - (9 / 1)",
      "1 + ((11 + 9) + 3)",
      "(11 / (1 / 3)) - 9",
      "11 + ((9 + 3) + 1)",
      "3 + ((11 + 9) + 1)",
      "(3 + 1) + (9 + 11)",
      "3 + (9 + (1 + 11))",
      "((3 * 1) * 11) - 9",
      "9 + ((3 + 11) + 1)",
      "(1 + (9 + 11)) + 3",
      "(11 * (3 * 1)) - 9",
      "((3 / 1) * 11) - 9",
      "3 + ((11 + 1) + 9)",
      "(3 + 1) + (11 + 9)",
      "1 + (3 + (11 + 9))",
      "((11 * 3) / 1) - 9",
      "3 + (1 + (9 + 11))",
      "11 + (9 + (1 + 3))",
      "((9 + 11) + 3) + 1",
      "((1 + 11) + 3) + 9",
      "3 + ((1 + 11) + 9)",
      "1 + (9 + (11 + 3))",
      "(3 * (11 * 1)) - 9",
      "11 + ((9 + 1) + 3)",
      "1 + ((11 + 3) + 9)",
      "((1 * 11) * 3) - 9",
      "(1 + 3) + (11 + 9)",
      "((1 + 9) + 11) + 3",
      "1 + ((9 + 3) + 11)",
      "((11 * 3) - 9) * 1",
      "(11 + 9) + (1 + 3)",
      "11 + ((3 + 1) + 9)",
      "3 + (11 + (9 + 1))",
      "3 + ((9 + 11) + 1)",
      "(1 + 9) + (3 + 11)",
      "(3 + 9) + (1 + 11)",
      "9 + (1 + (11 + 3))",
      "(9 + (3 + 1)) + 11",
      "9 * ((11 / 3) - 1)",
      "((3 + 9) + 1) + 11",
      "((11 * 3) - 9) / 1",
      "(11 + (9 + 3)) + 1",
      "(3 + (9 + 11)) + 1",
      "3 + (9 + (11 + 1))",
      "9 + (3 + (11 + 1))",
      "9 + (1 + (3 + 11))",
      "((11 + 9) + 1) + 3",
      "(9 + 11) + (1 + 3)",
      "((1 + 11) + 9) + 3",
      "(11 + (1 + 9)) + 3",
      "((3 * 11) * 1) - 9",
      "11 + ((1 + 3) + 9)",
      "9 + ((11 + 1) + 3)",
      "(3 + 11) + (9 + 1)",
      "(3 + (11 + 9)) + 1",
      "((1 * 3) * 11) - 9",
      "1 * ((11 * 3) - 9)",
      "(11 * (3 / 1)) - 9",
      "(11 + 1) + (9 + 3)",
      "(11 + 1) + (3 + 9)",
      "(3 + 11) + (1 + 9)",
      "((11 + 3) + 1) + 9",
      "(1 + (3 + 9)) + 11",
      "((11 + 1) + 3) + 9",
      "11 + (3 + (9 + 1))",
      "9 + ((3 + 1) + 11)",
      "1 + (11 + (9 + 3))",
      "1 + ((9 + 11) + 3)",
      "(11 + 3) + (9 + 1)",
      "(1 + (3 + 11)) + 9",
      "(11 * 3) - (1 * 9)",
      "(9 + 11) + (3 + 1)",
      "(11 * (1 * 3)) - 9",
      "(1 + 11) + (3 + 9)",
      "((3 + 11) + 1) + 9",
      "((1 + 3) + 9) + 11",
      "((3 + 9) + 11) + 1",
      "(3 + (11 + 1)) + 9",
      "(3 + 9) + (11 + 1)",
      "3 + ((1 + 9) + 11)",
      "1 + (9 + (3 + 11))",
      "11 + ((3 + 9) + 1)",
      "(3 * 11) - (1 * 9)",
      "(1 + 11) + (9 + 3)",
      "((11 + 1) + 9) + 3",
      "((11 * 3) * 1) - 9",
      "(9 + 1) + (3 + 11)",
      "(11 + (3 + 1)) + 9",
      "11 + ((1 + 9) + 3)",
      "(1 * (11 * 3)) - 9",
      "(9 + 1) + (11 + 3)",
      "9 + ((1 + 3) + 11)",
      "((9 + 11) + 1) + 3",
      "(3 + (9 + 1)) + 11",
      "3 + (1 + (11 + 9))",
      "((11 * 1) * 3) - 9",
      "9 + (3 + (1 + 11))",
      "(3 / (1 / 11)) - 9",
      "(3 + (1 + 11)) + 9",
      "(3 + (1 + 9)) + 11",
      "((9 + 3) + 1) + 11",
      "((3 * 11) - 9) * 1",
      "((11 + 3) + 9) + 1",
      "1 * ((3 * 11) - 9)",
      "(9 + 3) + (1 + 11)",
      "(11 + (9 + 1)) + 3",
      "(11 + 9) + (3 + 1)",
      "((11 + 9) + 3) + 1",
      "((9 + 1) + 3) + 11",
      "((1 + 3) + 11) + 9",
      "((9 + 1) + 11) + 3",
      "((3 * 11) - 9) / 1",
      "9 + ((1 + 11) + 3)",
      "11 + (1 + (3 + 9))",
      "1 + (3 + (9 + 11))",
      "(9 + (11 + 1)) + 3",
      "1 + (11 + (3 + 9))",
      "(9 + 3) + (11 + 1)",
      "(11 + (3 + 9)) + 1",
      "(3 * 11) - (9 * 1)",
      "(9 + (3 + 11)) + 1",
      "(3 * 11) - (9 / 1)",
      "11 + (1 + (9 + 3))",
      "(11 + 3) + (1 + 9)",
      "(3 * (1 * 11)) - 9",
      "1 + ((3 + 9) + 11)",
      "((3 + 1) + 9) + 11",
      "(1 * (3 * 11)) - 9",
      "(1 + 9) + (11 + 3)",
      "(9 + (1 + 11)) + 3",
      "(11 * 3) - (9 * 1)",
      "3 + ((9 + 1) + 11)",
      "(1 + (9 + 3)) + 11",
      "9 + (11 + (1 + 3))",
      "1 + ((3 + 11) + 9)",
      "((9 + 3) + 11) + 1",
      "((3 + 11) + 9) + 1",
      "3 + (11 + (1 + 9))"
    ]
  },
  "1 3 9 12": {
    "cards": "1 3 9 12",
    "has_solution": "Y",
    "num_solutions": 188,
    "solutions": [
      "1 * ((3 + 12) + 9)",
      "(12 + 9) + (3 * 1)",
      "(3 * 1) + (9 + 12)",
      "(9 / 1) + (12 + 3)",
      "(3 + 9) + (12 * 1)",
      "((12 + 9) * 1) + 3",
      "(1 * 12) + (9 + 3)",
      "(12 + 3) + (9 * 1)",
      "3 + (1 * (12 + 9))",
      "1 * (9 + (3 + 12))",
      "3 + ((12 + 9) * 1)",
      "12 + ((9 + 3) * 1)",
      "(9 * (3 + 1)) - 12",
      "((12 + 9) + 3) * 1",
      "12 + ((3 * 1) + 9)",
      "(12 + 9) + (3 / 1)",
      "(9 * 1) + (12 + 3)",
      "(1 * 3) + (12 + 9)",
      "((1 * 3) + 9) + 12",
      "(3 + (12 * 1)) + 9",
      "3 + ((12 + 9) / 1)",
      "9 + ((1 * 12) + 3)",
      "3 + (12 + (1 * 9))",
      "(3 * (12 - 1)) - 9",
      "3 + ((12 / 1) + 9)",
      "1 * (3 + (9 + 12))",
      "12 + ((3 + 9) * 1)",
      "((3 + 12) + 9) * 1",
      "((3 + 1) * 9) - 12",
      "(12 + 3) + (9 / 1)",
      "(9 + 3) + (1 * 12)",
      "3 + ((9 + 12) * 1)",
      "(12 * 1) + (9 + 3)",
      "((9 / 3) - 1) * 12",
      "(1 * (9 + 3)) + 12",
      "(12 + (3 + 9)) * 1",
      "((9 + 3) / 1) + 12",
      "((3 * 1) + 9) + 12",
      "(3 + (12 + 9)) / 1",
      "12 + (3 + (1 * 9))",
      "3 + (9 + (12 * 1))",
      "((12 * 1) + 3) + 9",
      "12 + (1 * (3 + 9))",
      "3 + (12 + (9 * 1))",
      "(3 + (9 + 12)) * 1",
      "12 * ((9 / 3) - 1)",
      "((12 + 3) * 1) + 9",
      "(12 + (3 * 1)) + 9",
      "12 + ((1 * 9) + 3)",
      "(3 + 9) + (1 * 12)",
      "9 + (12 + (1 * 3))",
      "(3 / 1) + (9 + 12)",
      "(3 + 9) + (12 / 1)",
      "12 + (9 + (3 / 1))",
      "(9 + (1 * 12)) + 3",
      "((1 * 12) + 9) + 3",
      "((9 + 12) * 1) + 3",
      "((12 + 3) + 9) / 1",
      "(9 / 1) + (3 + 12)",
      "((9 + 12) / 1) + 3",
      "(1 * (12 + 9)) + 3",
      "12 + (3 + (9 / 1))",
      "(9 + 12) + (1 * 3)",
      "((9 / 1) + 12) + 3",
      "((3 + 12) + 9) / 1",
      "((3 + 12) / 1) + 9",
      "(1 * (9 + 12)) + 3",
      "((3 + 9) + 12) / 1",
      "((3 + 9) / 1) + 12",
      "(12 + (3 / 1)) + 9",
      "(1 * (3 + 12)) + 9",
      "((1 + 3) * 9) - 12",
      "(3 + (9 + 12)) / 1",
      "3 + ((9 / 1) + 12)",
      "((1 * 9) + 3) + 12",
      "(3 + (9 * 1)) + 12",
      "1 * ((3 + 9) + 12)",
      "((9 + 3) + 12) / 1",
      "(1 * 12) + (3 + 9)",
      "(3 + 12) + (9 / 1)",
      "((3 * 1) + 12) + 9",
      "(1 * (12 + 3)) + 9",
      "(12 + (9 + 3)) / 1",
      "(1 * 9) + (12 + 3)",
      "9 + ((3 / 1) + 12)",
      "3 + ((9 + 12) / 1)",
      "12 + (1 * (9 + 3))",
      "(9 + (12 + 3)) / 1",
      "(1 * 3) + (9 + 12)",
      "(12 * 1) + (3 + 9)",
      "(3 + 12) + (1 * 9)",
      "((3 + 12) * 1) + 9",
      "9 + ((12 + 3) * 1)",
      "1 * ((12 + 9) + 3)",
      "(9 + 3) + (12 / 1)",
      "9 + (3 + (12 / 1))",
      "(12 + (3 + 9)) / 1",
      "((12 + 3) + 9) * 1",
      "9 + ((12 / 1) + 3)",
      "1 * ((9 + 3) + 12)",
      "1 * ((12 + 3) + 9)",
      "9 + ((3 * 1) + 12)",
      "((3 + 9) * 1) + 12",
      "((3 / 1) + 9) + 12",
      "12 + ((9 * 1) + 3)",
      "((1 * 3) + 12) + 9",
      "1 * (12 + (9 + 3))",
      "1 * ((9 + 12) + 3)",
      "(12 + (1 * 3)) + 9",
      "9 + (3 + (1 * 12))",
      "((9 + 3) * 1) + 12",
      "(1 * (3 + 9)) + 12",
      "(9 + 12) + (3 / 1)",
      "12 + (9 + (3 * 1))",
      "(3 + 12) + (9 * 1)",
      "((12 + 9) / 1) + 3",
      "(9 + (12 / 1)) + 3",
      "(12 + (9 / 1)) + 3",
      "(3 + (1 * 12)) + 9",
      "3 + ((12 * 1) + 9)",
      "9 + (12 + (3 * 1))",
      "(3 + (9 / 1)) + 12",
      "(3 + (12 / 1)) + 9",
      "(12 + 9) + (1 * 3)",
      "(3 * 1) + (12 + 9)",
      "(9 + (1 * 3)) + 12",
      "((12 * 1) + 9) + 3",
      "((1 * 12) + 3) + 9",
      "((9 + 12) + 3) * 1",
      "(9 + (3 * 1)) + 12",
      "(3 + (12 + 9)) * 1",
      "((1 * 9) + 12) + 3",
      "1 * (3 + (12 + 9))",
      "((9 + 12) + 3) / 1",
      "((12 - 1) * 3) - 9",
      "9 + ((12 * 1) + 3)",
      "(12 + (1 * 9)) + 3",
      "((12 / 1) + 3) + 9",
      "9 + (1 * (12 + 3))",
      "(3 / 1) + (12 + 9)",
      "(9 + (3 / 1)) + 12",
      "(9 + (12 * 1)) + 3",
      "((9 * 1) + 12) + 3",
      "(12 + 3) + (1 * 9)",
      "((9 + 3) + 12) * 1",
      "((12 / 1) + 9) + 3",
      "3 + ((9 * 1) + 12)",
      "(9 + (3 + 12)) * 1",
      "9 + ((3 + 12) / 1)",
      "3 + (9 + (12 / 1))",
      "12 + (3 + (9 * 1))",
      "(9 + 12) + (3 * 1)",
      "(12 + (9 + 3)) * 1",
      "((12 + 3) / 1) + 9",
      "3 + ((1 * 12) + 9)",
      "3 + ((1 * 9) + 12)",
      "((3 / 1) + 12) + 9",
      "12 + ((9 + 3) / 1)",
      "9 + ((12 + 3) / 1)",
      "9 + (1 * (3 + 12))",
      "(9 * (1 + 3)) - 12",
      "3 + (1 * (9 + 12))",
      "12 + (9 + (1 * 3))",
      "(9 + (3 + 12)) / 1",
      "12 + ((1 * 3) + 9)",
      "9 + ((1 * 3) + 12)",
      "((9 / 1) + 3) + 12",
      "9 + (3 + (12 * 1))",
      "12 + ((3 + 9) / 1)",
      "(12 / 1) + (3 + 9)",
      "1 * (9 + (12 + 3))",
      "3 + (12 + (9 / 1))",
      "(12 + (9 * 1)) + 3",
      "12 + ((3 / 1) + 9)",
      "1 * (12 + (3 + 9))",
      "(12 / 1) + (9 + 3)",
      "(9 + 3) + (12 * 1)",
      "(9 + (12 + 3)) * 1",
      "9 + (12 + (3 / 1))",
      "12 + ((9 / 1) + 3)",
      "(3 + (1 * 9)) + 12",
      "9 + ((3 + 12) * 1)",
      "3 + (9 + (1 * 12))",
      "(1 * 9) + (3 + 12)",
      "((9 * 1) + 3) + 12",
      "(9 * 1) + (3 + 12)",
      "((12 + 9) + 3) / 1",
      "((3 + 9) + 12) * 1"
    ]
  },
  "1 3 9 13": {
    "cards": "1 3 9 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "(9 + (3 - 1)) + 13",
      "(9 + (13 - 1)) + 3",
      "(9 - (1 - 3)) + 13",
      "((3 + 13) + 9) - 1",
      "(13 + 9) - (1 - 3)",
      "9 - (1 - (3 + 13))",
      "(9 - 1) + (13 + 3)",
      "(9 + 13) + (3 - 1)",
      "9 + ((3 - 1) + 13)",
      "((3 + 9) + 13) - 1",
      "13 - (1 - (3 + 9))",
      "3 - (1 - (13 + 9))",
      "9 + (13 - (1 - 3))",
      "(9 + (3 + 13)) - 1",
      "(13 + 9) + (3 - 1)",
      "(3 + (9 - 1)) + 13",
      "3 + ((13 - 1) + 9)",
      "((13 + 9) - 1) + 3",
      "(3 - 1) + (9 + 13)",
      "9 - ((1 - 3) - 13)",
      "(3 - (1 - 9)) + 13",
      "(13 - 1) + (9 + 3)",
      "13 - ((1 - 9) - 3)",
      "(9 - 1) + (3 + 13)",
      "(13 + (9 + 3)) - 1",
      "3 + ((9 + 13) - 1)",
      "((9 - 1) + 3) + 13",
      "3 + (13 - (1 - 9))",
      "(13 - (1 - 3)) + 9",
      "((9 - 1) + 13) + 3",
      "((13 - 1) + 3) + 9",
      "((13 + 9) + 3) - 1",
      "((13 - 1) + 9) + 3",
      "9 + ((3 + 13) - 1)",
      "13 + (9 - (1 - 3))",
      "13 + ((9 - 1) + 3)",
      "((9 + 3) + 13) - 1",
      "((3 + 9) - 1) + 13",
      "((9 + 13) + 3) - 1",
      "(9 + (13 + 3)) - 1",
      "(3 + (9 + 13)) - 1",
      "9 + (3 + (13 - 1))",
      "((13 + 3) + 9) - 1",
      "3 + (13 + (9 - 1))",
      "9 + (13 + (3 - 1))",
      "13 + ((9 + 3) - 1)",
      "(3 + 13) - (1 - 9)",
      "(9 + 3) - (1 - 13)",
      "(13 + 3) + (9 - 1)",
      "(3 + 9) - (1 - 13)",
      "((13 + 3) - 1) + 9",
      "13 + (9 + (3 - 1))",
      "(9 + 3) + (13 - 1)",
      "3 + ((9 - 1) + 13)",
      "13 + (3 + (9 - 1))",
      "(3 + 9) + (13 - 1)",
      "(13 - (1 - 9)) + 3",
      "9 + ((13 + 3) - 1)",
      "(3 - 1) + (13 + 9)",
      "((3 - 1) + 9) + 13",
      "(9 - (1 - 13)) + 3",
      "3 - ((1 - 13) - 9)",
      "9 - ((1 - 13) - 3)",
      "((3 - 1) + 13) + 9",
      "13 - (1 - (9 + 3))",
      "9 + ((13 - 1) + 3)",
      "(3 + (13 + 9)) - 1",
      "9 + (3 - (1 - 13))",
      "(3 + (13 - 1)) + 9",
      "(13 + (9 - 1)) + 3",
      "13 + ((3 - 1) + 9)",
      "3 + (9 + (13 - 1))",
      "13 + ((3 + 9) - 1)",
      "(13 + 3) - (1 - 9)",
      "(13 + (3 - 1)) + 9",
      "(3 - (1 - 13)) + 9",
      "13 - ((1 - 3) - 9)",
      "3 - ((1 - 9) - 13)",
      "((3 + 13) - 1) + 9",
      "3 - (1 - (9 + 13))",
      "((9 + 3) - 1) + 13",
      "9 - (1 - (13 + 3))",
      "13 + (3 - (1 - 9))",
      "(3 + 13) + (9 - 1)",
      "(13 + (3 + 9)) - 1",
      "(9 + 13) - (1 - 3)",
      "(13 - 1) + (3 + 9)",
      "3 + (9 - (1 - 13))",
      "3 + ((13 + 9) - 1)",
      "((9 + 13) - 1) + 3"
    ]
  },
  "1 3 10 10": {
    "cards": "1 3 10 10",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "((3 + 1) + 10) + 10",
      "((10 + 1) + 10) + 3",
      "(10 + 3) + (1 + 10)",
      "1 + ((3 + 10) + 10)",
      "1 + (10 + (10 + 3))",
      "10 + (10 + (3 + 1))",
      "10 + (3 + (10 + 1))",
      "10 + ((1 + 3) + 10)",
      "(1 + (3 + 10)) + 10",
      "(1 + 10) + (10 + 3)",
      "((3 + 10) + 1) + 10",
      "(10 + (1 + 10)) + 3",
      "((10 + 3) + 10) + 1",
      "((1 + 10) + 3) + 10",
      "(3 + (10 + 1)) + 10",
      "3 + (10 + (1 + 10))",
      "(10 + (1 + 3)) + 10",
      "3 + (10 + (10 + 1))",
      "3 + (1 + (10 + 10))",
      "3 + ((1 + 10) + 10)",
      "3 + ((10 + 10) + 1)",
      "(10 + 1) + (3 + 10)",
      "((10 + 1) + 3) + 10",
      "10 + ((3 + 10) + 1)",
      "(10 + (10 + 3)) + 1",
      "(3 + 10) + (1 + 10)",
      "1 + (3 + (10 + 10))",
      "(3 + (1 + 10)) + 10",
      "10 + (1 + (10 + 3))",
      "1 + ((10 + 10) + 3)",
      "(3 + 1) + (10 + 10)",
      "((1 + 3) + 10) + 10",
      "((10 + 10) + 3) + 1",
      "10 + ((1 + 10) + 3)",
      "(10 + (10 + 1)) + 3",
      "10 + (10 + (1 + 3))",
      "(1 + (10 + 10)) + 3",
      "(10 + (3 + 10)) + 1",
      "10 + ((10 + 1) + 3)",
      "10 + ((10 + 3) + 1)",
      "(10 + 1) + (10 + 3)",
      "10 + (1 + (3 + 10))",
      "1 + ((10 + 3) + 10)",
      "(10 + 3) + (10 + 1)",
      "10 + ((3 + 1) + 10)",
      "((3 + 10) + 10) + 1",
      "3 + ((10 + 1) + 10)",
      "(3 + 10) + (10 + 1)",
      "(3 + (10 + 10)) + 1",
      "((10 + 3) + 1) + 10",
      "(10 + 10) + (3 + 1)",
      "(1 + 10) + (3 + 10)",
      "(10 + 10) + (1 + 3)",
      "1 + (10 + (3 + 10))",
      "(10 + (3 + 1)) + 10",
      "(1 + (10 + 3)) + 10",
      "((1 + 10) + 10) + 3",
      "(1 + 3) + (10 + 10)",
      "10 + (3 + (1 + 10))",
      "((10 + 10) + 1) + 3"
    ]
  },
  "1 3 10 11": {
    "cards": "1 3 10 11",
    "has_solution": "Y",
    "num_solutions": 196,
    "solutions": [
      "(1 * (11 + 3)) + 10",
      "11 + ((10 + 3) * 1)",
      "((3 + 10) + 11) * 1",
      "1 * (11 + (10 + 3))",
      "10 + (3 + (11 / 1))",
      "1 * ((10 + 11) + 3)",
      "(11 + 3) + (10 * 1)",
      "(10 + (3 + 11)) * 1",
      "3 + (1 * (10 + 11))",
      "1 * (11 + (3 + 10))",
      "10 + (11 + (1 * 3))",
      "(11 + (10 * 1)) + 3",
      "10 + ((11 / 1) + 3)",
      "(11 + (1 * 3)) + 10",
      "10 + ((11 + 3) * 1)",
      "(11 / 1) + (10 + 3)",
      "3 + (10 + (11 * 1))",
      "11 + ((3 / 1) + 10)",
      "(10 + (1 * 11)) + 3",
      "(3 * 1) + (10 + 11)",
      "((10 + 11) / 1) + 3",
      "(3 + 11) + (10 * 1)",
      "(10 / 1) + (11 + 3)",
      "(11 + 3) + (10 / 1)",
      "10 + ((1 * 11) + 3)",
      "11 + (10 + (3 / 1))",
      "(11 + (3 + 10)) * 1",
      "(3 + 10) + (11 * 1)",
      "(3 + (10 * 1)) + 11",
      "(1 - 10) + (3 * 11)",
      "((11 + 3) * 1) + 10",
      "(3 + (10 / 1)) + 11",
      "(10 + (11 * 1)) + 3",
      "(3 + 11) + (1 * 10)",
      "((11 + 10) + 3) * 1",
      "((11 + 3) / 1) + 10",
      "((11 + 10) / 1) + 3",
      "(1 * (3 + 10)) + 11",
      "((10 * 1) + 3) + 11",
      "(11 + 10) + (3 / 1)",
      "(10 + 3) + (1 * 11)",
      "(3 + 10) + (1 * 11)",
      "(1 * 3) + (10 + 11)",
      "3 + (11 + (1 * 10))",
      "(10 + (11 + 3)) * 1",
      "((1 * 3) + 10) + 11",
      "(10 + 11) + (1 * 3)",
      "11 + ((3 * 1) + 10)",
      "((10 + 11) * 1) + 3",
      "1 * (3 + (11 + 10))",
      "(3 + (11 + 10)) / 1",
      "3 + ((1 * 11) + 10)",
      "10 + (11 + (3 * 1))",
      "10 + ((1 * 3) + 11)",
      "11 + ((10 / 1) + 3)",
      "(3 / 1) + (11 + 10)",
      "10 + (3 + (1 * 11))",
      "11 + ((10 * 1) + 3)",
      "(3 + (11 + 10)) * 1",
      "1 * ((11 + 10) + 3)",
      "((11 + 3) + 10) * 1",
      "(10 * 1) + (11 + 3)",
      "((3 + 11) + 10) / 1",
      "((1 * 3) + 11) + 10",
      "(3 * 11) + (1 - 10)",
      "1 * ((10 + 3) + 11)",
      "((11 * 3) + 1) - 10",
      "(11 + 10) + (1 * 3)",
      "(1 * 11) + (3 + 10)",
      "11 + (3 + (10 * 1))",
      "(3 + 10) + (11 / 1)",
      "(10 + (1 * 3)) + 11",
      "((11 * 3) - 10) + 1",
      "((10 + 3) * 1) + 11",
      "((1 * 10) + 3) + 11",
      "((10 + 3) + 11) * 1",
      "(3 + (10 + 11)) / 1",
      "(3 / 1) + (10 + 11)",
      "(10 / 1) + (3 + 11)",
      "((10 * 1) + 11) + 3",
      "(11 * 1) + (3 + 10)",
      "(1 * (11 + 10)) + 3",
      "3 + ((10 * 1) + 11)",
      "(11 / 1) + (3 + 10)",
      "((3 / 1) + 10) + 11",
      "3 + ((10 + 11) * 1)",
      "((10 + 3) / 1) + 11",
      "((3 + 11) + 10) * 1",
      "10 + ((3 + 11) * 1)",
      "(1 + (3 * 11)) - 10",
      "(3 + (11 * 1)) + 10",
      "(3 + 11) + (10 / 1)",
      "10 + (11 + (3 / 1))",
      "((10 / 1) + 11) + 3",
      "10 + ((11 * 1) + 3)",
      "((3 * 1) + 10) + 11",
      "((11 + 10) * 1) + 3",
      "(10 + 11) + (3 / 1)",
      "((3 * 11) + 1) - 10",
      "3 + ((10 / 1) + 11)",
      "(11 * 1) + (10 + 3)",
      "1 - (10 - (11 * 3))",
      "11 + ((10 + 3) / 1)",
      "11 + (3 + (1 * 10))",
      "((1 * 11) + 3) + 10",
      "10 + (3 + (11 * 1))",
      "10 + ((3 / 1) + 11)",
      "1 + ((3 * 11) - 10)",
      "((11 + 10) + 3) / 1",
      "(3 + (11 / 1)) + 10",
      "(1 * (3 + 11)) + 10",
      "((11 / 1) + 3) + 10",
      "11 + ((1 * 3) + 10)",
      "(1 * 3) + (11 + 10)",
      "((3 + 11) / 1) + 10",
      "3 + ((11 + 10) / 1)",
      "1 * ((11 + 3) + 10)",
      "10 + (1 * (11 + 3))",
      "(1 + (11 * 3)) - 10",
      "((3 + 10) / 1) + 11",
      "((11 * 1) + 3) + 10",
      "(3 + (1 * 10)) + 11",
      "((3 * 1) + 11) + 10",
      "(1 * 10) + (3 + 11)",
      "(10 + (3 + 11)) / 1",
      "1 + ((11 * 3) - 10)",
      "(3 + (1 * 11)) + 10",
      "((1 * 10) + 11) + 3",
      "(1 * (10 + 11)) + 3",
      "3 + ((11 * 1) + 10)",
      "(3 * 1) + (11 + 10)",
      "((11 + 3) + 10) / 1",
      "((10 + 11) + 3) / 1",
      "(11 + (10 / 1)) + 3",
      "(3 + (10 + 11)) * 1",
      "3 + (1 * (11 + 10))",
      "(10 * 1) + (3 + 11)",
      "1 * (10 + (3 + 11))",
      "(11 + (10 + 3)) / 1",
      "10 + ((11 + 3) / 1)",
      "11 + (1 * (10 + 3))",
      "1 * (3 + (10 + 11))",
      "(11 + 3) + (1 * 10)",
      "(1 * (10 + 3)) + 11",
      "((10 + 11) + 3) * 1",
      "1 * ((3 + 11) + 10)",
      "((3 + 10) + 11) / 1",
      "11 + (3 + (10 / 1))",
      "10 + ((3 * 1) + 11)",
      "((3 * 11) - 10) + 1",
      "10 + (1 * (3 + 11))",
      "(11 + (10 + 3)) * 1",
      "(11 + (3 + 10)) / 1",
      "(11 + 10) + (3 * 1)",
      "(11 + (1 * 10)) + 3",
      "((10 / 1) + 3) + 11",
      "3 + ((10 + 11) / 1)",
      "(11 * 3) - (10 - 1)",
      "1 * (10 + (11 + 3))",
      "11 + (1 * (3 + 10))",
      "3 + (10 + (1 * 11))",
      "11 + (10 + (3 * 1))",
      "((1 * 11) + 10) + 3",
      "(10 + (3 * 1)) + 11",
      "(10 + 11) + (3 * 1)",
      "(1 - 10) + (11 * 3)",
      "(11 + (3 * 1)) + 10",
      "10 + ((3 + 11) / 1)",
      "3 + ((11 / 1) + 10)",
      "(10 + 3) + (11 * 1)",
      "3 + (11 + (10 * 1))",
      "((3 + 10) * 1) + 11",
      "(10 + (11 + 3)) / 1",
      "11 + ((3 + 10) / 1)",
      "((3 / 1) + 11) + 10",
      "(3 * 11) - (10 - 1)",
      "(10 + 3) + (11 / 1)",
      "((3 + 11) * 1) + 10",
      "(11 * 3) + (1 - 10)",
      "((10 + 3) + 11) / 1",
      "11 + ((1 * 10) + 3)",
      "((11 * 1) + 10) + 3",
      "11 + (10 + (1 * 3))",
      "11 + ((3 + 10) * 1)",
      "3 + (11 + (10 / 1))",
      "3 + ((11 + 10) * 1)",
      "(10 + (11 / 1)) + 3",
      "1 * ((3 + 10) + 11)",
      "((11 / 1) + 10) + 3",
      "(10 + (3 / 1)) + 11",
      "(1 * 11) + (10 + 3)",
      "(1 * 10) + (11 + 3)",
      "(11 + (3 / 1)) + 10",
      "3 + ((1 * 10) + 11)",
      "3 + (10 + (11 / 1))",
      "1 - (10 - (3 * 11))"
    ]
  },
  "1 3 10 12": {
    "cards": "1 3 10 12",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "(12 + (3 - 1)) + 10",
      "12 + (3 - (1 - 10))",
      "(12 - 1) + (3 + 10)",
      "(12 + 10) - (1 - 3)",
      "3 + ((12 + 10) - 1)",
      "(12 + (3 + 10)) - 1",
      "(12 + 10) + (3 - 1)",
      "(10 + 12) - (1 - 3)",
      "12 + (10 + (3 - 1))",
      "((12 + 3) - 1) + 10",
      "(10 + 3) - (1 - 12)",
      "((10 + 3) - 1) + 12",
      "((12 + 10) + 3) - 1",
      "10 + (3 - (1 - 12))",
      "(10 + 12) + (3 - 1)",
      "(3 + (10 - 1)) + 12",
      "3 - ((1 - 12) - 10)",
      "(3 + (12 - 1)) + 10",
      "3 - ((1 - 10) - 12)",
      "((3 + 10) - 1) + 12",
      "(3 - 1) + (12 + 10)",
      "(3 + 10) + (12 - 1)",
      "((3 - 1) + 10) + 12",
      "12 - ((1 - 3) - 10)",
      "(10 - (1 - 12)) + 3",
      "3 + ((10 - 1) + 12)",
      "(10 + 3) + (12 - 1)",
      "(10 - 1) + (3 + 12)",
      "10 + (3 + (12 - 1))",
      "((10 - 1) + 3) + 12",
      "(10 + (3 + 12)) - 1",
      "10 - ((1 - 12) - 3)",
      "12 + ((3 - 1) + 10)",
      "(10 + (3 - 1)) + 12",
      "10 + ((3 + 12) - 1)",
      "(12 - (1 - 10)) + 3",
      "(12 - 1) + (10 + 3)",
      "12 - (1 - (3 + 10))",
      "(3 - (1 - 12)) + 10",
      "3 + (10 + (12 - 1))",
      "((10 - 1) + 12) + 3",
      "(12 + 3) - (1 - 10)",
      "12 + (3 + (10 - 1))",
      "((12 - 1) + 10) + 3",
      "10 - (1 - (3 + 12))",
      "10 + ((12 + 3) - 1)",
      "10 + ((3 - 1) + 12)",
      "((12 + 3) + 10) - 1",
      "10 + ((12 - 1) + 3)",
      "3 - (1 - (12 + 10))",
      "((10 + 12) + 3) - 1",
      "(10 - (1 - 3)) + 12",
      "3 + ((10 + 12) - 1)",
      "(12 + (10 + 3)) - 1",
      "((3 - 1) + 12) + 10",
      "10 + (12 - (1 - 3))",
      "10 + (12 + (3 - 1))",
      "3 + (12 + (10 - 1))",
      "(10 + (12 + 3)) - 1",
      "(10 - 1) + (12 + 3)",
      "(12 + (10 - 1)) + 3",
      "3 + (10 - (1 - 12))",
      "(3 - 1) + (10 + 12)",
      "(3 + (10 + 12)) - 1",
      "10 - ((1 - 3) - 12)",
      "((12 - 1) + 3) + 10",
      "((12 + 10) - 1) + 3",
      "3 - (1 - (10 + 12))",
      "((3 + 12) + 10) - 1",
      "10 - (1 - (12 + 3))",
      "((3 + 12) - 1) + 10",
      "(3 + 12) - (1 - 10)",
      "((3 + 10) + 12) - 1",
      "12 - ((1 - 10) - 3)",
      "((10 + 12) - 1) + 3",
      "3 + (12 - (1 - 10))",
      "12 + ((10 + 3) - 1)",
      "(3 + 10) - (1 - 12)",
      "(3 + 12) + (10 - 1)",
      "(12 + 3) + (10 - 1)",
      "12 + ((3 + 10) - 1)",
      "(3 + (12 + 10)) - 1",
      "(10 + (12 - 1)) + 3",
      "12 - (1 - (10 + 3))",
      "12 + (10 - (1 - 3))",
      "(3 - (1 - 10)) + 12",
      "3 + ((12 - 1) + 10)",
      "(12 - (1 - 3)) + 10",
      "((10 + 3) + 12) - 1",
      "12 + ((10 - 1) + 3)"
    ]
  },
  "1 3 10 13": {
    "cards": "1 3 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 3 11 11": {
    "cards": "1 3 11 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "((11 - 1) + 11) + 3",
      "3 + (11 + (11 - 1))",
      "11 + ((3 + 11) - 1)",
      "(11 + 11) - (1 - 3)",
      "(3 - (1 - 11)) + 11",
      "(11 - 1) + (11 + 3)",
      "((11 + 11) - 1) + 3",
      "11 - (1 - (3 + 11))",
      "11 + (11 - (1 - 3))",
      "((3 + 11) - 1) + 11",
      "((11 - 1) + 3) + 11",
      "((11 + 3) - 1) + 11",
      "11 + (3 + (11 - 1))",
      "(11 + 11) + (3 - 1)",
      "(11 + (3 + 11)) - 1",
      "11 + (11 + (3 - 1))",
      "(11 - 1) + (3 + 11)",
      "(11 + (3 - 1)) + 11",
      "((3 - 1) + 11) + 11",
      "(3 - 1) + (11 + 11)",
      "(11 + 3) - (1 - 11)",
      "(11 - (1 - 11)) + 3",
      "11 - ((1 - 11) - 3)",
      "(11 + 3) + (11 - 1)",
      "11 - ((1 - 3) - 11)",
      "3 + ((11 - 1) + 11)",
      "((3 + 11) + 11) - 1",
      "11 + ((3 - 1) + 11)",
      "3 - ((1 - 11) - 11)",
      "11 - (1 - (11 + 3))",
      "(3 + 11) - (1 - 11)",
      "((11 + 3) + 11) - 1",
      "11 + ((11 - 1) + 3)",
      "11 + ((11 + 3) - 1)",
      "(3 + (11 + 11)) - 1",
      "3 + (11 - (1 - 11))",
      "((11 + 11) + 3) - 1",
      "3 - (1 - (11 + 11))",
      "(11 + (11 + 3)) - 1",
      "(3 + 11) + (11 - 1)",
      "(11 - (1 - 3)) + 11",
      "(11 + (11 - 1)) + 3",
      "(3 + (11 - 1)) + 11",
      "3 + ((11 + 11) - 1)",
      "11 + (3 - (1 - 11))"
    ]
  },
  "1 3 11 12": {
    "cards": "1 3 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(12 * 3) - (11 + 1)",
      "((1 + 11) * 3) - 12",
      "(3 * (1 + 11)) - 12",
      "(3 * (11 + 1)) - 12",
      "((3 * 12) - 1) - 11",
      "((12 * 3) - 11) - 1",
      "((11 + 1) * 3) - 12",
      "((12 * 3) - 1) - 11",
      "((3 * 12) - 11) - 1",
      "(3 * 12) - (1 + 11)",
      "(3 * 12) - (11 + 1)",
      "(12 * 3) - (1 + 11)"
    ]
  },
  "1 3 11 13": {
    "cards": "1 3 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 3 12 12": {
    "cards": "1 3 12 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(3 / (1 / 12)) - 12",
      "((3 / 1) * 12) - 12",
      "1 * ((3 * 12) - 12)",
      "((12 * 3) - 12) / 1",
      "(12 * 3) - (12 * 1)",
      "(3 * (1 * 12)) - 12",
      "((12 * 3) - 12) * 1",
      "(3 * (12 * 1)) - 12",
      "((12 / 1) * 3) - 12",
      "(12 * 3) - (12 / 1)",
      "((12 * 1) * 3) - 12",
      "((3 * 12) - 12) * 1",
      "((1 * 12) * 3) - 12",
      "((1 * 3) * 12) - 12",
      "((3 * 1) * 12) - 12",
      "(12 * (1 * 3)) - 12",
      "((12 * 3) * 1) - 12",
      "((3 * 12) - 12) / 1",
      "(12 * (3 * 1)) - 12",
      "(3 * 12) - (12 * 1)",
      "((3 * 12) / 1) - 12",
      "(12 * (3 / 1)) - 12",
      "((3 * 12) * 1) - 12",
      "((12 * 3) / 1) - 12",
      "(12 * 3) - (1 * 12)",
      "(12 / (1 / 3)) - 12",
      "(1 * (12 * 3)) - 12",
      "(3 * 12) - (1 * 12)",
      "(3 * 12) - (12 / 1)",
      "(1 * (3 * 12)) - 12",
      "(3 * (12 / 1)) - 12",
      "1 * ((12 * 3) - 12)"
    ]
  },
  "1 3 12 13": {
    "cards": "1 3 12 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(12 * 3) + (1 - 13)",
      "((12 * 3) - 13) + 1",
      "((13 - 1) * 3) - 12",
      "1 - (13 - (3 * 12))",
      "(1 - 13) + (3 * 12)",
      "((12 * 3) + 1) - 13",
      "(1 + (3 * 12)) - 13",
      "((3 * 12) - 13) + 1",
      "(3 * 12) + (1 - 13)",
      "1 + ((3 * 12) - 13)",
      "((3 * 12) + 1) - 13",
      "(1 + (12 * 3)) - 13",
      "1 + ((12 * 3) - 13)",
      "1 - (13 - (12 * 3))",
      "(1 - 13) + (12 * 3)",
      "(3 * 12) - (13 - 1)",
      "(3 * (13 - 1)) - 12",
      "(12 * 3) - (13 - 1)"
    ]
  },
  "1 3 13 13": {
    "cards": "1 3 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "13 + (1 - (3 - 13))",
      "(1 + 13) - (3 - 13)",
      "(13 + 13) - (3 - 1)",
      "13 - (3 - (13 + 1))",
      "(13 - (3 - 13)) + 1",
      "((13 - 3) + 1) + 13",
      "13 - ((3 - 1) - 13)",
      "1 - ((3 - 13) - 13)",
      "(13 + (13 + 1)) - 3",
      "1 + (13 + (13 - 3))",
      "(1 + (13 - 3)) + 13",
      "(13 + 1) - (3 - 13)",
      "(1 - 3) + (13 + 13)",
      "13 + ((13 - 3) + 1)",
      "13 + (1 + (13 - 3))",
      "((1 - 3) + 13) + 13",
      "13 + ((13 + 1) - 3)",
      "((1 + 13) - 3) + 13",
      "(13 + (13 - 3)) + 1",
      "13 + ((1 - 3) + 13)",
      "13 + ((1 + 13) - 3)",
      "(13 + 13) + (1 - 3)",
      "((13 + 1) - 3) + 13",
      "(13 + 1) + (13 - 3)",
      "1 - (3 - (13 + 13))",
      "((13 - 3) + 13) + 1",
      "13 + (13 - (3 - 1))",
      "(13 - 3) + (13 + 1)",
      "(13 + (1 - 3)) + 13",
      "((13 + 13) + 1) - 3",
      "13 + (13 + (1 - 3))",
      "13 - ((3 - 13) - 1)",
      "(13 + (1 + 13)) - 3",
      "(1 + 13) + (13 - 3)",
      "(1 - (3 - 13)) + 13",
      "13 - (3 - (1 + 13))",
      "((13 + 13) - 3) + 1",
      "((13 + 1) + 13) - 3",
      "((1 + 13) + 13) - 3",
      "1 + (13 - (3 - 13))",
      "(13 - (3 - 1)) + 13",
      "(1 + (13 + 13)) - 3",
      "1 + ((13 + 13) - 3)",
      "(13 - 3) + (1 + 13)",
      "1 + ((13 - 3) + 13)"
    ]
  },
  "1 4 4 4": {
    "cards": "1 4 4 4",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((1 + 4) * 4) + 4",
      "(4 - 1) * (4 + 4)",
      "4 + ((4 + 1) * 4)",
      "(4 * (4 + 1)) + 4",
      "(4 * (1 + 4)) + 4",
      "4 + (4 * (4 + 1))",
      "(4 + 4) * (4 - 1)",
      "4 + ((1 + 4) * 4)",
      "((4 + 1) * 4) + 4",
      "4 + (4 * (1 + 4))"
    ]
  },
  "1 4 4 5": {
    "cards": "1 4 4 5",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "((4 * 5) / 1) + 4",
      "1 * ((4 * 5) + 4)",
      "4 + (5 * (1 * 4))",
      "4 + ((1 * 5) * 4)",
      "1 * ((5 * 4) + 4)",
      "4 + (4 * (1 * 5))",
      "4 + (1 * (4 * 5))",
      "((5 * 1) * 4) + 4",
      "(1 * 4) + (5 * 4)",
      "((1 * 5) * 4) + 4",
      "4 + ((5 * 4) / 1)",
      "((4 / 1) * 5) + 4",
      "(4 * 5) + (4 / 1)",
      "1 * (4 + (5 * 4))",
      "4 + ((4 / 1) * 5)",
      "(4 * (5 / 1)) + 4",
      "(4 / (1 / 5)) + 4",
      "(4 + (4 * 5)) / 1",
      "(4 * (5 * 1)) + 4",
      "(4 / 1) + (5 * 4)",
      "(5 * 4) + (4 / 1)",
      "(5 / (1 / 4)) + 4",
      "((5 * 4) + 4) * 1",
      "(4 * 5) + (4 * 1)",
      "((5 * 4) / 1) + 4",
      "((4 * 5) * 1) + 4",
      "4 + (5 * (4 / 1))",
      "((4 * 1) * 5) + 4",
      "((5 * 4) * 1) + 4",
      "((4 * 5) + 4) / 1",
      "4 + (4 / (1 / 5))",
      "((5 * 4) + 4) / 1",
      "(4 * 5) + (1 * 4)",
      "(5 * (4 * 1)) + 4",
      "(4 * 1) + (4 * 5)",
      "4 + (5 * (4 * 1))",
      "4 + ((5 / 1) * 4)",
      "(4 + (5 * 4)) * 1",
      "((1 * 4) * 5) + 4",
      "(5 * (4 / 1)) + 4",
      "4 + ((1 * 4) * 5)",
      "((5 / 1) * 4) + 4",
      "(4 / 1) + (4 * 5)",
      "4 + (5 / (1 / 4))",
      "(1 * (5 * 4)) + 4",
      "(1 * 4) + (4 * 5)",
      "(5 * (1 * 4)) + 4",
      "4 + (1 * (5 * 4))",
      "(4 * 1) + (5 * 4)",
      "(5 * 4) + (4 * 1)",
      "(4 + (4 * 5)) * 1",
      "((4 * 5) + 4) * 1",
      "4 + ((4 * 1) * 5)",
      "(5 * 4) + (1 * 4)",
      "4 + ((4 * 5) / 1)",
      "4 + ((4 * 5) * 1)",
      "(4 * (1 * 5)) + 4",
      "4 + (4 * (5 / 1))",
      "(4 + (5 * 4)) / 1",
      "4 + (4 * (5 * 1))",
      "(1 * (4 * 5)) + 4",
      "1 * (4 + (4 * 5))",
      "4 + ((5 * 4) * 1)",
      "4 + ((5 * 1) * 4)"
    ]
  },
  "1 4 4 6": {
    "cards": "1 4 4 6",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(4 * (6 + 1)) - 4",
      "4 - (4 * (1 - 6))",
      "4 + (4 * (6 - 1))",
      "(4 * (1 + 6)) - 4",
      "4 - ((1 - 6) * 4)",
      "4 + ((6 - 1) * 4)",
      "((6 - 1) * 4) + 4",
      "((1 + 6) * 4) - 4",
      "(4 * (6 - 1)) + 4",
      "((6 + 1) * 4) - 4"
    ]
  },
  "1 4 4 7": {
    "cards": "1 4 4 7",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "((4 * 7) * 1) - 4",
      "(4 * 7) - (1 * 4)",
      "((4 * 7) - 4) * 1",
      "7 + (1 + (4 * 4))",
      "(1 + 7) + (4 * 4)",
      "(4 / (1 / 7)) - 4",
      "(7 * (4 / 1)) - 4",
      "(1 * (4 * 7)) - 4",
      "(4 * (7 / 1)) - 4",
      "1 + ((4 * 4) + 7)",
      "1 * ((4 * 7) - 4)",
      "(4 * (7 * 1)) - 4",
      "((7 * 4) / 1) - 4",
      "((1 * 7) * 4) - 4",
      "(1 + (4 * 4)) + 7",
      "(4 * (1 * 7)) - 4",
      "((4 * 4) + 7) + 1",
      "(4 * 4) + (7 + 1)",
      "((4 * 4) + 1) + 7",
      "(7 + (4 * 4)) + 1",
      "(7 * 4) - (4 / 1)",
      "((4 * 7) - 4) / 1",
      "7 + ((4 * 4) + 1)",
      "((4 * 7) / 1) - 4",
      "(4 * 4) + (1 + 7)",
      "(4 * 7) - (4 * 1)",
      "1 + (7 + (4 * 4))",
      "(7 / (1 / 4)) - 4",
      "((4 / 1) * 7) - 4",
      "(7 * (4 * 1)) - 4",
      "(7 + 1) + (4 * 4)",
      "(7 * 4) - (4 * 1)",
      "(7 * 4) - (1 * 4)",
      "((7 / 1) * 4) - 4",
      "((7 * 4) * 1) - 4",
      "((7 * 4) - 4) * 1",
      "((1 * 4) * 7) - 4",
      "((4 * 1) * 7) - 4",
      "((7 * 4) - 4) / 1",
      "1 * ((7 * 4) - 4)",
      "(4 * 7) - (4 / 1)",
      "(7 * (1 * 4)) - 4",
      "((7 * 1) * 4) - 4",
      "(1 * (7 * 4)) - 4"
    ]
  },
  "1 4 4 8": {
    "cards": "1 4 4 8",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "1 * ((4 * 4) + 8)",
      "(1 * 8) + (4 * 4)",
      "(4 * (8 - 1)) - 4",
      "(4 * 4) + (8 / 1)",
      "8 + ((4 * 4) / 1)",
      "8 + ((4 / 1) * 4)",
      "1 * (8 + (4 * 4))",
      "(4 * (1 * 4)) + 8",
      "(8 / 1) + (4 * 4)",
      "8 + (4 * (4 * 1))",
      "((4 * 1) * 4) + 8",
      "8 + ((4 * 1) * 4)",
      "8 + (4 * (1 * 4))",
      "((1 * 4) * 4) + 8",
      "8 + ((4 * 4) * 1)",
      "(1 * (4 * 4)) + 8",
      "(8 + (4 * 4)) * 1",
      "(4 * (4 / 1)) + 8",
      "(4 * 4) + (8 * 1)",
      "8 + ((1 * 4) * 4)",
      "8 + (4 / (1 / 4))",
      "8 + (1 * (4 * 4))",
      "8 + (4 * (4 / 1))",
      "((4 * 4) * 1) + 8",
      "(4 / (1 / 4)) + 8",
      "((4 / 1) * 4) + 8",
      "((8 - 1) * 4) - 4",
      "(8 + (4 * 4)) / 1",
      "((4 * 4) + 8) * 1",
      "((4 * 4) + 8) / 1",
      "((4 * 4) / 1) + 8",
      "(4 * 4) + (1 * 8)",
      "(8 * 1) + (4 * 4)",
      "(4 * (4 * 1)) + 8"
    ]
  },
  "1 4 4 9": {
    "cards": "1 4 4 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "4 * (1 + (9 - 4))",
      "4 * ((9 + 1) - 4)",
      "((4 * 4) + 9) - 1",
      "(1 + (9 - 4)) * 4",
      "4 * (9 - (4 - 1))",
      "4 * ((1 - 4) + 9)",
      "((9 - 4) + 1) * 4",
      "(4 * 4) - (1 - 9)",
      "9 - (1 - (4 * 4))",
      "4 * ((1 + 9) - 4)",
      "((9 + 1) - 4) * 4",
      "(1 - (4 - 9)) * 4",
      "(9 - (4 - 1)) * 4",
      "(9 - 1) + (4 * 4)",
      "4 * ((9 - 4) + 1)",
      "4 * (1 - (4 - 9))",
      "((1 - 4) + 9) * 4",
      "4 * (9 + (1 - 4))",
      "(9 + (1 - 4)) * 4",
      "((1 + 9) - 4) * 4",
      "(4 * 4) + (9 - 1)",
      "((4 * 4) - 1) + 9",
      "(9 + (4 * 4)) - 1",
      "9 + ((4 * 4) - 1)"
    ]
  },
  "1 4 4 10": {
    "cards": "1 4 4 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(4 * 1) * (10 - 4)",
      "(10 - 4) * (1 * 4)",
      "(4 * (10 - 4)) / 1",
      "((1 * 10) - 4) * 4",
      "4 * ((10 - 4) * 1)",
      "((10 - 4) / 1) * 4",
      "1 * ((10 - 4) * 4)",
      "((10 * 1) - 4) * 4",
      "4 * ((10 * 1) - 4)",
      "(4 / 1) * (10 - 4)",
      "1 * (4 * (10 - 4))",
      "(10 - 4) * (4 / 1)",
      "4 / (1 / (10 - 4))",
      "((10 - 4) * 1) * 4",
      "(10 - 4) / (1 / 4)",
      "(10 - (4 * 1)) * 4",
      "4 * (10 - (4 * 1))",
      "(1 * (10 - 4)) * 4",
      "(1 * 4) * (10 - 4)",
      "((10 - 4) * 4) * 1",
      "4 * ((10 / 1) - 4)",
      "4 * (1 * (10 - 4))",
      "(10 - (4 / 1)) * 4",
      "4 * ((10 - 4) / 1)",
      "(4 * (10 - 4)) * 1",
      "(10 - (1 * 4)) * 4",
      "((10 - 4) * 4) / 1",
      "4 * ((1 * 10) - 4)",
      "4 * (10 - (4 / 1))",
      "((10 / 1) - 4) * 4",
      "4 * (10 - (1 * 4))",
      "(10 - 4) * (4 * 1)"
    ]
  },
  "1 4 4 11": {
    "cards": "1 4 4 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "4 * ((11 - 1) - 4)",
      "4 * ((11 - 4) - 1)",
      "(11 - (1 + 4)) * 4",
      "4 * (11 - (1 + 4))",
      "4 * (11 - (4 + 1))",
      "(11 - (4 + 1)) * 4",
      "((11 - 4) - 1) * 4",
      "((11 - 1) - 4) * 4"
    ]
  },
  "1 4 4 12": {
    "cards": "1 4 4 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "((4 / 4) + 1) * 12",
      "12 + (4 * (4 - 1))",
      "(12 - 4) * (4 - 1)",
      "(4 - 1) * (12 - 4)",
      "(1 + (4 / 4)) * 12",
      "12 - (4 * (1 - 4))",
      "(4 - 12) * (1 - 4)",
      "12 + ((4 - 1) * 4)",
      "((4 - 1) * 4) + 12",
      "12 * ((4 / 4) + 1)",
      "12 * (1 + (4 / 4))",
      "(1 - 4) * (4 - 12)",
      "12 - ((1 - 4) * 4)",
      "(4 * (4 - 1)) + 12"
    ]
  },
  "1 4 4 13": {
    "cards": "1 4 4 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 5 5": {
    "cards": "1 4 5 5",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(5 - 1) + (4 * 5)",
      "5 + ((5 * 4) - 1)",
      "4 + (5 * (5 - 1))",
      "5 - (1 - (5 * 4))",
      "5 + ((4 * 5) - 1)",
      "(5 + (5 * 4)) - 1",
      "((5 * 4) + 5) - 1",
      "(4 * 5) - (1 - 5)",
      "((4 * 5) - 1) + 5",
      "5 - (1 - (4 * 5))",
      "(5 * 4) + (5 - 1)",
      "((4 * 5) + 5) - 1",
      "(4 * 5) + (5 - 1)",
      "(5 * 4) - (1 - 5)",
      "(5 - 1) + (5 * 4)",
      "4 + ((5 - 1) * 5)",
      "(5 * (5 - 1)) + 4",
      "((5 * 4) - 1) + 5",
      "4 - (5 * (1 - 5))",
      "((5 - 1) * 5) + 4",
      "(5 + (4 * 5)) - 1",
      "4 - ((1 - 5) * 5)"
    ]
  },
  "1 4 5 6": {
    "cards": "1 4 5 6",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "4 / (1 - (5 / 6))",
      "6 / ((5 / 4) - 1)"
    ]
  },
  "1 4 5 7": {
    "cards": "1 4 5 7",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((5 - 1) * 7) - 4",
      "(1 + (4 * 7)) - 5",
      "(1 - 5) + (4 * 7)",
      "(4 * 7) + (1 - 5)",
      "1 + ((4 * 7) - 5)",
      "1 + ((7 * 4) - 5)",
      "(1 + (7 * 4)) - 5",
      "(7 * 4) + (1 - 5)",
      "1 - (5 - (4 * 7))",
      "((7 * 4) + 1) - 5",
      "((7 * 4) - 5) + 1",
      "(7 * (5 - 1)) - 4",
      "((4 * 7) - 5) + 1",
      "1 - (5 - (7 * 4))",
      "(7 * 4) - (5 - 1)",
      "(1 - 5) + (7 * 4)",
      "(4 * 7) - (5 - 1)",
      "((4 * 7) + 1) - 5"
    ]
  },
  "1 4 5 8": {
    "cards": "1 4 5 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(5 + 1) * (8 - 4)",
      "8 + ((5 - 1) * 4)",
      "(1 + 5) * (8 - 4)",
      "8 - ((1 - 5) * 4)",
      "((5 - 1) * 4) + 8",
      "(8 - 4) * (1 + 5)",
      "8 - (4 * (1 - 5))",
      "(8 - 4) * (5 + 1)",
      "8 + (4 * (5 - 1))",
      "(4 * (5 - 1)) + 8"
    ]
  },
  "1 4 5 9": {
    "cards": "1 4 5 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 * (4 - 1)) + 9",
      "(5 * (9 - 4)) - 1",
      "((4 - 1) * 5) + 9",
      "9 + (5 * (4 - 1))",
      "((9 - 4) * 5) - 1",
      "9 - ((1 - 4) * 5)",
      "9 - (5 * (1 - 4))",
      "9 + ((4 - 1) * 5)"
    ]
  },
  "1 4 5 10": {
    "cards": "1 4 5 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(10 + (1 - 5)) * 4",
      "4 * (10 - (5 - 1))",
      "4 * ((1 + 10) - 5)",
      "(10 - 4) * (5 - 1)",
      "((1 - 5) + 10) * 4",
      "(10 - (5 - 1)) * 4",
      "(1 - (5 - 10)) * 4",
      "4 * ((10 + 1) - 5)",
      "4 * (1 - (5 - 10))",
      "((10 - 5) + 1) * 4",
      "4 * ((10 - 5) + 1)",
      "((1 + 10) - 5) * 4",
      "4 * (1 + (10 - 5))",
      "(1 + (10 - 5)) * 4",
      "(5 - 1) * (10 - 4)",
      "4 * ((1 - 5) + 10)",
      "4 * (10 + (1 - 5))",
      "(4 - 10) * (1 - 5)",
      "((10 + 1) - 5) * 4",
      "(1 - 5) * (4 - 10)"
    ]
  },
  "1 4 5 11": {
    "cards": "1 4 5 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(11 - (5 / 1)) * 4",
      "4 / (1 / (11 - 5))",
      "((11 * 1) - 5) * 4",
      "(11 - 5) / (1 / 4)",
      "(4 * (11 - 5)) * 1",
      "(11 - (5 * 1)) * 4",
      "((1 * 11) - 5) * 4",
      "4 * ((11 * 1) - 5)",
      "4 * (11 - (5 / 1))",
      "(11 - 5) * (4 * 1)",
      "(4 * (11 - 5)) / 1",
      "(1 * 4) * (11 - 5)",
      "4 * ((11 - 5) * 1)",
      "(4 * 1) * (11 - 5)",
      "((11 - 5) * 4) / 1",
      "(11 - 5) * (4 / 1)",
      "(11 - (1 * 5)) * 4",
      "4 * ((11 - 5) / 1)",
      "1 * ((11 - 5) * 4)",
      "((11 - 5) * 1) * 4",
      "(4 / 1) * (11 - 5)",
      "(11 - 5) * (1 * 4)",
      "4 * ((1 * 11) - 5)",
      "4 * ((11 / 1) - 5)",
      "4 * (11 - (1 * 5))",
      "4 * (1 * (11 - 5))",
      "((11 - 5) / 1) * 4",
      "((11 / 1) - 5) * 4",
      "4 * (11 - (5 * 1))",
      "((11 - 5) * 4) * 1",
      "(1 * (11 - 5)) * 4",
      "1 * (4 * (11 - 5))"
    ]
  },
  "1 4 5 12": {
    "cards": "1 4 5 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "12 * (1 - (4 - 5))",
      "(12 - (5 + 1)) * 4",
      "((12 - 5) - 1) * 4",
      "12 * (5 - (4 - 1))",
      "12 * ((1 + 5) - 4)",
      "12 * (1 + (5 - 4))",
      "((5 - 4) + 1) * 12",
      "4 * ((12 - 1) - 5)",
      "12 * ((1 - 4) + 5)",
      "12 * ((5 + 1) - 4)",
      "4 * (12 - (1 + 5))",
      "4 * ((12 - 5) - 1)",
      "4 * (12 - (5 + 1))",
      "((1 + 5) - 4) * 12",
      "(5 + (1 - 4)) * 12",
      "(1 + (5 - 4)) * 12",
      "((12 - 1) - 5) * 4",
      "(12 - (1 + 5)) * 4",
      "((5 + 1) - 4) * 12",
      "12 * (5 + (1 - 4))",
      "12 * ((5 - 4) + 1)",
      "(1 - (4 - 5)) * 12",
      "(5 - (4 - 1)) * 12",
      "((1 - 4) + 5) * 12"
    ]
  },
  "1 4 5 13": {
    "cards": "1 4 5 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 - 13) * (1 - 4)",
      "(4 - 1) * (13 - 5)",
      "(13 - 5) * (4 - 1)",
      "(1 - 4) * (5 - 13)"
    ]
  },
  "1 4 6 6": {
    "cards": "1 4 6 6",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(6 * (4 - 1)) + 6",
      "6 - (6 * (1 - 4))",
      "(6 * (4 + 1)) - 6",
      "6 - ((1 - 4) * 6)",
      "((1 + 4) * 6) - 6",
      "((4 - 1) * 6) + 6",
      "(6 * (1 + 4)) - 6",
      "6 + (6 * (4 - 1))",
      "6 + ((4 - 1) * 6)",
      "((4 + 1) * 6) - 6"
    ]
  },
  "1 4 6 7": {
    "cards": "1 4 6 7",
    "has_solution": "Y",
    "num_solutions": 17,
    "solutions": [
      "((7 + 1) - 4) * 6",
      "4 / ((7 / 6) - 1)",
      "6 * (1 + (7 - 4))",
      "6 * ((1 - 4) + 7)",
      "(7 + (1 - 4)) * 6",
      "6 * ((7 - 4) + 1)",
      "(1 - (4 - 7)) * 6",
      "((1 - 4) + 7) * 6",
      "6 * (1 - (4 - 7))",
      "6 * (7 - (4 - 1))",
      "6 * ((7 + 1) - 4)",
      "6 * (7 + (1 - 4))",
      "((7 - 4) + 1) * 6",
      "((1 + 7) - 4) * 6",
      "6 * ((1 + 7) - 4)",
      "(7 - (4 - 1)) * 6",
      "(1 + (7 - 4)) * 6"
    ]
  },
  "1 4 6 8": {
    "cards": "1 4 6 8",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "1 * ((8 - 4) * 6)",
      "8 * ((1 - 4) + 6)",
      "((8 - 4) * 1) * 6",
      "((6 + 1) - 4) * 8",
      "8 * (6 - (4 - 1))",
      "((8 - 4) * 6) * 1",
      "8 * (6 + (1 - 4))",
      "(1 * (8 - 4)) * 6",
      "(8 - 4) / (1 / 6)",
      "(6 + (1 - 4)) * 8",
      "(8 - 4) * (6 / 1)",
      "(8 - (4 / 1)) * 6",
      "((6 - 4) + 1) * 8",
      "(8 - (1 * 4)) * 6",
      "(8 - 4) * (1 * 6)",
      "8 * ((6 + 1) - 4)",
      "6 * (8 - (1 * 4))",
      "(6 / 1) * (8 - 4)",
      "6 * ((8 - 4) * 1)",
      "8 * (1 - (4 - 6))",
      "(1 * 6) * (8 - 4)",
      "6 * (1 * (8 - 4))",
      "(6 * (8 - 4)) * 1",
      "(6 - (4 - 1)) * 8",
      "((8 - 4) / 1) * 6",
      "8 * ((6 - 4) + 1)",
      "((1 * 8) - 4) * 6",
      "((8 / 1) - 4) * 6",
      "(6 * 1) * (8 - 4)",
      "((8 * 1) - 4) * 6",
      "((1 + 6) - 4) * 8",
      "(1 - (4 - 6)) * 8",
      "6 * ((1 * 8) - 4)",
      "((1 - 4) + 6) * 8",
      "6 * ((8 - 4) / 1)",
      "8 / (1 - (4 / 6))",
      "((8 - 4) * 6) / 1",
      "1 * (6 * (8 - 4))",
      "6 * (8 - (4 / 1))",
      "8 * ((1 + 6) - 4)",
      "(8 - 4) * (6 * 1)",
      "(1 + (6 - 4)) * 8",
      "6 * ((8 / 1) - 4)",
      "6 / (1 / (8 - 4))",
      "8 * (1 + (6 - 4))",
      "(8 - (4 * 1)) * 6",
      "(6 * (8 - 4)) / 1",
      "6 * ((8 * 1) - 4)",
      "6 * (8 - (4 * 1))"
    ]
  },
  "1 4 6 9": {
    "cards": "1 4 6 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(9 - (1 + 4)) * 6",
      "((9 - 1) - 4) * 6",
      "6 * (9 - (4 + 1))",
      "((9 - 4) - 1) * 6",
      "6 * ((9 - 4) - 1)",
      "(9 - (4 + 1)) * 6",
      "6 * (9 - (1 + 4))",
      "6 * ((9 - 1) - 4)"
    ]
  },
  "1 4 6 10": {
    "cards": "1 4 6 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(10 * (4 - 1)) - 6",
      "((4 - 1) * 10) - 6"
    ]
  },
  "1 4 6 11": {
    "cards": "1 4 6 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((1 + 11) - 6) * 4",
      "(11 + 1) * (6 - 4)",
      "(6 - 4) * (11 + 1)",
      "(1 - (6 - 11)) * 4",
      "(11 + (1 - 6)) * 4",
      "(1 + (11 - 6)) * 4",
      "((1 - 6) + 11) * 4",
      "4 * (1 - (6 - 11))",
      "(11 - (6 - 1)) * 4",
      "(1 + 11) * (6 - 4)",
      "4 * (1 + (11 - 6))",
      "(6 - 4) * (1 + 11)",
      "((11 + 1) - 6) * 4",
      "4 * ((11 + 1) - 6)",
      "4 * ((1 - 6) + 11)",
      "4 * (11 - (6 - 1))",
      "4 * ((11 - 6) + 1)",
      "4 * (11 + (1 - 6))",
      "4 * ((1 + 11) - 6)",
      "((11 - 6) + 1) * 4"
    ]
  },
  "1 4 6 12": {
    "cards": "1 4 6 12",
    "has_solution": "Y",
    "num_solutions": 77,
    "solutions": [
      "12 * (6 - (4 / 1))",
      "((12 - 6) / 1) * 4",
      "12 * ((6 / 1) - 4)",
      "(6 - (1 * 4)) * 12",
      "4 * (12 - (1 * 6))",
      "1 * (4 * (12 - 6))",
      "1 * (12 * (6 - 4))",
      "12 * ((6 * 1) - 4)",
      "12 * (6 - (1 * 4))",
      "12 * ((6 - 4) / 1)",
      "6 * (1 + (12 / 4))",
      "(12 - 6) * (4 * 1)",
      "((6 - 4) / 1) * 12",
      "4 * (1 * (12 - 6))",
      "6 * (12 / (4 - 1))",
      "(12 - 6) / (1 / 4)",
      "((12 * 1) - 6) * 4",
      "(6 * 12) / (4 - 1)",
      "1 * ((6 - 4) * 12)",
      "((1 * 12) - 6) * 4",
      "(6 - (4 / 1)) * 12",
      "((12 / 4) + 1) * 6",
      "6 / ((4 - 1) / 12)",
      "4 * ((1 * 12) - 6)",
      "(1 * (6 - 4)) * 12",
      "(12 - 6) * (4 / 1)",
      "4 * ((12 - 6) / 1)",
      "12 * (6 / (4 - 1))",
      "(12 - (6 * 1)) * 4",
      "(12 - 6) * (1 * 4)",
      "(4 * 1) * (12 - 6)",
      "4 * ((12 - 6) * 1)",
      "4 * ((12 * 1) - 6)",
      "4 * (12 - (6 / 1))",
      "(12 * 1) * (6 - 4)",
      "(4 * (12 - 6)) * 1",
      "12 * ((6 - 4) * 1)",
      "12 / (1 / (6 - 4))",
      "6 * ((12 / 4) + 1)",
      "(12 * 6) / (4 - 1)",
      "12 * (1 * (6 - 4))",
      "(6 - (4 * 1)) * 12",
      "(12 * (6 - 4)) / 1",
      "(6 - 4) / (1 / 12)",
      "(6 - 4) * (12 * 1)",
      "(1 * 4) * (12 - 6)",
      "(12 / (4 - 1)) * 6",
      "((6 / 1) - 4) * 12",
      "((1 * 6) - 4) * 12",
      "(12 / 1) * (6 - 4)",
      "(12 - (1 * 6)) * 4",
      "4 * (12 - (6 * 1))",
      "(12 - (6 / 1)) * 4",
      "((6 - 4) * 12) / 1",
      "(6 - 4) * (1 * 12)",
      "(12 * (6 - 4)) * 1",
      "4 * ((12 / 1) - 6)",
      "(1 + (12 / 4)) * 6",
      "((6 - 4) * 1) * 12",
      "((12 / 1) - 6) * 4",
      "((6 - 4) * 12) * 1",
      "12 * (6 - (4 * 1))",
      "(6 - 4) * (12 / 1)",
      "(1 * 12) * (6 - 4)",
      "((12 - 6) * 4) * 1",
      "((6 * 1) - 4) * 12",
      "12 * ((1 * 6) - 4)",
      "4 / (1 / (12 - 6))",
      "1 * ((12 - 6) * 4)",
      "(6 / (4 - 1)) * 12",
      "(1 * (12 - 6)) * 4",
      "12 / ((4 - 1) / 6)",
      "(4 * (12 - 6)) / 1",
      "((12 - 6) * 1) * 4",
      "12 / ((6 / 4) - 1)",
      "((12 - 6) * 4) / 1",
      "(4 / 1) * (12 - 6)"
    ]
  },
  "1 4 6 13": {
    "cards": "1 4 6 13",
    "has_solution": "Y",
    "num_solutions": 132,
    "solutions": [
      "((4 + 13) + 1) + 6",
      "4 + ((1 + 6) + 13)",
      "(4 + 6) + (1 + 13)",
      "1 + (6 + (13 + 4))",
      "(4 + (6 + 13)) + 1",
      "(13 + 6) + (1 + 4)",
      "13 + ((6 + 1) + 4)",
      "(4 + 13) + (6 + 1)",
      "4 * ((13 - 1) - 6)",
      "13 + (6 + (1 + 4))",
      "((1 + 13) + 6) + 4",
      "6 + (1 + (13 + 4))",
      "(13 + (4 + 6)) + 1",
      "(4 + (13 + 6)) + 1",
      "((1 + 4) + 6) + 13",
      "(4 + 6) + (13 + 1)",
      "6 + ((1 + 4) + 13)",
      "4 * (13 - (1 + 6))",
      "13 + (1 + (4 + 6))",
      "(4 + (6 + 1)) + 13",
      "4 + (1 + (6 + 13))",
      "6 + ((4 + 1) + 13)",
      "13 + ((4 + 1) + 6)",
      "((1 + 6) + 13) + 4",
      "4 + (1 + (13 + 6))",
      "1 + (4 + (6 + 13))",
      "13 + (4 + (6 + 1))",
      "4 + ((13 + 6) + 1)",
      "13 + (6 + (4 + 1))",
      "(13 + 1) + (4 + 6)",
      "(13 + (6 + 1)) + 4",
      "13 + ((6 + 4) + 1)",
      "((13 + 6) + 4) + 1",
      "6 + (4 + (13 + 1))",
      "(4 + 13) + (1 + 6)",
      "((13 + 4) + 1) + 6",
      "(6 + (4 + 1)) + 13",
      "((4 + 13) + 6) + 1",
      "1 + (13 + (4 + 6))",
      "(13 + 4) + (6 + 1)",
      "4 + ((6 + 1) + 13)",
      "(1 + 6) + (13 + 4)",
      "(13 + (4 + 1)) + 6",
      "4 + ((1 + 13) + 6)",
      "6 + ((4 + 13) + 1)",
      "(13 + 6) + (4 + 1)",
      "4 + ((6 + 13) + 1)",
      "(1 + (6 + 4)) + 13",
      "4 + (13 + (1 + 6))",
      "((6 + 13) + 4) + 1",
      "(6 + 13) + (4 + 1)",
      "1 + ((6 + 4) + 13)",
      "(1 + 4) + (13 + 6)",
      "(13 + 1) + (6 + 4)",
      "((1 + 4) + 13) + 6",
      "6 + ((1 + 13) + 4)",
      "(13 + (6 + 4)) + 1",
      "1 + ((13 + 6) + 4)",
      "(6 + (13 + 4)) + 1",
      "((6 + 1) + 4) + 13",
      "((13 - 6) - 1) * 4",
      "(1 - 13) * (4 - 6)",
      "((6 + 4) + 1) + 13",
      "((1 + 13) + 4) + 6",
      "4 + (6 + (13 + 1))",
      "1 + ((4 + 6) + 13)",
      "(13 + 4) + (1 + 6)",
      "(6 + (4 + 13)) + 1",
      "(1 + 13) + (4 + 6)",
      "6 + ((13 + 4) + 1)",
      "13 + (4 + (1 + 6))",
      "(1 + (13 + 6)) + 4",
      "(4 - 6) * (1 - 13)",
      "1 + ((13 + 4) + 6)",
      "(13 - (6 + 1)) * 4",
      "4 * (13 - (6 + 1))",
      "(13 - 1) * (6 - 4)",
      "(6 + 1) + (4 + 13)",
      "(4 + (1 + 6)) + 13",
      "(4 + (1 + 13)) + 6",
      "(6 + 1) + (13 + 4)",
      "(6 + 4) + (13 + 1)",
      "(1 + 13) + (6 + 4)",
      "(1 + (13 + 4)) + 6",
      "((6 + 4) + 13) + 1",
      "13 + ((1 + 6) + 4)",
      "(6 + (1 + 13)) + 4",
      "((6 + 13) + 1) + 4",
      "6 + ((13 + 1) + 4)",
      "(6 - 4) * (13 - 1)",
      "((6 + 1) + 13) + 4",
      "(1 + (4 + 13)) + 6",
      "((4 + 1) + 13) + 6",
      "13 + ((4 + 6) + 1)",
      "4 * ((13 - 6) - 1)",
      "(4 + 1) + (13 + 6)",
      "1 + (6 + (4 + 13))",
      "((4 + 1) + 6) + 13",
      "1 + ((6 + 13) + 4)",
      "6 + (1 + (4 + 13))",
      "1 + (13 + (6 + 4))",
      "13 + (1 + (6 + 4))",
      "(1 + 4) + (6 + 13)",
      "(13 + (1 + 4)) + 6",
      "(1 + 6) + (4 + 13)",
      "((4 + 6) + 1) + 13",
      "((13 + 1) + 6) + 4",
      "((4 + 6) + 13) + 1",
      "1 + (4 + (13 + 6))",
      "6 + (4 + (1 + 13))",
      "((1 + 6) + 4) + 13",
      "4 + (6 + (1 + 13))",
      "6 + (13 + (1 + 4))",
      "4 + ((13 + 1) + 6)",
      "(4 + (13 + 1)) + 6",
      "1 + ((4 + 13) + 6)",
      "13 + ((1 + 4) + 6)",
      "(13 - (1 + 6)) * 4",
      "(6 + 13) + (1 + 4)",
      "(6 + (13 + 1)) + 4",
      "((13 + 4) + 6) + 1",
      "((13 + 1) + 4) + 6",
      "(6 + 4) + (1 + 13)",
      "4 + (13 + (6 + 1))",
      "((13 - 1) - 6) * 4",
      "(6 + (1 + 4)) + 13",
      "(4 + 1) + (6 + 13)",
      "((13 + 6) + 1) + 4",
      "6 + (13 + (4 + 1))",
      "(1 + (6 + 13)) + 4",
      "(1 + (4 + 6)) + 13",
      "(13 + (1 + 6)) + 4"
    ]
  },
  "1 4 7 7": {
    "cards": "1 4 7 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 + 7) * (7 - 4)",
      "(7 + 1) * (7 - 4)",
      "(7 - 4) * (7 + 1)",
      "(7 - 4) * (1 + 7)"
    ]
  },
  "1 4 7 8": {
    "cards": "1 4 7 8",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "((7 - 4) * 1) * 8",
      "(7 - (4 / 1)) * 8",
      "(8 * 1) * (7 - 4)",
      "8 * ((1 * 7) - 4)",
      "1 * (8 * (7 - 4))",
      "8 * (7 - (1 * 4))",
      "8 * ((7 - 4) * 1)",
      "((8 * 4) - 7) - 1",
      "((4 * 8) - 7) - 1",
      "8 / (1 / (7 - 4))",
      "(7 - 1) * (8 - 4)",
      "(4 * (7 + 1)) - 8",
      "8 * ((7 / 1) - 4)",
      "(1 * 8) * (7 - 4)",
      "(8 - 4) * (7 - 1)",
      "8 * ((7 * 1) - 4)",
      "(8 * (7 - 4)) * 1",
      "8 * ((7 - 4) / 1)",
      "((1 * 7) - 4) * 8",
      "(4 * (1 + 7)) - 8",
      "8 * (7 - (4 / 1))",
      "((7 - 4) * 8) / 1",
      "((4 * 8) - 1) - 7",
      "(8 * (7 - 4)) / 1",
      "(1 * (7 - 4)) * 8",
      "(8 * 4) - (1 + 7)",
      "(1 - 7) * (4 - 8)",
      "((7 * 1) - 4) * 8",
      "(8 / 1) * (7 - 4)",
      "(7 - 4) / (1 / 8)",
      "(7 - 4) * (1 * 8)",
      "(4 * 8) - (1 + 7)",
      "8 * (1 * (7 - 4))",
      "(8 * 4) - (7 + 1)",
      "(7 - (4 * 1)) * 8",
      "((7 - 4) * 8) * 1",
      "(7 - 4) * (8 * 1)",
      "((7 / 1) - 4) * 8",
      "1 * ((7 - 4) * 8)",
      "((1 + 7) * 4) - 8",
      "(4 - 8) * (1 - 7)",
      "8 * (7 - (4 * 1))",
      "(7 - 4) * (8 / 1)",
      "((7 - 4) / 1) * 8",
      "((7 + 1) * 4) - 8",
      "(7 - (1 * 4)) * 8",
      "((8 * 4) - 1) - 7",
      "(4 * 8) - (7 + 1)"
    ]
  },
  "1 4 7 9": {
    "cards": "1 4 7 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(4 - 7) * (1 - 9)",
      "(7 - 4) * (9 - 1)",
      "(9 - 1) * (7 - 4)",
      "(1 - 9) * (4 - 7)"
    ]
  },
  "1 4 7 10": {
    "cards": "1 4 7 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 7 11": {
    "cards": "1 4 7 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 * (1 + 4)) - 11",
      "((4 + 1) * 7) - 11",
      "((1 + 4) * 7) - 11",
      "(7 * (4 + 1)) - 11"
    ]
  },
  "1 4 7 12": {
    "cards": "1 4 7 12",
    "has_solution": "Y",
    "num_solutions": 160,
    "solutions": [
      "((1 + 4) + 7) + 12",
      "12 / (4 / (7 + 1))",
      "1 + ((7 + 4) + 12)",
      "((1 + 7) + 4) + 12",
      "((1 + 7) / 4) * 12",
      "4 * ((12 + 1) - 7)",
      "12 * ((7 - 1) - 4)",
      "(7 + (1 + 12)) + 4",
      "4 * ((1 + 12) - 7)",
      "(7 + (12 + 4)) + 1",
      "((1 + 7) + 12) + 4",
      "12 + (1 + (4 + 7))",
      "((4 + 7) + 1) + 12",
      "12 * (7 - (1 + 4))",
      "(7 + 1) * (12 / 4)",
      "4 + ((1 + 7) + 12)",
      "(12 + (1 + 7)) + 4",
      "1 + (7 + (4 + 12))",
      "(4 + (12 + 7)) + 1",
      "((1 + 4) + 12) + 7",
      "7 + (4 + (1 + 12))",
      "(1 - (7 - 12)) * 4",
      "4 * ((12 - 7) + 1)",
      "4 + ((7 + 1) + 12)",
      "(7 - (4 + 1)) * 12",
      "(1 + (4 + 7)) + 12",
      "7 + ((1 + 4) + 12)",
      "((12 + 7) + 1) + 4",
      "4 + (1 + (7 + 12))",
      "(1 + (12 + 4)) + 7",
      "(7 + 12) + (4 + 1)",
      "((12 + 4) + 1) + 7",
      "(4 + 1) + (12 + 7)",
      "(12 + (7 + 1)) + 4",
      "((7 + 1) * 12) / 4",
      "7 + ((4 + 1) + 12)",
      "12 + ((1 + 4) + 7)",
      "((1 - 7) + 12) * 4",
      "(1 + (4 + 12)) + 7",
      "(7 + 1) / (4 / 12)",
      "(12 + (4 + 7)) + 1",
      "1 + ((12 + 4) + 7)",
      "12 + (7 + (4 + 1))",
      "((12 + 1) + 4) + 7",
      "7 + (4 + (12 + 1))",
      "(4 + 1) + (7 + 12)",
      "(12 * (1 + 7)) / 4",
      "(7 + (12 + 1)) + 4",
      "(1 + (12 - 7)) * 4",
      "((1 + 12) + 7) + 4",
      "((7 + 1) / 4) * 12",
      "((1 + 7) * 12) / 4",
      "(7 + 4) + (1 + 12)",
      "12 + ((4 + 1) + 7)",
      "((4 + 12) + 7) + 1",
      "7 + (1 + (12 + 4))",
      "(7 + 4) + (12 + 1)",
      "(12 * (7 + 1)) / 4",
      "(12 + 4) + (7 + 1)",
      "((12 + 1) - 7) * 4",
      "(4 + 12) + (7 + 1)",
      "(1 + (7 + 4)) + 12",
      "4 + ((1 + 12) + 7)",
      "1 + (4 + (7 + 12))",
      "7 + ((4 + 12) + 1)",
      "7 + ((1 + 12) + 4)",
      "4 * (1 + (12 - 7))",
      "7 + (1 + (4 + 12))",
      "((4 + 1) + 12) + 7",
      "(1 + 7) + (12 + 4)",
      "((4 + 12) + 1) + 7",
      "12 * ((7 - 4) - 1)",
      "(12 / 4) * (7 + 1)",
      "(4 + (7 + 12)) + 1",
      "12 / (4 / (1 + 7))",
      "4 + (7 + (1 + 12))",
      "(1 + 4) + (12 + 7)",
      "((12 + 4) + 7) + 1",
      "((7 + 4) + 1) + 12",
      "(4 + (1 + 7)) + 12",
      "1 + (12 + (7 + 4))",
      "((7 + 1) + 12) + 4",
      "4 + (1 + (12 + 7))",
      "1 + ((12 + 7) + 4)",
      "12 + (1 + (7 + 4))",
      "(7 + (1 + 4)) + 12",
      "((12 - 7) + 1) * 4",
      "(12 + (7 + 4)) + 1",
      "(7 + (4 + 12)) + 1",
      "((1 + 12) - 7) * 4",
      "((12 + 7) + 4) + 1",
      "1 + ((7 + 12) + 4)",
      "12 + ((4 + 7) + 1)",
      "12 + ((1 + 7) + 4)",
      "(1 + 12) + (7 + 4)",
      "((7 + 4) + 12) + 1",
      "1 + (7 + (12 + 4))",
      "1 + ((4 + 7) + 12)",
      "(1 + 4) + (7 + 12)",
      "(12 + 4) + (1 + 7)",
      "((7 + 12) + 4) + 1",
      "1 + (12 + (4 + 7))",
      "(4 + (7 + 1)) + 12",
      "4 + (12 + (7 + 1))",
      "12 * (7 - (4 + 1))",
      "(1 + 7) + (4 + 12)",
      "12 * ((7 + 1) / 4)",
      "12 + (4 + (7 + 1))",
      "((7 + 1) + 4) + 12",
      "4 * (1 - (7 - 12))",
      "(1 + (7 + 12)) + 4",
      "(7 + (4 + 1)) + 12",
      "(12 + (4 + 1)) + 7",
      "(4 + 7) + (1 + 12)",
      "4 * ((1 - 7) + 12)",
      "(7 + 1) + (12 + 4)",
      "4 + (12 + (1 + 7))",
      "7 + (12 + (1 + 4))",
      "((7 + 12) + 1) + 4",
      "(1 + 12) + (4 + 7)",
      "((4 + 1) + 7) + 12",
      "(4 + 12) + (1 + 7)",
      "(12 + (1 - 7)) * 4",
      "(4 + 7) + (12 + 1)",
      "(12 / 4) * (1 + 7)",
      "((12 + 1) + 7) + 4",
      "1 + ((4 + 12) + 7)",
      "4 + (7 + (12 + 1))",
      "12 + ((7 + 1) + 4)",
      "1 + (4 + (12 + 7))",
      "4 * (12 - (7 - 1))",
      "(7 + 1) + (4 + 12)",
      "((4 + 7) + 12) + 1",
      "4 + ((12 + 7) + 1)",
      "(7 - (1 + 4)) * 12",
      "7 + ((12 + 4) + 1)",
      "(12 + 7) + (1 + 4)",
      "12 + (7 + (1 + 4))",
      "4 + ((7 + 12) + 1)",
      "(12 + 7) + (4 + 1)",
      "(1 + (12 + 7)) + 4",
      "(4 + (12 + 1)) + 7",
      "7 + ((12 + 1) + 4)",
      "12 + (4 + (1 + 7))",
      "(12 + 1) + (4 + 7)",
      "((1 + 12) + 4) + 7",
      "(12 + (1 + 4)) + 7",
      "(1 + 7) / (4 / 12)",
      "(4 + (1 + 12)) + 7",
      "4 + ((12 + 1) + 7)",
      "((7 - 1) - 4) * 12",
      "(1 + 7) * (12 / 4)",
      "12 * ((1 + 7) / 4)",
      "(12 + 1) + (7 + 4)",
      "7 + (12 + (4 + 1))",
      "4 * (12 + (1 - 7))",
      "((7 - 4) - 1) * 12",
      "12 + ((7 + 4) + 1)",
      "(7 + 12) + (1 + 4)",
      "(12 - (7 - 1)) * 4"
    ]
  },
  "1 4 7 13": {
    "cards": "1 4 7 13",
    "has_solution": "Y",
    "num_solutions": 212,
    "solutions": [
      "7 + ((13 + 4) / 1)",
      "(4 * 1) + (13 + 7)",
      "7 + (13 + (4 / 1))",
      "4 + (13 + (7 * 1))",
      "((4 / 1) + 13) + 7",
      "7 + ((13 * 1) + 4)",
      "(7 + (4 / 1)) + 13",
      "4 + ((13 * 1) + 7)",
      "4 * ((13 - 7) / 1)",
      "((7 * 1) + 4) + 13",
      "((13 - 7) * 4) * 1",
      "((7 * 1) + 13) + 4",
      "(7 + 4) + (13 / 1)",
      "((7 + 13) * 1) + 4",
      "1 * ((7 + 13) + 4)",
      "1 * ((13 + 4) + 7)",
      "(13 * 1) + (4 + 7)",
      "((7 / 1) + 13) + 4",
      "((13 + 4) + 7) * 1",
      "((4 + 13) + 7) * 1",
      "4 + (1 * (7 + 13))",
      "(13 + (4 * 1)) + 7",
      "7 + (4 + (1 * 13))",
      "(1 * 4) * (13 - 7)",
      "((1 * 4) + 7) + 13",
      "((4 + 13) * 1) + 7",
      "1 * (4 + (7 + 13))",
      "(1 * 4) + (13 + 7)",
      "(1 * 7) + (13 + 4)",
      "1 * (4 + (13 + 7))",
      "7 + ((4 / 1) + 13)",
      "4 + ((7 + 13) * 1)",
      "7 + ((4 + 13) / 1)",
      "7 + ((13 + 4) * 1)",
      "(1 * 13) + (4 + 7)",
      "4 + (7 + (13 / 1))",
      "(13 + (4 + 7)) / 1",
      "(1 * (13 + 7)) + 4",
      "13 + ((7 * 1) + 4)",
      "(13 + 7) + (1 * 4)",
      "1 * ((4 + 13) + 7)",
      "((13 + 4) * 1) + 7",
      "4 + ((7 * 1) + 13)",
      "((7 + 13) + 4) * 1",
      "(7 + 13) + (4 / 1)",
      "((7 + 4) / 1) + 13",
      "13 + ((7 + 4) / 1)",
      "((1 * 13) + 7) + 4",
      "(13 - (7 / 1)) * 4",
      "(13 / 1) + (7 + 4)",
      "4 * ((13 / 1) - 7)",
      "((13 / 1) + 7) + 4",
      "(4 / 1) + (13 + 7)",
      "(7 + (13 * 1)) + 4",
      "(4 + 7) + (13 * 1)",
      "((4 + 13) + 7) / 1",
      "(4 / 1) * (13 - 7)",
      "(13 + (7 / 1)) + 4",
      "13 + ((4 + 7) / 1)",
      "(4 + (13 + 7)) / 1",
      "4 + ((1 * 7) + 13)",
      "7 + (4 + (13 / 1))",
      "(4 + 7) + (1 * 13)",
      "(4 * 1) * (13 - 7)",
      "4 * (1 * (13 - 7))",
      "7 + ((1 * 4) + 13)",
      "(4 + (7 * 1)) + 13",
      "4 * ((13 * 1) - 7)",
      "((7 + 4) * 1) + 13",
      "((13 / 1) + 4) + 7",
      "(13 + (1 * 4)) + 7",
      "4 / (1 / (13 - 7))",
      "13 + (4 + (1 * 7))",
      "((7 + 13) + 4) / 1",
      "4 + (1 * (13 + 7))",
      "(7 / 1) + (13 + 4)",
      "((13 * 1) - 7) * 4",
      "((13 + 7) * 1) + 4",
      "4 + (13 + (7 / 1))",
      "(4 * (13 - 7)) / 1",
      "(1 * (4 + 13)) + 7",
      "4 + ((7 + 13) / 1)",
      "(7 + (1 * 13)) + 4",
      "((1 * 13) - 7) * 4",
      "1 * ((7 + 4) + 13)",
      "7 + (4 + (13 * 1))",
      "(13 + 4) + (1 * 7)",
      "((7 / 1) + 4) + 13",
      "(13 + 7) + (4 / 1)",
      "((1 * 4) + 13) + 7",
      "7 + (1 * (4 + 13))",
      "((13 + 4) / 1) + 7",
      "(13 - (7 * 1)) * 4",
      "13 + ((4 + 7) * 1)",
      "7 + (1 * (13 + 4))",
      "((7 + 4) + 13) / 1",
      "(7 + 13) + (1 * 4)",
      "4 + ((1 * 13) + 7)",
      "13 + ((7 / 1) + 4)",
      "(1 * (7 + 4)) + 13",
      "(13 + 7) + (4 * 1)",
      "13 + (1 * (4 + 7))",
      "13 + ((7 + 4) * 1)",
      "((4 + 7) * 1) + 13",
      "(4 * 1) + (7 + 13)",
      "13 + (1 * (7 + 4))",
      "(13 - 7) * (4 * 1)",
      "13 + (4 + (7 / 1))",
      "13 + (7 + (1 * 4))",
      "((7 + 4) + 13) * 1",
      "(7 + 4) + (13 * 1)",
      "4 * ((1 * 13) - 7)",
      "((13 - 7) * 4) / 1",
      "1 * ((13 - 7) * 4)",
      "(7 * 1) + (4 + 13)",
      "(1 * 4) + (7 + 13)",
      "((4 + 7) + 13) * 1",
      "(4 + (7 + 13)) / 1",
      "(13 + (7 * 1)) + 4",
      "4 + (13 + (1 * 7))",
      "7 + ((1 * 13) + 4)",
      "(13 + 4) + (7 / 1)",
      "4 * (13 - (7 * 1))",
      "4 + ((13 / 1) + 7)",
      "(1 * 7) + (4 + 13)",
      "1 * ((13 + 7) + 4)",
      "1 * ((4 + 7) + 13)",
      "13 + ((4 / 1) + 7)",
      "(7 + (1 * 4)) + 13",
      "(13 - 7) * (1 * 4)",
      "(7 * 1) + (13 + 4)",
      "(1 * (4 + 7)) + 13",
      "4 + (7 + (1 * 13))",
      "7 + ((13 / 1) + 4)",
      "(13 - (1 * 7)) * 4",
      "(13 - 7) / (1 / 4)",
      "(1 * (7 + 13)) + 4",
      "(13 + 4) + (7 * 1)",
      "((4 * 1) + 13) + 7",
      "(7 + 13) + (4 * 1)",
      "((4 + 7) / 1) + 13",
      "(7 + 4) + (1 * 13)",
      "(13 + (7 + 4)) / 1",
      "((13 * 1) + 7) + 4",
      "1 * (7 + (13 + 4))",
      "(13 / 1) + (4 + 7)",
      "(7 / 1) + (4 + 13)",
      "(4 + (7 + 13)) * 1",
      "(7 + (13 + 4)) * 1",
      "1 * (13 + (4 + 7))",
      "((4 + 13) / 1) + 7",
      "(4 + 13) + (7 * 1)",
      "13 + (7 + (4 / 1))",
      "(4 / 1) + (7 + 13)",
      "(4 * (13 - 7)) * 1",
      "1 * (7 + (4 + 13))",
      "(13 + (1 * 7)) + 4",
      "(4 + (13 + 7)) * 1",
      "1 * (13 + (7 + 4))",
      "7 + ((4 + 13) * 1)",
      "4 + ((13 + 7) / 1)",
      "(7 + (13 / 1)) + 4",
      "(4 + (7 / 1)) + 13",
      "(4 + 13) + (1 * 7)",
      "13 + (7 + (4 * 1))",
      "((13 * 1) + 4) + 7",
      "7 + (13 + (1 * 4))",
      "((1 * 7) + 13) + 4",
      "(7 + (4 + 13)) / 1",
      "4 + ((13 + 7) * 1)",
      "7 + ((4 * 1) + 13)",
      "(13 + (4 + 7)) * 1",
      "13 + ((1 * 4) + 7)",
      "(4 + (1 * 7)) + 13",
      "(13 + (7 + 4)) * 1",
      "(7 + (4 * 1)) + 13",
      "((13 + 7) / 1) + 4",
      "((13 - 7) / 1) * 4",
      "1 * (4 * (13 - 7))",
      "4 * (13 - (1 * 7))",
      "(7 + (4 + 13)) * 1",
      "((13 + 7) + 4) * 1",
      "(4 + 13) + (7 / 1)",
      "((13 + 4) + 7) / 1",
      "((4 + 7) + 13) / 1",
      "((13 - 7) * 1) * 4",
      "4 + ((7 / 1) + 13)",
      "13 + (4 + (7 * 1))",
      "(4 + (13 * 1)) + 7",
      "4 + (7 + (13 * 1))",
      "((1 * 7) + 4) + 13",
      "((4 * 1) + 7) + 13",
      "(1 * (13 + 4)) + 7",
      "(7 + (13 + 4)) / 1",
      "(4 + 7) + (13 / 1)",
      "7 + (13 + (4 * 1))",
      "(13 + (4 / 1)) + 7",
      "(13 * 1) + (7 + 4)",
      "4 * (13 - (7 / 1))",
      "4 * ((13 - 7) * 1)",
      "(13 - 7) * (4 / 1)",
      "((4 / 1) + 7) + 13",
      "((1 * 13) + 4) + 7",
      "13 + ((4 * 1) + 7)",
      "((13 + 7) + 4) / 1",
      "((7 + 13) / 1) + 4",
      "(4 + (1 * 13)) + 7",
      "13 + ((1 * 7) + 4)",
      "(1 * (13 - 7)) * 4",
      "((13 / 1) - 7) * 4",
      "(4 + (13 / 1)) + 7",
      "(1 * 13) + (7 + 4)"
    ]
  },
  "1 4 8 8": {
    "cards": "1 4 8 8",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "((8 / 1) * 4) - 8",
      "(8 * 4) - (8 / 1)",
      "(4 * 8) - (8 / 1)",
      "((4 * 8) / 1) - 8",
      "((4 * 8) * 1) - 8",
      "(8 * (4 / 1)) - 8",
      "((8 * 4) / 1) - 8",
      "8 * ((8 - 4) - 1)",
      "((8 * 4) - 8) / 1",
      "8 * (8 - (1 + 4))",
      "8 * (1 + (8 / 4))",
      "(1 * (8 * 4)) - 8",
      "(4 * (8 * 1)) - 8",
      "(4 * 8) - (1 * 8)",
      "(8 * 4) - (8 * 1)",
      "(4 / (1 / 8)) - 8",
      "8 * ((8 / 4) + 1)",
      "8 * (8 - (4 + 1))",
      "(8 * (1 * 4)) - 8",
      "((4 / 1) * 8) - 8",
      "((4 * 8) - 8) * 1",
      "(8 - (1 + 4)) * 8",
      "((1 * 4) * 8) - 8",
      "((8 * 1) * 4) - 8",
      "((8 / 4) + 1) * 8",
      "(8 * (4 * 1)) - 8",
      "((4 * 8) - 8) / 1",
      "((8 * 4) * 1) - 8",
      "((1 * 8) * 4) - 8",
      "((8 * 4) - 8) * 1",
      "(4 * (1 * 8)) - 8",
      "(8 * 4) - (1 * 8)",
      "((4 * 1) * 8) - 8",
      "8 * ((8 - 1) - 4)",
      "1 * ((4 * 8) - 8)",
      "(4 * 8) - (8 * 1)",
      "((8 - 1) - 4) * 8",
      "(8 / (1 / 4)) - 8",
      "(1 + (8 / 4)) * 8",
      "1 * ((8 * 4) - 8)",
      "(8 - (4 + 1)) * 8",
      "((8 - 4) - 1) * 8",
      "(4 * (8 / 1)) - 8",
      "(1 * (4 * 8)) - 8"
    ]
  },
  "1 4 8 9": {
    "cards": "1 4 8 9",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "8 / ((4 - 1) / 9)",
      "((4 * 8) - 9) + 1",
      "8 * (9 / (4 - 1))",
      "(4 * (9 - 1)) - 8",
      "9 * (8 / (4 - 1))",
      "1 + ((4 * 8) - 9)",
      "((4 * 8) + 1) - 9",
      "(1 - 9) + (8 * 4)",
      "1 - (9 - (8 * 4))",
      "(4 * 8) - (9 - 1)",
      "(1 + (4 * 8)) - 9",
      "(9 / (4 - 1)) * 8",
      "(1 + (8 * 4)) - 9",
      "(8 * 9) / (4 - 1)",
      "(8 / (4 - 1)) * 9",
      "((8 * 4) - 9) + 1",
      "(8 * 4) + (1 - 9)",
      "1 + ((8 * 4) - 9)",
      "((8 * 4) + 1) - 9",
      "(4 * 8) + (1 - 9)",
      "9 / ((4 - 1) / 8)",
      "(8 * 4) - (9 - 1)",
      "((9 - 1) * 4) - 8",
      "(1 - 9) + (4 * 8)",
      "1 - (9 - (4 * 8))",
      "(9 * 8) / (4 - 1)"
    ]
  },
  "1 4 8 10": {
    "cards": "1 4 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 8 11": {
    "cards": "1 4 8 11",
    "has_solution": "Y",
    "num_solutions": 136,
    "solutions": [
      "11 + ((4 + 8) + 1)",
      "(8 / 4) * (1 + 11)",
      "11 + ((4 + 1) + 8)",
      "(8 + 1) + (4 + 11)",
      "(1 + 11) + (4 + 8)",
      "(4 + (11 + 8)) + 1",
      "4 + (1 + (11 + 8))",
      "(8 + 11) + (4 + 1)",
      "11 + ((1 + 4) + 8)",
      "(8 + (4 + 11)) + 1",
      "(1 + 8) + (4 + 11)",
      "1 + ((11 + 4) + 8)",
      "((1 + 4) + 11) + 8",
      "11 + ((8 + 1) + 4)",
      "(11 + 4) + (1 + 8)",
      "((8 + 4) + 11) + 1",
      "4 + (11 + (1 + 8))",
      "8 + (4 + (1 + 11))",
      "11 + (1 + (4 + 8))",
      "11 + (1 + (8 + 4))",
      "4 + (1 + (8 + 11))",
      "(4 + 8) + (1 + 11)",
      "1 + ((4 + 11) + 8)",
      "((1 + 11) + 4) + 8",
      "4 + ((11 + 1) + 8)",
      "(4 + 11) + (1 + 8)",
      "(8 + (11 + 4)) + 1",
      "(8 * (11 + 1)) / 4",
      "((8 + 11) + 1) + 4",
      "4 + (8 + (1 + 11))",
      "8 + ((1 + 11) + 4)",
      "((1 + 11) + 8) + 4",
      "(1 + (11 + 8)) + 4",
      "(8 * (1 + 11)) / 4",
      "((11 + 1) + 4) + 8",
      "(1 + (11 + 4)) + 8",
      "(11 + 1) + (4 + 8)",
      "(1 + 4) + (8 + 11)",
      "(11 + (8 + 4)) + 1",
      "((4 + 8) + 11) + 1",
      "(4 + (11 + 1)) + 8",
      "((4 + 8) + 1) + 11",
      "(8 + 1) + (11 + 4)",
      "((11 + 1) / 4) * 8",
      "11 + (4 + (1 + 8))",
      "(4 + 8) + (11 + 1)",
      "((1 + 8) + 11) + 4",
      "8 + ((11 + 4) + 1)",
      "((4 + 11) + 1) + 8",
      "(8 + (1 + 11)) + 4",
      "(8 / 4) * (11 + 1)",
      "(8 + 4) + (11 + 1)",
      "(4 + (1 + 8)) + 11",
      "8 + (11 + (1 + 4))",
      "((8 + 11) + 4) + 1",
      "1 + (4 + (11 + 8))",
      "8 + (1 + (4 + 11))",
      "(4 + (8 + 11)) + 1",
      "11 + ((8 + 4) + 1)",
      "1 + (8 + (4 + 11))",
      "4 + ((1 + 11) + 8)",
      "((1 + 11) * 8) / 4",
      "8 + ((4 + 11) + 1)",
      "(1 + 11) + (8 + 4)",
      "((1 + 4) + 8) + 11",
      "(1 + 4) + (11 + 8)",
      "(1 + (8 + 11)) + 4",
      "((4 + 1) + 8) + 11",
      "(11 + (4 + 1)) + 8",
      "(11 + 1) / (4 / 8)",
      "(1 + (4 + 8)) + 11",
      "(1 + 11) * (8 / 4)",
      "(8 + (1 + 4)) + 11",
      "8 + (11 + (4 + 1))",
      "4 + ((8 + 1) + 11)",
      "((8 + 4) + 1) + 11",
      "((4 + 1) + 11) + 8",
      "((1 + 8) + 4) + 11",
      "(4 + 1) + (11 + 8)",
      "(1 + 8) + (11 + 4)",
      "((11 + 1) + 8) + 4",
      "(11 + 4) + (8 + 1)",
      "8 / (4 / (11 + 1))",
      "8 / (4 / (1 + 11))",
      "((11 + 4) + 8) + 1",
      "1 + (4 + (8 + 11))",
      "11 + (8 + (1 + 4))",
      "(11 + 1) + (8 + 4)",
      "(1 + (4 + 11)) + 8",
      "((11 + 8) + 4) + 1",
      "(11 + (4 + 8)) + 1",
      "4 + (11 + (8 + 1))",
      "8 * ((1 + 11) / 4)",
      "(4 + (1 + 11)) + 8",
      "4 + ((1 + 8) + 11)",
      "8 + (4 + (11 + 1))",
      "1 + ((11 + 8) + 4)",
      "1 + (11 + (8 + 4))",
      "((11 + 4) + 1) + 8",
      "(4 + (8 + 1)) + 11",
      "((11 + 8) + 1) + 4",
      "8 + ((4 + 1) + 11)",
      "(1 + 11) / (4 / 8)",
      "1 + ((4 + 8) + 11)",
      "(8 + (4 + 1)) + 11",
      "1 + (8 + (11 + 4))",
      "((1 + 11) / 4) * 8",
      "(4 + 1) + (8 + 11)",
      "4 + ((8 + 11) + 1)",
      "8 + ((1 + 4) + 11)",
      "(11 + 8) + (4 + 1)",
      "(11 + 8) + (1 + 4)",
      "(11 + 1) * (8 / 4)",
      "4 + (8 + (11 + 1))",
      "4 + ((11 + 8) + 1)",
      "(8 + (11 + 1)) + 4",
      "(8 + 4) + (1 + 11)",
      "8 + (1 + (11 + 4))",
      "((11 + 1) * 8) / 4",
      "((8 + 1) + 11) + 4",
      "8 + ((11 + 1) + 4)",
      "(8 + 11) + (1 + 4)",
      "((8 + 1) + 4) + 11",
      "(11 + (1 + 8)) + 4",
      "(4 + 11) + (8 + 1)",
      "8 * ((11 + 1) / 4)",
      "11 + ((1 + 8) + 4)",
      "11 + (4 + (8 + 1))",
      "1 + (11 + (4 + 8))",
      "((4 + 11) + 8) + 1",
      "(11 + (8 + 1)) + 4",
      "(11 + (1 + 4)) + 8",
      "(1 + (8 + 4)) + 11",
      "1 + ((8 + 4) + 11)",
      "11 + (8 + (4 + 1))",
      "1 + ((8 + 11) + 4)"
    ]
  },
  "1 4 8 12": {
    "cards": "1 4 8 12",
    "has_solution": "Y",
    "num_solutions": 335,
    "solutions": [
      "(1 * (8 * 12)) / 4",
      "(12 + (4 + 8)) / 1",
      "(8 * 1) + (4 + 12)",
      "8 * (12 / (4 / 1))",
      "4 + (12 + (8 / 1))",
      "12 + ((1 * 4) + 8)",
      "(8 + 4) + (12 * 1)",
      "(12 * (1 / 4)) * 8",
      "8 / (4 / (12 / 1))",
      "8 * (12 * (1 / 4))",
      "1 * ((8 * 12) / 4)",
      "12 * ((1 * 8) / 4)",
      "1 * (4 + (12 + 8))",
      "((12 / 1) / 4) * 8",
      "((4 + 12) + 8) / 1",
      "(12 / 4) / (1 / 8)",
      "(4 + 12) + (8 / 1)",
      "12 / ((1 * 4) / 8)",
      "(4 + 12) + (8 * 1)",
      "8 * ((12 / 1) / 4)",
      "(1 * (12 * 8)) / 4",
      "8 + (12 + (4 * 1))",
      "(1 * (8 / 4)) * 12",
      "((8 * 1) * 12) / 4",
      "((1 * 12) * 8) / 4",
      "(1 * (12 + 8)) + 4",
      "((12 / 1) * 8) / 4",
      "(4 + (12 / 1)) + 8",
      "12 * ((8 * 1) / 4)",
      "1 * ((12 / 4) * 8)",
      "(1 / (4 / 8)) * 12",
      "((12 + 4) + 8) / 1",
      "1 * (12 + (4 + 8))",
      "(12 + (8 / 1)) + 4",
      "(4 * 1) + (12 + 8)",
      "((4 + 8) / 1) + 12",
      "((4 + 8) + 12) * 1",
      "(8 + 4) + (12 / 1)",
      "(12 / (1 * 4)) * 8",
      "(8 + 12) + (4 * 1)",
      "8 + ((4 + 12) / 1)",
      "1 * ((4 + 8) + 12)",
      "(12 / 4) * (1 * 8)",
      "(4 + (8 + 12)) / 1",
      "(8 / (1 / 12)) / 4",
      "4 + ((12 + 8) * 1)",
      "(12 / 4) * (8 * 1)",
      "((8 + 12) + 4) / 1",
      "4 + (8 + (1 * 12))",
      "(12 / 1) + (4 + 8)",
      "(12 + (8 + 4)) * 1",
      "4 + ((1 * 8) + 12)",
      "((12 + 8) + 4) / 1",
      "8 + ((12 * 1) + 4)",
      "(1 * 8) + (4 + 12)",
      "((12 / 1) + 4) + 8",
      "8 + ((4 * 1) + 12)",
      "(8 / 4) / (1 / 12)",
      "12 * ((1 / 4) * 8)",
      "(1 * 12) * (8 / 4)",
      "((8 * 1) / 4) * 12",
      "(1 * (12 / 4)) * 8",
      "(12 * 1) * (8 / 4)",
      "12 / ((4 / 8) * 1)",
      "(1 / 4) * (12 * 8)",
      "(12 + 4) + (1 * 8)",
      "12 / ((1 / 8) * 4)",
      "(8 + (4 + 12)) / 1",
      "12 * ((8 / 4) / 1)",
      "12 + ((8 / 1) + 4)",
      "1 * (4 + (8 + 12))",
      "4 + ((8 + 12) / 1)",
      "4 + ((12 / 1) + 8)",
      "(8 * 1) / (4 / 12)",
      "(8 * (12 / 4)) / 1",
      "12 + ((4 + 8) / 1)",
      "12 + ((8 * 1) + 4)",
      "((8 / 1) + 12) + 4",
      "12 + (4 + (8 * 1))",
      "(1 * (12 + 4)) + 8",
      "((4 + 12) / 1) + 8",
      "(12 + (4 + 8)) * 1",
      "((4 / 1) + 8) + 12",
      "1 * (8 + (4 + 12))",
      "(8 * (1 / 4)) * 12",
      "8 / (4 * (1 / 12))",
      "8 * (1 * (12 / 4))",
      "1 * ((8 / 4) * 12)",
      "12 * (8 / (4 * 1))",
      "(4 + (1 * 8)) + 12",
      "8 / ((4 * 1) / 12)",
      "12 / (4 / (8 * 1))",
      "(8 + (12 / 1)) + 4",
      "12 + (1 * (4 + 8))",
      "12 + ((8 + 4) / 1)",
      "(12 * (8 / 4)) * 1",
      "(8 * (12 / 4)) * 1",
      "8 / ((4 / 12) / 1)",
      "8 / ((1 * 4) / 12)",
      "(8 * 12) / (1 * 4)",
      "(12 / (4 / 8)) * 1",
      "(8 * 12) / (4 / 1)",
      "12 + ((4 / 1) + 8)",
      "(12 * 8) / (4 * 1)",
      "1 * (8 * (12 / 4))",
      "1 * (12 / (4 / 8))",
      "((8 / 4) * 1) * 12",
      "12 + ((1 * 8) + 4)",
      "12 + (8 + (4 / 1))",
      "1 * ((4 + 12) + 8)",
      "(8 / (4 / 12)) * 1",
      "1 * (8 + (12 + 4))",
      "(8 / 4) * (12 * 1)",
      "8 + (4 + (12 * 1))",
      "(1 * 12) / (4 / 8)",
      "(12 * (8 / 1)) / 4",
      "1 * ((12 + 8) + 4)",
      "(1 * 4) + (12 + 8)",
      "(12 + (8 + 4)) / 1",
      "8 + ((4 / 1) + 12)",
      "12 / (1 - (4 / 8))",
      "((12 * 8) * 1) / 4",
      "(12 * (8 / 4)) / 1",
      "((12 / 4) * 8) / 1",
      "1 / (4 / (8 * 12))",
      "(8 / 1) + (4 + 12)",
      "(4 + (8 + 12)) * 1",
      "1 / (4 / (12 * 8))",
      "(4 / 1) + (12 + 8)",
      "((8 + 4) + 12) / 1",
      "((1 * 8) + 4) + 12",
      "(8 * (12 * 1)) / 4",
      "(12 * 8) / (4 / 1)",
      "12 / (4 * (1 / 8))",
      "((8 + 4) + 12) * 1",
      "(8 + 4) + (1 * 12)",
      "(8 / (4 * 1)) * 12",
      "12 * (1 / (4 / 8))",
      "(8 + (12 + 4)) * 1",
      "8 / ((4 / 1) / 12)",
      "(12 / (4 / 1)) * 8",
      "8 * ((12 / 4) * 1)",
      "(1 * (4 + 8)) + 12",
      "8 / (1 * (4 / 12))",
      "(12 + 8) + (1 * 4)",
      "(8 / 1) * (12 / 4)",
      "8 * ((1 * 12) / 4)",
      "1 * ((8 + 4) + 12)",
      "((12 * 1) + 8) + 4",
      "(4 / 1) + (8 + 12)",
      "(12 * 8) * (1 / 4)",
      "1 * (8 / (4 / 12))",
      "8 + (1 * (4 + 12))",
      "1 / ((4 / 8) / 12)",
      "(1 * 12) + (8 + 4)",
      "8 + (12 + (1 * 4))",
      "((8 + 1) * 4) - 12",
      "12 * ((8 / 1) / 4)",
      "1 * ((8 + 12) + 4)",
      "4 + ((12 * 1) + 8)",
      "1 * (12 + (8 + 4))",
      "((8 / 1) * 12) / 4",
      "8 + ((12 + 4) / 1)",
      "(1 * 4) + (8 + 12)",
      "12 + (4 + (8 / 1))",
      "(8 * (1 * 12)) / 4",
      "4 + ((8 + 12) * 1)",
      "12 * (8 * (1 / 4))",
      "12 + ((4 + 8) * 1)",
      "((12 / 4) * 8) * 1",
      "8 * ((12 * 1) / 4)",
      "12 + (8 + (1 * 4))",
      "((8 + 4) * 1) + 12",
      "12 / (4 / (8 / 1))",
      "4 + (12 + (1 * 8))",
      "8 + ((12 + 4) * 1)",
      "4 + ((8 * 1) + 12)",
      "4 + (12 + (8 * 1))",
      "(12 + (4 / 1)) + 8",
      "((1 * 8) / 4) * 12",
      "((8 / 1) + 4) + 12",
      "12 + (4 + (1 * 8))",
      "((8 * 1) + 4) + 12",
      "((8 / 4) * 12) * 1",
      "(12 * (1 * 8)) / 4",
      "(1 * 12) + (4 + 8)",
      "((12 + 8) + 4) * 1",
      "((1 * 8) * 12) / 4",
      "((1 + 8) * 4) - 12",
      "(12 / 1) * (8 / 4)",
      "((12 / 4) * 1) * 8",
      "((12 + 8) / 1) + 4",
      "(12 + (8 * 1)) + 4",
      "(4 + (12 + 8)) / 1",
      "(12 / 4) * (8 / 1)",
      "(12 / 1) + (8 + 4)",
      "((12 / 4) / 1) * 8",
      "(12 / 1) / (4 / 8)",
      "8 / (1 / (12 / 4))",
      "12 + ((4 * 1) + 8)",
      "(12 + (1 * 8)) + 4",
      "((1 * 12) + 4) + 8",
      "(8 / (1 * 4)) * 12",
      "(8 * (12 / 1)) / 4",
      "(12 + 8) + (4 * 1)",
      "(8 / (4 / 12)) / 1",
      "(4 + 8) + (12 / 1)",
      "(12 * (8 * 1)) / 4",
      "8 * ((12 / 4) / 1)",
      "((4 + 12) + 8) * 1",
      "8 + (12 + (4 / 1))",
      "(1 * (8 + 12)) + 4",
      "((12 * 1) / 4) * 8",
      "8 + ((4 + 12) * 1)",
      "12 * ((8 / 4) * 1)",
      "(12 + 4) + (8 * 1)",
      "(4 + 8) + (12 * 1)",
      "(12 / (1 / 8)) / 4",
      "1 * (12 * (8 / 4))",
      "((8 / 1) / 4) * 12",
      "(4 + (12 + 8)) * 1",
      "((12 * 1) + 4) + 8",
      "(8 + 12) + (4 / 1)",
      "(12 + (4 * 1)) + 8",
      "4 + (1 * (12 + 8))",
      "4 + ((8 / 1) + 12)",
      "(8 / 4) * (12 / 1)",
      "((8 * 12) * 1) / 4",
      "((8 * 1) + 12) + 4",
      "8 / (4 / (12 * 1))",
      "12 / (4 / (1 * 8))",
      "8 / (4 / (1 * 12))",
      "((8 + 12) + 4) * 1",
      "((12 + 4) + 8) * 1",
      "12 + ((8 + 4) * 1)",
      "((4 + 8) + 12) / 1",
      "(8 * 1) + (12 + 4)",
      "(12 * 1) + (8 + 4)",
      "(12 + 8) + (4 / 1)",
      "((12 + 4) / 1) + 8",
      "8 + ((1 * 12) + 4)",
      "(8 * 1) * (12 / 4)",
      "(8 + (4 * 1)) + 12",
      "8 + ((1 * 4) + 12)",
      "((12 + 8) * 1) + 4",
      "((1 * 12) + 8) + 4",
      "12 / (1 / (8 / 4))",
      "((8 / 4) / 1) * 12",
      "(8 + (1 * 4)) + 12",
      "(8 / 1) + (12 + 4)",
      "(4 + (12 * 1)) + 8",
      "((8 / 4) * 12) / 1",
      "(8 + (12 * 1)) + 4",
      "(4 * 1) + (8 + 12)",
      "12 / ((4 / 1) / 8)",
      "((12 * 1) * 8) / 4",
      "((1 * 12) / 4) * 8",
      "8 * ((1 / 4) * 12)",
      "((4 * 1) + 12) + 8",
      "8 + (1 * (12 + 4))",
      "((8 * 12) / 4) / 1",
      "((4 + 8) * 1) + 12",
      "(8 / (4 / 1)) * 12",
      "8 + (4 + (1 * 12))",
      "((8 + 12) / 1) + 4",
      "8 / ((4 / 12) * 1)",
      "(1 * (8 + 4)) + 12",
      "12 / ((4 / 8) / 1)",
      "(12 * 1) / (4 / 8)",
      "12 * (8 / (1 * 4))",
      "1 / ((4 / 12) / 8)",
      "(12 + 4) + (8 / 1)",
      "(1 / (4 / 12)) * 8",
      "8 + ((12 / 1) + 4)",
      "(8 / 4) * (1 * 12)",
      "8 / ((1 / 12) * 4)",
      "4 + ((1 * 12) + 8)",
      "(1 / 4) * (8 * 12)",
      "(8 + 12) + (1 * 4)",
      "(4 * (8 + 1)) - 12",
      "4 + (8 + (12 * 1))",
      "12 + (1 * (8 + 4))",
      "1 * ((12 * 8) / 4)",
      "(12 * 8) / (1 * 4)",
      "(1 * 8) + (12 + 4)",
      "(4 + (8 * 1)) + 12",
      "(4 * (1 + 8)) - 12",
      "(8 / 1) / (4 / 12)",
      "4 + (8 + (12 / 1))",
      "8 + (4 + (12 / 1))",
      "12 * (8 / (4 / 1))",
      "(12 + (1 * 4)) + 8",
      "8 * (12 / (4 * 1))",
      "((12 / 1) + 8) + 4",
      "((4 / 1) + 12) + 8",
      "12 + (8 + (4 * 1))",
      "(8 + (4 + 12)) * 1",
      "((4 + 12) * 1) + 8",
      "((12 * 8) / 1) / 4",
      "(1 * 8) * (12 / 4)",
      "(8 + (12 + 4)) / 1",
      "(1 * 8) / (4 / 12)",
      "(8 * 12) / (4 * 1)",
      "((12 + 4) * 1) + 8",
      "8 * (12 / (1 * 4))",
      "4 + ((12 + 8) / 1)",
      "((12 * 8) / 4) / 1",
      "((8 * 12) / 1) / 4",
      "(12 * 1) + (4 + 8)",
      "(12 / (4 / 8)) / 1",
      "((1 * 8) + 12) + 4",
      "((1 / 4) * 8) * 12",
      "(4 + (1 * 12)) + 8",
      "(8 + (4 / 1)) + 12",
      "(8 * 12) * (1 / 4)",
      "((1 / 4) * 12) * 8",
      "((8 + 4) / 1) + 12",
      "1 * ((12 + 4) + 8)",
      "((8 + 12) * 1) + 4",
      "((1 * 4) + 12) + 8",
      "4 + (1 * (8 + 12))",
      "12 / ((4 * 1) / 8)",
      "(8 + (1 * 12)) + 4",
      "(4 + (8 / 1)) + 12",
      "12 * (1 * (8 / 4))",
      "((4 * 1) + 8) + 12",
      "(1 * (4 + 12)) + 8",
      "(4 + 8) + (1 * 12)",
      "12 / (1 * (4 / 8))",
      "((8 * 12) / 4) * 1",
      "((1 * 4) + 8) + 12",
      "(4 + 12) + (1 * 8)",
      "(12 / (4 * 1)) * 8",
      "8 * (1 / (4 / 12))",
      "((12 * 8) / 4) * 1"
    ]
  },
  "1 4 8 13": {
    "cards": "1 4 8 13",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "4 + ((13 + 8) - 1)",
      "((13 + 1) - 8) * 4",
      "13 + (4 - (1 - 8))",
      "((13 - 1) / 4) * 8",
      "(4 + 8) - (1 - 13)",
      "(4 + 13) - (1 - 8)",
      "4 * (1 + (13 - 8))",
      "(4 - 1) + (13 + 8)",
      "(13 - (1 - 4)) + 8",
      "((13 - 1) * 8) / 4",
      "8 + ((4 - 1) + 13)",
      "8 - (1 - (13 + 4))",
      "13 + (8 - (1 - 4))",
      "(13 + 4) + (8 - 1)",
      "((13 - 8) + 1) * 4",
      "(8 + 4) + (13 - 1)",
      "4 * (13 - (8 - 1))",
      "(8 + 13) + (4 - 1)",
      "8 + (13 - (1 - 4))",
      "(4 + 13) + (8 - 1)",
      "8 / (4 / (13 - 1))",
      "13 + (8 + (4 - 1))",
      "((4 + 13) + 8) - 1",
      "((4 - 1) + 8) + 13",
      "(8 + (4 - 1)) + 13",
      "13 + ((4 - 1) + 8)",
      "8 + (4 + (13 - 1))",
      "(4 + 8) + (13 - 1)",
      "((13 + 4) - 1) + 8",
      "13 - (1 - (8 + 4))",
      "13 + (4 + (8 - 1))",
      "((8 + 4) - 1) + 13",
      "8 + ((4 + 13) - 1)",
      "(8 + (13 + 4)) - 1",
      "(8 - (1 - 4)) + 13",
      "4 - ((1 - 13) - 8)",
      "8 + ((13 + 4) - 1)",
      "8 + (13 + (4 - 1))",
      "(8 * (13 - 1)) / 4",
      "(4 + (13 + 8)) - 1",
      "4 + ((8 + 13) - 1)",
      "8 - ((1 - 4) - 13)",
      "4 + (8 + (13 - 1))",
      "((4 - 1) + 13) + 8",
      "((8 + 13) + 4) - 1",
      "13 + ((8 + 4) - 1)",
      "((13 - 1) + 8) + 4",
      "4 * ((13 + 1) - 8)",
      "8 - ((1 - 13) - 4)",
      "(4 - (1 - 8)) + 13",
      "4 + ((8 - 1) + 13)",
      "(1 + (13 - 8)) * 4",
      "((13 + 4) + 8) - 1",
      "4 * ((1 - 8) + 13)",
      "(13 + 4) - (1 - 8)",
      "4 + ((13 - 1) + 8)",
      "4 * ((1 + 13) - 8)",
      "((13 - 1) + 4) + 8",
      "((1 + 13) - 8) * 4",
      "13 - ((1 - 8) - 4)",
      "13 - (1 - (4 + 8))",
      "(13 - 1) / (4 / 8)",
      "((13 + 8) + 4) - 1",
      "4 * (1 - (8 - 13))",
      "((8 + 13) - 1) + 4",
      "13 - ((1 - 4) - 8)",
      "4 + (13 + (8 - 1))",
      "((8 - 1) + 13) + 4",
      "(13 - 1) + (8 + 4)",
      "(4 - (1 - 13)) + 8",
      "4 - (1 - (13 + 8))",
      "((4 + 8) - 1) + 13",
      "(8 - 1) + (13 + 4)",
      "(13 - 1) + (4 + 8)",
      "(4 + (13 - 1)) + 8",
      "(8 / 4) * (13 - 1)",
      "((8 - 1) + 4) + 13",
      "(13 + (8 - 1)) + 4",
      "(13 + (4 + 8)) - 1",
      "(13 - (8 - 1)) * 4",
      "4 * ((13 - 8) + 1)",
      "(1 - (8 - 13)) * 4",
      "((13 + 8) - 1) + 4",
      "8 - (1 - (4 + 13))",
      "((8 + 4) + 13) - 1",
      "8 + ((13 - 1) + 4)",
      "4 * (13 + (1 - 8))",
      "4 + (13 - (1 - 8))",
      "(13 + 8) + (4 - 1)",
      "((4 + 8) + 13) - 1",
      "8 + (4 - (1 - 13))",
      "13 + ((8 - 1) + 4)",
      "(13 + 8) - (1 - 4)",
      "(13 - (1 - 8)) + 4",
      "13 + ((4 + 8) - 1)",
      "(4 - 1) + (8 + 13)",
      "((1 - 8) + 13) * 4",
      "4 + (8 - (1 - 13))",
      "4 - (1 - (8 + 13))",
      "(13 - 1) * (8 / 4)",
      "(4 + (8 - 1)) + 13",
      "(13 + (8 + 4)) - 1",
      "(13 + (1 - 8)) * 4",
      "(8 + 4) - (1 - 13)",
      "(8 + (4 + 13)) - 1",
      "8 * ((13 - 1) / 4)",
      "(13 + (4 - 1)) + 8",
      "4 - ((1 - 8) - 13)",
      "((4 + 13) - 1) + 8",
      "(4 + (8 + 13)) - 1",
      "(8 - (1 - 13)) + 4",
      "(8 + 13) - (1 - 4)",
      "(8 + (13 - 1)) + 4",
      "(8 - 1) + (4 + 13)"
    ]
  },
  "1 4 9 9": {
    "cards": "1 4 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 9 10": {
    "cards": "1 4 9 10",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "9 + (10 + (4 + 1))",
      "4 + (10 + (9 + 1))",
      "1 + ((9 + 4) + 10)",
      "9 + ((1 + 10) + 4)",
      "(9 + 10) + (4 + 1)",
      "(4 + 10) + (9 + 1)",
      "((1 + 4) + 10) + 9",
      "9 + ((1 + 4) + 10)",
      "((10 + 9) + 4) + 1",
      "((10 + 9) + 1) + 4",
      "4 + ((1 + 10) + 9)",
      "4 + ((9 + 1) + 10)",
      "(9 + 4) + (1 + 10)",
      "1 + (9 + (10 + 4))",
      "(10 + (4 + 1)) + 9",
      "((10 + 4) + 1) + 9",
      "((4 + 1) + 9) + 10",
      "(9 + (1 + 10)) + 4",
      "((1 + 9) + 4) + 10",
      "(9 + (10 + 1)) + 4",
      "(1 + 10) + (9 + 4)",
      "10 + ((4 + 9) + 1)",
      "(9 + 4) + (10 + 1)",
      "(10 + (4 + 9)) + 1",
      "(9 + 1) + (4 + 10)",
      "1 + (4 + (10 + 9))",
      "(10 + (9 + 4)) + 1",
      "(1 + (4 + 9)) + 10",
      "(1 + (10 + 4)) + 9",
      "((10 + 4) + 9) + 1",
      "4 + ((10 + 9) + 1)",
      "(10 + (1 + 4)) + 9",
      "(1 + 10) + (4 + 9)",
      "((9 + 10) + 1) + 4",
      "((9 + 1) + 4) + 10",
      "((1 + 9) + 10) + 4",
      "(1 + (10 + 9)) + 4",
      "1 + ((10 + 9) + 4)",
      "9 + (10 + (1 + 4))",
      "1 + ((4 + 9) + 10)",
      "((10 + 1) + 4) + 9",
      "((4 + 10) + 1) + 9",
      "((1 + 10) + 4) + 9",
      "((9 + 1) + 10) + 4",
      "10 + (1 + (4 + 9))",
      "(1 + (4 + 10)) + 9",
      "(4 + 9) + (10 + 1)",
      "4 + ((10 + 1) + 9)",
      "(4 + (10 + 1)) + 9",
      "(4 + (9 + 10)) + 1",
      "(1 + (9 + 4)) + 10",
      "10 + (1 + (9 + 4))",
      "10 + ((9 + 4) + 1)",
      "4 + (10 + (1 + 9))",
      "1 + (4 + (9 + 10))",
      "10 + ((1 + 9) + 4)",
      "1 + ((10 + 4) + 9)",
      "(10 + 4) + (9 + 1)",
      "10 + ((1 + 4) + 9)",
      "(1 + 4) + (9 + 10)",
      "(1 + 4) + (10 + 9)",
      "(1 + 9) + (10 + 4)",
      "(4 + (9 + 1)) + 10",
      "(4 + (10 + 9)) + 1",
      "1 + (9 + (4 + 10))",
      "9 + (4 + (1 + 10))",
      "1 + (10 + (4 + 9))",
      "(9 + (1 + 4)) + 10",
      "(10 + 1) + (9 + 4)",
      "1 + ((4 + 10) + 9)",
      "((10 + 1) + 9) + 4",
      "((9 + 4) + 1) + 10",
      "((1 + 10) + 9) + 4",
      "9 + ((4 + 10) + 1)",
      "(4 + (1 + 9)) + 10",
      "10 + (4 + (1 + 9))",
      "4 + (9 + (1 + 10))",
      "(4 + 10) + (1 + 9)",
      "9 + (1 + (4 + 10))",
      "((4 + 1) + 10) + 9",
      "9 + (4 + (10 + 1))",
      "((4 + 10) + 9) + 1",
      "((9 + 10) + 4) + 1",
      "10 + (4 + (9 + 1))",
      "(9 + (10 + 4)) + 1",
      "4 + (1 + (10 + 9))",
      "(10 + 9) + (1 + 4)",
      "(9 + 10) + (1 + 4)",
      "(4 + 1) + (10 + 9)",
      "10 + (9 + (1 + 4))",
      "(10 + (1 + 9)) + 4",
      "9 + ((4 + 1) + 10)",
      "(4 + 1) + (9 + 10)",
      "10 + (9 + (4 + 1))",
      "(9 + 1) + (10 + 4)",
      "((4 + 9) + 1) + 10",
      "4 + (9 + (10 + 1))",
      "10 + ((4 + 1) + 9)",
      "((9 + 4) + 10) + 1",
      "1 + ((9 + 10) + 4)",
      "1 + (10 + (9 + 4))",
      "(10 + 4) + (1 + 9)",
      "10 + ((9 + 1) + 4)",
      "(10 + 1) + (4 + 9)",
      "4 + ((1 + 9) + 10)",
      "(9 + (4 + 10)) + 1",
      "9 + ((10 + 4) + 1)",
      "4 + ((9 + 10) + 1)",
      "((1 + 4) + 9) + 10",
      "9 + ((10 + 1) + 4)",
      "(9 + (4 + 1)) + 10",
      "((4 + 9) + 10) + 1",
      "(10 + (9 + 1)) + 4",
      "(4 + 9) + (1 + 10)",
      "(4 + (1 + 10)) + 9",
      "(1 + (9 + 10)) + 4",
      "(10 + 9) + (4 + 1)",
      "9 + (1 + (10 + 4))",
      "4 + (1 + (9 + 10))",
      "(1 + 9) + (4 + 10)"
    ]
  },
  "1 4 9 11": {
    "cards": "1 4 9 11",
    "has_solution": "Y",
    "num_solutions": 190,
    "solutions": [
      "(9 * 4) - (11 + 1)",
      "11 + (4 + (9 * 1))",
      "11 + (1 * (9 + 4))",
      "(1 * (9 + 4)) + 11",
      "(1 * 4) + (11 + 9)",
      "4 + ((9 + 11) * 1)",
      "((4 * 1) + 11) + 9",
      "(11 + 9) + (4 / 1)",
      "(9 + (4 / 1)) + 11",
      "((11 * 1) + 4) + 9",
      "1 * (11 + (4 + 9))",
      "(1 * 9) + (4 + 11)",
      "(1 * (4 + 9)) + 11",
      "(1 * 9) + (11 + 4)",
      "(9 * 1) + (4 + 11)",
      "((1 * 4) + 9) + 11",
      "1 * ((4 + 11) + 9)",
      "((9 + 11) + 4) / 1",
      "((4 * 9) - 11) - 1",
      "(4 + 11) + (9 * 1)",
      "11 + ((4 + 9) / 1)",
      "((1 * 4) + 11) + 9",
      "1 * (4 + (9 + 11))",
      "(9 / 1) + (4 + 11)",
      "(11 / 1) + (4 + 9)",
      "11 + (9 + (1 * 4))",
      "((1 * 11) + 4) + 9",
      "(4 + (1 * 9)) + 11",
      "(4 + (9 + 11)) / 1",
      "((9 + 4) + 11) / 1",
      "((9 / 1) + 4) + 11",
      "9 + (4 + (11 * 1))",
      "(11 + 4) + (9 * 1)",
      "(1 * 11) + (4 + 9)",
      "9 + ((11 + 4) * 1)",
      "4 + (1 * (11 + 9))",
      "11 + (4 + (9 / 1))",
      "(4 / 1) + (9 + 11)",
      "9 + (4 + (1 * 11))",
      "9 + ((4 * 1) + 11)",
      "9 + ((4 / 1) + 11)",
      "((9 / 1) + 11) + 4",
      "11 + ((1 * 4) + 9)",
      "9 + ((4 + 11) * 1)",
      "((9 + 4) + 11) * 1",
      "(9 + (1 * 4)) + 11",
      "(4 + (9 + 11)) * 1",
      "((9 + 11) + 4) * 1",
      "4 + (9 + (1 * 11))",
      "(4 + (9 * 1)) + 11",
      "((4 + 9) * 1) + 11",
      "(9 + (4 + 11)) * 1",
      "11 + (4 + (1 * 9))",
      "1 * ((9 + 11) + 4)",
      "1 * (4 + (11 + 9))",
      "9 + (11 + (4 / 1))",
      "4 + (9 + (11 * 1))",
      "4 + (11 + (1 * 9))",
      "(4 + (11 * 1)) + 9",
      "(9 + (11 + 4)) * 1",
      "((9 + 4) / 1) + 11",
      "1 * ((11 + 9) + 4)",
      "((4 + 9) + 11) / 1",
      "9 + (4 + (11 / 1))",
      "((4 + 11) + 9) / 1",
      "11 + ((9 / 1) + 4)",
      "(11 / 1) + (9 + 4)",
      "1 * (9 + (4 + 11))",
      "1 * (11 + (9 + 4))",
      "((11 + 9) + 4) * 1",
      "(11 + (1 * 9)) + 4",
      "(4 + 9) + (11 / 1)",
      "9 + ((11 * 1) + 4)",
      "1 * ((4 + 9) + 11)",
      "9 + (11 + (4 * 1))",
      "1 * ((9 + 4) + 11)",
      "(11 * 1) + (4 + 9)",
      "(4 + 11) + (1 * 9)",
      "4 + ((11 * 1) + 9)",
      "4 + ((9 / 1) + 11)",
      "((4 + 11) + 9) * 1",
      "4 + ((9 + 11) / 1)",
      "(11 + (9 + 4)) * 1",
      "(4 * 1) + (11 + 9)",
      "((4 + 9) / 1) + 11",
      "(4 + 9) + (11 * 1)",
      "(9 + 11) + (1 * 4)",
      "((11 + 9) * 1) + 4",
      "(4 + (9 / 1)) + 11",
      "(11 + 9) + (1 * 4)",
      "11 + ((9 * 1) + 4)",
      "((4 / 1) + 11) + 9",
      "(9 + 4) + (11 * 1)",
      "11 + ((4 * 1) + 9)",
      "(4 + 11) + (9 / 1)",
      "(4 + (11 + 9)) / 1",
      "((11 / 1) + 4) + 9",
      "((4 / 1) + 9) + 11",
      "(11 + 9) + (4 * 1)",
      "(11 + (4 + 9)) / 1",
      "((1 * 11) + 9) + 4",
      "9 + ((1 * 11) + 4)",
      "11 + (9 + (4 * 1))",
      "((11 + 9) + 4) / 1",
      "((11 + 4) + 9) * 1",
      "(1 * (11 + 9)) + 4",
      "(4 + (11 + 9)) * 1",
      "(9 * 4) - (1 + 11)",
      "((11 + 4) * 1) + 9",
      "4 + (1 * (9 + 11))",
      "((4 + 9) + 11) * 1",
      "((9 + 11) * 1) + 4",
      "((4 + 11) / 1) + 9",
      "(4 + (1 * 11)) + 9",
      "(1 * 4) + (9 + 11)",
      "(4 + (11 / 1)) + 9",
      "(9 + 4) + (11 / 1)",
      "(1 * (9 + 11)) + 4",
      "(11 * (4 - 1)) - 9",
      "((4 - 1) * 11) - 9",
      "11 + ((4 / 1) + 9)",
      "1 * (9 + (11 + 4))",
      "(9 * 1) + (11 + 4)",
      "(4 * 9) - (11 + 1)",
      "(1 * 11) + (9 + 4)",
      "4 + ((11 + 9) / 1)",
      "((11 * 1) + 9) + 4",
      "9 + (1 * (11 + 4))",
      "((4 * 9) - 1) - 11",
      "((9 + 11) / 1) + 4",
      "4 + (9 + (11 / 1))",
      "(9 + (11 * 1)) + 4",
      "11 + ((9 + 4) * 1)",
      "(1 * (11 + 4)) + 9",
      "((9 * 4) - 1) - 11",
      "11 + (9 + (4 / 1))",
      "(9 + 4) + (1 * 11)",
      "9 + ((4 + 11) / 1)",
      "((1 * 9) + 11) + 4",
      "4 + ((1 * 11) + 9)",
      "4 + (11 + (9 / 1))",
      "(11 + (4 * 1)) + 9",
      "11 + (1 * (4 + 9))",
      "((4 * 1) + 9) + 11",
      "(9 + (4 * 1)) + 11",
      "(11 + (4 / 1)) + 9",
      "11 + ((4 + 9) * 1)",
      "(11 + 4) + (9 / 1)",
      "(4 * 9) - (1 + 11)",
      "9 + ((1 * 4) + 11)",
      "((11 / 1) + 9) + 4",
      "(11 + (9 / 1)) + 4",
      "(4 + 9) + (1 * 11)",
      "(11 + (9 + 4)) / 1",
      "(9 / 1) + (11 + 4)",
      "((1 * 9) + 4) + 11",
      "(4 / 1) + (11 + 9)",
      "(9 + (11 + 4)) / 1",
      "(9 + (4 + 11)) / 1",
      "9 + (1 * (4 + 11))",
      "(11 + (9 * 1)) + 4",
      "((9 * 1) + 11) + 4",
      "(9 + (11 / 1)) + 4",
      "4 + ((11 + 9) * 1)",
      "(1 * (4 + 11)) + 9",
      "9 + ((11 / 1) + 4)",
      "((9 * 1) + 4) + 11",
      "((11 + 4) + 9) / 1",
      "4 + ((11 / 1) + 9)",
      "(11 + (4 + 9)) * 1",
      "11 + ((9 + 4) / 1)",
      "11 + ((1 * 9) + 4)",
      "((11 + 9) / 1) + 4",
      "(11 + 4) + (1 * 9)",
      "(11 * 1) + (9 + 4)",
      "9 + (11 + (1 * 4))",
      "((9 * 4) - 11) - 1",
      "((11 + 4) / 1) + 9",
      "((9 + 4) * 1) + 11",
      "1 * ((11 + 4) + 9)",
      "4 + ((9 * 1) + 11)",
      "(11 + (1 * 4)) + 9",
      "((4 + 11) * 1) + 9",
      "(9 + 11) + (4 / 1)",
      "(9 + (1 * 11)) + 4",
      "4 + (11 + (9 * 1))",
      "(4 * 1) + (9 + 11)",
      "(9 + 11) + (4 * 1)",
      "4 + ((1 * 9) + 11)",
      "9 + ((11 + 4) / 1)"
    ]
  },
  "1 4 9 12": {
    "cards": "1 4 9 12",
    "has_solution": "Y",
    "num_solutions": 130,
    "solutions": [
      "((4 / 1) * 9) - 12",
      "(4 + 12) + (9 - 1)",
      "(12 + 4) - (1 - 9)",
      "((12 + 4) - 1) + 9",
      "((9 * 4) - 12) / 1",
      "((9 - 1) + 12) + 4",
      "(9 * (1 * 4)) - 12",
      "12 + (9 + (4 - 1))",
      "1 * ((4 * 9) - 12)",
      "((4 * 9) * 1) - 12",
      "12 / (4 / (9 - 1))",
      "4 - (1 - (9 + 12))",
      "(9 + 4) + (12 - 1)",
      "((1 * 9) * 4) - 12",
      "((12 - 1) + 9) + 4",
      "9 - ((1 - 12) - 4)",
      "12 + ((9 + 4) - 1)",
      "((4 * 9) - 12) * 1",
      "(9 * 4) - (12 / 1)",
      "((9 - 1) + 4) + 12",
      "(4 - 1) + (12 + 9)",
      "(4 - (1 - 9)) + 12",
      "12 + (9 - (1 - 4))",
      "(12 + 4) + (9 - 1)",
      "9 + ((4 - 1) + 12)",
      "(1 * (4 * 9)) - 12",
      "((12 + 9) + 4) - 1",
      "(9 + 4) - (1 - 12)",
      "(12 - 1) + (4 + 9)",
      "1 * ((9 * 4) - 12)",
      "12 + ((9 - 1) + 4)",
      "((9 + 4) + 12) - 1",
      "(4 * 9) - (12 / 1)",
      "((12 + 9) - 1) + 4",
      "((9 + 4) - 1) + 12",
      "(9 + 12) + (4 - 1)",
      "4 + (12 - (1 - 9))",
      "12 + ((4 - 1) + 9)",
      "((9 + 12) + 4) - 1",
      "(12 + (4 + 9)) - 1",
      "9 + (4 - (1 - 12))",
      "(9 + (4 + 12)) - 1",
      "((4 - 1) + 9) + 12",
      "9 - ((1 - 4) - 12)",
      "9 - (1 - (12 + 4))",
      "12 + ((4 + 9) - 1)",
      "(9 - 1) * (12 / 4)",
      "((9 * 1) * 4) - 12",
      "(12 - (1 - 9)) + 4",
      "(12 * (9 - 1)) / 4",
      "12 - (1 - (9 + 4))",
      "(4 + (9 - 1)) + 12",
      "(9 + (4 - 1)) + 12",
      "12 + (4 - (1 - 9))",
      "(4 * 9) - (1 * 12)",
      "(9 + (12 + 4)) - 1",
      "((1 * 4) * 9) - 12",
      "12 - ((1 - 9) - 4)",
      "4 + ((9 - 1) + 12)",
      "12 - (1 - (4 + 9))",
      "(4 + (9 + 12)) - 1",
      "12 + (4 + (9 - 1))",
      "(12 + (9 - 1)) + 4",
      "((4 * 9) - 12) / 1",
      "(4 + 12) - (1 - 9)",
      "(9 + 12) - (1 - 4)",
      "12 * ((9 - 1) / 4)",
      "(12 + (4 - 1)) + 9",
      "((12 - 1) + 4) + 9",
      "(4 - 1) + (9 + 12)",
      "((4 + 12) - 1) + 9",
      "9 + ((4 + 12) - 1)",
      "9 + ((12 + 4) - 1)",
      "((9 * 4) - 12) * 1",
      "(4 / (1 / 9)) - 12",
      "((9 / 1) * 4) - 12",
      "4 + (12 + (9 - 1))",
      "4 - ((1 - 9) - 12)",
      "((4 * 1) * 9) - 12",
      "((4 + 9) + 12) - 1",
      "9 + (4 + (12 - 1))",
      "4 + (9 - (1 - 12))",
      "(4 * (9 * 1)) - 12",
      "((4 * 9) / 1) - 12",
      "(9 * 4) - (1 * 12)",
      "(1 * (9 * 4)) - 12",
      "4 + ((12 - 1) + 9)",
      "9 + (12 + (4 - 1))",
      "(9 * 4) - (12 * 1)",
      "((4 + 9) - 1) + 12",
      "(12 / 4) * (9 - 1)",
      "(12 - 1) + (9 + 4)",
      "(12 + 9) - (1 - 4)",
      "((4 - 1) + 12) + 9",
      "(9 - 1) + (12 + 4)",
      "12 - ((1 - 4) - 9)",
      "(9 * (4 * 1)) - 12",
      "9 + (12 - (1 - 4))",
      "4 + ((12 + 9) - 1)",
      "9 + ((12 - 1) + 4)",
      "(4 + 9) + (12 - 1)",
      "(4 + (12 + 9)) - 1",
      "4 + ((9 + 12) - 1)",
      "((12 + 4) + 9) - 1",
      "(4 + (12 - 1)) + 9",
      "(4 * (1 * 9)) - 12",
      "4 - ((1 - 12) - 9)",
      "(4 + 9) - (1 - 12)",
      "(9 + (12 - 1)) + 4",
      "4 + (9 + (12 - 1))",
      "9 - (1 - (4 + 12))",
      "(12 + 9) + (4 - 1)",
      "(4 * (9 / 1)) - 12",
      "(12 - (1 - 4)) + 9",
      "((9 - 1) * 12) / 4",
      "((9 - 1) / 4) * 12",
      "((4 + 12) + 9) - 1",
      "(9 - 1) / (4 / 12)",
      "(4 * 9) - (12 * 1)",
      "(9 - (1 - 12)) + 4",
      "((9 + 12) - 1) + 4",
      "(9 / (1 / 4)) - 12",
      "(9 * (4 / 1)) - 12",
      "((9 * 4) / 1) - 12",
      "(12 + (9 + 4)) - 1",
      "4 - (1 - (12 + 9))",
      "(9 - 1) + (4 + 12)",
      "((9 * 4) * 1) - 12",
      "(9 - (1 - 4)) + 12",
      "(4 - (1 - 12)) + 9"
    ]
  },
  "1 4 9 13": {
    "cards": "1 4 9 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 * 4) - (13 - 1)",
      "(1 - 13) + (4 * 9)",
      "(1 - 13) + (9 * 4)",
      "((4 * 9) + 1) - 13",
      "(4 * 9) + (1 - 13)",
      "((9 * 4) - 13) + 1",
      "(4 * 9) - (13 - 1)",
      "1 - (13 - (4 * 9))",
      "(1 + (4 * 9)) - 13",
      "(1 + (9 * 4)) - 13",
      "((4 * 9) - 13) + 1",
      "1 + ((9 * 4) - 13)",
      "((9 * 4) + 1) - 13",
      "1 + ((4 * 9) - 13)",
      "1 - (13 - (9 * 4))",
      "(9 * 4) + (1 - 13)"
    ]
  },
  "1 4 10 10": {
    "cards": "1 4 10 10",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "10 + (10 + (4 / 1))",
      "10 + ((4 * 1) + 10)",
      "((10 + 10) + 4) * 1",
      "((10 * 1) + 10) + 4",
      "10 + (1 * (4 + 10))",
      "(10 + (4 + 10)) / 1",
      "((10 / 4) * 10) - 1",
      "((4 / 1) + 10) + 10",
      "(10 + (4 + 10)) * 1",
      "(4 + 10) + (10 * 1)",
      "(4 + (10 + 10)) / 1",
      "1 * ((10 + 4) + 10)",
      "(10 + (10 + 4)) / 1",
      "(10 + 4) + (1 * 10)",
      "(10 + 4) + (10 / 1)",
      "((10 + 10) + 4) / 1",
      "10 + ((10 * 1) + 4)",
      "((10 / 1) + 4) + 10",
      "4 + ((10 + 10) * 1)",
      "((10 / 1) + 10) + 4",
      "10 + (4 + (10 * 1))",
      "((10 + 4) / 1) + 10",
      "10 + (4 + (10 / 1))",
      "(10 + (10 + 4)) * 1",
      "(4 + 10) + (10 / 1)",
      "(10 + 10) + (1 * 4)",
      "1 * ((10 + 10) + 4)",
      "(4 + 10) + (1 * 10)",
      "((10 + 4) + 10) * 1",
      "(10 + (1 * 10)) + 4",
      "(10 + (4 * 1)) + 10",
      "10 + ((4 / 1) + 10)",
      "10 + ((10 / 1) + 4)",
      "((10 + 10) / 1) + 4",
      "4 + ((10 * 1) + 10)",
      "(1 * 4) + (10 + 10)",
      "1 * ((4 + 10) + 10)",
      "4 + (1 * (10 + 10))",
      "((4 + 10) + 10) / 1",
      "10 + ((1 * 4) + 10)",
      "10 + ((4 + 10) / 1)",
      "1 * (10 + (4 + 10))",
      "(10 + 10) + (4 / 1)",
      "(10 + (1 * 4)) + 10",
      "(10 * 1) + (4 + 10)",
      "4 + ((10 / 1) + 10)",
      "10 + (1 * (10 + 4))",
      "(1 * (10 + 4)) + 10",
      "4 + ((1 * 10) + 10)",
      "(1 * 10) + (10 + 4)",
      "(10 / 1) + (10 + 4)",
      "10 + ((1 * 10) + 4)",
      "(1 * (10 + 10)) + 4",
      "4 + (10 + (10 * 1))",
      "(10 * (10 / 4)) - 1",
      "((4 + 10) / 1) + 10",
      "4 + (10 + (10 / 1))",
      "1 * (10 + (10 + 4))",
      "((1 * 10) + 4) + 10",
      "(10 / 1) + (4 + 10)",
      "(1 * 10) + (4 + 10)",
      "10 + (10 + (4 * 1))",
      "(10 * 1) + (10 + 4)",
      "((10 + 4) * 1) + 10",
      "10 + (4 + (1 * 10))",
      "(10 / (4 / 10)) - 1",
      "(4 + (10 + 10)) * 1",
      "(4 + (10 / 1)) + 10",
      "(4 + (10 * 1)) + 10",
      "((4 * 1) + 10) + 10",
      "((4 + 10) + 10) * 1",
      "10 + ((10 + 4) * 1)",
      "(4 * 1) + (10 + 10)",
      "((10 * 10) / 4) - 1",
      "(10 + (4 / 1)) + 10",
      "10 + ((10 + 4) / 1)",
      "(4 / 1) + (10 + 10)",
      "(10 + 4) + (10 * 1)",
      "(10 + 10) + (4 * 1)",
      "4 + ((10 + 10) / 1)",
      "((10 + 10) * 1) + 4",
      "(4 + (1 * 10)) + 10",
      "((4 + 10) * 1) + 10",
      "4 + (10 + (1 * 10))",
      "((10 * 1) + 4) + 10",
      "10 + ((4 + 10) * 1)",
      "(10 + (10 * 1)) + 4",
      "(10 + (10 / 1)) + 4",
      "((1 * 10) + 10) + 4",
      "((1 * 4) + 10) + 10",
      "(1 * (4 + 10)) + 10",
      "10 + (10 + (1 * 4))",
      "1 * (4 + (10 + 10))",
      "((10 + 4) + 10) / 1"
    ]
  },
  "1 4 10 11": {
    "cards": "1 4 10 11",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "10 + (4 - (1 - 11))",
      "11 + ((10 + 4) - 1)",
      "10 + ((11 + 4) - 1)",
      "((10 + 4) - 1) + 11",
      "((10 - 1) + 11) + 4",
      "10 - (1 - (4 + 11))",
      "(11 - (1 - 4)) + 10",
      "(11 + (10 + 4)) - 1",
      "(10 - (1 - 11)) + 4",
      "11 + (10 - (1 - 4))",
      "(4 + (10 - 1)) + 11",
      "((11 - 1) + 4) + 10",
      "((4 - 1) + 11) + 10",
      "(4 - 1) + (11 + 10)",
      "(4 + 10) + (11 - 1)",
      "((11 + 4) + 10) - 1",
      "(10 + 4) - (1 - 11)",
      "(4 + 11) + (10 - 1)",
      "10 + (4 + (11 - 1))",
      "((10 + 4) + 11) - 1",
      "11 + ((4 + 10) - 1)",
      "(10 + 11) + (4 - 1)",
      "(4 + 11) - (1 - 10)",
      "10 + ((4 - 1) + 11)",
      "(11 + 4) + (10 - 1)",
      "(11 - 1) + (10 + 4)",
      "((10 + 11) - 1) + 4",
      "4 - (1 - (10 + 11))",
      "(10 - 1) + (11 + 4)",
      "4 + ((10 + 11) - 1)",
      "4 - (1 - (11 + 10))",
      "(11 + 10) + (4 - 1)",
      "(11 + 4) - (1 - 10)",
      "4 + ((11 - 1) + 10)",
      "10 + (11 + (4 - 1))",
      "4 - ((1 - 11) - 10)",
      "(10 + (4 - 1)) + 11",
      "((11 + 10) + 4) - 1",
      "4 + (10 + (11 - 1))",
      "11 - ((1 - 10) - 4)",
      "((4 + 11) + 10) - 1",
      "10 - (1 - (11 + 4))",
      "((10 - 1) + 4) + 11",
      "11 + ((10 - 1) + 4)",
      "((4 + 10) - 1) + 11",
      "(11 + 10) - (1 - 4)",
      "10 - ((1 - 4) - 11)",
      "11 - (1 - (4 + 10))",
      "(4 - (1 - 11)) + 10",
      "((4 + 11) - 1) + 10",
      "((11 + 10) - 1) + 4",
      "(10 + (11 - 1)) + 4",
      "10 + ((4 + 11) - 1)",
      "(11 + (10 - 1)) + 4",
      "(11 + (4 - 1)) + 10",
      "11 + (10 + (4 - 1))",
      "10 + ((11 - 1) + 4)",
      "11 + ((4 - 1) + 10)",
      "(11 + (4 + 10)) - 1",
      "(4 + 10) - (1 - 11)",
      "(10 - 1) + (4 + 11)",
      "(10 + 11) - (1 - 4)",
      "10 + (11 - (1 - 4))",
      "11 - ((1 - 4) - 10)",
      "(11 - 1) + (4 + 10)",
      "4 + (11 - (1 - 10))",
      "(10 + 4) + (11 - 1)",
      "(10 + (11 + 4)) - 1",
      "((11 - 1) + 10) + 4",
      "(4 - (1 - 10)) + 11",
      "4 + ((11 + 10) - 1)",
      "((10 + 11) + 4) - 1",
      "4 + (10 - (1 - 11))",
      "(4 + (10 + 11)) - 1",
      "(11 - (1 - 10)) + 4",
      "4 + ((10 - 1) + 11)",
      "10 - ((1 - 11) - 4)",
      "(4 - 1) + (10 + 11)",
      "(10 + (4 + 11)) - 1",
      "(10 - (1 - 4)) + 11",
      "4 - ((1 - 10) - 11)",
      "((11 + 4) - 1) + 10",
      "((4 - 1) + 10) + 11",
      "11 + (4 - (1 - 10))",
      "(4 + (11 + 10)) - 1",
      "4 + (11 + (10 - 1))",
      "11 - (1 - (10 + 4))",
      "((4 + 10) + 11) - 1",
      "(4 + (11 - 1)) + 10",
      "11 + (4 + (10 - 1))"
    ]
  },
  "1 4 10 12": {
    "cards": "1 4 10 12",
    "has_solution": "Y",
    "num_solutions": 19,
    "solutions": [
      "10 * (12 / (4 + 1))",
      "(12 / (1 + 4)) * 10",
      "10 / ((4 + 1) / 12)",
      "(10 * 12) / (4 + 1)",
      "10 / ((1 + 4) / 12)",
      "(12 * 10) / (1 + 4)",
      "(10 / (4 + 1)) * 12",
      "(12 * 10) / (4 + 1)",
      "(10 * 12) / (1 + 4)",
      "(4 * (10 - 1)) - 12",
      "(10 / (1 + 4)) * 12",
      "12 / ((1 + 4) / 10)",
      "12 * (10 / (1 + 4))",
      "10 * (12 / (1 + 4))",
      "4 / (1 - (10 / 12))",
      "12 * (10 / (4 + 1))",
      "12 / ((4 + 1) / 10)",
      "(12 / (4 + 1)) * 10",
      "((10 - 1) * 4) - 12"
    ]
  },
  "1 4 10 13": {
    "cards": "1 4 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 11 11": {
    "cards": "1 4 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 11 12": {
    "cards": "1 4 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 11 13": {
    "cards": "1 4 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 12 12": {
    "cards": "1 4 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "12 * ((12 / 4) - 1)",
      "((12 / 4) - 1) * 12",
      "(12 * (4 - 1)) - 12",
      "((4 - 1) * 12) - 12"
    ]
  },
  "1 4 12 13": {
    "cards": "1 4 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 4 13 13": {
    "cards": "1 4 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 5 5": {
    "cards": "1 5 5 5",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "5 * (5 - (1 / 5))",
      "(5 - (1 / 5)) * 5"
    ]
  },
  "1 5 5 6": {
    "cards": "1 5 5 6",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((5 * 6) - 5) - 1",
      "(6 * 5) - (5 + 1)",
      "((6 * 5) - 5) - 1",
      "(6 * 5) - (1 + 5)",
      "((1 + 5) * 5) - 6",
      "((5 * 6) - 1) - 5",
      "((6 * 5) - 1) - 5",
      "(5 * 6) - (1 + 5)",
      "(5 * (1 + 5)) - 6",
      "((5 + 1) * 5) - 6",
      "(5 * (5 + 1)) - 6",
      "(5 * 6) - (5 + 1)"
    ]
  },
  "1 5 5 7": {
    "cards": "1 5 5 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 5 8": {
    "cards": "1 5 5 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 5 9": {
    "cards": "1 5 5 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 + 1) * (9 - 5)",
      "(9 - 5) * (5 + 1)",
      "(1 + 5) * (9 - 5)",
      "(9 - 5) * (1 + 5)"
    ]
  },
  "1 5 5 10": {
    "cards": "1 5 5 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(5 * (10 - 5)) - 1",
      "((10 - 5) * 5) - 1"
    ]
  },
  "1 5 5 11": {
    "cards": "1 5 5 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 - 5) * (5 - 11)",
      "(11 - 5) * (5 - 1)",
      "(5 - 11) * (1 - 5)",
      "(5 - 1) * (11 - 5)"
    ]
  },
  "1 5 5 12": {
    "cards": "1 5 5 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "12 * ((5 / 5) + 1)",
      "12 * (1 + (5 / 5))",
      "(1 + (5 / 5)) * 12",
      "((5 / 5) + 1) * 12"
    ]
  },
  "1 5 5 13": {
    "cards": "1 5 5 13",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "5 + ((5 + 13) + 1)",
      "5 + ((5 + 1) + 13)",
      "(5 + (5 + 1)) + 13",
      "1 + ((13 + 5) + 5)",
      "(1 + 5) + (13 + 5)",
      "(5 + (1 + 13)) + 5",
      "13 + (5 + (5 + 1))",
      "5 + (13 + (1 + 5))",
      "(5 + 1) + (5 + 13)",
      "((5 + 1) + 5) + 13",
      "5 + ((1 + 5) + 13)",
      "((5 + 13) + 1) + 5",
      "5 + (1 + (5 + 13))",
      "5 + (1 + (13 + 5))",
      "(13 + 1) + (5 + 5)",
      "(13 + 5) + (5 + 1)",
      "(5 + (1 + 5)) + 13",
      "13 + ((1 + 5) + 5)",
      "((13 + 1) + 5) + 5",
      "5 + ((13 + 5) + 1)",
      "(5 + 5) + (1 + 13)",
      "(5 + (13 + 5)) + 1",
      "(1 + 5) + (5 + 13)",
      "((5 + 5) + 13) + 1",
      "(1 + (5 + 5)) + 13",
      "1 + (5 + (5 + 13))",
      "((5 + 5) + 1) + 13",
      "1 + ((5 + 5) + 13)",
      "(1 + 13) + (5 + 5)",
      "5 + ((13 + 1) + 5)",
      "(5 + 13) + (5 + 1)",
      "((13 + 5) + 5) + 1",
      "13 + (5 + (1 + 5))",
      "13 + ((5 + 5) + 1)",
      "((5 + 13) + 5) + 1",
      "((1 + 5) + 13) + 5",
      "(5 + (13 + 1)) + 5",
      "(1 + (5 + 13)) + 5",
      "(5 + 5) + (13 + 1)",
      "1 + ((5 + 13) + 5)",
      "(5 + 13) + (1 + 5)",
      "(13 + 5) + (1 + 5)",
      "(5 + (5 + 13)) + 1",
      "5 + (13 + (5 + 1))",
      "((13 + 5) + 1) + 5",
      "5 + (5 + (13 + 1))",
      "(13 + (1 + 5)) + 5",
      "1 + (5 + (13 + 5))",
      "(13 + (5 + 5)) + 1",
      "((1 + 13) + 5) + 5",
      "5 + (5 + (1 + 13))",
      "((1 + 5) + 5) + 13",
      "((5 + 1) + 13) + 5",
      "(1 + (13 + 5)) + 5",
      "13 + (1 + (5 + 5))",
      "(5 + 1) + (13 + 5)",
      "13 + ((5 + 1) + 5)",
      "1 + (13 + (5 + 5))",
      "5 + ((1 + 13) + 5)",
      "(13 + (5 + 1)) + 5"
    ]
  },
  "1 5 6 6": {
    "cards": "1 5 6 6",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((5 * 6) * 1) - 6",
      "(1 * (5 * 6)) - 6",
      "(6 / (1 / 5)) - 6",
      "(6 * 5) - (6 * 1)",
      "(5 * (1 * 6)) - 6",
      "((6 * 5) / 1) - 6",
      "(1 * (6 * 5)) - 6",
      "((1 * 5) * 6) - 6",
      "(5 * 6) - (6 / 1)",
      "(6 * 5) - (6 / 1)",
      "((5 * 6) - 6) / 1",
      "((5 * 6) / 1) - 6",
      "(5 * 6) - (1 * 6)",
      "(6 * (5 / 1)) - 6",
      "(5 * (6 / 1)) - 6",
      "((6 * 5) - 6) / 1",
      "1 * ((5 * 6) - 6)",
      "((5 * 1) * 6) - 6",
      "((5 * 6) - 6) * 1",
      "(6 * 5) - (1 * 6)",
      "(5 * 6) - (6 * 1)",
      "(5 * (6 * 1)) - 6",
      "1 * ((6 * 5) - 6)",
      "(5 / (1 / 6)) - 6",
      "((5 / 1) * 6) - 6",
      "((6 * 1) * 5) - 6",
      "(6 * (1 * 5)) - 6",
      "((6 * 5) - 6) * 1",
      "((6 / 1) * 5) - 6",
      "((6 * 5) * 1) - 6",
      "((1 * 6) * 5) - 6",
      "(6 * (5 * 1)) - 6"
    ]
  },
  "1 5 6 7": {
    "cards": "1 5 6 7",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(1 - 7) + (6 * 5)",
      "((5 * 6) + 1) - 7",
      "(6 * 5) - (7 - 1)",
      "(5 * 6) - (7 - 1)",
      "((7 - 1) * 5) - 6",
      "1 - (7 - (5 * 6))",
      "1 + ((6 * 5) - 7)",
      "1 + ((5 * 6) - 7)",
      "(1 + (6 * 5)) - 7",
      "1 - (7 - (6 * 5))",
      "(1 + (5 * 6)) - 7",
      "((6 * 5) - 7) + 1",
      "(5 * 6) + (1 - 7)",
      "((6 * 5) + 1) - 7",
      "(1 - 7) + (5 * 6)",
      "(5 * (7 - 1)) - 6",
      "(6 * 5) + (1 - 7)",
      "((5 * 6) - 7) + 1"
    ]
  },
  "1 5 6 8": {
    "cards": "1 5 6 8",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((1 + 8) - 5) * 6",
      "(1 + (8 - 5)) * 6",
      "6 * (8 - (5 - 1))",
      "6 * ((1 + 8) - 5)",
      "((1 - 5) + 8) * 6",
      "((8 - 5) + 1) * 6",
      "6 * (1 + (8 - 5))",
      "(8 + (1 - 5)) * 6",
      "6 * ((8 - 5) + 1)",
      "(1 - (5 - 8)) * 6",
      "6 * ((8 + 1) - 5)",
      "((8 + 1) - 5) * 6",
      "6 * (1 - (5 - 8))",
      "6 * (8 + (1 - 5))",
      "6 * ((1 - 5) + 8)",
      "(8 - (5 - 1)) * 6"
    ]
  },
  "1 5 6 9": {
    "cards": "1 5 6 9",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(1 * 6) * (9 - 5)",
      "((1 * 9) - 5) * 6",
      "6 * ((9 * 1) - 5)",
      "(9 - 5) * (6 / 1)",
      "(6 / 1) * (9 - 5)",
      "((9 - 5) * 1) * 6",
      "(9 - (1 * 5)) * 6",
      "(6 * (9 - 5)) / 1",
      "(9 - 5) / (1 / 6)",
      "6 * ((1 * 9) - 5)",
      "(9 - 5) * (1 * 6)",
      "(6 * (9 - 5)) * 1",
      "6 * (9 - (5 / 1))",
      "6 * (9 - (1 * 5))",
      "1 * (6 * (9 - 5))",
      "(9 - (5 * 1)) * 6",
      "6 * (9 - (5 * 1))",
      "6 * (1 * (9 - 5))",
      "(1 * (9 - 5)) * 6",
      "6 / (1 / (9 - 5))",
      "((9 - 5) * 6) * 1",
      "(9 - (5 / 1)) * 6",
      "(6 * 1) * (9 - 5)",
      "((9 - 5) * 6) / 1",
      "6 * ((9 / 1) - 5)",
      "6 * ((9 - 5) * 1)",
      "1 * ((9 - 5) * 6)",
      "((9 * 1) - 5) * 6",
      "((9 - 5) / 1) * 6",
      "((9 / 1) - 5) * 6",
      "6 * ((9 - 5) / 1)",
      "(9 - 5) * (6 * 1)"
    ]
  },
  "1 5 6 10": {
    "cards": "1 5 6 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((10 - 1) - 5) * 6",
      "6 * ((10 - 5) - 1)",
      "(10 - 6) * (5 + 1)",
      "6 * (10 - (5 + 1))",
      "((10 - 5) - 1) * 6",
      "(10 - (5 + 1)) * 6",
      "6 * ((10 - 1) - 5)",
      "(1 + 5) * (10 - 6)",
      "(10 - (1 + 5)) * 6",
      "(10 - 6) * (1 + 5)",
      "(5 + 1) * (10 - 6)",
      "6 * (10 - (1 + 5))"
    ]
  },
  "1 5 6 11": {
    "cards": "1 5 6 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((11 - 6) * 5) - 1",
      "((6 + 1) * 5) - 11",
      "((1 + 6) * 5) - 11",
      "(5 * (1 + 6)) - 11",
      "(5 * (6 + 1)) - 11",
      "(5 * (11 - 6)) - 1"
    ]
  },
  "1 5 6 12": {
    "cards": "1 5 6 12",
    "has_solution": "Y",
    "num_solutions": 144,
    "solutions": [
      "12 + (5 + (1 + 6))",
      "6 + (1 + (5 + 12))",
      "(1 + 12) + (5 + 6)",
      "(1 + (6 + 5)) + 12",
      "((12 + 6) + 5) + 1",
      "(1 + (6 + 12)) + 5",
      "6 + (1 + (12 + 5))",
      "1 + ((6 + 5) + 12)",
      "5 + (6 + (12 + 1))",
      "1 + ((5 + 12) + 6)",
      "(5 + (1 + 12)) + 6",
      "5 + ((6 + 12) + 1)",
      "1 + (6 + (12 + 5))",
      "((1 + 5) + 6) + 12",
      "5 + (1 + (12 + 6))",
      "1 + (12 + (6 + 5))",
      "((1 + 5) * 6) - 12",
      "12 + (1 + (5 + 6))",
      "((5 + 1) + 12) + 6",
      "(12 + 6) + (1 + 5)",
      "((12 + 6) + 1) + 5",
      "(6 + 1) + (5 + 12)",
      "(1 + 5) + (12 + 6)",
      "(6 + (12 + 5)) + 1",
      "5 + (6 + (1 + 12))",
      "(6 * (5 + 1)) - 12",
      "((1 - 5) + 6) * 12",
      "((6 + 12) + 1) + 5",
      "((12 + 5) + 6) + 1",
      "(1 + (12 + 5)) + 6",
      "(1 - 5) * (6 - 12)",
      "(1 + (12 + 6)) + 5",
      "12 * (1 + (6 - 5))",
      "((5 + 1) + 6) + 12",
      "6 + ((5 + 12) + 1)",
      "((6 + 12) + 5) + 1",
      "(5 + (12 + 6)) + 1",
      "(12 + (6 + 1)) + 5",
      "1 + ((12 + 6) + 5)",
      "(12 + (1 + 6)) + 5",
      "((1 + 6) + 5) + 12",
      "12 + ((1 + 5) + 6)",
      "(6 + 5) + (1 + 12)",
      "((1 + 6) + 12) + 5",
      "((1 + 12) + 5) + 6",
      "5 + (12 + (1 + 6))",
      "12 + ((6 + 5) + 1)",
      "5 + ((12 + 6) + 1)",
      "(6 + (1 + 12)) + 5",
      "12 * ((1 - 5) + 6)",
      "1 + ((12 + 5) + 6)",
      "(5 + (1 + 6)) + 12",
      "((5 + 6) + 1) + 12",
      "12 * ((1 + 6) - 5)",
      "(6 + (12 + 1)) + 5",
      "((6 + 1) + 5) + 12",
      "5 + ((1 + 12) + 6)",
      "(12 + (5 + 6)) + 1",
      "12 * (1 - (5 - 6))",
      "((1 + 5) + 12) + 6",
      "6 + ((1 + 12) + 5)",
      "12 + (6 + (1 + 5))",
      "12 * ((6 - 5) + 1)",
      "12 + (6 + (5 + 1))",
      "6 + ((12 + 5) + 1)",
      "(5 + 12) + (1 + 6)",
      "(1 + (5 + 6)) + 12",
      "((12 + 1) + 6) + 5",
      "(6 + 1) + (12 + 5)",
      "((6 + 1) - 5) * 12",
      "(5 + 6) + (12 + 1)",
      "5 + (1 + (6 + 12))",
      "(12 + 1) + (6 + 5)",
      "1 + ((6 + 12) + 5)",
      "(6 + (1 + 5)) + 12",
      "12 + ((5 + 6) + 1)",
      "(6 + 12) + (1 + 5)",
      "(5 + (12 + 1)) + 6",
      "1 + (6 + (5 + 12))",
      "(12 - 6) * (5 - 1)",
      "6 + ((12 + 1) + 5)",
      "((6 - 5) + 1) * 12",
      "12 + ((5 + 1) + 6)",
      "(6 + (5 + 1)) + 12",
      "1 + ((5 + 6) + 12)",
      "1 + (5 + (6 + 12))",
      "(6 + (1 - 5)) * 12",
      "(1 + 6) + (5 + 12)",
      "6 + (12 + (5 + 1))",
      "1 + (12 + (5 + 6))",
      "12 + (5 + (6 + 1))",
      "(5 + (6 + 1)) + 12",
      "(12 + 6) + (5 + 1)",
      "6 + ((5 + 1) + 12)",
      "(1 + (5 + 12)) + 6",
      "(1 + 5) + (6 + 12)",
      "((5 + 1) * 6) - 12",
      "(6 * (1 + 5)) - 12",
      "((12 + 1) + 5) + 6",
      "(5 + (6 + 12)) + 1",
      "(6 - 12) * (1 - 5)",
      "5 + (12 + (6 + 1))",
      "12 * ((6 + 1) - 5)",
      "(5 + 6) + (1 + 12)",
      "(5 + 1) + (12 + 6)",
      "(12 + 5) + (1 + 6)",
      "(6 + 5) + (12 + 1)",
      "(6 - (5 - 1)) * 12",
      "12 * (6 - (5 - 1))",
      "12 + ((6 + 1) + 5)",
      "(5 + 12) + (6 + 1)",
      "6 + ((1 + 5) + 12)",
      "((6 + 1) + 12) + 5",
      "(6 + (5 + 12)) + 1",
      "(12 + (6 + 5)) + 1",
      "((6 + 5) + 12) + 1",
      "((1 + 6) - 5) * 12",
      "((5 + 12) + 6) + 1",
      "((1 + 12) + 6) + 5",
      "12 + (1 + (6 + 5))",
      "(1 + (6 - 5)) * 12",
      "6 + (5 + (12 + 1))",
      "6 + (5 + (1 + 12))",
      "(1 - (5 - 6)) * 12",
      "(12 + (5 + 1)) + 6",
      "(5 - 1) * (12 - 6)",
      "5 + ((12 + 1) + 6)",
      "((5 + 12) + 1) + 6",
      "5 + ((6 + 1) + 12)",
      "5 + ((1 + 6) + 12)",
      "12 * (6 + (1 - 5))",
      "6 + (12 + (1 + 5))",
      "((5 + 6) + 12) + 1",
      "(12 + (1 + 5)) + 6",
      "(12 + 1) + (5 + 6)",
      "((12 + 5) + 1) + 6",
      "(1 + 6) + (12 + 5)",
      "((6 + 5) + 1) + 12",
      "(5 + 1) + (6 + 12)",
      "(6 + 12) + (5 + 1)",
      "12 + ((1 + 6) + 5)",
      "1 + (5 + (12 + 6))",
      "(12 + 5) + (6 + 1)",
      "(1 + 12) + (6 + 5)"
    ]
  },
  "1 5 6 13": {
    "cards": "1 5 6 13",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "(5 + (1 * 6)) + 13",
      "(13 + (1 * 5)) + 6",
      "6 + (13 + (1 * 5))",
      "((13 + 6) + 5) * 1",
      "(6 + (13 * 1)) + 5",
      "6 + (13 + (5 / 1))",
      "(6 + (5 + 13)) * 1",
      "((5 + 13) * 1) + 6",
      "(5 + (6 / 1)) + 13",
      "(13 + 5) + (6 / 1)",
      "(6 + 13) + (5 / 1)",
      "(13 + 5) + (1 * 6)",
      "6 + ((1 * 5) + 13)",
      "5 + ((1 * 13) + 6)",
      "13 + (6 + (1 * 5))",
      "6 + (13 + (5 * 1))",
      "1 * ((6 + 13) + 5)",
      "13 + ((5 + 6) / 1)",
      "5 + (13 + (1 * 6))",
      "1 * (5 + (13 + 6))",
      "(5 + 6) + (1 * 13)",
      "((6 + 5) / 1) + 13",
      "(6 + 13) + (1 * 5)",
      "(13 + 6) + (5 * 1)",
      "((5 + 6) + 13) * 1",
      "(5 + 13) + (6 * 1)",
      "5 + ((6 + 13) * 1)",
      "1 * (6 + (13 + 5))",
      "((5 + 6) * 1) + 13",
      "(5 / 1) + (6 + 13)",
      "13 + (5 + (1 * 6))",
      "(6 + 5) + (13 / 1)",
      "5 + ((6 * 1) + 13)",
      "6 + ((13 + 5) / 1)",
      "((6 + 13) + 5) / 1",
      "1 * ((5 + 13) + 6)",
      "((1 * 6) + 13) + 5",
      "((13 * 1) + 6) + 5",
      "(5 + 6) + (13 * 1)",
      "5 + ((6 / 1) + 13)",
      "5 + (13 + (6 * 1))",
      "((13 / 1) + 5) + 6",
      "(5 + 6) + (13 / 1)",
      "((1 * 13) + 5) + 6",
      "(1 * (5 + 6)) + 13",
      "(13 / 1) + (6 + 5)",
      "6 + ((5 / 1) + 13)",
      "(1 * (5 + 13)) + 6",
      "((5 + 13) / 1) + 6",
      "(6 + (13 + 5)) * 1",
      "((6 / 1) + 5) + 13",
      "((6 + 5) * 1) + 13",
      "(13 + (5 * 1)) + 6",
      "(5 + (13 + 6)) * 1",
      "5 + ((6 + 13) / 1)",
      "(5 * 1) + (13 + 6)",
      "6 + ((5 + 13) / 1)",
      "(1 * 13) + (6 + 5)",
      "13 + ((1 * 6) + 5)",
      "13 + (6 + (5 / 1))",
      "((5 + 13) + 6) / 1",
      "((5 + 13) + 6) * 1",
      "1 * ((13 + 5) + 6)",
      "((6 + 5) + 13) / 1",
      "(5 + (6 + 13)) * 1",
      "13 + ((1 * 5) + 6)",
      "6 + ((13 + 5) * 1)",
      "((6 + 13) + 5) * 1",
      "(1 * 5) + (6 + 13)",
      "1 * (5 + (6 + 13))",
      "(13 + (6 * 1)) + 5",
      "13 + (1 * (5 + 6))",
      "1 * ((13 + 6) + 5)",
      "((13 + 6) / 1) + 5",
      "13 + ((5 * 1) + 6)",
      "(6 + (1 * 13)) + 5",
      "13 + (5 + (6 * 1))",
      "13 + ((6 * 1) + 5)",
      "(1 * 6) + (5 + 13)",
      "((6 * 1) + 5) + 13",
      "5 + (6 + (13 * 1))",
      "((13 + 6) * 1) + 5",
      "(13 + (1 * 6)) + 5",
      "((6 + 5) + 13) * 1",
      "((5 + 6) / 1) + 13",
      "(5 + (6 + 13)) / 1",
      "(6 / 1) + (13 + 5)",
      "1 * (13 + (6 + 5))",
      "6 + ((13 * 1) + 5)",
      "(5 + (13 + 6)) / 1",
      "((1 * 13) + 6) + 5",
      "(5 + (13 / 1)) + 6",
      "((13 + 5) / 1) + 6",
      "(6 * 1) + (5 + 13)",
      "6 + ((5 + 13) * 1)",
      "13 + (1 * (6 + 5))",
      "(13 + (6 / 1)) + 5",
      "13 + (6 + (5 * 1))",
      "((5 + 6) + 13) / 1",
      "(1 * (6 + 13)) + 5",
      "13 + ((6 / 1) + 5)",
      "(5 + (1 * 13)) + 6",
      "(6 + (1 * 5)) + 13",
      "(13 + 5) + (6 * 1)",
      "1 * (13 + (5 + 6))",
      "13 + ((6 + 5) * 1)",
      "5 + ((13 / 1) + 6)",
      "(6 + (13 / 1)) + 5",
      "((6 + 13) * 1) + 5",
      "((5 / 1) + 6) + 13",
      "((5 / 1) + 13) + 6",
      "(13 / 1) + (5 + 6)",
      "(1 * 13) + (5 + 6)",
      "1 * (6 + (5 + 13))",
      "((6 + 13) / 1) + 5",
      "((6 / 1) + 13) + 5",
      "((1 * 6) + 5) + 13",
      "1 * ((5 + 6) + 13)",
      "(1 * (13 + 5)) + 6",
      "13 + ((5 / 1) + 6)",
      "((13 * 1) + 5) + 6",
      "(1 * (6 + 5)) + 13",
      "(13 * 1) + (5 + 6)",
      "(5 + (13 * 1)) + 6",
      "(6 + (5 + 13)) / 1",
      "13 + (5 + (6 / 1))",
      "(5 + 13) + (1 * 6)",
      "((6 * 1) + 13) + 5",
      "6 + ((13 / 1) + 5)",
      "5 + (6 + (1 * 13))",
      "(13 + (5 / 1)) + 6",
      "6 + (1 * (13 + 5))",
      "5 + (6 + (13 / 1))",
      "(5 * 1) + (6 + 13)",
      "(1 * 5) + (13 + 6)",
      "6 + ((5 * 1) + 13)",
      "5 + ((13 + 6) * 1)",
      "13 + ((6 + 5) / 1)",
      "(13 + (5 + 6)) * 1",
      "(13 * 1) + (6 + 5)",
      "((5 * 1) + 6) + 13",
      "(5 + 13) + (6 / 1)",
      "13 + ((5 + 6) * 1)",
      "(6 + 5) + (1 * 13)",
      "5 + ((13 + 6) / 1)",
      "((1 * 5) + 6) + 13",
      "6 + (5 + (13 * 1))",
      "((5 * 1) + 13) + 6",
      "((13 + 6) + 5) / 1",
      "(5 + (6 * 1)) + 13",
      "(13 + 6) + (5 / 1)",
      "((1 * 5) + 13) + 6",
      "6 + (5 + (13 / 1))",
      "(6 * 1) + (13 + 5)",
      "(6 + (13 + 5)) / 1",
      "((13 + 5) + 6) / 1",
      "(6 / 1) + (5 + 13)",
      "((13 + 5) + 6) * 1",
      "(13 + (6 + 5)) / 1",
      "((13 / 1) + 6) + 5",
      "(5 / 1) + (13 + 6)",
      "(6 + (5 / 1)) + 13",
      "6 + ((1 * 13) + 5)",
      "5 + ((13 * 1) + 6)",
      "(1 * 6) + (13 + 5)",
      "1 * ((6 + 5) + 13)",
      "6 + (5 + (1 * 13))",
      "(13 + (6 + 5)) * 1",
      "(13 + (5 + 6)) / 1",
      "5 + (1 * (13 + 6))",
      "((13 + 5) * 1) + 6",
      "(13 + 6) + (1 * 5)",
      "5 + ((1 * 6) + 13)",
      "5 + (13 + (6 / 1))",
      "6 + (1 * (5 + 13))",
      "(6 + 5) + (13 * 1)",
      "(1 * (13 + 6)) + 5",
      "(6 + (5 * 1)) + 13",
      "(6 + 13) + (5 * 1)",
      "5 + (1 * (6 + 13))"
    ]
  },
  "1 5 7 7": {
    "cards": "1 5 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 7 8": {
    "cards": "1 5 7 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "8 * ((1 + 7) - 5)",
      "(7 + 1) * (8 - 5)",
      "((7 + 1) - 5) * 8",
      "((7 - 5) + 1) * 8",
      "((1 - 5) + 7) * 8",
      "8 * (1 + (7 - 5))",
      "(7 + (1 - 5)) * 8",
      "(8 - 5) * (1 + 7)",
      "((1 + 7) - 5) * 8",
      "(1 - (5 - 7)) * 8",
      "8 * ((1 - 5) + 7)",
      "8 * ((7 - 5) + 1)",
      "8 * (7 - (5 - 1))",
      "8 * ((7 + 1) - 5)",
      "(1 + 7) * (8 - 5)",
      "8 * (1 - (5 - 7))",
      "(8 - 5) * (7 + 1)",
      "(7 - (5 - 1)) * 8",
      "8 * (7 + (1 - 5))",
      "(1 + (7 - 5)) * 8"
    ]
  },
  "1 5 7 9": {
    "cards": "1 5 7 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 - 5) * (7 - 1)",
      "(7 - 1) * (9 - 5)",
      "(5 - 9) * (1 - 7)",
      "(1 - 7) * (5 - 9)"
    ]
  },
  "1 5 7 10": {
    "cards": "1 5 7 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "10 * ((7 / 5) + 1)",
      "((7 / 5) + 1) * 10",
      "(5 * 7) - (1 + 10)",
      "(1 + (7 / 5)) * 10",
      "(5 * 7) - (10 + 1)",
      "(7 * 5) - (1 + 10)",
      "10 * (1 + (7 / 5))",
      "((7 * 5) - 1) - 10",
      "((5 * 7) - 1) - 10",
      "((5 * 7) - 10) - 1",
      "((7 * 5) - 10) - 1",
      "(7 * 5) - (10 + 1)"
    ]
  },
  "1 5 7 11": {
    "cards": "1 5 7 11",
    "has_solution": "Y",
    "num_solutions": 160,
    "solutions": [
      "(7 + 5) + (11 + 1)",
      "1 + ((7 + 5) + 11)",
      "((1 + 5) + 11) + 7",
      "5 + ((1 + 7) + 11)",
      "((7 * 5) / 1) - 11",
      "(7 * (5 * 1)) - 11",
      "11 + (5 + (7 + 1))",
      "((11 + 7) + 5) + 1",
      "((7 / 1) * 5) - 11",
      "1 * ((7 * 5) - 11)",
      "((5 * 7) - 11) / 1",
      "7 + ((1 + 5) + 11)",
      "11 + (7 + (1 + 5))",
      "((7 + 11) + 5) + 1",
      "(5 + (1 + 11)) + 7",
      "(11 + 7) + (5 + 1)",
      "(7 + (11 + 1)) + 5",
      "(5 + 11) + (1 + 7)",
      "(7 + 1) + (5 + 11)",
      "(5 + (11 + 7)) + 1",
      "((5 + 7) + 1) + 11",
      "7 + ((11 + 5) + 1)",
      "(11 + (1 + 5)) + 7",
      "7 + (11 + (1 + 5))",
      "(11 - 7) * (5 + 1)",
      "(11 - 7) * (1 + 5)",
      "(11 + 7) + (1 + 5)",
      "((5 + 1) + 7) + 11",
      "((1 + 7) + 5) + 11",
      "(5 + 1) + (7 + 11)",
      "(11 + 1) + (5 + 7)",
      "7 + (5 + (1 + 11))",
      "1 + ((5 + 11) + 7)",
      "(7 * (5 / 1)) - 11",
      "(1 + (5 + 11)) + 7",
      "(7 + 5) + (1 + 11)",
      "5 + ((7 + 11) + 1)",
      "((11 + 1) + 5) + 7",
      "((7 + 5) + 11) + 1",
      "7 + ((1 + 11) + 5)",
      "(7 - 5) * (11 + 1)",
      "(7 + (11 + 5)) + 1",
      "(5 + 1) * (11 - 7)",
      "((5 * 7) * 1) - 11",
      "((5 + 1) + 11) + 7",
      "(5 + (1 + 7)) + 11",
      "(5 + (7 + 1)) + 11",
      "5 + (1 + (11 + 7))",
      "((7 + 11) + 1) + 5",
      "((5 + 7) + 11) + 1",
      "(5 / (1 / 7)) - 11",
      "(5 * (7 * 1)) - 11",
      "((11 + 5) + 7) + 1",
      "(1 + (5 + 7)) + 11",
      "(7 / (1 / 5)) - 11",
      "1 + ((11 + 7) + 5)",
      "(7 + 11) + (1 + 5)",
      "(11 + (5 + 7)) + 1",
      "1 * ((5 * 7) - 11)",
      "(5 + 11) + (7 + 1)",
      "(11 + (7 + 1)) + 5",
      "7 + (1 + (11 + 5))",
      "((1 * 5) * 7) - 11",
      "5 + ((1 + 11) + 7)",
      "((5 * 1) * 7) - 11",
      "(1 + 7) + (11 + 5)",
      "(11 + 1) * (7 - 5)",
      "((7 * 5) * 1) - 11",
      "(1 + 11) * (7 - 5)",
      "5 + (7 + (1 + 11))",
      "(1 + (11 + 7)) + 5",
      "(5 * 7) - (11 / 1)",
      "(7 * 5) - (11 / 1)",
      "1 + ((5 + 7) + 11)",
      "((5 + 11) + 7) + 1",
      "(5 * (7 / 1)) - 11",
      "((1 + 11) + 5) + 7",
      "11 + ((7 + 5) + 1)",
      "(5 + 7) + (11 + 1)",
      "11 + ((7 + 1) + 5)",
      "11 + (1 + (7 + 5))",
      "(7 + (5 + 1)) + 11",
      "1 + ((11 + 5) + 7)",
      "(11 + 5) + (7 + 1)",
      "7 + (11 + (5 + 1))",
      "((5 * 7) - 11) * 1",
      "((1 * 7) * 5) - 11",
      "((7 + 1) + 11) + 5",
      "((1 + 7) + 11) + 5",
      "(1 + 5) + (11 + 7)",
      "(7 + 11) + (5 + 1)",
      "(7 + 1) + (11 + 5)",
      "(1 + 5) + (7 + 11)",
      "(5 + 1) + (11 + 7)",
      "(5 + 7) + (1 + 11)",
      "1 + (5 + (11 + 7))",
      "11 + ((1 + 5) + 7)",
      "5 + (1 + (7 + 11))",
      "5 + (11 + (7 + 1))",
      "5 + ((7 + 1) + 11)",
      "((5 + 11) + 1) + 7",
      "7 + (1 + (5 + 11))",
      "(5 * 7) - (11 * 1)",
      "(1 + 5) * (11 - 7)",
      "1 + (5 + (7 + 11))",
      "(11 + (1 + 7)) + 5",
      "(11 + (7 + 5)) + 1",
      "(7 * (1 * 5)) - 11",
      "11 + ((1 + 7) + 5)",
      "((7 + 5) + 1) + 11",
      "((7 * 5) - 11) / 1",
      "(11 + 5) + (1 + 7)",
      "1 + ((7 + 11) + 5)",
      "(7 - 5) * (1 + 11)",
      "(5 + (7 + 11)) + 1",
      "((5 * 7) / 1) - 11",
      "11 + ((5 + 7) + 1)",
      "11 + (5 + (1 + 7))",
      "((5 / 1) * 7) - 11",
      "((7 + 1) + 5) + 11",
      "(7 * 5) - (11 * 1)",
      "1 + (7 + (11 + 5))",
      "((7 * 5) - 11) * 1",
      "(1 + 7) + (5 + 11)",
      "((7 * 1) * 5) - 11",
      "((11 + 7) + 1) + 5",
      "((1 + 11) + 7) + 5",
      "7 + ((5 + 11) + 1)",
      "(7 + (1 + 11)) + 5",
      "(1 * (7 * 5)) - 11",
      "(7 + (1 + 5)) + 11",
      "(7 * 5) - (1 * 11)",
      "7 + ((11 + 1) + 5)",
      "(11 + (5 + 1)) + 7",
      "(1 + 11) + (5 + 7)",
      "5 + (7 + (11 + 1))",
      "(11 + 1) + (7 + 5)",
      "7 + ((5 + 1) + 11)",
      "5 + ((11 + 7) + 1)",
      "11 + (1 + (5 + 7))",
      "(5 * 7) - (1 * 11)",
      "(1 + (7 + 5)) + 11",
      "(7 + (5 + 11)) + 1",
      "(5 + (11 + 1)) + 7",
      "(1 + 11) + (7 + 5)",
      "((11 + 1) + 7) + 5",
      "(1 + (7 + 11)) + 5",
      "11 + ((5 + 1) + 7)",
      "7 + (5 + (11 + 1))",
      "(5 * (1 * 7)) - 11",
      "1 + (7 + (5 + 11))",
      "5 + ((11 + 1) + 7)",
      "(1 * (5 * 7)) - 11",
      "((11 + 5) + 1) + 7",
      "(1 + (11 + 5)) + 7",
      "1 + (11 + (5 + 7))",
      "11 + (7 + (5 + 1))",
      "5 + (11 + (1 + 7))",
      "1 + (11 + (7 + 5))",
      "((1 + 5) + 7) + 11"
    ]
  },
  "1 5 7 12": {
    "cards": "1 5 7 12",
    "has_solution": "Y",
    "num_solutions": 230,
    "solutions": [
      "(12 + (1 * 5)) + 7",
      "(12 + 5) + (7 / 1)",
      "5 + (12 + (7 / 1))",
      "1 + ((5 * 7) - 12)",
      "((5 + 12) * 1) + 7",
      "5 + (12 + (7 * 1))",
      "12 * ((7 - 5) * 1)",
      "12 + ((5 * 1) + 7)",
      "((7 - 5) * 12) * 1",
      "(7 - (5 / 1)) * 12",
      "(1 * (7 + 5)) + 12",
      "(12 * 1) + (7 + 5)",
      "((1 * 5) + 12) + 7",
      "(7 + (12 + 5)) / 1",
      "5 + ((7 + 12) * 1)",
      "(12 + (5 / 1)) + 7",
      "((12 + 5) * 1) + 7",
      "(7 + (5 + 12)) / 1",
      "7 + ((12 + 5) / 1)",
      "((12 + 7) + 5) * 1",
      "((12 * 1) + 7) + 5",
      "(5 + (7 * 1)) + 12",
      "5 + ((1 * 12) + 7)",
      "((12 / 1) + 5) + 7",
      "((7 + 5) / 1) + 12",
      "(12 + 7) + (5 * 1)",
      "(5 + (7 + 12)) * 1",
      "(1 * 7) + (12 + 5)",
      "5 + ((7 / 1) + 12)",
      "12 + (5 + (1 * 7))",
      "((5 + 7) * 1) + 12",
      "5 + (12 + (1 * 7))",
      "(5 + 7) + (12 * 1)",
      "12 * ((7 / 1) - 5)",
      "(5 + 12) + (7 * 1)",
      "((7 * 1) + 5) + 12",
      "1 - (12 - (7 * 5))",
      "5 + (1 * (7 + 12))",
      "((7 + 5) + 12) / 1",
      "((12 + 7) + 5) / 1",
      "((5 * 1) + 12) + 7",
      "5 + (1 * (12 + 7))",
      "7 + ((5 * 1) + 12)",
      "7 + (12 + (5 / 1))",
      "((7 + 12) + 5) / 1",
      "5 + ((12 + 7) * 1)",
      "(12 + (5 * 1)) + 7",
      "(12 + (7 + 5)) * 1",
      "(12 + (7 * 1)) + 5",
      "1 + ((7 * 5) - 12)",
      "(12 / 1) * (7 - 5)",
      "((7 / 1) + 12) + 5",
      "1 * (12 + (5 + 7))",
      "(1 - 12) + (5 * 7)",
      "((7 * 5) + 1) - 12",
      "(12 + 5) + (1 * 7)",
      "1 * ((12 + 7) + 5)",
      "12 + ((7 * 1) + 5)",
      "(12 + 7) + (1 * 5)",
      "((5 + 7) + 12) / 1",
      "12 / (1 / (7 - 5))",
      "(7 + 5) + (12 * 1)",
      "(5 / 1) + (12 + 7)",
      "12 * ((7 * 1) - 5)",
      "5 + (7 + (12 / 1))",
      "((7 + 5) * 1) + 12",
      "7 + ((5 + 12) / 1)",
      "(5 + (7 / 1)) + 12",
      "((12 + 7) * 1) + 5",
      "12 + ((1 * 7) + 5)",
      "(12 / 1) + (5 + 7)",
      "((1 * 12) + 5) + 7",
      "((7 * 1) - 5) * 12",
      "12 * (1 * (7 - 5))",
      "12 + ((7 + 5) / 1)",
      "7 + (1 * (12 + 5))",
      "(7 * 5) - (12 - 1)",
      "5 + ((12 + 7) / 1)",
      "(5 + (1 * 7)) + 12",
      "(5 + (12 + 7)) / 1",
      "5 + (7 + (12 * 1))",
      "(1 * 12) + (5 + 7)",
      "((5 + 7) / 1) + 12",
      "1 - (12 - (5 * 7))",
      "12 + (1 * (7 + 5))",
      "(7 + (5 * 1)) + 12",
      "(5 / 1) + (7 + 12)",
      "(5 + 7) + (12 / 1)",
      "(7 + (1 * 5)) + 12",
      "(5 * 7) - (12 - 1)",
      "(5 * 7) + (1 - 12)",
      "12 + ((1 * 5) + 7)",
      "((7 * 1) + 12) + 5",
      "(7 + 5) + (1 * 12)",
      "12 + ((5 / 1) + 7)",
      "1 * (5 + (12 + 7))",
      "((1 * 7) + 12) + 5",
      "7 + (1 * (5 + 12))",
      "((1 * 12) + 7) + 5",
      "12 * ((7 - 5) / 1)",
      "1 * ((5 + 7) + 12)",
      "5 + ((7 + 12) / 1)",
      "(12 + (7 / 1)) + 5",
      "12 * (7 - (5 * 1))",
      "1 * (7 + (5 + 12))",
      "((12 + 5) + 7) * 1",
      "(5 * 1) + (12 + 7)",
      "((7 / 1) - 5) * 12",
      "7 + ((12 * 1) + 5)",
      "7 + ((5 / 1) + 12)",
      "1 * (12 * (7 - 5))",
      "12 + ((7 + 5) * 1)",
      "(7 / 1) + (12 + 5)",
      "((5 + 12) + 7) / 1",
      "((12 - 7) * 5) - 1",
      "(7 - 5) / (1 / 12)",
      "(7 + (5 / 1)) + 12",
      "12 + (7 + (5 * 1))",
      "(1 * (7 - 5)) * 12",
      "((5 + 12) / 1) + 7",
      "((12 * 1) + 5) + 7",
      "((12 / 1) + 7) + 5",
      "(1 * 5) + (12 + 7)",
      "(5 + (12 * 1)) + 7",
      "((5 + 7) + 12) * 1",
      "(7 - 5) * (12 / 1)",
      "12 + ((5 + 7) * 1)",
      "(7 - 5) * (1 * 12)",
      "((7 * 5) - 12) + 1",
      "7 + ((12 / 1) + 5)",
      "1 * (7 + (12 + 5))",
      "(5 + (7 + 12)) / 1",
      "(5 * (12 - 7)) - 1",
      "7 + ((12 + 5) * 1)",
      "((5 * 7) - 12) + 1",
      "(12 + 7) + (5 / 1)",
      "((7 + 5) + 12) * 1",
      "((7 + 12) + 5) * 1",
      "((7 / 1) + 5) + 12",
      "5 + ((7 * 1) + 12)",
      "(5 * 1) + (7 + 12)",
      "(1 * 7) + (5 + 12)",
      "(12 * (7 - 5)) / 1",
      "(1 + (7 * 5)) - 12",
      "((1 * 7) + 5) + 12",
      "(7 - (1 * 5)) * 12",
      "((1 * 7) - 5) * 12",
      "(7 + (12 * 1)) + 5",
      "(1 * (12 + 5)) + 7",
      "((7 - 5) / 1) * 12",
      "12 + ((5 + 7) / 1)",
      "((1 * 5) + 7) + 12",
      "1 * ((5 + 12) + 7)",
      "7 + ((1 * 12) + 5)",
      "(12 + (5 + 7)) * 1",
      "(1 + (5 * 7)) - 12",
      "((5 / 1) + 12) + 7",
      "(1 * 12) * (7 - 5)",
      "((5 / 1) + 7) + 12",
      "5 + ((1 * 7) + 12)",
      "((12 + 7) / 1) + 5",
      "12 + (5 + (7 * 1))",
      "(5 + (12 / 1)) + 7",
      "5 + (7 + (1 * 12))",
      "7 + (5 + (1 * 12))",
      "1 * ((7 + 5) + 12)",
      "((7 + 12) / 1) + 5",
      "(1 * (5 + 7)) + 12",
      "(1 * (7 + 12)) + 5",
      "((12 + 5) + 7) / 1",
      "7 + (5 + (12 * 1))",
      "(12 + 5) + (7 * 1)",
      "(12 + (7 + 5)) / 1",
      "(1 * 5) + (7 + 12)",
      "(5 + (12 + 7)) * 1",
      "(7 + (12 / 1)) + 5",
      "(1 * (12 + 7)) + 5",
      "(7 / 1) + (5 + 12)",
      "(7 + 12) + (5 / 1)",
      "(1 * (5 + 12)) + 7",
      "(5 + 12) + (7 / 1)",
      "(12 + (1 * 7)) + 5",
      "1 * ((12 + 5) + 7)",
      "12 * (7 - (5 / 1))",
      "(5 + (1 * 12)) + 7",
      "(12 * (7 - 5)) * 1",
      "(7 + (5 + 12)) * 1",
      "((7 - 5) * 12) / 1",
      "(1 * 12) + (7 + 5)",
      "((12 + 5) / 1) + 7",
      "(7 + 12) + (1 * 5)",
      "(7 + 12) + (5 * 1)",
      "((7 - 5) * 1) * 12",
      "7 + ((1 * 5) + 12)",
      "12 + (7 + (1 * 5))",
      "(7 + (1 * 12)) + 5",
      "(7 * 1) + (12 + 5)",
      "((5 * 7) + 1) - 12",
      "(7 + (12 + 5)) * 1",
      "((5 + 12) + 7) * 1",
      "12 * (7 - (1 * 5))",
      "(12 / 1) + (7 + 5)",
      "7 + (5 + (12 / 1))",
      "1 * ((7 - 5) * 12)",
      "(12 * 1) + (5 + 7)",
      "12 + (1 * (5 + 7))",
      "(5 + 12) + (1 * 7)",
      "(7 - 5) * (12 * 1)",
      "(12 * 1) * (7 - 5)",
      "1 * (5 + (7 + 12))",
      "7 + (12 + (1 * 5))",
      "((5 * 1) + 7) + 12",
      "5 + ((12 / 1) + 7)",
      "(12 + (5 + 7)) / 1",
      "5 + ((12 * 1) + 7)",
      "12 * ((1 * 7) - 5)",
      "12 + (7 + (5 / 1))",
      "(7 * 1) + (5 + 12)",
      "(7 + 5) + (12 / 1)",
      "(5 + 7) + (1 * 12)",
      "1 * ((7 + 12) + 5)",
      "((7 + 12) * 1) + 5",
      "(1 - 12) + (7 * 5)",
      "(7 * 5) + (1 - 12)",
      "7 + ((5 + 12) * 1)",
      "12 + (5 + (7 / 1))",
      "1 * (12 + (7 + 5))",
      "(7 - (5 * 1)) * 12",
      "7 + (12 + (5 * 1))",
      "12 + ((7 / 1) + 5)"
    ]
  },
  "1 5 7 13": {
    "cards": "1 5 7 13",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "(5 + (7 - 1)) + 13",
      "(7 + 13) - (1 - 5)",
      "5 + (13 - (1 - 7))",
      "13 + (5 - (1 - 7))",
      "(5 - 1) + (13 + 7)",
      "7 + (5 + (13 - 1))",
      "((5 - 1) + 7) + 13",
      "((13 + 5) - 1) + 7",
      "5 + ((13 - 1) + 7)",
      "(13 - 1) * (7 - 5)",
      "(13 - 1) + (5 + 7)",
      "(7 + (5 + 13)) - 1",
      "(7 + (13 - 1)) + 5",
      "((5 + 13) - 1) + 7",
      "(7 - (1 - 13)) + 5",
      "(13 + (7 - 1)) + 5",
      "(7 + 13) + (5 - 1)",
      "13 - (1 - (5 + 7))",
      "7 + ((13 - 1) + 5)",
      "(5 - 1) * (13 - 7)",
      "((13 + 7) + 5) - 1",
      "(7 + (13 + 5)) - 1",
      "(13 + 7) - (1 - 5)",
      "13 + ((7 + 5) - 1)",
      "(7 - 1) + (5 + 13)",
      "7 + ((13 + 5) - 1)",
      "7 + ((5 - 1) + 13)",
      "5 + (13 + (7 - 1))",
      "((7 + 13) + 5) - 1",
      "13 - (1 - (7 + 5))",
      "((7 + 13) - 1) + 5",
      "13 + ((5 + 7) - 1)",
      "13 - ((1 - 5) - 7)",
      "(13 + 7) + (5 - 1)",
      "(13 - (1 - 7)) + 5",
      "7 - (1 - (13 + 5))",
      "5 - (1 - (7 + 13))",
      "(5 - 7) * (1 - 13)",
      "5 + (7 - (1 - 13))",
      "((13 + 7) - 1) + 5",
      "(5 + 7) - (1 - 13)",
      "(5 - (1 - 13)) + 7",
      "13 + (7 - (1 - 5))",
      "(5 + (7 + 13)) - 1",
      "(5 + 7) + (13 - 1)",
      "((7 - 1) + 5) + 13",
      "5 + ((7 + 13) - 1)",
      "(1 - 5) * (7 - 13)",
      "13 + (7 + (5 - 1))",
      "7 - (1 - (5 + 13))",
      "7 + (13 + (5 - 1))",
      "((13 + 5) + 7) - 1",
      "((5 - 1) + 13) + 7",
      "(13 - 1) + (7 + 5)",
      "5 + (7 + (13 - 1))",
      "(13 + (7 + 5)) - 1",
      "(5 + 13) - (1 - 7)",
      "(7 - 1) + (13 + 5)",
      "(13 + 5) + (7 - 1)",
      "((5 + 7) - 1) + 13",
      "(13 + 5) - (1 - 7)",
      "13 - ((1 - 7) - 5)",
      "(13 - (1 - 5)) + 7",
      "7 + ((5 + 13) - 1)",
      "(5 + (13 + 7)) - 1",
      "((5 + 7) + 13) - 1",
      "13 + (5 + (7 - 1))",
      "(1 - 13) * (5 - 7)",
      "7 + (5 - (1 - 13))",
      "(7 - (1 - 5)) + 13",
      "7 + (13 - (1 - 5))",
      "((13 - 1) + 5) + 7",
      "((7 + 5) + 13) - 1",
      "((5 + 13) + 7) - 1",
      "(7 + 5) + (13 - 1)",
      "(13 - 7) * (5 - 1)",
      "7 - ((1 - 13) - 5)",
      "(5 + (13 - 1)) + 7",
      "(5 - (1 - 7)) + 13",
      "5 + ((13 + 7) - 1)",
      "13 + ((7 - 1) + 5)",
      "5 - ((1 - 13) - 7)",
      "(5 - 1) + (7 + 13)",
      "((13 - 1) + 7) + 5",
      "13 + ((5 - 1) + 7)",
      "(7 - 13) * (1 - 5)",
      "(7 - 5) * (13 - 1)",
      "((7 + 5) - 1) + 13",
      "5 + ((7 - 1) + 13)",
      "(13 + (5 + 7)) - 1",
      "5 - (1 - (13 + 7))",
      "(13 + (5 - 1)) + 7",
      "(5 + 13) + (7 - 1)",
      "5 - ((1 - 7) - 13)",
      "(7 + 5) - (1 - 13)",
      "7 - ((1 - 5) - 13)",
      "(7 + (5 - 1)) + 13",
      "((7 - 1) + 13) + 5"
    ]
  },
  "1 5 8 8": {
    "cards": "1 5 8 8",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "8 * (1 * (8 - 5))",
      "8 * (8 - (5 * 1))",
      "8 * ((8 - 5) / 1)",
      "8 * (8 - (5 / 1))",
      "(8 / 1) * (8 - 5)",
      "8 / (1 / (8 - 5))",
      "(8 - (1 * 5)) * 8",
      "(8 * 1) * (8 - 5)",
      "(1 * 8) * (8 - 5)",
      "((8 - 5) * 8) / 1",
      "((5 - 1) * 8) - 8",
      "((1 * 8) - 5) * 8",
      "1 * ((8 - 5) * 8)",
      "(8 * (8 - 5)) * 1",
      "(8 - (5 / 1)) * 8",
      "(8 - 5) * (8 * 1)",
      "((8 - 5) * 8) * 1",
      "((8 * 1) - 5) * 8",
      "(8 - 5) * (1 * 8)",
      "1 * (8 * (8 - 5))",
      "(8 - 5) / (1 / 8)",
      "(8 * (5 - 1)) - 8",
      "8 * ((8 - 5) * 1)",
      "8 * ((8 * 1) - 5)",
      "8 * (8 - (1 * 5))",
      "(8 * (8 - 5)) / 1",
      "8 * ((8 / 1) - 5)",
      "((8 / 1) - 5) * 8",
      "(8 - (5 * 1)) * 8",
      "(1 * (8 - 5)) * 8",
      "(8 - 5) * (8 / 1)",
      "((8 - 5) * 1) * 8",
      "8 * ((1 * 8) - 5)",
      "((8 - 5) / 1) * 8"
    ]
  },
  "1 5 8 9": {
    "cards": "1 5 8 9",
    "has_solution": "Y",
    "num_solutions": 13,
    "solutions": [
      "(5 - 8) * (1 - 9)",
      "(1 - 9) * (5 - 8)",
      "8 * (9 - (5 + 1))",
      "8 * (9 - (1 + 5))",
      "(9 - (1 + 5)) * 8",
      "((9 - 1) - 5) * 8",
      "((9 - 5) - 1) * 8",
      "9 / (1 - (5 / 8))",
      "(9 - (5 + 1)) * 8",
      "(9 - 1) * (8 - 5)",
      "(8 - 5) * (9 - 1)",
      "8 * ((9 - 1) - 5)",
      "8 * ((9 - 5) - 1)"
    ]
  },
  "1 5 8 10": {
    "cards": "1 5 8 10",
    "has_solution": "Y",
    "num_solutions": 124,
    "solutions": [
      "(5 + 8) + (10 + 1)",
      "(10 + 1) + (5 + 8)",
      "((10 + 5) + 1) + 8",
      "8 + ((1 + 10) + 5)",
      "(8 + 10) + (1 + 5)",
      "(1 + 8) + (10 + 5)",
      "(10 + 5) + (1 + 8)",
      "10 + (1 + (8 + 5))",
      "5 + ((1 + 8) + 10)",
      "(1 + 8) + (5 + 10)",
      "(10 + (5 + 1)) + 8",
      "10 + ((1 + 5) + 8)",
      "(5 + 8) + (1 + 10)",
      "1 + ((10 + 8) + 5)",
      "1 + ((10 + 5) + 8)",
      "(10 + (8 + 1)) + 5",
      "(5 + 10) + (1 + 8)",
      "((10 + 1) + 5) + 8",
      "(8 + 1) + (5 + 10)",
      "(5 + (10 + 8)) + 1",
      "(8 + (10 + 1)) + 5",
      "8 + ((1 + 5) + 10)",
      "10 + (8 + (1 + 5))",
      "8 + (10 + (1 + 5))",
      "(1 + 10) + (5 + 8)",
      "(1 + (10 / 5)) * 8",
      "5 + (10 + (1 + 8))",
      "((1 + 10) + 8) + 5",
      "(10 + 5) + (8 + 1)",
      "((1 + 8) + 10) + 5",
      "(8 + 5) + (1 + 10)",
      "1 + (5 + (10 + 8))",
      "(8 + 1) + (10 + 5)",
      "1 + (10 + (5 + 8))",
      "8 * ((10 / 5) + 1)",
      "(10 + (1 + 5)) + 8",
      "(8 + (5 + 10)) + 1",
      "(5 + (1 + 10)) + 8",
      "8 + ((10 + 1) + 5)",
      "1 + (8 + (10 + 5))",
      "(1 + 5) + (8 + 10)",
      "((8 + 1) + 10) + 5",
      "(1 + (8 + 5)) + 10",
      "((1 + 5) + 10) + 8",
      "8 + (1 + (5 + 10))",
      "((1 + 8) + 5) + 10",
      "1 + (8 + (5 + 10))",
      "((5 + 10) + 1) + 8",
      "((5 + 8) + 1) + 10",
      "8 + (1 + (10 + 5))",
      "((10 + 8) + 1) + 5",
      "((5 + 8) + 10) + 1",
      "1 + ((5 + 8) + 10)",
      "10 + ((5 + 8) + 1)",
      "1 + (5 + (8 + 10))",
      "(10 + (5 + 8)) + 1",
      "(10 + (8 + 5)) + 1",
      "(5 + 1) + (8 + 10)",
      "((5 + 1) + 10) + 8",
      "(8 + 10) + (5 + 1)",
      "(1 + 10) + (8 + 5)",
      "8 + (5 + (1 + 10))",
      "(8 + (5 + 1)) + 10",
      "8 + (5 + (10 + 1))",
      "(8 + 5) + (10 + 1)",
      "(1 + (10 + 8)) + 5",
      "10 + (8 + (5 + 1))",
      "((10 + 8) + 5) + 1",
      "(1 + (5 + 10)) + 8",
      "(5 + (1 + 8)) + 10",
      "((1 + 10) + 5) + 8",
      "((8 + 10) + 1) + 5",
      "(10 + (1 + 8)) + 5",
      "10 + (5 + (1 + 8))",
      "(10 + 8) + (5 + 1)",
      "((10 / 5) + 1) * 8",
      "1 + ((5 + 10) + 8)",
      "10 + (5 + (8 + 1))",
      "5 + ((10 + 1) + 8)",
      "((8 + 5) + 1) + 10",
      "(5 + 10) + (8 + 1)",
      "5 + (8 + (1 + 10))",
      "(1 + 5) + (10 + 8)",
      "(8 + (10 + 5)) + 1",
      "8 + ((10 + 5) + 1)",
      "10 + (1 + (5 + 8))",
      "((8 + 5) + 10) + 1",
      "5 + (10 + (8 + 1))",
      "8 * (1 + (10 / 5))",
      "(10 + 1) + (8 + 5)",
      "(10 + 8) + (1 + 5)",
      "(5 + (8 + 10)) + 1",
      "((1 + 5) + 8) + 10",
      "5 + (1 + (10 + 8))",
      "(8 + (1 + 10)) + 5",
      "5 + ((10 + 8) + 1)",
      "((8 + 10) + 5) + 1",
      "8 + (10 + (5 + 1))",
      "8 + ((5 + 10) + 1)",
      "(8 + (1 + 5)) + 10",
      "((5 + 1) + 8) + 10",
      "5 + ((1 + 10) + 8)",
      "(1 + (5 + 8)) + 10",
      "(5 + (10 + 1)) + 8",
      "((10 + 1) + 8) + 5",
      "10 + ((1 + 8) + 5)",
      "5 + ((8 + 10) + 1)",
      "1 + ((8 + 10) + 5)",
      "(5 + 1) + (10 + 8)",
      "5 + (8 + (10 + 1))",
      "(5 + (8 + 1)) + 10",
      "10 + ((5 + 1) + 8)",
      "((10 + 5) + 8) + 1",
      "1 + (10 + (8 + 5))",
      "5 + (1 + (8 + 10))",
      "((8 + 1) + 5) + 10",
      "((5 + 10) + 8) + 1",
      "(1 + (8 + 10)) + 5",
      "10 + ((8 + 5) + 1)",
      "1 + ((8 + 5) + 10)",
      "10 + ((8 + 1) + 5)",
      "5 + ((8 + 1) + 10)",
      "(1 + (10 + 5)) + 8",
      "8 + ((5 + 1) + 10)"
    ]
  },
  "1 5 8 11": {
    "cards": "1 5 8 11",
    "has_solution": "Y",
    "num_solutions": 182,
    "solutions": [
      "(8 + 11) + (1 * 5)",
      "(8 * 1) + (5 + 11)",
      "11 + ((8 + 5) / 1)",
      "(1 * (5 + 11)) + 8",
      "1 * (5 + (8 + 11))",
      "((8 * 1) + 5) + 11",
      "5 + ((11 * 1) + 8)",
      "(11 + (5 / 1)) + 8",
      "(1 * 11) + (5 + 8)",
      "8 + ((11 / 1) + 5)",
      "(11 + 8) + (5 * 1)",
      "(1 * (8 + 11)) + 5",
      "(5 * 1) + (8 + 11)",
      "(1 * (8 + 5)) + 11",
      "(8 + (5 + 11)) / 1",
      "(8 + (11 + 5)) / 1",
      "(11 + (1 * 5)) + 8",
      "(11 + (8 + 5)) * 1",
      "((1 * 8) + 5) + 11",
      "(5 + 11) + (8 * 1)",
      "(11 + (5 + 8)) * 1",
      "5 + ((8 + 11) / 1)",
      "5 + ((8 / 1) + 11)",
      "11 + (8 + (1 * 5))",
      "((11 + 5) + 8) / 1",
      "8 + ((11 + 5) * 1)",
      "11 + ((5 + 8) * 1)",
      "((11 + 8) + 5) / 1",
      "8 + (1 * (11 + 5))",
      "11 + ((1 * 5) + 8)",
      "(5 + 8) + (11 * 1)",
      "(5 * 1) + (11 + 8)",
      "(5 + 11) + (8 / 1)",
      "(1 * (5 + 8)) + 11",
      "((5 + 8) / 1) + 11",
      "11 + (5 + (8 * 1))",
      "8 + ((5 / 1) + 11)",
      "(8 / 1) + (11 + 5)",
      "((8 / 1) + 5) + 11",
      "(8 + (11 + 5)) * 1",
      "(5 + (11 * 1)) + 8",
      "(5 + (11 + 8)) / 1",
      "((5 + 8) + 11) * 1",
      "(5 + (11 / 1)) + 8",
      "((8 + 5) / 1) + 11",
      "8 + ((1 * 5) + 11)",
      "8 + ((11 + 5) / 1)",
      "(8 * 1) + (11 + 5)",
      "(8 + 11) + (5 / 1)",
      "((5 + 11) + 8) * 1",
      "(1 * 5) + (8 + 11)",
      "(8 + (5 * 1)) + 11",
      "(1 * 5) + (11 + 8)",
      "((8 + 11) / 1) + 5",
      "1 * ((8 + 5) + 11)",
      "(8 + (5 / 1)) + 11",
      "5 + (11 + (8 / 1))",
      "(8 + (11 / 1)) + 5",
      "5 + (1 * (8 + 11))",
      "11 + ((5 + 8) / 1)",
      "11 + (8 + (5 / 1))",
      "((1 * 5) + 11) + 8",
      "(8 + 5) + (11 / 1)",
      "((5 * 1) + 11) + 8",
      "(11 + 5) + (8 * 1)",
      "11 + (5 + (1 * 8))",
      "(5 + (8 * 1)) + 11",
      "8 + ((11 * 1) + 5)",
      "((5 + 8) + 11) / 1",
      "1 * (5 + (11 + 8))",
      "5 + ((11 + 8) * 1)",
      "11 + ((8 / 1) + 5)",
      "(1 * (11 + 8)) + 5",
      "1 * ((11 + 5) + 8)",
      "(5 + (1 * 8)) + 11",
      "((5 + 11) + 8) / 1",
      "1 * ((5 + 11) + 8)",
      "((1 * 8) + 11) + 5",
      "(8 + 5) + (1 * 11)",
      "5 + ((8 * 1) + 11)",
      "(8 + 11) + (5 * 1)",
      "(11 + (8 / 1)) + 5",
      "11 + ((8 * 1) + 5)",
      "((8 + 11) + 5) * 1",
      "8 + ((1 * 11) + 5)",
      "(5 + (1 * 11)) + 8",
      "1 * (8 + (11 + 5))",
      "(5 + 11) + (1 * 8)",
      "((8 + 5) + 11) * 1",
      "(5 + (8 / 1)) + 11",
      "5 + ((1 * 8) + 11)",
      "((5 + 8) * 1) + 11",
      "(1 * (11 + 5)) + 8",
      "5 + (11 + (8 * 1))",
      "(11 / 1) + (5 + 8)",
      "(5 + (11 + 8)) * 1",
      "((11 + 5) * 1) + 8",
      "(11 + (5 + 8)) / 1",
      "8 + (11 + (1 * 5))",
      "(11 + 8) + (1 * 5)",
      "11 + (1 * (8 + 5))",
      "((1 * 11) + 5) + 8",
      "1 * ((5 + 8) + 11)",
      "8 + (1 * (5 + 11))",
      "(11 * 1) + (5 + 8)",
      "((8 * 1) + 11) + 5",
      "((8 + 11) * 1) + 5",
      "(11 + 5) + (8 / 1)",
      "1 * (8 + (5 + 11))",
      "5 + ((8 + 11) * 1)",
      "((5 + 11) * 1) + 8",
      "((11 + 8) * 1) + 5",
      "1 * ((11 + 8) + 5)",
      "8 + ((5 + 11) * 1)",
      "(8 / 1) + (5 + 11)",
      "(11 * 1) + (8 + 5)",
      "(1 * 8) + (5 + 11)",
      "(8 + (1 * 11)) + 5",
      "(11 + 5) + (1 * 8)",
      "((5 / 1) + 11) + 8",
      "11 + ((5 / 1) + 8)",
      "(5 / 1) + (8 + 11)",
      "5 + (8 + (11 * 1))",
      "(5 / 1) + (11 + 8)",
      "5 + ((11 / 1) + 8)",
      "((8 - 1) * 5) - 11",
      "(5 + (8 + 11)) / 1",
      "((5 / 1) + 8) + 11",
      "8 + (11 + (5 * 1))",
      "(5 + (8 + 11)) * 1",
      "(8 + (5 + 11)) * 1",
      "5 + ((11 + 8) / 1)",
      "5 + (8 + (1 * 11))",
      "5 + ((1 * 11) + 8)",
      "((8 / 1) + 11) + 5",
      "8 + ((5 + 11) / 1)",
      "8 + (11 + (5 / 1))",
      "11 + ((1 * 8) + 5)",
      "((11 + 5) / 1) + 8",
      "(8 + 5) + (11 * 1)",
      "5 + (1 * (11 + 8))",
      "(5 * (8 - 1)) - 11",
      "11 + (1 * (5 + 8))",
      "((11 / 1) + 5) + 8",
      "(1 * 11) + (8 + 5)",
      "(11 + (8 * 1)) + 5",
      "((8 + 11) + 5) / 1",
      "1 * (11 + (5 + 8))",
      "((1 * 11) + 8) + 5",
      "(5 + 8) + (1 * 11)",
      "((8 + 5) + 11) / 1",
      "((5 * 1) + 8) + 11",
      "8 + (5 + (11 / 1))",
      "5 + (11 + (1 * 8))",
      "((11 + 8) + 5) * 1",
      "(11 + 8) + (5 / 1)",
      "(8 + (11 * 1)) + 5",
      "((8 + 5) * 1) + 11",
      "(11 + (1 * 8)) + 5",
      "((11 * 1) + 8) + 5",
      "11 + ((8 + 5) * 1)",
      "((11 / 1) + 8) + 5",
      "1 * ((8 + 11) + 5)",
      "(5 + 8) + (11 / 1)",
      "(11 / 1) + (8 + 5)",
      "11 + ((5 * 1) + 8)",
      "(11 + (8 + 5)) / 1",
      "5 + (8 + (11 / 1))",
      "(11 + (5 * 1)) + 8",
      "8 + ((5 * 1) + 11)",
      "((1 * 5) + 8) + 11",
      "1 * (11 + (8 + 5))",
      "8 + (5 + (11 * 1))",
      "((11 + 8) / 1) + 5",
      "8 + (5 + (1 * 11))",
      "(1 * 8) + (11 + 5)",
      "((11 + 5) + 8) * 1",
      "11 + (5 + (8 / 1))",
      "11 + (8 + (5 * 1))",
      "((11 * 1) + 5) + 8",
      "((5 + 11) / 1) + 8",
      "(8 + (1 * 5)) + 11"
    ]
  },
  "1 5 8 12": {
    "cards": "1 5 8 12",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(8 + 5) + (12 - 1)",
      "(5 - (1 - 8)) + 12",
      "((8 + 5) - 1) + 12",
      "8 + (12 + (5 - 1))",
      "((5 + 12) - 1) + 8",
      "8 - (1 - (5 + 12))",
      "5 + ((8 - 1) + 12)",
      "(8 + 12) - (1 - 5)",
      "((8 + 5) + 12) - 1",
      "8 + ((5 - 1) + 12)",
      "(12 + 5) + (8 - 1)",
      "(12 - 8) * (1 + 5)",
      "(8 - (5 + 1)) * 12",
      "12 + ((8 - 1) + 5)",
      "(12 - (1 - 5)) + 8",
      "5 + (12 - (1 - 8))",
      "12 + (5 - (1 - 8))",
      "(12 - 8) * (5 + 1)",
      "8 * (12 / (5 - 1))",
      "(8 / (5 - 1)) * 12",
      "(12 + (5 + 8)) - 1",
      "(12 - 1) + (5 + 8)",
      "5 + (12 + (8 - 1))",
      "(8 * 12) / (5 - 1)",
      "(1 + 5) * (12 - 8)",
      "5 - (1 - (8 + 12))",
      "5 - ((1 - 12) - 8)",
      "8 - ((1 - 12) - 5)",
      "5 - (1 - (12 + 8))",
      "((12 + 8) + 5) - 1",
      "((5 + 12) + 8) - 1",
      "(12 + (8 + 5)) - 1",
      "12 / ((5 - 1) / 8)",
      "8 + ((12 - 1) + 5)",
      "(8 + (5 - 1)) + 12",
      "((12 + 5) - 1) + 8",
      "8 - (1 - (12 + 5))",
      "12 * ((8 - 5) - 1)",
      "(8 - 1) + (5 + 12)",
      "((8 - 1) + 12) + 5",
      "12 * (8 - (1 + 5))",
      "12 - ((1 - 8) - 5)",
      "(5 + 12) - (1 - 8)",
      "12 + ((8 + 5) - 1)",
      "5 - ((1 - 8) - 12)",
      "(5 - 1) + (8 + 12)",
      "12 + (8 + (5 - 1))",
      "(5 + 8) - (1 - 12)",
      "((8 - 1) - 5) * 12",
      "8 + (5 + (12 - 1))",
      "(5 + 12) + (8 - 1)",
      "12 + ((5 - 1) + 8)",
      "12 + ((5 + 8) - 1)",
      "(5 + (12 - 1)) + 8",
      "(8 + (12 - 1)) + 5",
      "((5 - 1) + 8) + 12",
      "12 - (1 - (8 + 5))",
      "(8 - (1 - 12)) + 5",
      "5 + (8 - (1 - 12))",
      "(5 + (8 - 1)) + 12",
      "(12 / (5 - 1)) * 8",
      "(5 + 8) + (12 - 1)",
      "(12 * 8) / (5 - 1)",
      "8 + (5 - (1 - 12))",
      "(5 + 1) * (12 - 8)",
      "((8 - 5) - 1) * 12",
      "(8 + (12 + 5)) - 1",
      "(12 + 8) - (1 - 5)",
      "(8 - (1 + 5)) * 12",
      "8 + (12 - (1 - 5))",
      "8 - ((1 - 5) - 12)",
      "12 * (8 / (5 - 1))",
      "8 + ((5 + 12) - 1)",
      "12 - (1 - (5 + 8))",
      "(5 - (1 - 12)) + 8",
      "((12 - 1) + 5) + 8",
      "(12 + (8 - 1)) + 5",
      "5 + ((12 - 1) + 8)",
      "(12 + (5 - 1)) + 8",
      "(5 - 1) + (12 + 8)",
      "12 + (5 + (8 - 1))",
      "((12 + 8) - 1) + 5",
      "((5 + 8) + 12) - 1",
      "12 * ((8 - 1) - 5)",
      "(12 - 1) + (8 + 5)",
      "((12 + 5) + 8) - 1",
      "(12 + 8) + (5 - 1)",
      "((8 + 12) - 1) + 5",
      "(8 + (5 + 12)) - 1",
      "(8 - (1 - 5)) + 12",
      "(8 + 5) - (1 - 12)",
      "(5 + (8 + 12)) - 1",
      "(12 - (1 - 8)) + 5",
      "8 + ((12 + 5) - 1)",
      "12 - ((1 - 5) - 8)",
      "12 * (8 - (5 + 1))",
      "((8 + 12) + 5) - 1",
      "5 + ((8 + 12) - 1)",
      "(5 + (12 + 8)) - 1",
      "((5 - 1) + 12) + 8",
      "((12 - 1) + 8) + 5",
      "(8 + 12) + (5 - 1)",
      "12 + (8 - (1 - 5))",
      "5 + ((12 + 8) - 1)",
      "5 + (8 + (12 - 1))",
      "((8 - 1) + 5) + 12",
      "8 / ((5 - 1) / 12)",
      "((5 + 8) - 1) + 12",
      "(12 + 5) - (1 - 8)",
      "(8 - 1) + (12 + 5)"
    ]
  },
  "1 5 8 13": {
    "cards": "1 5 8 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((13 - 8) * 5) - 1",
      "(5 * (13 - 8)) - 1"
    ]
  },
  "1 5 9 9": {
    "cards": "1 5 9 9",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "1 + (5 + (9 + 9))",
      "(1 + (9 + 9)) + 5",
      "((1 + 5) + 9) + 9",
      "9 + (5 + (9 + 1))",
      "(5 + 9) + (9 + 1)",
      "(1 + (9 + 5)) + 9",
      "(9 + (5 + 1)) + 9",
      "9 + ((5 + 9) + 1)",
      "5 + (9 + (1 + 9))",
      "(1 + 5) + (9 + 9)",
      "9 + ((9 + 1) + 5)",
      "9 + (9 + (5 + 1))",
      "1 + (9 + (9 + 5))",
      "5 + (1 + (9 + 9))",
      "(5 + 1) + (9 + 9)",
      "(9 + 1) + (5 + 9)",
      "((5 + 9) + 1) + 9",
      "((9 + 5) + 1) + 9",
      "9 + ((9 + 5) + 1)",
      "(9 + 9) + (5 + 1)",
      "((1 + 9) + 9) + 5",
      "5 + (9 + (9 + 1))",
      "9 + ((5 + 1) + 9)",
      "((9 + 5) + 9) + 1",
      "(9 + 9) + (1 + 5)",
      "(9 + (9 + 1)) + 5",
      "9 + (9 + (1 + 5))",
      "9 + (1 + (5 + 9))",
      "(5 + (1 + 9)) + 9",
      "9 + (5 + (1 + 9))",
      "1 + ((5 + 9) + 9)",
      "(1 + 9) + (5 + 9)",
      "1 + (9 + (5 + 9))",
      "(9 + (9 + 5)) + 1",
      "((5 + 9) + 9) + 1",
      "((9 + 1) + 5) + 9",
      "(5 + (9 + 9)) + 1",
      "5 + ((9 + 9) + 1)",
      "((5 + 1) + 9) + 9",
      "(9 + (1 + 9)) + 5",
      "9 + ((1 + 9) + 5)",
      "5 + ((9 + 1) + 9)",
      "(9 + (1 + 5)) + 9",
      "((9 + 1) + 9) + 5",
      "9 + (1 + (9 + 5))",
      "(9 + 1) + (9 + 5)",
      "(1 + 9) + (9 + 5)",
      "(5 + 9) + (1 + 9)",
      "1 + ((9 + 9) + 5)",
      "((1 + 9) + 5) + 9",
      "(9 + (5 + 9)) + 1",
      "(9 + 5) + (1 + 9)",
      "1 + ((9 + 5) + 9)",
      "((9 + 9) + 5) + 1",
      "(5 + (9 + 1)) + 9",
      "9 + ((1 + 5) + 9)",
      "((9 + 9) + 1) + 5",
      "5 + ((1 + 9) + 9)",
      "(9 + 5) + (9 + 1)",
      "(1 + (5 + 9)) + 9"
    ]
  },
  "1 5 9 10": {
    "cards": "1 5 9 10",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "(1 * (10 + 9)) + 5",
      "((5 / 1) + 10) + 9",
      "(5 + (1 * 10)) + 9",
      "(10 + 5) + (9 * 1)",
      "(1 * 10) + (5 + 9)",
      "(5 + 10) + (9 / 1)",
      "(9 + (10 / 1)) + 5",
      "(5 + (9 / 1)) + 10",
      "((5 * 1) + 10) + 9",
      "((9 + 5) + 10) / 1",
      "(9 / 1) + (10 + 5)",
      "(9 + (10 * 1)) + 5",
      "(9 / 1) + (5 + 10)",
      "((5 + 10) + 9) / 1",
      "((5 + 10) / 1) + 9",
      "1 * (10 + (5 + 9))",
      "10 + (9 + (5 * 1))",
      "(10 + (1 * 5)) + 9",
      "(10 + 9) + (5 / 1)",
      "((10 / 1) + 9) + 5",
      "((10 / 1) + 5) + 9",
      "((10 * 1) + 5) + 9",
      "(1 * (5 + 10)) + 9",
      "9 + (10 + (5 * 1))",
      "9 + ((10 + 5) * 1)",
      "(10 * 1) + (9 + 5)",
      "5 + ((9 * 1) + 10)",
      "1 * ((9 + 5) + 10)",
      "(5 / 1) + (9 + 10)",
      "9 + ((10 / 1) + 5)",
      "(10 + (5 + 9)) * 1",
      "1 * ((10 + 9) + 5)",
      "5 + ((10 + 9) / 1)",
      "((10 + 5) + 9) / 1",
      "((1 * 10) + 9) + 5",
      "(5 + (10 * 1)) + 9",
      "(1 * 5) + (9 + 10)",
      "(5 + (1 * 9)) + 10",
      "10 + ((9 + 5) * 1)",
      "10 + ((1 * 9) + 5)",
      "10 + (1 * (9 + 5))",
      "((10 + 5) / 1) + 9",
      "10 + (5 + (9 / 1))",
      "((10 + 9) + 5) / 1",
      "(9 + 10) + (5 / 1)",
      "((5 * 1) + 9) + 10",
      "(9 + 10) + (1 * 5)",
      "10 + ((5 * 1) + 9)",
      "(5 / 1) + (10 + 9)",
      "(9 + (5 + 10)) * 1",
      "(1 * 9) + (10 + 5)",
      "5 + ((10 * 1) + 9)",
      "9 + ((5 + 10) * 1)",
      "9 + (1 * (10 + 5))",
      "(10 + (9 * 1)) + 5",
      "9 + (5 + (1 * 10))",
      "((10 + 9) / 1) + 5",
      "10 + ((5 / 1) + 9)",
      "10 + (9 + (1 * 5))",
      "(5 + (10 + 9)) / 1",
      "((1 * 5) + 10) + 9",
      "9 + (5 + (10 / 1))",
      "(9 + (1 * 5)) + 10",
      "((9 / 1) + 10) + 5",
      "9 + ((1 * 10) + 5)",
      "((5 + 10) + 9) * 1",
      "((5 + 9) + 10) * 1",
      "10 + ((1 * 5) + 9)",
      "5 + ((9 + 10) * 1)",
      "((9 + 10) / 1) + 5",
      "((5 + 9) / 1) + 10",
      "1 * ((9 + 10) + 5)",
      "5 + ((1 * 9) + 10)",
      "(5 + (9 + 10)) / 1",
      "(9 + (5 + 10)) / 1",
      "(9 + (1 * 10)) + 5",
      "(9 + (5 / 1)) + 10",
      "(10 + (5 / 1)) + 9",
      "5 + ((10 / 1) + 9)",
      "(5 + 9) + (10 / 1)",
      "1 * ((5 + 9) + 10)",
      "(10 + 9) + (1 * 5)",
      "((1 * 5) + 9) + 10",
      "10 + ((9 + 5) / 1)",
      "1 * (5 + (9 + 10))",
      "5 + ((10 + 9) * 1)",
      "9 + ((5 * 1) + 10)",
      "9 + (1 * (5 + 10))",
      "(1 * 9) + (5 + 10)",
      "(5 + 9) + (10 * 1)",
      "(1 * 10) + (9 + 5)",
      "((10 + 9) * 1) + 5",
      "(5 + (9 + 10)) * 1",
      "9 + (10 + (1 * 5))",
      "5 + ((9 / 1) + 10)",
      "(1 * (5 + 9)) + 10",
      "((9 + 10) * 1) + 5",
      "10 + (9 + (5 / 1))",
      "5 + ((1 * 10) + 9)",
      "(10 + (5 * 1)) + 9",
      "((1 * 9) + 10) + 5",
      "((10 + 9) + 5) * 1",
      "(9 + (10 + 5)) * 1",
      "(5 + (10 + 9)) * 1",
      "10 + ((5 + 9) * 1)",
      "(9 * 1) + (10 + 5)",
      "(9 + (10 + 5)) / 1",
      "9 + (10 + (5 / 1))",
      "(10 + (5 + 9)) / 1",
      "10 + ((9 / 1) + 5)",
      "(1 * (10 + 5)) + 9",
      "5 + ((9 + 10) / 1)",
      "((5 + 9) * 1) + 10",
      "1 * (9 + (10 + 5))",
      "(10 + 5) + (1 * 9)",
      "((1 * 10) + 5) + 9",
      "(1 * (9 + 10)) + 5",
      "5 + (10 + (9 * 1))",
      "5 + (9 + (10 / 1))",
      "10 + (1 * (5 + 9))",
      "((5 + 9) + 10) / 1",
      "(10 * 1) + (5 + 9)",
      "5 + (1 * (10 + 9))",
      "(10 / 1) + (9 + 5)",
      "9 + ((1 * 5) + 10)",
      "5 + (10 + (9 / 1))",
      "((9 + 5) * 1) + 10",
      "10 + (5 + (1 * 9))",
      "(10 + (9 + 5)) / 1",
      "9 + ((5 / 1) + 10)",
      "(10 / 1) + (5 + 9)",
      "1 * ((5 + 10) + 9)",
      "((1 * 9) + 5) + 10",
      "((9 * 1) + 10) + 5",
      "(9 * 1) + (5 + 10)",
      "1 * (10 + (9 + 5))",
      "(5 + 10) + (1 * 9)",
      "10 + ((9 * 1) + 5)",
      "1 * ((10 + 5) + 9)",
      "((10 + 5) * 1) + 9",
      "((10 * 1) + 9) + 5",
      "(5 * 1) + (10 + 9)",
      "(5 * 1) + (9 + 10)",
      "5 + (1 * (9 + 10))",
      "(10 + (1 * 9)) + 5",
      "(10 + 5) + (9 / 1)",
      "((9 + 10) + 5) / 1",
      "((9 + 10) + 5) * 1",
      "9 + ((10 * 1) + 5)",
      "(10 + 9) + (5 * 1)",
      "((10 + 5) + 9) * 1",
      "10 + ((5 + 9) / 1)",
      "(9 + 5) + (10 / 1)",
      "9 + ((5 + 10) / 1)",
      "(1 * (9 + 5)) + 10",
      "(5 + 9) + (1 * 10)",
      "(10 + (9 + 5)) * 1",
      "9 + ((10 + 5) / 1)",
      "((9 + 5) + 10) * 1",
      "(10 + (9 / 1)) + 5",
      "5 + (9 + (10 * 1))",
      "(5 + (9 * 1)) + 10",
      "5 + (9 + (1 * 10))",
      "(9 + 5) + (1 * 10)",
      "(1 * 5) + (10 + 9)",
      "((5 / 1) + 9) + 10",
      "((9 * 1) + 5) + 10",
      "(9 + 10) + (5 * 1)",
      "(5 + 10) + (9 * 1)",
      "(9 + (5 * 1)) + 10",
      "(9 + 5) + (10 * 1)",
      "(5 + (10 / 1)) + 9",
      "5 + (10 + (1 * 9))",
      "10 + (5 + (9 * 1))",
      "1 * (9 + (5 + 10))",
      "1 * (5 + (10 + 9))",
      "((9 / 1) + 5) + 10",
      "((5 + 10) * 1) + 9",
      "((9 + 5) / 1) + 10",
      "9 + (5 + (10 * 1))"
    ]
  },
  "1 5 9 11": {
    "cards": "1 5 9 11",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "11 + (5 + (9 - 1))",
      "9 + ((5 + 11) - 1)",
      "5 + ((9 - 1) + 11)",
      "(11 + 9) - (1 - 5)",
      "9 - (1 - (11 + 5))",
      "(11 + (5 + 9)) - 1",
      "((11 - 1) + 5) + 9",
      "5 + ((11 - 1) + 9)",
      "(5 + (11 - 1)) + 9",
      "(11 + (9 - 1)) + 5",
      "9 + (5 - (1 - 11))",
      "9 - ((1 - 11) - 5)",
      "(11 + 9) + (5 - 1)",
      "(11 + 5) - (1 - 9)",
      "((11 - 1) + 9) + 5",
      "9 + ((5 - 1) + 11)",
      "(11 - 1) + (5 + 9)",
      "(5 + 9) + (11 - 1)",
      "5 - ((1 - 9) - 11)",
      "(9 + (11 + 5)) - 1",
      "((9 + 5) - 1) + 11",
      "((11 + 5) - 1) + 9",
      "11 - (1 - (9 + 5))",
      "9 + (11 + (5 - 1))",
      "5 + ((11 + 9) - 1)",
      "5 - (1 - (11 + 9))",
      "(9 + 11) - (1 - 5)",
      "(9 + (11 - 1)) + 5",
      "(9 + (5 - 1)) + 11",
      "(9 - 1) + (11 + 5)",
      "(9 + (5 + 11)) - 1",
      "((9 + 11) + 5) - 1",
      "11 + (9 - (1 - 5))",
      "(5 - 1) + (11 + 9)",
      "((5 + 11) - 1) + 9",
      "((9 - 1) + 5) + 11",
      "11 - (1 - (5 + 9))",
      "((5 - 1) + 9) + 11",
      "(5 - 1) + (9 + 11)",
      "(9 - (1 - 5)) + 11",
      "5 + (9 + (11 - 1))",
      "9 - ((1 - 5) - 11)",
      "((5 + 9) - 1) + 11",
      "((5 - 1) + 11) + 9",
      "(11 - (1 - 9)) + 5",
      "5 - (1 - (9 + 11))",
      "(11 - 1) + (9 + 5)",
      "5 + (9 - (1 - 11))",
      "11 + ((9 + 5) - 1)",
      "(11 + (5 - 1)) + 9",
      "((9 + 11) - 1) + 5",
      "(5 - (1 - 9)) + 11",
      "9 + (5 + (11 - 1))",
      "((11 + 5) + 9) - 1",
      "11 - ((1 - 5) - 9)",
      "(11 + 5) + (9 - 1)",
      "((9 + 5) + 11) - 1",
      "(11 - (1 - 5)) + 9",
      "(5 + (9 + 11)) - 1",
      "9 + (11 - (1 - 5))",
      "(9 - 1) + (5 + 11)",
      "(9 + 5) - (1 - 11)",
      "(5 + 9) - (1 - 11)",
      "(9 - (1 - 11)) + 5",
      "(5 - (1 - 11)) + 9",
      "(9 + 5) + (11 - 1)",
      "5 - ((1 - 11) - 9)",
      "(9 + 11) + (5 - 1)",
      "11 + (9 + (5 - 1))",
      "11 + ((5 - 1) + 9)",
      "11 + ((9 - 1) + 5)",
      "9 - (1 - (5 + 11))",
      "(5 + 11) - (1 - 9)",
      "9 + ((11 + 5) - 1)",
      "(5 + (11 + 9)) - 1",
      "5 + (11 + (9 - 1))",
      "11 + ((5 + 9) - 1)",
      "5 + (11 - (1 - 9))",
      "(11 + (9 + 5)) - 1",
      "(5 + (9 - 1)) + 11",
      "((9 - 1) + 11) + 5",
      "5 + ((9 + 11) - 1)",
      "9 + ((11 - 1) + 5)",
      "11 - ((1 - 9) - 5)",
      "(5 + 11) + (9 - 1)",
      "((5 + 9) + 11) - 1",
      "((11 + 9) - 1) + 5",
      "11 + (5 - (1 - 9))",
      "((5 + 11) + 9) - 1",
      "((11 + 9) + 5) - 1"
    ]
  },
  "1 5 9 12": {
    "cards": "1 5 9 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((1 + 9) / 5) * 12",
      "(9 * (5 - 1)) - 12",
      "(12 * (9 + 1)) / 5",
      "(1 + 9) * (12 / 5)",
      "12 / (5 / (9 + 1))",
      "12 / (5 / (1 + 9))",
      "(12 / 5) * (9 + 1)",
      "((5 - 1) * 9) - 12",
      "((9 + 1) * 12) / 5",
      "12 * ((1 + 9) / 5)",
      "12 * ((9 + 1) / 5)",
      "(12 * (1 + 9)) / 5",
      "(12 / 5) * (1 + 9)",
      "((1 + 9) * 12) / 5",
      "(9 + 1) * (12 / 5)",
      "(1 + 9) / (5 / 12)",
      "(9 + 1) / (5 / 12)",
      "((9 + 1) / 5) * 12"
    ]
  },
  "1 5 9 13": {
    "cards": "1 5 9 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 + 1) * (13 - 9)",
      "(13 - 9) * (5 + 1)",
      "(13 - 9) * (1 + 5)",
      "(1 + 5) * (13 - 9)"
    ]
  },
  "1 5 10 10": {
    "cards": "1 5 10 10",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(10 + (10 + 5)) - 1",
      "5 - (1 - (10 + 10))",
      "10 + ((10 - 1) + 5)",
      "((5 + 10) - 1) + 10",
      "10 + (5 + (10 - 1))",
      "((10 + 5) - 1) + 10",
      "((10 - 1) + 10) + 5",
      "10 - (1 - (10 + 5))",
      "((10 + 10) + 5) - 1",
      "10 + (10 - (1 - 5))",
      "((5 + 10) + 10) - 1",
      "5 + ((10 - 1) + 10)",
      "(10 + 5) - (1 - 10)",
      "(10 + (10 - 1)) + 5",
      "(10 + 10) - (1 - 5)",
      "(10 + (5 + 10)) - 1",
      "(10 - (1 - 10)) + 5",
      "5 + ((10 + 10) - 1)",
      "((10 + 5) + 10) - 1",
      "10 + ((10 + 5) - 1)",
      "(10 - 1) + (10 + 5)",
      "10 + (5 - (1 - 10))",
      "(10 - 1) + (5 + 10)",
      "5 - ((1 - 10) - 10)",
      "(5 + 10) - (1 - 10)",
      "10 + (10 + (5 - 1))",
      "(5 + (10 - 1)) + 10",
      "(10 + 10) + (5 - 1)",
      "(10 - (1 - 5)) + 10",
      "((10 - 1) + 5) + 10",
      "10 - ((1 - 5) - 10)",
      "((5 - 1) + 10) + 10",
      "(5 - (1 - 10)) + 10",
      "10 + ((5 + 10) - 1)",
      "10 - (1 - (5 + 10))",
      "(5 - 1) + (10 + 10)",
      "10 + ((5 - 1) + 10)",
      "(5 + 10) + (10 - 1)",
      "(5 + (10 + 10)) - 1",
      "(10 + (5 - 1)) + 10",
      "(10 + 5) + (10 - 1)",
      "5 + (10 + (10 - 1))",
      "((10 + 10) - 1) + 5",
      "10 - ((1 - 10) - 5)",
      "5 + (10 - (1 - 10))"
    ]
  },
  "1 5 10 11": {
    "cards": "1 5 10 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((1 + 11) * 10) / 5",
      "((1 + 11) / 5) * 10",
      "10 / (5 / (1 + 11))",
      "10 * ((11 + 1) / 5)",
      "((11 + 1) * 10) / 5",
      "((11 + 1) / 5) * 10",
      "(10 / 5) * (1 + 11)",
      "(10 * (11 + 1)) / 5",
      "10 / (5 / (11 + 1))",
      "(11 + 1) / (5 / 10)",
      "10 * ((1 + 11) / 5)",
      "(1 + 11) * (10 / 5)",
      "(1 + 11) / (5 / 10)",
      "(10 / 5) * (11 + 1)",
      "(10 * (1 + 11)) / 5",
      "(11 + 1) * (10 / 5)"
    ]
  },
  "1 5 10 12": {
    "cards": "1 5 10 12",
    "has_solution": "Y",
    "num_solutions": 151,
    "solutions": [
      "(10 / (5 * 1)) * 12",
      "(12 * 10) * (1 / 5)",
      "((10 / 5) * 12) / 1",
      "((12 / 5) * 1) * 10",
      "(1 * 12) * (10 / 5)",
      "(10 * (1 * 12)) / 5",
      "10 * (12 / (5 * 1))",
      "10 * (1 / (5 / 12))",
      "12 / (1 * (5 / 10))",
      "(10 * (12 / 5)) / 1",
      "1 * (10 / (5 / 12))",
      "1 * ((10 / 5) * 12)",
      "(12 * 1) / (5 / 10)",
      "12 * ((10 / 5) * 1)",
      "12 * (1 / (5 / 10))",
      "12 / ((5 * 1) / 10)",
      "1 * (10 * (12 / 5))",
      "((12 * 10) / 5) / 1",
      "12 * (10 / (1 * 5))",
      "10 * (12 * (1 / 5))",
      "(10 / 5) * (12 * 1)",
      "((10 / 1) * 12) / 5",
      "((12 / 5) / 1) * 10",
      "10 / ((1 / 12) * 5)",
      "(10 * (1 / 5)) * 12",
      "1 / ((5 / 12) / 10)",
      "1 * ((12 * 10) / 5)",
      "12 / (5 / (10 / 1))",
      "(1 / 5) * (10 * 12)",
      "12 / ((1 * 5) / 10)",
      "((10 * 12) * 1) / 5",
      "1 / ((5 / 10) / 12)",
      "(10 / (1 / 12)) / 5",
      "(12 / 5) * (10 / 1)",
      "10 * ((1 / 5) * 12)",
      "12 / ((5 / 1) / 10)",
      "(10 / 1) / (5 / 12)",
      "10 * ((12 * 1) / 5)",
      "1 * (12 / (5 / 10))",
      "10 / ((5 / 12) * 1)",
      "10 / (1 * (5 / 12))",
      "((1 * 12) * 10) / 5",
      "(10 / 5) / (1 / 12)",
      "((10 / 5) * 1) * 12",
      "(12 * (10 / 1)) / 5",
      "(10 / (1 * 5)) * 12",
      "12 / ((5 / 10) * 1)",
      "(10 / (5 / 1)) * 12",
      "(12 * (10 / 5)) / 1",
      "((12 * 10) * 1) / 5",
      "((1 / 5) * 12) * 10",
      "1 * ((12 / 5) * 10)",
      "((10 * 12) / 5) * 1",
      "10 / (5 * (1 / 12))",
      "(10 * 12) * (1 / 5)",
      "12 / (1 - (5 / 10))",
      "(1 * 10) / (5 / 12)",
      "(12 * 10) / (5 / 1)",
      "1 / (5 / (12 * 10))",
      "10 / ((5 * 1) / 12)",
      "12 * ((10 / 5) / 1)",
      "((12 / 1) * 10) / 5",
      "(1 * (12 / 5)) * 10",
      "10 * (1 * (12 / 5))",
      "(12 / (1 * 5)) * 10",
      "(12 / (5 / 10)) * 1",
      "(10 / 5) * (12 / 1)",
      "(12 * (10 * 1)) / 5",
      "1 / (5 / (10 * 12))",
      "10 * (12 / (5 / 1))",
      "(12 / (5 / 1)) * 10",
      "(1 * (12 * 10)) / 5",
      "(10 * 12) / (5 / 1)",
      "(10 * 12) / (1 * 5)",
      "(12 / (5 / 10)) / 1",
      "1 * ((10 * 12) / 5)",
      "(12 / (1 / 10)) / 5",
      "(12 * (1 / 5)) * 10",
      "10 * ((12 / 5) * 1)",
      "((12 / 5) * 10) / 1",
      "(1 / 5) * (12 * 10)",
      "((10 * 12) / 5) / 1",
      "12 * (10 / (5 / 1))",
      "(10 * (12 / 1)) / 5",
      "((12 * 10) / 5) * 1",
      "(1 * 12) / (5 / 10)",
      "12 * (10 * (1 / 5))",
      "(10 * 12) / (5 * 1)",
      "(12 * 10) / (5 * 1)",
      "((10 * 12) / 1) / 5",
      "(12 / 5) * (10 * 1)",
      "(10 / 1) * (12 / 5)",
      "((1 / 5) * 10) * 12",
      "((1 * 10) / 5) * 12",
      "12 / (1 / (10 / 5))",
      "((12 / 5) * 10) * 1",
      "12 * ((10 / 1) / 5)",
      "12 / (5 / (10 * 1))",
      "(12 / 5) * (1 * 10)",
      "10 / (1 / (12 / 5))",
      "(1 * 10) * (12 / 5)",
      "((10 * 1) / 5) * 12",
      "10 * ((1 * 12) / 5)",
      "12 / (5 * (1 / 10))",
      "10 / ((1 * 5) / 12)",
      "((10 / 5) * 12) * 1",
      "(1 / (5 / 10)) * 12",
      "((1 * 10) * 12) / 5",
      "10 / (5 / (12 * 1))",
      "12 / ((5 / 10) / 1)",
      "(1 * (10 * 12)) / 5",
      "((10 / 5) / 1) * 12",
      "(12 / (5 * 1)) * 10",
      "(10 * (12 / 5)) * 1",
      "(1 * (10 / 5)) * 12",
      "10 / (5 / (1 * 12))",
      "(12 * (1 * 10)) / 5",
      "(12 / 5) / (1 / 10)",
      "(10 / 5) * (1 * 12)",
      "((12 * 1) * 10) / 5",
      "(12 * 1) * (10 / 5)",
      "(12 / 1) / (5 / 10)",
      "12 * ((1 * 10) / 5)",
      "(12 * (10 / 5)) * 1",
      "((10 / 1) / 5) * 12",
      "1 * (12 * (10 / 5))",
      "10 / (5 / (12 / 1))",
      "10 * (12 / (1 * 5))",
      "12 * (1 * (10 / 5))",
      "12 / ((1 / 10) * 5)",
      "(10 * (12 * 1)) / 5",
      "12 * ((1 / 5) * 10)",
      "10 / ((5 / 12) / 1)",
      "(12 / 1) * (10 / 5)",
      "(10 * 1) * (12 / 5)",
      "10 * ((12 / 5) / 1)",
      "((1 * 12) / 5) * 10",
      "(10 / (5 / 12)) / 1",
      "((12 * 10) / 1) / 5",
      "(12 * 10) / (1 * 5)",
      "(10 / (5 / 12)) * 1",
      "(1 / (5 / 12)) * 10",
      "((12 / 1) / 5) * 10",
      "10 / ((5 / 1) / 12)",
      "((10 * 1) * 12) / 5",
      "12 * (10 / (5 * 1))",
      "12 / (5 / (1 * 10))",
      "10 * ((12 / 1) / 5)",
      "(10 * 1) / (5 / 12)",
      "((12 * 1) / 5) * 10",
      "12 * ((10 * 1) / 5)"
    ]
  },
  "1 5 10 13": {
    "cards": "1 5 10 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "10 / (5 / (13 - 1))",
      "(10 / 5) * (13 - 1)",
      "(13 - 1) / (5 / 10)",
      "((13 - 1) * 10) / 5",
      "((13 - 1) / 5) * 10",
      "(10 * (13 - 1)) / 5",
      "(13 - 1) * (10 / 5)",
      "10 * ((13 - 1) / 5)"
    ]
  },
  "1 5 11 11": {
    "cards": "1 5 11 11",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "((11 * 11) - 1) / 5"
    ]
  },
  "1 5 11 12": {
    "cards": "1 5 11 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 - 1) * 12) / 5",
      "((11 - 1) / 5) * 12",
      "12 / (5 / (11 - 1))",
      "(12 * (11 - 1)) / 5",
      "(11 - 1) * (12 / 5)",
      "(12 / 5) * (11 - 1)",
      "(11 - 1) / (5 / 12)",
      "12 * ((11 - 1) / 5)"
    ]
  },
  "1 5 11 13": {
    "cards": "1 5 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 12 12": {
    "cards": "1 5 12 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 * (12 / (5 + 1))",
      "(12 * 12) / (1 + 5)",
      "(12 / (5 + 1)) * 12",
      "12 * (12 / (1 + 5))",
      "12 / ((5 + 1) / 12)",
      "(12 * 12) / (5 + 1)",
      "(12 / (1 + 5)) * 12",
      "12 / ((1 + 5) / 12)"
    ]
  },
  "1 5 12 13": {
    "cards": "1 5 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 5 13 13": {
    "cards": "1 5 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 6 6": {
    "cards": "1 6 6 6",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(6 * (6 - 1)) - 6",
      "((6 - 1) * 6) - 6"
    ]
  },
  "1 6 6 7": {
    "cards": "1 6 6 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 6 8": {
    "cards": "1 6 6 8",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "6 / (1 - (6 / 8))"
    ]
  },
  "1 6 6 9": {
    "cards": "1 6 6 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "6 * ((1 + 9) - 6)",
      "6 * (9 - (6 - 1))",
      "((9 + 1) - 6) * 6",
      "6 * ((9 + 1) - 6)",
      "6 * (1 - (6 - 9))",
      "(1 - (6 - 9)) * 6",
      "(1 + (9 - 6)) * 6",
      "6 * (1 + (9 - 6))",
      "((9 - 6) + 1) * 6",
      "(9 + (1 - 6)) * 6",
      "6 * (9 + (1 - 6))",
      "((1 + 9) - 6) * 6",
      "6 * ((1 - 6) + 9)",
      "(9 - (6 - 1)) * 6",
      "((1 - 6) + 9) * 6",
      "6 * ((9 - 6) + 1)"
    ]
  },
  "1 6 6 10": {
    "cards": "1 6 6 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(6 * (10 - 6)) * 1",
      "(1 * (10 - 6)) * 6",
      "(6 * (10 - 6)) / 1",
      "(10 - (1 * 6)) * 6",
      "6 / (1 / (10 - 6))",
      "((10 / 1) - 6) * 6",
      "6 * ((10 - 6) * 1)",
      "((1 * 10) - 6) * 6",
      "(10 - 6) * (6 * 1)",
      "((10 * 1) - 6) * 6",
      "((10 - 6) / 1) * 6",
      "(10 - (6 * 1)) * 6",
      "((10 - 6) * 6) * 1",
      "(10 - 6) * (1 * 6)",
      "6 * (1 * (10 - 6))",
      "6 * ((10 / 1) - 6)",
      "(10 - (6 / 1)) * 6",
      "((10 - 6) * 1) * 6",
      "1 * ((10 - 6) * 6)",
      "(10 - 6) * (6 / 1)",
      "6 * ((10 - 6) / 1)",
      "((10 - 6) * 6) / 1",
      "6 * (10 - (6 * 1))",
      "(6 * 1) * (10 - 6)",
      "(1 * 6) * (10 - 6)",
      "6 * (10 - (6 / 1))",
      "6 * (10 - (1 * 6))",
      "6 * ((1 * 10) - 6)",
      "(6 / 1) * (10 - 6)",
      "1 * (6 * (10 - 6))",
      "6 * ((10 * 1) - 6)",
      "(10 - 6) / (1 / 6)"
    ]
  },
  "1 6 6 11": {
    "cards": "1 6 6 11",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "6 + (6 + (1 + 11))",
      "6 + ((6 + 11) + 1)",
      "1 + (6 + (11 + 6))",
      "(6 + (11 + 1)) + 6",
      "((1 + 6) + 11) + 6",
      "((6 + 6) + 1) + 11",
      "6 + (1 + (11 + 6))",
      "(1 + 6) + (6 + 11)",
      "((6 + 1) + 11) + 6",
      "(6 + (6 + 1)) + 11",
      "((11 - 6) - 1) * 6",
      "((6 + 11) + 6) + 1",
      "11 + ((6 + 6) + 1)",
      "6 + (11 + (6 + 1))",
      "1 + ((6 + 11) + 6)",
      "6 * ((11 - 6) - 1)",
      "6 * (11 - (6 + 1))",
      "11 + (1 + (6 + 6))",
      "((1 + 6) + 6) + 11",
      "1 + (6 + (6 + 11))",
      "((11 - 1) - 6) * 6",
      "(1 + 11) + (6 + 6)",
      "((6 + 11) + 1) + 6",
      "6 + ((1 + 6) + 11)",
      "((6 * 6) - 11) - 1",
      "(6 * 6) - (1 + 11)",
      "(11 + (6 + 1)) + 6",
      "6 + ((11 + 1) + 6)",
      "6 + ((11 + 6) + 1)",
      "(6 + 6) + (11 + 1)",
      "11 + ((6 + 1) + 6)",
      "1 + ((11 + 6) + 6)",
      "11 + (6 + (6 + 1))",
      "6 + ((6 + 1) + 11)",
      "(11 + (1 + 6)) + 6",
      "((11 + 1) + 6) + 6",
      "(6 * 6) - (11 + 1)",
      "6 + ((1 + 11) + 6)",
      "(6 + 11) + (1 + 6)",
      "(6 + 1) + (6 + 11)",
      "1 + (11 + (6 + 6))",
      "((11 + 6) + 1) + 6",
      "6 + (1 + (6 + 11))",
      "((6 * 6) - 1) - 11",
      "(1 + (6 + 6)) + 11",
      "(1 + 6) + (11 + 6)",
      "11 + ((1 + 6) + 6)",
      "(11 - (6 + 1)) * 6",
      "(6 + 1) + (11 + 6)",
      "(11 + 6) + (1 + 6)",
      "((1 + 11) + 6) + 6",
      "6 * ((11 - 1) - 6)",
      "6 * (11 - (1 + 6))",
      "(6 + (1 + 11)) + 6",
      "(11 + 6) + (6 + 1)",
      "11 + (6 + (1 + 6))",
      "(11 - (1 + 6)) * 6",
      "(6 + 6) + (1 + 11)",
      "((6 + 1) + 6) + 11",
      "(6 + 11) + (6 + 1)",
      "(1 + (11 + 6)) + 6",
      "(6 + (11 + 6)) + 1",
      "((11 + 6) + 6) + 1",
      "(11 + (6 + 6)) + 1",
      "((6 + 6) + 11) + 1",
      "1 + ((6 + 6) + 11)",
      "6 + (11 + (1 + 6))",
      "(6 + (6 + 11)) + 1",
      "(1 + (6 + 11)) + 6",
      "6 + (6 + (11 + 1))",
      "(11 + 1) + (6 + 6)",
      "(6 + (1 + 6)) + 11"
    ]
  },
  "1 6 6 12": {
    "cards": "1 6 6 12",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "12 + (1 * (6 + 6))",
      "((6 + 12) + 6) / 1",
      "(6 * 6) - (1 * 12)",
      "12 + ((1 * 6) + 6)",
      "(6 * 6) - (12 * 1)",
      "(12 * 1) + (6 + 6)",
      "6 + (6 + (12 * 1))",
      "6 + ((12 * 1) + 6)",
      "1 * ((6 + 12) + 6)",
      "(6 * 1) + (12 + 6)",
      "(6 + (12 / 1)) + 6",
      "(6 + (1 * 6)) + 12",
      "(12 + (6 + 6)) / 1",
      "((6 / 1) + 12) + 6",
      "((1 * 12) + 6) + 6",
      "((6 * 1) + 6) + 12",
      "((6 / 1) + 6) + 12",
      "((6 + 6) * 1) + 12",
      "(6 * 1) + (6 + 12)",
      "((12 + 6) + 6) * 1",
      "12 + ((6 / 1) + 6)",
      "(6 * (6 * 1)) - 12",
      "(6 + (6 * 1)) + 12",
      "((6 + 12) / 1) + 6",
      "(6 + 6) + (1 * 12)",
      "(6 + (6 / 1)) + 12",
      "(1 + (6 / 6)) * 12",
      "1 * (6 + (12 + 6))",
      "6 + ((1 * 6) + 12)",
      "(6 + 12) + (1 * 6)",
      "(12 / 1) + (6 + 6)",
      "(6 + (6 + 12)) / 1",
      "12 * ((6 / 6) + 1)",
      "(12 + (6 / 1)) + 6",
      "1 * (12 + (6 + 6))",
      "((6 * 1) * 6) - 12",
      "(12 + 6) + (6 / 1)",
      "6 + (6 + (1 * 12))",
      "(6 + (1 * 12)) + 6",
      "(6 + (12 * 1)) + 6",
      "12 + (6 + (6 * 1))",
      "12 + ((6 + 6) * 1)",
      "(6 + 6) + (12 * 1)",
      "6 + (12 + (6 / 1))",
      "6 + ((6 / 1) + 12)",
      "6 + (12 + (6 * 1))",
      "(6 / 1) + (6 + 12)",
      "(6 + (6 + 12)) * 1",
      "(12 + (6 + 6)) * 1",
      "(6 / 1) + (12 + 6)",
      "6 + (1 * (6 + 12))",
      "12 + (6 + (1 * 6))",
      "((6 * 6) - 12) / 1",
      "(12 + 6) + (6 * 1)",
      "12 * (1 + (6 / 6))",
      "((1 * 6) + 12) + 6",
      "6 + ((6 + 12) * 1)",
      "((1 * 6) * 6) - 12",
      "((6 + 6) + 12) / 1",
      "((6 + 6) / 1) + 12",
      "6 + ((1 * 12) + 6)",
      "6 + ((12 + 6) / 1)",
      "1 * ((12 + 6) + 6)",
      "(6 * 6) - (12 / 1)",
      "12 + ((6 + 6) / 1)",
      "(6 + (12 + 6)) * 1",
      "6 + ((12 + 6) * 1)",
      "(12 + 6) + (1 * 6)",
      "6 + (6 + (12 / 1))",
      "(1 * 6) + (6 + 12)",
      "((6 / 6) + 1) * 12",
      "6 + (12 + (1 * 6))",
      "(1 * (12 + 6)) + 6",
      "((6 * 6) - 12) * 1",
      "(1 * (6 + 6)) + 12",
      "6 + (1 * (12 + 6))",
      "((6 / 1) * 6) - 12",
      "((1 * 6) + 6) + 12",
      "(1 * (6 * 6)) - 12",
      "(1 * 6) + (12 + 6)",
      "(6 + (12 + 6)) / 1",
      "1 * (6 + (6 + 12))",
      "1 * ((6 * 6) - 12)",
      "(6 + 6) + (12 / 1)",
      "(6 * (1 * 6)) - 12",
      "(12 + (6 * 1)) + 6",
      "((12 + 6) / 1) + 6",
      "6 + ((6 * 1) + 12)",
      "((6 * 6) / 1) - 12",
      "12 + ((6 * 1) + 6)",
      "1 * ((6 + 6) + 12)",
      "(1 * 12) + (6 + 6)",
      "((12 * 1) + 6) + 6",
      "((12 + 6) * 1) + 6",
      "12 + (6 + (6 / 1))",
      "((6 + 12) * 1) + 6",
      "(12 + (1 * 6)) + 6",
      "(6 + 12) + (6 / 1)",
      "((6 * 6) * 1) - 12",
      "(6 / (1 / 6)) - 12",
      "((6 * 1) + 12) + 6",
      "((12 + 6) + 6) / 1",
      "6 + ((6 + 12) / 1)",
      "(6 * (6 / 1)) - 12",
      "(6 + 12) + (6 * 1)",
      "((6 + 12) + 6) * 1",
      "6 + ((12 / 1) + 6)",
      "(1 * (6 + 12)) + 6",
      "((12 / 1) + 6) + 6",
      "((6 + 6) + 12) * 1"
    ]
  },
  "1 6 6 13": {
    "cards": "1 6 6 13",
    "has_solution": "Y",
    "num_solutions": 53,
    "solutions": [
      "((6 + 6) - 1) + 13",
      "1 - (13 - (6 * 6))",
      "(6 + (13 + 6)) - 1",
      "13 - ((1 - 6) - 6)",
      "((13 - 1) + 6) + 6",
      "(6 + 13) - (1 - 6)",
      "((6 * 6) + 1) - 13",
      "13 + ((6 - 1) + 6)",
      "(1 + (6 * 6)) - 13",
      "13 - (1 - (6 + 6))",
      "(6 + 13) + (6 - 1)",
      "(6 + 6) + (13 - 1)",
      "(13 + (6 - 1)) + 6",
      "1 + ((6 * 6) - 13)",
      "((6 + 13) - 1) + 6",
      "(6 + (6 + 13)) - 1",
      "(6 + (13 - 1)) + 6",
      "6 + (13 + (6 - 1))",
      "((6 + 6) + 13) - 1",
      "(6 - (1 - 13)) + 6",
      "(13 - (1 - 6)) + 6",
      "6 + ((6 + 13) - 1)",
      "(6 - 1) + (13 + 6)",
      "13 + ((6 + 6) - 1)",
      "((6 - 1) + 13) + 6",
      "6 - (1 - (6 + 13))",
      "6 + ((13 - 1) + 6)",
      "(6 * 6) - (13 - 1)",
      "6 - ((1 - 6) - 13)",
      "(6 + 6) - (1 - 13)",
      "((6 + 13) + 6) - 1",
      "13 + (6 + (6 - 1))",
      "(6 + (6 - 1)) + 13",
      "((13 + 6) - 1) + 6",
      "6 + (6 - (1 - 13))",
      "6 - ((1 - 13) - 6)",
      "(6 - 1) + (6 + 13)",
      "((6 * 6) - 13) + 1",
      "13 + (6 - (1 - 6))",
      "((13 + 6) + 6) - 1",
      "6 + ((13 + 6) - 1)",
      "6 + (6 + (13 - 1))",
      "(1 - 13) + (6 * 6)",
      "6 - (1 - (13 + 6))",
      "(13 + 6) + (6 - 1)",
      "(13 + 6) - (1 - 6)",
      "(6 * 6) + (1 - 13)",
      "(6 - (1 - 6)) + 13",
      "(13 + (6 + 6)) - 1",
      "6 + ((6 - 1) + 13)",
      "6 + (13 - (1 - 6))",
      "((6 - 1) + 6) + 13",
      "(13 - 1) + (6 + 6)"
    ]
  },
  "1 6 7 7": {
    "cards": "1 6 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 7 8": {
    "cards": "1 6 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 7 9": {
    "cards": "1 6 7 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 + 1) * (9 - 6)",
      "(9 - 6) * (1 + 7)",
      "(9 - 6) * (7 + 1)",
      "(1 + 7) * (9 - 6)"
    ]
  },
  "1 6 7 10": {
    "cards": "1 6 7 10",
    "has_solution": "Y",
    "num_solutions": 140,
    "solutions": [
      "((1 + 10) + 7) + 6",
      "(6 + 1) + (7 + 10)",
      "(10 + 7) + (1 + 6)",
      "1 + ((6 + 7) + 10)",
      "1 + (7 + (10 + 6))",
      "6 * ((10 - 7) + 1)",
      "(7 - 1) * (10 - 6)",
      "1 + (10 + (7 + 6))",
      "(7 + (1 + 10)) + 6",
      "(6 + (10 + 1)) + 7",
      "10 + (6 + (7 + 1))",
      "(7 + 6) + (10 + 1)",
      "7 + (1 + (10 + 6))",
      "(1 + (10 + 7)) + 6",
      "1 + (6 + (10 + 7))",
      "(10 + 1) + (6 + 7)",
      "6 * (10 - (7 - 1))",
      "(6 + 1) + (10 + 7)",
      "1 + ((10 + 6) + 7)",
      "((1 + 7) + 10) + 6",
      "1 + ((6 + 10) + 7)",
      "10 + (7 + (6 + 1))",
      "(7 + (6 + 10)) + 1",
      "6 + (1 + (7 + 10))",
      "(10 - 6) * (7 - 1)",
      "((6 + 10) + 1) + 7",
      "6 * (1 - (7 - 10))",
      "(6 - 10) * (1 - 7)",
      "7 + (10 + (6 + 1))",
      "10 + (1 + (7 + 6))",
      "7 + ((10 + 1) + 6)",
      "10 + ((6 + 7) + 1)",
      "(6 + (10 + 7)) + 1",
      "(6 + 7) + (10 + 1)",
      "(1 + 7) + (6 + 10)",
      "(7 + (6 + 1)) + 10",
      "6 * (10 + (1 - 7))",
      "7 + (6 + (1 + 10))",
      "(1 - 7) * (6 - 10)",
      "((1 + 6) + 7) + 10",
      "1 + ((7 + 6) + 10)",
      "(10 + (1 + 6)) + 7",
      "((10 + 1) + 6) + 7",
      "6 + ((7 + 10) + 1)",
      "((1 + 10) - 7) * 6",
      "(10 + 6) + (1 + 7)",
      "6 * ((1 + 10) - 7)",
      "(7 + 1) + (6 + 10)",
      "((1 + 10) + 6) + 7",
      "((6 + 1) + 7) + 10",
      "(6 + 7) + (1 + 10)",
      "(10 - (7 - 1)) * 6",
      "10 + (1 + (6 + 7))",
      "(6 + (7 + 10)) + 1",
      "(10 + 6) + (7 + 1)",
      "(1 + (6 + 10)) + 7",
      "(1 + 7) + (10 + 6)",
      "(10 + (7 + 6)) + 1",
      "6 + (10 + (1 + 7))",
      "7 + ((10 + 6) + 1)",
      "1 + (6 + (7 + 10))",
      "(1 + (10 + 6)) + 7",
      "(10 + 1) + (7 + 6)",
      "((6 + 10) + 7) + 1",
      "((1 + 6) + 10) + 7",
      "(1 + (10 - 7)) * 6",
      "10 + ((6 + 1) + 7)",
      "(7 + 6) + (1 + 10)",
      "((1 + 7) + 6) + 10",
      "(7 + (10 + 1)) + 6",
      "7 + ((6 + 10) + 1)",
      "((10 + 7) + 6) + 1",
      "(10 + (6 + 1)) + 7",
      "(1 + 10) + (6 + 7)",
      "((7 + 6) + 1) + 10",
      "(7 + (10 + 6)) + 1",
      "1 + ((7 + 10) + 6)",
      "7 + (1 + (6 + 10))",
      "7 + (6 + (10 + 1))",
      "6 + ((1 + 7) + 10)",
      "(1 + (7 + 6)) + 10",
      "6 + ((7 + 1) + 10)",
      "10 + (7 + (1 + 6))",
      "((7 + 10) + 1) + 6",
      "(1 - (7 - 10)) * 6",
      "6 * ((10 + 1) - 7)",
      "7 + (10 + (1 + 6))",
      "6 + ((10 + 1) + 7)",
      "((7 + 10) + 6) + 1",
      "6 + ((1 + 10) + 7)",
      "((6 + 7) + 1) + 10",
      "1 + (10 + (6 + 7))",
      "((10 + 6) + 1) + 7",
      "1 + ((10 + 7) + 6)",
      "10 + ((1 + 7) + 6)",
      "(1 + 6) + (10 + 7)",
      "(1 + 6) + (7 + 10)",
      "((10 + 6) + 7) + 1",
      "6 * ((1 - 7) + 10)",
      "(10 + (1 + 7)) + 6",
      "(10 + (1 - 7)) * 6",
      "((7 + 1) + 6) + 10",
      "7 + ((6 + 1) + 10)",
      "((10 + 1) - 7) * 6",
      "(1 + (6 + 7)) + 10",
      "(7 + 10) + (1 + 6)",
      "(1 + (7 + 10)) + 6",
      "(6 + 10) + (7 + 1)",
      "10 + ((7 + 6) + 1)",
      "((7 + 6) + 10) + 1",
      "(10 + (6 + 7)) + 1",
      "(7 + 1) + (10 + 6)",
      "6 + (7 + (1 + 10))",
      "10 + ((7 + 1) + 6)",
      "10 + ((1 + 6) + 7)",
      "7 + ((1 + 10) + 6)",
      "6 + ((10 + 7) + 1)",
      "(7 + (1 + 6)) + 10",
      "((7 + 1) + 10) + 6",
      "(6 + (7 + 1)) + 10",
      "(10 + (7 + 1)) + 6",
      "((10 + 1) + 7) + 6",
      "(6 + (1 + 10)) + 7",
      "10 + (6 + (1 + 7))",
      "(1 + 10) + (7 + 6)",
      "(7 + 10) + (6 + 1)",
      "(10 + 7) + (6 + 1)",
      "((10 - 7) + 1) * 6",
      "7 + ((1 + 6) + 10)",
      "((1 - 7) + 10) * 6",
      "((6 + 7) + 10) + 1",
      "((6 + 1) + 10) + 7",
      "(6 + 10) + (1 + 7)",
      "1 + (7 + (6 + 10))",
      "6 * (1 + (10 - 7))",
      "((10 + 7) + 1) + 6",
      "6 + (10 + (7 + 1))",
      "(6 + (1 + 7)) + 10",
      "6 + (1 + (10 + 7))",
      "6 + (7 + (10 + 1))"
    ]
  },
  "1 6 7 11": {
    "cards": "1 6 7 11",
    "has_solution": "Y",
    "num_solutions": 214,
    "solutions": [
      "(6 * 1) + (7 + 11)",
      "(1 * 7) + (6 + 11)",
      "(11 + (6 / 1)) + 7",
      "11 + ((7 + 6) * 1)",
      "11 + ((7 / 1) + 6)",
      "1 * ((6 + 11) + 7)",
      "((7 + 6) / 1) + 11",
      "11 + ((6 / 1) + 7)",
      "((11 * 1) + 7) + 6",
      "6 + ((7 + 11) * 1)",
      "((7 + 6) * 1) + 11",
      "11 + ((6 + 7) / 1)",
      "7 + ((11 + 6) / 1)",
      "((6 / 1) + 7) + 11",
      "((7 + 6) + 11) * 1",
      "11 + ((1 * 6) + 7)",
      "1 * ((7 + 6) + 11)",
      "((6 + 7) / 1) + 11",
      "(11 + 7) + (1 * 6)",
      "(1 * 6) + (11 + 7)",
      "11 + ((1 * 7) + 6)",
      "(7 + 11) + (6 / 1)",
      "(11 + 7) + (6 / 1)",
      "7 + ((1 * 6) + 11)",
      "7 + (6 + (11 * 1))",
      "((6 + 7) + 11) * 1",
      "7 + (11 + (6 / 1))",
      "(7 + 11) + (6 * 1)",
      "((11 - 7) * 6) / 1",
      "7 + ((11 + 6) * 1)",
      "11 + (1 * (6 + 7))",
      "1 * ((6 + 7) + 11)",
      "(11 + (7 * 1)) + 6",
      "((6 + 11) * 1) + 7",
      "((6 + 11) / 1) + 7",
      "6 * (1 * (11 - 7))",
      "(7 + (11 * 1)) + 6",
      "(11 + (1 * 7)) + 6",
      "1 * (11 + (7 + 6))",
      "((11 + 7) / 1) + 6",
      "(11 + (7 + 6)) / 1",
      "(7 + (1 * 11)) + 6",
      "7 + ((6 / 1) + 11)",
      "(7 + (6 * 1)) + 11",
      "(11 - (1 * 7)) * 6",
      "((11 / 1) - 7) * 6",
      "6 + ((1 * 7) + 11)",
      "((7 + 11) * 1) + 6",
      "((1 * 6) + 7) + 11",
      "6 + ((11 / 1) + 7)",
      "6 + ((1 * 11) + 7)",
      "1 * ((11 + 7) + 6)",
      "(7 + 6) + (1 * 11)",
      "((11 + 7) + 6) / 1",
      "(1 * 11) + (6 + 7)",
      "(11 + (6 + 7)) / 1",
      "(7 + (6 + 11)) * 1",
      "7 + ((11 / 1) + 6)",
      "(7 + (1 * 6)) + 11",
      "(1 * (6 + 7)) + 11",
      "((11 / 1) + 6) + 7",
      "11 + (6 + (1 * 7))",
      "((7 + 11) + 6) / 1",
      "6 + (7 + (1 * 11))",
      "(6 + (7 + 11)) * 1",
      "(7 * 1) + (6 + 11)",
      "((7 + 11) / 1) + 6",
      "11 + (7 + (6 / 1))",
      "(7 + (6 / 1)) + 11",
      "(1 * (11 - 7)) * 6",
      "6 * ((11 - 7) / 1)",
      "(6 + (11 + 7)) * 1",
      "7 + ((6 + 11) / 1)",
      "(6 + (1 * 7)) + 11",
      "6 * ((11 - 7) * 1)",
      "(11 - 7) * (1 * 6)",
      "(1 * (6 + 11)) + 7",
      "(11 + (6 + 7)) * 1",
      "((1 * 7) + 11) + 6",
      "((6 * 1) + 7) + 11",
      "(1 * (7 + 11)) + 6",
      "6 * ((1 * 11) - 7)",
      "((11 / 1) + 7) + 6",
      "6 * (11 - (7 / 1))",
      "(11 / 1) + (6 + 7)",
      "(11 + (7 / 1)) + 6",
      "7 + ((11 * 1) + 6)",
      "(1 * 11) + (7 + 6)",
      "((7 * 1) + 11) + 6",
      "1 * (6 + (11 + 7))",
      "((6 / 1) + 11) + 7",
      "11 + (7 + (6 * 1))",
      "((7 * 1) + 6) + 11",
      "6 + ((11 * 1) + 7)",
      "(6 + 11) + (7 / 1)",
      "(11 + (6 * 1)) + 7",
      "((6 * 1) + 11) + 7",
      "(11 * 1) + (7 + 6)",
      "((7 + 11) + 6) * 1",
      "6 + ((11 + 7) / 1)",
      "(11 - (7 / 1)) * 6",
      "11 + ((7 * 1) + 6)",
      "7 + ((6 + 11) * 1)",
      "(11 + 7) + (6 * 1)",
      "(7 + 6) + (11 * 1)",
      "((6 + 11) + 7) / 1",
      "1 * (11 + (6 + 7))",
      "(7 + (11 / 1)) + 6",
      "7 + (6 + (1 * 11))",
      "(6 + (7 * 1)) + 11",
      "(11 - (7 * 1)) * 6",
      "((1 * 7) + 6) + 11",
      "11 + (6 + (7 / 1))",
      "(7 / 1) + (6 + 11)",
      "6 + ((7 + 11) / 1)",
      "(6 + (7 + 11)) / 1",
      "(1 * (7 + 6)) + 11",
      "7 + (11 + (6 * 1))",
      "7 + (6 + (11 / 1))",
      "(7 / 1) + (11 + 6)",
      "((11 + 7) * 1) + 6",
      "((6 + 11) + 7) * 1",
      "((7 / 1) + 6) + 11",
      "(7 + (6 + 11)) / 1",
      "(6 * (11 - 7)) * 1",
      "1 * ((11 - 7) * 6)",
      "((11 + 7) + 6) * 1",
      "((1 * 11) + 6) + 7",
      "(7 + (11 + 6)) * 1",
      "(11 - 7) * (6 * 1)",
      "(1 * 6) + (7 + 11)",
      "6 + ((7 * 1) + 11)",
      "(6 + (1 * 11)) + 7",
      "6 * (11 - (7 * 1))",
      "(7 * (6 - 1)) - 11",
      "7 + (1 * (6 + 11))",
      "1 * (6 + (7 + 11))",
      "((11 - 7) * 1) * 6",
      "(6 + 7) + (11 * 1)",
      "(7 + 11) + (1 * 6)",
      "(6 / 1) * (11 - 7)",
      "(6 + 7) + (11 / 1)",
      "((11 - 7) * 6) * 1",
      "6 + (11 + (1 * 7))",
      "((1 * 6) + 11) + 7",
      "6 * ((11 * 1) - 7)",
      "6 + (1 * (11 + 7))",
      "6 + (1 * (7 + 11))",
      "(1 * 7) + (11 + 6)",
      "((1 * 11) + 7) + 6",
      "((11 * 1) - 7) * 6",
      "(1 * 6) * (11 - 7)",
      "(11 + 6) + (7 * 1)",
      "(11 * 1) + (6 + 7)",
      "(6 / 1) + (7 + 11)",
      "11 + (7 + (1 * 6))",
      "(6 + 7) + (1 * 11)",
      "(6 * (11 - 7)) / 1",
      "6 + (7 + (11 * 1))",
      "(11 + (7 + 6)) * 1",
      "(6 + (11 / 1)) + 7",
      "11 + (6 + (7 * 1))",
      "6 + ((11 + 7) * 1)",
      "(11 + 6) + (7 / 1)",
      "6 + (11 + (7 / 1))",
      "7 + ((1 * 11) + 6)",
      "1 * ((11 + 6) + 7)",
      "(6 + (11 + 7)) / 1",
      "(7 * 1) + (11 + 6)",
      "((7 / 1) + 11) + 6",
      "1 * ((7 + 11) + 6)",
      "(6 + (7 / 1)) + 11",
      "((11 + 6) * 1) + 7",
      "((7 + 6) + 11) / 1",
      "((1 * 11) - 7) * 6",
      "(6 * 1) + (11 + 7)",
      "1 * (7 + (6 + 11))",
      "(1 * (11 + 7)) + 6",
      "((11 + 6) + 7) * 1",
      "7 + (11 + (1 * 6))",
      "11 + ((6 + 7) * 1)",
      "6 + ((7 / 1) + 11)",
      "7 + (1 * (11 + 6))",
      "6 / (1 / (11 - 7))",
      "(11 - 7) / (1 / 6)",
      "(6 + (11 * 1)) + 7",
      "6 + (11 + (7 * 1))",
      "(11 + 6) + (1 * 7)",
      "1 * (7 + (11 + 6))",
      "1 * (6 * (11 - 7))",
      "((11 + 6) + 7) / 1",
      "((11 + 6) / 1) + 7",
      "(7 + (11 + 6)) / 1",
      "(6 + 11) + (1 * 7)",
      "6 * ((11 / 1) - 7)",
      "((6 + 7) * 1) + 11",
      "6 + (7 + (11 / 1))",
      "((6 - 1) * 7) - 11",
      "(6 * 1) * (11 - 7)",
      "11 + (1 * (7 + 6))",
      "((11 - 7) / 1) * 6",
      "11 + ((6 * 1) + 7)",
      "7 + ((6 * 1) + 11)",
      "11 + ((7 + 6) / 1)",
      "(6 + 11) + (7 * 1)",
      "((11 * 1) + 6) + 7",
      "(11 / 1) + (7 + 6)",
      "((6 + 7) + 11) / 1",
      "(7 + 6) + (11 / 1)",
      "(6 / 1) + (11 + 7)",
      "(11 - 7) * (6 / 1)",
      "(1 * (11 + 6)) + 7",
      "6 * (11 - (1 * 7))",
      "(11 + (1 * 6)) + 7"
    ]
  },
  "1 6 7 12": {
    "cards": "1 6 7 12",
    "has_solution": "Y",
    "num_solutions": 116,
    "solutions": [
      "(7 + (6 - 1)) + 12",
      "6 + ((12 + 7) - 1)",
      "6 - (1 - (7 + 12))",
      "12 * (1 - (6 - 7))",
      "(12 + (7 - 1)) + 6",
      "7 + (6 - (1 - 12))",
      "(7 - (6 - 1)) * 12",
      "6 - (1 - (12 + 7))",
      "(6 - 1) + (7 + 12)",
      "7 + ((6 - 1) + 12)",
      "7 - ((1 - 12) - 6)",
      "((7 + 12) - 1) + 6",
      "(6 + (12 + 7)) - 1",
      "12 + ((6 - 1) + 7)",
      "12 * ((1 + 7) - 6)",
      "((7 + 6) - 1) + 12",
      "((12 + 6) - 1) + 7",
      "(6 + (7 + 12)) - 1",
      "((12 - 1) + 7) + 6",
      "12 * ((1 - 6) + 7)",
      "(12 + 6) - (1 - 7)",
      "12 * ((7 + 1) - 6)",
      "12 + (6 + (7 - 1))",
      "(12 - (7 + 1)) * 6",
      "((7 + 12) + 6) - 1",
      "(12 + 7) + (6 - 1)",
      "(6 - 1) + (12 + 7)",
      "(7 - (1 - 12)) + 6",
      "(7 + (1 - 6)) * 12",
      "(12 - 1) + (7 + 6)",
      "((1 + 7) - 6) * 12",
      "6 + (7 - (1 - 12))",
      "(7 + (12 - 1)) + 6",
      "6 + ((7 - 1) + 12)",
      "(12 + (6 - 1)) + 7",
      "(12 - 1) + (6 + 7)",
      "12 + ((7 + 6) - 1)",
      "(7 + 6) + (12 - 1)",
      "6 + (12 + (7 - 1))",
      "(6 + 12) - (1 - 7)",
      "7 + ((6 + 12) - 1)",
      "((7 - 1) + 12) + 6",
      "((7 + 1) - 6) * 12",
      "(7 - 1) + (12 + 6)",
      "6 * (12 - (1 + 7))",
      "12 - (1 - (7 + 6))",
      "12 + ((7 - 1) + 6)",
      "12 + (7 - (1 - 6))",
      "7 + (12 + (6 - 1))",
      "12 * (7 - (6 - 1))",
      "(7 + (12 + 6)) - 1",
      "((6 - 1) + 12) + 7",
      "6 * ((12 - 7) - 1)",
      "(7 + 12) + (6 - 1)",
      "12 - ((1 - 6) - 7)",
      "6 + ((12 - 1) + 7)",
      "((6 + 12) + 7) - 1",
      "(6 + 7) - (1 - 12)",
      "7 + ((12 - 1) + 6)",
      "(6 + 12) + (7 - 1)",
      "(6 * (7 - 1)) - 12",
      "((12 + 7) + 6) - 1",
      "(12 + 6) + (7 - 1)",
      "7 - ((1 - 6) - 12)",
      "6 * ((12 - 1) - 7)",
      "((1 - 6) + 7) * 12",
      "(7 + 6) - (1 - 12)",
      "((7 + 6) + 12) - 1",
      "7 + ((12 + 6) - 1)",
      "(6 + (7 - 1)) + 12",
      "(6 + 7) + (12 - 1)",
      "((12 + 7) - 1) + 6",
      "((6 + 7) - 1) + 12",
      "(6 - (1 - 7)) + 12",
      "6 * (12 - (7 + 1))",
      "(1 - (6 - 7)) * 12",
      "((12 + 6) + 7) - 1",
      "12 * (1 + (7 - 6))",
      "12 - ((1 - 7) - 6)",
      "12 * ((7 - 6) + 1)",
      "12 + (6 - (1 - 7))",
      "((7 - 1) * 6) - 12",
      "7 + (12 - (1 - 6))",
      "(7 + 12) - (1 - 6)",
      "6 - ((1 - 7) - 12)",
      "(7 - 1) + (6 + 12)",
      "((12 - 7) - 1) * 6",
      "7 - (1 - (12 + 6))",
      "((12 - 1) + 6) + 7",
      "((7 - 6) + 1) * 12",
      "(12 - (1 - 7)) + 6",
      "7 + (6 + (12 - 1))",
      "12 - (1 - (6 + 7))",
      "((6 + 12) - 1) + 7",
      "12 + (7 + (6 - 1))",
      "(12 + (7 + 6)) - 1",
      "(1 + (7 - 6)) * 12",
      "(6 - (1 - 12)) + 7",
      "6 - ((1 - 12) - 7)",
      "((6 + 7) + 12) - 1",
      "(7 + (6 + 12)) - 1",
      "6 + ((7 + 12) - 1)",
      "7 - (1 - (6 + 12))",
      "((7 - 1) + 6) + 12",
      "(12 + (6 + 7)) - 1",
      "12 * (7 + (1 - 6))",
      "(12 + 7) - (1 - 6)",
      "((6 - 1) + 7) + 12",
      "6 + (7 + (12 - 1))",
      "(7 - (1 - 6)) + 12",
      "(12 - (1 - 6)) + 7",
      "12 + ((6 + 7) - 1)",
      "6 + (12 - (1 - 7))",
      "(12 - (1 + 7)) * 6",
      "((12 - 1) - 7) * 6",
      "(6 + (12 - 1)) + 7"
    ]
  },
  "1 6 7 13": {
    "cards": "1 6 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 8 8": {
    "cards": "1 6 8 8",
    "has_solution": "Y",
    "num_solutions": 17,
    "solutions": [
      "(8 + (1 - 6)) * 8",
      "8 * (1 - (6 - 8))",
      "8 * ((1 + 8) - 6)",
      "8 * (8 + (1 - 6))",
      "8 * ((8 + 1) - 6)",
      "((8 + 1) - 6) * 8",
      "8 * (8 - (6 - 1))",
      "(8 - (6 - 1)) * 8",
      "((8 - 6) + 1) * 8",
      "8 / ((8 / 6) - 1)",
      "8 * ((8 - 6) + 1)",
      "((1 - 6) + 8) * 8",
      "8 * ((1 - 6) + 8)",
      "((1 + 8) - 6) * 8",
      "(1 - (6 - 8)) * 8",
      "(1 + (8 - 6)) * 8",
      "8 * (1 + (8 - 6))"
    ]
  },
  "1 6 8 9": {
    "cards": "1 6 8 9",
    "has_solution": "Y",
    "num_solutions": 153,
    "solutions": [
      "1 + ((6 + 8) + 9)",
      "((9 + 8) + 6) + 1",
      "((8 + 6) + 9) + 1",
      "((9 / 1) - 6) * 8",
      "(6 + (1 + 8)) + 9",
      "(8 + (1 + 9)) + 6",
      "(9 - 6) * (1 * 8)",
      "6 + (8 + (1 + 9))",
      "((1 + 9) + 6) + 8",
      "8 / (1 - (6 / 9))",
      "6 + (1 + (9 + 8))",
      "((9 + 6) + 1) + 8",
      "((9 - 6) / 1) * 8",
      "((8 + 9) + 1) + 6",
      "(1 + 6) + (9 + 8)",
      "(9 + 8) + (1 + 6)",
      "(8 + 6) + (1 + 9)",
      "8 + (9 + (1 + 6))",
      "(8 + (6 + 1)) + 9",
      "8 / (1 / (9 - 6))",
      "(8 + 9) + (6 + 1)",
      "(8 / 1) * (9 - 6)",
      "((9 + 8) + 1) + 6",
      "((1 + 9) + 8) + 6",
      "(6 + (9 + 8)) + 1",
      "9 + ((8 + 6) + 1)",
      "(9 + 6) + (1 + 8)",
      "8 + (9 + (6 + 1))",
      "9 + ((1 + 8) + 6)",
      "((6 + 8) + 1) + 9",
      "(6 + 1) + (8 + 9)",
      "(1 * 8) * (9 - 6)",
      "((9 + 6) + 8) + 1",
      "1 + (9 + (8 + 6))",
      "((6 + 8) + 9) + 1",
      "(9 + 1) + (8 + 6)",
      "6 + ((9 + 1) + 8)",
      "9 + (6 + (1 + 8))",
      "(8 + (9 + 1)) + 6",
      "((1 + 6) + 8) + 9",
      "((9 + 1) + 6) + 8",
      "1 + ((9 + 8) + 6)",
      "((8 + 9) + 6) + 1",
      "(8 + 6) + (9 + 1)",
      "(1 * (9 - 6)) * 8",
      "1 * ((9 - 6) * 8)",
      "((9 - 6) * 1) * 8",
      "9 + (6 + (8 + 1))",
      "8 * ((1 * 9) - 6)",
      "1 + ((8 + 9) + 6)",
      "1 + (6 + (8 + 9))",
      "(9 + (1 + 6)) + 8",
      "(9 + (6 + 1)) + 8",
      "(8 + 1) + (9 + 6)",
      "(1 + (9 + 8)) + 6",
      "((9 - 6) * 8) / 1",
      "9 + ((6 + 1) + 8)",
      "(9 - 6) * (8 / 1)",
      "8 + (6 + (9 + 1))",
      "1 + ((6 + 9) + 8)",
      "(8 + (9 + 6)) + 1",
      "(6 + 8) + (9 + 1)",
      "9 + ((6 + 8) + 1)",
      "((6 + 1) + 9) + 8",
      "(8 * 1) * (9 - 6)",
      "(1 + 9) + (8 + 6)",
      "((6 + 1) + 8) + 9",
      "(8 + (1 + 6)) + 9",
      "8 + ((6 + 1) + 9)",
      "1 + (6 + (9 + 8))",
      "(6 + (8 + 1)) + 9",
      "(1 + 6) + (8 + 9)",
      "((1 + 6) + 9) + 8",
      "(9 + (8 + 1)) + 6",
      "1 + (8 + (6 + 9))",
      "1 + (8 + (9 + 6))",
      "8 * ((9 - 6) / 1)",
      "6 + ((1 + 9) + 8)",
      "(9 + (1 + 8)) + 6",
      "1 + ((9 + 6) + 8)",
      "((1 + 8) + 6) + 9",
      "8 + (1 + (9 + 6))",
      "(8 * (9 - 6)) * 1",
      "(1 + (8 + 9)) + 6",
      "8 * ((9 * 1) - 6)",
      "8 + ((1 + 6) + 9)",
      "(1 + 8) + (9 + 6)",
      "6 + (9 + (1 + 8))",
      "(9 + 6) + (8 + 1)",
      "((8 + 1) + 9) + 6",
      "(6 + (1 + 9)) + 8",
      "8 + ((1 + 9) + 6)",
      "((1 * 9) - 6) * 8",
      "(9 + 8) + (6 + 1)",
      "1 + (9 + (6 + 8))",
      "(8 + 1) + (6 + 9)",
      "8 + ((9 + 6) + 1)",
      "(9 - 6) / (1 / 8)",
      "(8 + 9) + (1 + 6)",
      "((9 - 6) * 8) * 1",
      "(6 + 9) + (8 + 1)",
      "(9 + (8 + 6)) + 1",
      "((8 + 1) + 6) + 9",
      "1 + ((8 + 6) + 9)",
      "(9 - (1 * 6)) * 8",
      "(6 + 1) + (9 + 8)",
      "(9 - (6 / 1)) * 8",
      "8 + (6 + (1 + 9))",
      "8 + (1 + (6 + 9))",
      "((1 + 8) + 9) + 6",
      "6 + ((8 + 1) + 9)",
      "9 + (1 + (6 + 8))",
      "(8 * (9 - 6)) / 1",
      "8 * (9 - (1 * 6))",
      "6 + ((1 + 8) + 9)",
      "(1 + (9 + 6)) + 8",
      "((8 + 6) + 1) + 9",
      "6 + (1 + (8 + 9))",
      "9 + ((8 + 1) + 6)",
      "9 + (8 + (6 + 1))",
      "(9 - (6 * 1)) * 8",
      "((9 * 1) - 6) * 8",
      "(9 - 6) * (8 * 1)",
      "(6 + (8 + 9)) + 1",
      "8 + ((6 + 9) + 1)",
      "(1 + (6 + 9)) + 8",
      "(1 + (6 + 8)) + 9",
      "8 * ((9 / 1) - 6)",
      "(6 + 8) + (1 + 9)",
      "8 + ((9 + 1) + 6)",
      "8 * (9 - (6 / 1))",
      "(6 + (9 + 1)) + 8",
      "6 + ((8 + 9) + 1)",
      "(9 + 1) + (6 + 8)",
      "8 * (9 - (6 * 1))",
      "(9 + (6 + 8)) + 1",
      "((6 + 9) + 8) + 1",
      "6 + (8 + (9 + 1))",
      "9 + ((1 + 6) + 8)",
      "(6 + 9) + (1 + 8)",
      "9 + (8 + (1 + 6))",
      "(1 + 8) + (6 + 9)",
      "(1 + 9) + (6 + 8)",
      "((6 + 9) + 1) + 8",
      "9 + (1 + (8 + 6))",
      "6 + ((9 + 8) + 1)",
      "(1 + (8 + 6)) + 9",
      "(8 + (6 + 9)) + 1",
      "8 * ((9 - 6) * 1)",
      "6 + (9 + (8 + 1))",
      "((9 + 1) + 8) + 6",
      "8 * (1 * (9 - 6))",
      "1 * (8 * (9 - 6))"
    ]
  },
  "1 6 8 10": {
    "cards": "1 6 8 10",
    "has_solution": "Y",
    "num_solutions": 189,
    "solutions": [
      "(10 + (8 + 6)) * 1",
      "(10 + (1 * 6)) + 8",
      "6 + ((10 + 8) * 1)",
      "10 + ((8 + 6) * 1)",
      "6 + ((10 + 8) / 1)",
      "1 * (10 + (6 + 8))",
      "(8 + (1 * 10)) + 6",
      "(6 + (1 * 10)) + 8",
      "((10 * 1) + 6) + 8",
      "(1 * 10) + (6 + 8)",
      "(8 + 6) + (1 * 10)",
      "((8 * 1) + 10) + 6",
      "((6 + 10) / 1) + 8",
      "((10 + 8) + 6) / 1",
      "((6 / 1) + 10) + 8",
      "8 * (10 - (1 + 6))",
      "(10 + (6 + 8)) / 1",
      "10 + (8 + (1 * 6))",
      "6 + (10 + (8 / 1))",
      "((6 + 8) + 10) * 1",
      "1 * ((10 + 6) + 8)",
      "(6 * 1) + (10 + 8)",
      "((10 + 6) / 1) + 8",
      "((10 - 6) - 1) * 8",
      "(1 * 6) + (10 + 8)",
      "8 * ((10 - 1) - 6)",
      "((10 + 6) + 8) / 1",
      "8 + ((6 * 1) + 10)",
      "1 * (8 + (6 + 10))",
      "(8 * 1) + (10 + 6)",
      "((10 + 8) + 6) * 1",
      "(8 + (10 * 1)) + 6",
      "10 + ((1 * 6) + 8)",
      "(10 + (1 * 8)) + 6",
      "(6 + (10 * 1)) + 8",
      "8 + ((10 + 6) * 1)",
      "10 + ((6 * 1) + 8)",
      "6 / ((10 / 8) - 1)",
      "((10 + 6) + 8) * 1",
      "(10 - (6 + 1)) * 8",
      "(1 * (8 + 10)) + 6",
      "6 + (1 * (8 + 10))",
      "10 + ((8 + 6) / 1)",
      "(6 + 8) + (1 * 10)",
      "((1 * 8) + 6) + 10",
      "10 + ((8 * 1) + 6)",
      "(6 + (10 + 8)) * 1",
      "(8 + (6 + 10)) * 1",
      "(6 / 1) + (10 + 8)",
      "6 + ((1 * 10) + 8)",
      "8 + (6 + (1 * 10))",
      "1 * (8 + (10 + 6))",
      "6 + (8 + (1 * 10))",
      "(10 + (6 * 1)) + 8",
      "8 + (10 + (1 * 6))",
      "(8 / 1) + (6 + 10)",
      "(10 + 8) + (6 / 1)",
      "((6 + 8) / 1) + 10",
      "8 + (10 + (6 * 1))",
      "(8 + (10 / 1)) + 6",
      "(6 + (1 * 8)) + 10",
      "((10 + 8) / 1) + 6",
      "(8 + (6 / 1)) + 10",
      "(8 + 10) + (1 * 6)",
      "10 + (1 * (6 + 8))",
      "((6 / 1) + 8) + 10",
      "(10 + (6 + 8)) * 1",
      "1 * ((8 + 10) + 6)",
      "1 * (10 + (8 + 6))",
      "10 + (8 + (6 * 1))",
      "((6 + 10) + 8) / 1",
      "((8 + 6) / 1) + 10",
      "((6 * 1) + 8) + 10",
      "(10 * 1) + (6 + 8)",
      "(8 * 1) + (6 + 10)",
      "(10 + 6) + (8 * 1)",
      "6 + (8 + (10 * 1))",
      "6 + (10 + (8 * 1))",
      "(1 * (10 + 6)) + 8",
      "8 * (10 - (6 + 1))",
      "((8 + 10) / 1) + 6",
      "(6 + (8 / 1)) + 10",
      "(6 + 10) + (8 / 1)",
      "(6 + 10) + (8 * 1)",
      "10 + ((6 + 8) * 1)",
      "(10 + (8 / 1)) + 6",
      "8 + ((1 * 6) + 10)",
      "6 + (8 + (10 / 1))",
      "((6 + 8) * 1) + 10",
      "6 + ((8 / 1) + 10)",
      "(10 / 1) + (8 + 6)",
      "10 + (1 * (8 + 6))",
      "1 * (6 + (10 + 8))",
      "(6 + (10 / 1)) + 8",
      "(6 + 8) + (10 * 1)",
      "1 * (6 + (8 + 10))",
      "8 + ((6 + 10) / 1)",
      "8 + ((6 + 10) * 1)",
      "(10 + 6) + (8 / 1)",
      "(10 + (8 * 1)) + 6",
      "10 + ((6 / 1) + 8)",
      "((10 / 1) + 6) + 8",
      "6 + ((10 * 1) + 8)",
      "(1 * (10 + 8)) + 6",
      "8 + ((6 / 1) + 10)",
      "((8 + 6) + 10) * 1",
      "((8 + 10) + 6) * 1",
      "((8 / 1) + 10) + 6",
      "(10 * 1) + (8 + 6)",
      "((6 * 1) + 10) + 8",
      "10 + (6 + (8 * 1))",
      "(8 + 6) + (10 * 1)",
      "(8 / 1) + (10 + 6)",
      "((10 + 6) * 1) + 8",
      "6 + (1 * (10 + 8))",
      "((10 + 8) * 1) + 6",
      "((1 * 10) + 8) + 6",
      "6 + ((8 * 1) + 10)",
      "(10 + 8) + (1 * 6)",
      "(6 + 10) + (1 * 8)",
      "6 + ((10 / 1) + 8)",
      "6 + (10 + (1 * 8))",
      "((1 * 10) + 6) + 8",
      "8 + (6 + (10 / 1))",
      "8 + ((1 * 10) + 6)",
      "((10 / 1) + 8) + 6",
      "(10 / 1) + (6 + 8)",
      "(6 * 1) + (8 + 10)",
      "10 + (8 + (6 / 1))",
      "((8 + 6) + 10) / 1",
      "((1 * 8) + 10) + 6",
      "(1 * (6 + 8)) + 10",
      "1 * ((6 + 8) + 10)",
      "(10 - (1 + 6)) * 8",
      "((8 + 10) * 1) + 6",
      "((8 + 10) + 6) / 1",
      "((8 / 1) + 6) + 10",
      "(10 + (8 + 6)) / 1",
      "((8 + 6) * 1) + 10",
      "(6 + (8 + 10)) * 1",
      "10 + ((1 * 8) + 6)",
      "(6 + (8 + 10)) / 1",
      "10 + ((8 / 1) + 6)",
      "((6 + 10) * 1) + 8",
      "(8 + (10 + 6)) * 1",
      "(8 + (6 + 10)) / 1",
      "(6 + (8 * 1)) + 10",
      "1 * ((10 + 8) + 6)",
      "(10 + (6 / 1)) + 8",
      "((1 * 6) + 8) + 10",
      "8 + (1 * (10 + 6))",
      "10 + ((6 + 8) / 1)",
      "(8 + (10 + 6)) / 1",
      "(6 + (10 + 8)) / 1",
      "8 * ((10 - 6) - 1)",
      "6 + ((1 * 8) + 10)",
      "8 + ((10 / 1) + 6)",
      "8 + ((10 + 6) / 1)",
      "((10 - 1) - 6) * 8",
      "(1 * 10) + (8 + 6)",
      "((6 + 10) + 8) * 1",
      "(6 / 1) + (8 + 10)",
      "(8 + (6 * 1)) + 10",
      "8 + (6 + (10 * 1))",
      "(6 + 8) + (10 / 1)",
      "10 + (6 + (8 / 1))",
      "(8 + 10) + (6 * 1)",
      "(8 + 10) + (6 / 1)",
      "8 + (1 * (6 + 10))",
      "(1 * 8) + (6 + 10)",
      "(10 + 6) + (1 * 8)",
      "6 + ((8 + 10) * 1)",
      "1 * ((6 + 10) + 8)",
      "(1 * 6) + (8 + 10)",
      "((8 * 1) + 6) + 10",
      "1 * ((8 + 6) + 10)",
      "10 + (6 + (1 * 8))",
      "((1 * 6) + 10) + 8",
      "(8 + (1 * 6)) + 10",
      "((6 + 8) + 10) / 1",
      "6 + ((8 + 10) / 1)",
      "((10 * 1) + 8) + 6",
      "(1 * (6 + 10)) + 8",
      "8 + ((10 * 1) + 6)",
      "(1 * 8) + (10 + 6)",
      "(8 + 6) + (10 / 1)",
      "(10 + 8) + (6 * 1)",
      "(1 * (8 + 6)) + 10",
      "8 + (10 + (6 / 1))"
    ]
  },
  "1 6 8 11": {
    "cards": "1 6 8 11",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(8 - 1) + (6 + 11)",
      "(6 + 11) + (8 - 1)",
      "8 + (6 - (1 - 11))",
      "6 + ((8 + 11) - 1)",
      "(6 - 1) + (11 + 8)",
      "(1 - (8 - 11)) * 6",
      "6 - (1 - (8 + 11))",
      "(6 + (11 - 1)) + 8",
      "8 + ((6 + 11) - 1)",
      "(11 + 1) * (8 - 6)",
      "((6 + 8) - 1) + 11",
      "(11 + 8) + (6 - 1)",
      "((11 - 1) + 6) + 8",
      "11 + ((6 - 1) + 8)",
      "8 + (11 - (1 - 6))",
      "((8 - 1) + 6) + 11",
      "8 - (1 - (6 + 11))",
      "(11 + (6 - 1)) + 8",
      "6 + (8 - (1 - 11))",
      "((1 + 11) - 8) * 6",
      "11 - ((1 - 6) - 8)",
      "(1 + (11 - 8)) * 6",
      "(11 + 8) - (1 - 6)",
      "8 + ((6 - 1) + 11)",
      "6 - (1 - (11 + 8))",
      "(8 - 1) + (11 + 6)",
      "((6 + 11) + 8) - 1",
      "11 - ((1 - 8) - 6)",
      "8 + (11 + (6 - 1))",
      "6 * ((11 + 1) - 8)",
      "11 + ((6 + 8) - 1)",
      "11 + (6 + (8 - 1))",
      "(6 + (8 - 1)) + 11",
      "((6 - 1) + 8) + 11",
      "8 - ((1 - 11) - 6)",
      "8 + ((11 - 1) + 6)",
      "((11 + 8) - 1) + 6",
      "6 + (11 - (1 - 8))",
      "(1 + 11) * (8 - 6)",
      "(11 - (1 - 6)) + 8",
      "6 + (8 + (11 - 1))",
      "((8 + 11) + 6) - 1",
      "6 + ((11 + 8) - 1)",
      "(8 - (1 - 6)) + 11",
      "((8 + 6) - 1) + 11",
      "((11 + 8) + 6) - 1",
      "6 * ((1 + 11) - 8)",
      "(8 + (11 - 1)) + 6",
      "8 - (1 - (11 + 6))",
      "(11 + (8 - 1)) + 6",
      "(8 + (6 - 1)) + 11",
      "(8 + 11) + (6 - 1)",
      "(8 + (11 + 6)) - 1",
      "((6 - 1) + 11) + 8",
      "(11 + 6) + (8 - 1)",
      "(11 + 6) - (1 - 8)",
      "11 + (6 - (1 - 8))",
      "6 - ((1 - 11) - 8)",
      "((11 - 1) + 8) + 6",
      "(11 + (8 + 6)) - 1",
      "(11 - (8 - 1)) * 6",
      "(8 - 6) * (1 + 11)",
      "6 + (11 + (8 - 1))",
      "(8 - 6) * (11 + 1)",
      "11 + (8 + (6 - 1))",
      "(11 - (1 - 8)) + 6",
      "(8 + (6 + 11)) - 1",
      "8 + ((11 + 6) - 1)",
      "11 + ((8 + 6) - 1)",
      "11 - (1 - (8 + 6))",
      "((11 + 6) - 1) + 8",
      "(6 - (1 - 11)) + 8",
      "(11 + (1 - 8)) * 6",
      "(6 - 1) + (8 + 11)",
      "(6 + 8) - (1 - 11)",
      "((11 + 1) - 8) * 6",
      "(6 + 11) - (1 - 8)",
      "(8 - (1 - 11)) + 6",
      "(8 + 6) + (11 - 1)",
      "6 * (11 + (1 - 8))",
      "11 - (1 - (6 + 8))",
      "(8 + 6) - (1 - 11)",
      "(8 + 11) - (1 - 6)",
      "((6 + 11) - 1) + 8",
      "(6 + 8) + (11 - 1)",
      "6 * (1 - (8 - 11))",
      "6 - ((1 - 8) - 11)",
      "((6 + 8) + 11) - 1",
      "(6 + (11 + 8)) - 1",
      "((8 + 6) + 11) - 1",
      "((8 - 1) + 11) + 6",
      "(6 + (8 + 11)) - 1",
      "(11 + (6 + 8)) - 1",
      "6 + ((8 - 1) + 11)",
      "6 + ((11 - 1) + 8)",
      "6 * (1 + (11 - 8))",
      "8 + (6 + (11 - 1))",
      "(11 - 1) + (8 + 6)",
      "6 * ((11 - 8) + 1)",
      "11 + ((8 - 1) + 6)",
      "6 * (11 - (8 - 1))",
      "11 + (8 - (1 - 6))",
      "(6 - (1 - 8)) + 11",
      "8 - ((1 - 6) - 11)",
      "(11 - 1) + (6 + 8)",
      "((11 - 8) + 1) * 6",
      "((1 - 8) + 11) * 6",
      "((8 + 11) - 1) + 6",
      "6 * ((1 - 8) + 11)",
      "((11 + 6) + 8) - 1"
    ]
  },
  "1 6 8 12": {
    "cards": "1 6 8 12",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "((8 - 6) * 12) / 1",
      "12 / (1 / (8 - 6))",
      "((12 - 8) * 6) * 1",
      "1 * (12 * (8 - 6))",
      "(6 * (12 - 8)) * 1",
      "(8 - 6) * (12 / 1)",
      "1 * (6 * (12 - 8))",
      "(8 - 6) * (12 * 1)",
      "6 * (12 - (8 / 1))",
      "12 * (8 - (1 * 6))",
      "12 * ((1 * 8) - 6)",
      "12 * ((8 - 6) * 1)",
      "6 * (1 * (12 - 8))",
      "(12 - 8) * (6 / 1)",
      "8 * ((12 / 6) + 1)",
      "(8 - 6) / (1 / 12)",
      "1 * ((8 - 6) * 12)",
      "(12 * (8 - 6)) * 1",
      "((8 - 6) / 1) * 12",
      "6 * ((1 * 12) - 8)",
      "6 * (12 - (1 * 8))",
      "(6 / 1) * (12 - 8)",
      "6 * ((12 / 1) - 8)",
      "(12 - (8 * 1)) * 6",
      "(12 * 1) * (8 - 6)",
      "(12 - (8 / 1)) * 6",
      "1 * ((12 - 8) * 6)",
      "8 * (1 + (12 / 6))",
      "((12 / 1) - 8) * 6",
      "(12 - 8) * (1 * 6)",
      "(1 * (8 - 6)) * 12",
      "((1 * 8) - 6) * 12",
      "((8 - 6) * 1) * 12",
      "6 * ((12 * 1) - 8)",
      "(6 * (12 - 8)) / 1",
      "(12 / 1) * (8 - 6)",
      "(1 + (12 / 6)) * 8",
      "6 / (1 / (12 - 8))",
      "(12 - 8) / (1 / 6)",
      "12 * (8 - (6 / 1))",
      "((8 - 6) * 12) * 1",
      "6 * ((12 - 8) * 1)",
      "6 * (12 - (8 * 1))",
      "(1 * 12) * (8 - 6)",
      "(1 * 6) * (12 - 8)",
      "12 * ((8 * 1) - 6)",
      "((12 - 8) / 1) * 6",
      "((12 * 1) - 8) * 6",
      "(8 - (6 / 1)) * 12",
      "(1 * (12 - 8)) * 6",
      "((12 - 8) * 6) / 1",
      "(12 - (1 * 8)) * 6",
      "12 * (1 * (8 - 6))",
      "12 * (8 - (6 * 1))",
      "12 * ((8 - 6) / 1)",
      "(8 - 6) * (1 * 12)",
      "((8 * 1) - 6) * 12",
      "(12 - 8) * (6 * 1)",
      "((1 * 12) - 8) * 6",
      "(8 - (6 * 1)) * 12",
      "((8 / 1) - 6) * 12",
      "6 * ((12 - 8) / 1)",
      "(8 - (1 * 6)) * 12",
      "(12 * (8 - 6)) / 1",
      "(6 * 1) * (12 - 8)",
      "12 * ((8 / 1) - 6)",
      "((12 / 6) + 1) * 8",
      "((12 - 8) * 1) * 6"
    ]
  },
  "1 6 8 13": {
    "cards": "1 6 8 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(13 - 1) * (8 - 6)",
      "6 * (13 - (1 + 8))",
      "(13 - (1 + 8)) * 6",
      "(1 - 13) * (6 - 8)",
      "6 * ((13 - 8) - 1)",
      "(13 - (8 + 1)) * 6",
      "6 * ((13 - 1) - 8)",
      "(6 - 8) * (1 - 13)",
      "((13 - 8) - 1) * 6",
      "6 * (13 - (8 + 1))",
      "(8 - 6) * (13 - 1)",
      "((13 - 1) - 8) * 6"
    ]
  },
  "1 6 9 9": {
    "cards": "1 6 9 9",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "6 + (1 * (9 + 9))",
      "6 + ((9 + 9) * 1)",
      "(9 * 1) + (6 + 9)",
      "9 + ((6 + 9) * 1)",
      "(9 - 6) * (9 - 1)",
      "9 + (6 + (1 * 9))",
      "(1 * 6) + (9 + 9)",
      "9 + (9 + (1 * 6))",
      "((9 + 6) / 1) + 9",
      "(9 - 1) * (9 - 6)",
      "(9 + (9 * 1)) + 6",
      "((9 + 9) + 6) / 1",
      "((9 + 9) * 1) + 6",
      "(9 + (6 / 1)) + 9",
      "1 * ((6 + 9) + 9)",
      "(9 + (9 + 6)) / 1",
      "6 + (9 + (9 * 1))",
      "((9 + 9) + 6) * 1",
      "(1 * (6 + 9)) + 9",
      "((6 * 1) + 9) + 9",
      "9 + (9 + (6 / 1))",
      "9 + (9 + (6 * 1))",
      "((6 / 1) + 9) + 9",
      "(9 + (6 * 1)) + 9",
      "((9 + 6) + 9) / 1",
      "1 * ((9 + 6) + 9)",
      "(1 - 9) * (6 - 9)",
      "((6 + 9) * 1) + 9",
      "((9 * 1) + 6) + 9",
      "(9 + (1 * 9)) + 6",
      "9 + ((9 * 1) + 6)",
      "9 + ((9 / 1) + 6)",
      "(9 + (9 + 6)) * 1",
      "1 * (6 + (9 + 9))",
      "(9 + (9 / 1)) + 6",
      "(1 * (9 + 6)) + 9",
      "6 + ((9 / 1) + 9)",
      "(1 * 9) + (9 + 6)",
      "(9 * 1) + (9 + 6)",
      "(9 / 1) + (6 + 9)",
      "(9 + (6 + 9)) / 1",
      "(6 + (9 + 9)) / 1",
      "6 + (9 + (1 * 9))",
      "9 + (6 + (9 * 1))",
      "6 + (9 + (9 / 1))",
      "(6 + 9) + (1 * 9)",
      "(9 + (1 * 6)) + 9",
      "((6 + 9) + 9) / 1",
      "(9 / 1) + (9 + 6)",
      "((6 + 9) + 9) * 1",
      "((9 + 6) + 9) * 1",
      "9 + ((6 + 9) / 1)",
      "(9 + 9) + (6 / 1)",
      "9 + ((6 / 1) + 9)",
      "1 * ((9 + 9) + 6)",
      "((9 + 6) * 1) + 9",
      "(9 + 6) + (9 * 1)",
      "(6 - 9) * (1 - 9)",
      "(6 + (9 / 1)) + 9",
      "6 + ((9 * 1) + 9)",
      "9 + (1 * (6 + 9))",
      "1 * (9 + (6 + 9))",
      "6 + ((1 * 9) + 9)",
      "((9 / 1) + 9) + 6",
      "9 + ((1 * 6) + 9)",
      "(6 + 9) + (9 * 1)",
      "(9 + 6) + (9 / 1)",
      "((1 * 6) + 9) + 9",
      "9 + ((9 + 6) / 1)",
      "9 + ((6 * 1) + 9)",
      "((9 / 1) + 6) + 9",
      "6 + ((9 + 9) / 1)",
      "(9 + 9) + (1 * 6)",
      "(9 + 6) + (1 * 9)",
      "9 + ((1 * 9) + 6)",
      "(6 + 9) + (9 / 1)",
      "1 * (9 + (9 + 6))",
      "(6 + (9 + 9)) * 1",
      "((6 + 9) / 1) + 9",
      "((1 * 9) + 6) + 9",
      "(1 * 9) + (6 + 9)",
      "(6 * 1) + (9 + 9)",
      "((1 * 9) + 9) + 6",
      "(9 + (6 + 9)) * 1",
      "(6 / 1) + (9 + 9)",
      "(1 * (9 + 9)) + 6",
      "(6 + (9 * 1)) + 9",
      "9 + (1 * (9 + 6))",
      "((9 * 1) + 9) + 6",
      "9 + ((9 + 6) * 1)",
      "9 + (6 + (9 / 1))",
      "(9 + 9) + (6 * 1)",
      "(6 + (1 * 9)) + 9",
      "((9 + 9) / 1) + 6"
    ]
  },
  "1 6 9 10": {
    "cards": "1 6 9 10",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "(6 + 10) + (9 - 1)",
      "((9 - 1) + 6) + 10",
      "9 * (1 + (10 / 6))",
      "10 + (9 + (6 - 1))",
      "((6 + 10) + 9) - 1",
      "10 - (1 - (6 + 9))",
      "(6 - (1 - 9)) + 10",
      "10 + (6 + (9 - 1))",
      "6 + ((9 - 1) + 10)",
      "(10 + (9 + 6)) - 1",
      "9 - ((1 - 6) - 10)",
      "((9 + 10) + 6) - 1",
      "6 - ((1 - 10) - 9)",
      "(10 + (6 + 9)) - 1",
      "(10 - 1) + (6 + 9)",
      "(10 - (1 - 9)) + 6",
      "10 + ((6 - 1) + 9)",
      "10 + ((6 + 9) - 1)",
      "(10 - 1) + (9 + 6)",
      "((6 - 1) + 9) + 10",
      "((10 / 6) + 1) * 9",
      "(6 + 9) - (1 - 10)",
      "6 + (10 - (1 - 9))",
      "(10 + (6 - 1)) + 9",
      "((6 + 9) + 10) - 1",
      "(1 + (10 / 6)) * 9",
      "10 + ((9 + 6) - 1)",
      "(6 + (10 - 1)) + 9",
      "(9 + (10 - 1)) + 6",
      "((10 + 6) - 1) + 9",
      "6 + (9 - (1 - 10))",
      "9 + ((6 + 10) - 1)",
      "((10 + 6) + 9) - 1",
      "9 + (10 - (1 - 6))",
      "(9 + (10 + 6)) - 1",
      "6 + ((10 - 1) + 9)",
      "((9 + 10) - 1) + 6",
      "(9 + (6 + 10)) - 1",
      "9 + ((10 - 1) + 6)",
      "9 + ((6 - 1) + 10)",
      "9 + (6 + (10 - 1))",
      "(6 + 9) + (10 - 1)",
      "(9 - 1) + (6 + 10)",
      "((9 - 1) + 10) + 6",
      "(10 + 9) - (1 - 6)",
      "(10 + 6) + (9 - 1)",
      "(9 - 1) + (10 + 6)",
      "(9 - (1 - 6)) + 10",
      "10 - ((1 - 9) - 6)",
      "6 + ((10 + 9) - 1)",
      "((9 + 6) - 1) + 10",
      "((10 + 9) + 6) - 1",
      "9 - ((1 - 10) - 6)",
      "(6 + 10) - (1 - 9)",
      "10 + ((9 - 1) + 6)",
      "(6 + (9 + 10)) - 1",
      "((6 + 9) - 1) + 10",
      "((6 + 10) - 1) + 9",
      "6 + (10 + (9 - 1))",
      "9 + (10 + (6 - 1))",
      "(9 - (1 - 10)) + 6",
      "6 + ((9 + 10) - 1)",
      "(9 + 6) + (10 - 1)",
      "10 + (6 - (1 - 9))",
      "((10 - 1) + 6) + 9",
      "(10 - (1 - 6)) + 9",
      "(6 - 1) + (9 + 10)",
      "10 - ((1 - 6) - 9)",
      "10 - (1 - (9 + 6))",
      "(6 - (1 - 10)) + 9",
      "(9 + (6 - 1)) + 10",
      "9 + ((10 + 6) - 1)",
      "(9 + 6) - (1 - 10)",
      "10 + (9 - (1 - 6))",
      "6 - ((1 - 9) - 10)",
      "6 - (1 - (10 + 9))",
      "(10 + (9 - 1)) + 6",
      "((10 - 1) + 9) + 6",
      "((9 + 6) + 10) - 1",
      "(6 - 1) + (10 + 9)",
      "((6 - 1) + 10) + 9",
      "9 - (1 - (10 + 6))",
      "6 + (9 + (10 - 1))",
      "(6 + (9 - 1)) + 10",
      "6 - (1 - (9 + 10))",
      "9 * ((10 / 6) + 1)",
      "(6 + (10 + 9)) - 1",
      "(10 + 6) - (1 - 9)",
      "(10 + 9) + (6 - 1)",
      "((10 + 9) - 1) + 6",
      "9 + (6 - (1 - 10))",
      "(9 + 10) - (1 - 6)",
      "9 - (1 - (6 + 10))",
      "(9 + 10) + (6 - 1)"
    ]
  },
  "1 6 9 11": {
    "cards": "1 6 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 9 12": {
    "cards": "1 6 9 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((9 - 6) - 1) * 12",
      "6 * ((1 - 9) + 12)",
      "(1 - (9 - 12)) * 6",
      "(9 - (1 + 6)) * 12",
      "((1 - 9) + 12) * 6",
      "6 * (12 - (9 - 1))",
      "(12 + (1 - 9)) * 6",
      "((12 + 1) - 9) * 6",
      "6 * ((1 + 12) - 9)",
      "6 * ((12 + 1) - 9)",
      "6 / (1 - (9 / 12))",
      "6 * (1 - (9 - 12))",
      "6 * (1 + (12 - 9))",
      "(1 + (12 - 9)) * 6",
      "12 * ((9 - 1) - 6)",
      "((12 - 9) + 1) * 6",
      "6 * ((12 - 9) + 1)",
      "((1 + 12) - 9) * 6",
      "12 * ((9 - 6) - 1)",
      "12 * (9 - (6 + 1))",
      "6 * (12 + (1 - 9))",
      "12 * (9 - (1 + 6))",
      "((9 - 1) - 6) * 12",
      "(12 - (9 - 1)) * 6",
      "(9 - (6 + 1)) * 12",
      "12 / ((9 / 6) - 1)"
    ]
  },
  "1 6 9 13": {
    "cards": "1 6 9 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((1 * 13) - 9) * 6",
      "(13 - (1 * 9)) * 6",
      "((13 - 9) * 6) / 1",
      "(13 - 9) * (6 / 1)",
      "(1 * 6) * (13 - 9)",
      "6 * ((13 - 9) / 1)",
      "6 * (13 - (9 / 1))",
      "((13 / 1) - 9) * 6",
      "6 * (13 - (1 * 9))",
      "(6 / 1) * (13 - 9)",
      "6 * ((13 - 9) * 1)",
      "(13 - 9) / (1 / 6)",
      "((13 - 9) / 1) * 6",
      "6 * ((1 * 13) - 9)",
      "(13 - (9 * 1)) * 6",
      "(13 - 9) * (6 * 1)",
      "((13 * 1) - 9) * 6",
      "(6 * (13 - 9)) * 1",
      "((13 - 9) * 6) * 1",
      "1 * ((13 - 9) * 6)",
      "(1 * (13 - 9)) * 6",
      "6 * ((13 / 1) - 9)",
      "1 * (6 * (13 - 9))",
      "6 * (13 - (9 * 1))",
      "((13 - 9) * 1) * 6",
      "(6 * 1) * (13 - 9)",
      "6 / (1 / (13 - 9))",
      "6 * (1 * (13 - 9))",
      "(6 * (13 - 9)) / 1",
      "(13 - 9) * (1 * 6)",
      "6 * ((13 * 1) - 9)",
      "(13 - (9 / 1)) * 6"
    ]
  },
  "1 6 10 10": {
    "cards": "1 6 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 10 11": {
    "cards": "1 6 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 10 12": {
    "cards": "1 6 10 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 / (6 - 1)) * 10",
      "12 * (10 / (6 - 1))",
      "10 / ((6 - 1) / 12)",
      "10 * (12 / (6 - 1))",
      "12 / ((6 - 1) / 10)",
      "(10 * 12) / (6 - 1)",
      "(10 / (6 - 1)) * 12",
      "(12 * 10) / (6 - 1)"
    ]
  },
  "1 6 10 13": {
    "cards": "1 6 10 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(1 + (13 - 10)) * 6",
      "((1 - 10) + 13) * 6",
      "((13 - 10) + 1) * 6",
      "(13 - (10 - 1)) * 6",
      "6 * ((1 - 10) + 13)",
      "((13 + 1) - 10) * 6",
      "(13 + (1 - 10)) * 6",
      "6 * (1 - (10 - 13))",
      "6 * ((13 + 1) - 10)",
      "6 * ((13 - 10) + 1)",
      "(1 - (10 - 13)) * 6",
      "6 * (13 + (1 - 10))",
      "6 * ((1 + 13) - 10)",
      "((1 + 13) - 10) * 6",
      "6 * (1 + (13 - 10))",
      "6 * (13 - (10 - 1))"
    ]
  },
  "1 6 11 11": {
    "cards": "1 6 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 6 11 12": {
    "cards": "1 6 11 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((1 + 11) * 12) / 6",
      "(1 + 11) * (12 / 6)",
      "(12 * (11 + 1)) / 6",
      "(12 / 6) * (11 + 1)",
      "(12 * (1 + 11)) / 6",
      "12 / (6 / (1 + 11))",
      "(1 + 11) / (6 / 12)",
      "(11 + 1) / (6 / 12)",
      "12 * ((11 + 1) / 6)",
      "((11 + 1) * 12) / 6",
      "12 / (6 / (11 + 1))",
      "((1 + 11) / 6) * 12",
      "12 * ((1 + 11) / 6)",
      "(11 + 1) * (12 / 6)",
      "(12 / 6) * (1 + 11)",
      "((11 + 1) / 6) * 12"
    ]
  },
  "1 6 11 13": {
    "cards": "1 6 11 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((11 * 13) + 1) / 6",
      "(1 + (11 * 13)) / 6",
      "((13 * 11) + 1) / 6",
      "(1 + (13 * 11)) / 6"
    ]
  },
  "1 6 12 12": {
    "cards": "1 6 12 12",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "(12 * (1 / 6)) * 12",
      "12 / ((1 / 12) * 6)",
      "(12 * (12 / 1)) / 6",
      "12 / (1 - (6 / 12))",
      "((12 * 1) / 6) * 12",
      "((12 * 12) / 1) / 6",
      "((12 / 6) * 1) * 12",
      "(12 * (12 / 6)) * 1",
      "12 / (1 * (6 / 12))",
      "12 * ((12 / 1) / 6)",
      "(12 / 6) * (1 * 12)",
      "1 * (12 / (6 / 12))",
      "(1 / (6 / 12)) * 12",
      "12 * (12 / (1 * 6))",
      "(12 / (1 * 6)) * 12",
      "(12 / (6 / 1)) * 12",
      "(1 * 12) * (12 / 6)",
      "12 * (12 / (6 / 1))",
      "(12 / (6 / 12)) * 1",
      "(12 / 6) * (12 / 1)",
      "12 / (1 / (12 / 6))",
      "12 / ((6 * 1) / 12)",
      "12 / ((6 / 12) * 1)",
      "(12 * 12) / (6 * 1)",
      "(1 / 6) * (12 * 12)",
      "12 * (12 * (1 / 6))",
      "(12 / 6) / (1 / 12)",
      "12 * ((12 * 1) / 6)",
      "12 / ((1 * 6) / 12)",
      "(12 / 1) / (6 / 12)",
      "((1 * 12) / 6) * 12",
      "1 * ((12 / 6) * 12)",
      "12 / ((6 / 12) / 1)",
      "(1 * (12 * 12)) / 6",
      "12 * ((12 / 6) * 1)",
      "(1 * (12 / 6)) * 12",
      "12 / (6 * (1 / 12))",
      "((12 / 1) / 6) * 12",
      "1 / ((6 / 12) / 12)",
      "(12 * (12 / 6)) / 1",
      "1 * (12 * (12 / 6))",
      "(12 * (1 * 12)) / 6",
      "12 * (1 * (12 / 6))",
      "((12 * 12) / 6) * 1",
      "(12 * 1) * (12 / 6)",
      "(12 * 12) / (1 * 6)",
      "((1 / 6) * 12) * 12",
      "1 / (6 / (12 * 12))",
      "(12 * 12) * (1 / 6)",
      "((12 * 1) * 12) / 6",
      "(12 / 1) * (12 / 6)",
      "(12 * 12) / (6 / 1)",
      "12 / ((6 / 1) / 12)",
      "(12 / 6) * (12 * 1)",
      "1 * ((12 * 12) / 6)",
      "12 * (1 / (6 / 12))",
      "12 / (6 / (12 / 1))",
      "(1 * 12) / (6 / 12)",
      "12 * (12 / (6 * 1))",
      "(12 / (6 / 12)) / 1",
      "((12 * 12) * 1) / 6",
      "12 * ((1 / 6) * 12)",
      "((12 / 1) * 12) / 6",
      "12 * ((12 / 6) / 1)",
      "((12 / 6) * 12) / 1",
      "(12 / (6 * 1)) * 12",
      "((12 * 12) / 6) / 1",
      "12 / (6 / (12 * 1))",
      "12 * ((1 * 12) / 6)",
      "(12 * 1) / (6 / 12)",
      "(12 * (12 * 1)) / 6",
      "((12 / 6) / 1) * 12",
      "12 / (6 / (1 * 12))",
      "((12 / 6) * 12) * 1",
      "((1 * 12) * 12) / 6",
      "(12 / (1 / 12)) / 6"
    ]
  },
  "1 6 12 13": {
    "cards": "1 6 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 * ((13 - 1) / 6)",
      "(12 / 6) * (13 - 1)",
      "(13 - 1) / (6 / 12)",
      "(13 - 1) * (12 / 6)",
      "((13 - 1) * 12) / 6",
      "12 / (6 / (13 - 1))",
      "((13 - 1) / 6) * 12",
      "(12 * (13 - 1)) / 6"
    ]
  },
  "1 6 13 13": {
    "cards": "1 6 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 7 7": {
    "cards": "1 7 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 7 8": {
    "cards": "1 7 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 7 9": {
    "cards": "1 7 7 9",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "7 + ((1 + 9) + 7)",
      "(7 + 1) + (7 + 9)",
      "9 + ((7 + 1) + 7)",
      "(1 + (7 + 7)) + 9",
      "((9 + 7) + 7) + 1",
      "(7 + (1 + 9)) + 7",
      "(9 + 1) + (7 + 7)",
      "((9 + 7) + 1) + 7",
      "1 + ((7 + 9) + 7)",
      "1 + ((7 + 7) + 9)",
      "1 + (7 + (7 + 9))",
      "(7 + (1 + 7)) + 9",
      "(7 + 9) + (1 + 7)",
      "7 + (7 + (9 + 1))",
      "(9 + (7 + 1)) + 7",
      "7 + ((7 + 1) + 9)",
      "(7 + (9 + 7)) + 1",
      "(9 + 7) + (7 + 1)",
      "9 + ((7 + 7) + 1)",
      "7 + ((9 + 7) + 1)",
      "((1 + 7) + 7) + 9",
      "7 + (1 + (9 + 7))",
      "7 + ((7 + 9) + 1)",
      "9 + (7 + (7 + 1))",
      "1 + ((9 + 7) + 7)",
      "9 + (7 + (1 + 7))",
      "(1 + 7) + (7 + 9)",
      "(1 + (9 + 7)) + 7",
      "((1 + 9) + 7) + 7",
      "((7 + 1) + 9) + 7",
      "(9 + 7) + (1 + 7)",
      "((9 + 1) + 7) + 7",
      "(1 + (7 + 9)) + 7",
      "(1 + 9) + (7 + 7)",
      "((1 + 7) + 9) + 7",
      "((7 + 9) + 1) + 7",
      "((7 + 1) + 7) + 9",
      "((7 + 9) + 7) + 1",
      "7 + (1 + (7 + 9))",
      "((7 + 7) + 1) + 9",
      "(9 + (7 + 7)) + 1",
      "(1 + 7) + (9 + 7)",
      "(7 + 7) + (1 + 9)",
      "7 + (9 + (7 + 1))",
      "((7 + 7) + 9) + 1",
      "(7 + (7 + 9)) + 1",
      "(7 + (7 + 1)) + 9",
      "7 + (9 + (1 + 7))",
      "(7 + 7) + (9 + 1)",
      "7 + (7 + (1 + 9))",
      "(7 + (9 + 1)) + 7",
      "(7 + 9) + (7 + 1)",
      "1 + (9 + (7 + 7))",
      "(7 + 1) + (9 + 7)",
      "1 + (7 + (9 + 7))",
      "(9 + (1 + 7)) + 7",
      "7 + ((1 + 7) + 9)",
      "9 + (1 + (7 + 7))",
      "7 + ((9 + 1) + 7)",
      "9 + ((1 + 7) + 7)"
    ]
  },
  "1 7 7 10": {
    "cards": "1 7 7 10",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "(7 + 10) + (7 * 1)",
      "((10 * 1) + 7) + 7",
      "7 + (1 * (10 + 7))",
      "1 * ((7 + 7) + 10)",
      "7 + ((10 + 7) / 1)",
      "7 + (10 + (7 * 1))",
      "10 + ((7 + 7) / 1)",
      "7 + ((7 * 1) + 10)",
      "(7 + (7 / 1)) + 10",
      "((7 + 7) + 10) * 1",
      "(7 + (10 / 1)) + 7",
      "(7 + (10 * 1)) + 7",
      "(7 / 1) + (7 + 10)",
      "7 + ((7 / 1) + 10)",
      "((1 * 7) + 10) + 7",
      "7 + ((1 * 7) + 10)",
      "(10 - 7) * (7 + 1)",
      "((10 + 7) / 1) + 7",
      "(7 + 10) + (1 * 7)",
      "(10 + (7 + 7)) / 1",
      "(10 + 7) + (7 * 1)",
      "(7 + (10 + 7)) * 1",
      "10 + ((7 + 7) * 1)",
      "(10 + (7 + 7)) * 1",
      "(1 * (7 + 7)) + 10",
      "((1 * 7) + 7) + 10",
      "((7 / 1) + 7) + 10",
      "(10 - 7) * (1 + 7)",
      "7 + ((7 + 10) / 1)",
      "10 + (1 * (7 + 7))",
      "(7 + (7 * 1)) + 10",
      "7 + (7 + (10 * 1))",
      "(7 / 1) + (10 + 7)",
      "1 * (7 + (10 + 7))",
      "(1 * 7) + (7 + 10)",
      "((7 + 10) + 7) / 1",
      "(10 / 1) + (7 + 7)",
      "((10 + 7) * 1) + 7",
      "(7 + (1 * 7)) + 10",
      "((1 * 10) + 7) + 7",
      "(10 + (1 * 7)) + 7",
      "(7 + 7) + (1 * 10)",
      "(7 + 7) + (10 / 1)",
      "((7 * 1) + 7) + 10",
      "1 * ((7 + 10) + 7)",
      "7 + ((7 + 10) * 1)",
      "(1 * (10 + 7)) + 7",
      "1 * (10 + (7 + 7))",
      "(1 * (7 + 10)) + 7",
      "1 * ((10 + 7) + 7)",
      "7 + (10 + (1 * 7))",
      "(1 * 7) + (10 + 7)",
      "(7 * 1) + (10 + 7)",
      "10 + ((7 / 1) + 7)",
      "7 + (7 + (10 / 1))",
      "((10 / 1) + 7) + 7",
      "7 + ((10 * 1) + 7)",
      "(1 * 10) + (7 + 7)",
      "10 + (7 + (7 / 1))",
      "(10 + 7) + (7 / 1)",
      "7 + ((10 + 7) * 1)",
      "(7 + (7 + 10)) * 1",
      "(7 * 1) + (7 + 10)",
      "10 + ((7 * 1) + 7)",
      "((7 / 1) + 10) + 7",
      "(7 + (7 + 10)) / 1",
      "((7 * 1) + 10) + 7",
      "((7 + 10) + 7) * 1",
      "(10 + (7 * 1)) + 7",
      "10 + (7 + (7 * 1))",
      "(7 + (1 * 10)) + 7",
      "((7 + 7) * 1) + 10",
      "7 + (7 + (1 * 10))",
      "1 * (7 + (7 + 10))",
      "7 + (1 * (7 + 10))",
      "(10 + (7 / 1)) + 7",
      "(7 + 7) + (10 * 1)",
      "(1 + 7) * (10 - 7)",
      "((7 + 10) / 1) + 7",
      "((7 + 7) + 10) / 1",
      "((7 + 10) * 1) + 7",
      "7 + ((10 / 1) + 7)",
      "(10 * 1) + (7 + 7)",
      "((10 + 7) + 7) / 1",
      "(7 + 1) * (10 - 7)",
      "10 + (7 + (1 * 7))",
      "7 + ((1 * 10) + 7)",
      "(7 + 10) + (7 / 1)",
      "(10 + 7) + (1 * 7)",
      "((10 + 7) + 7) * 1",
      "(7 + (10 + 7)) / 1",
      "10 + ((1 * 7) + 7)",
      "7 + (10 + (7 / 1))",
      "((7 + 7) / 1) + 10"
    ]
  },
  "1 7 7 11": {
    "cards": "1 7 7 11",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "(7 + 11) + (7 - 1)",
      "(7 + 7) - (1 - 11)",
      "7 + ((7 - 1) + 11)",
      "((7 - 1) + 11) + 7",
      "(7 - (1 - 11)) + 7",
      "((11 - 1) + 7) + 7",
      "11 + ((7 - 1) + 7)",
      "11 - ((1 - 7) - 7)",
      "7 + ((11 - 1) + 7)",
      "((11 + 7) - 1) + 7",
      "11 + ((7 + 7) - 1)",
      "11 + (7 + (7 - 1))",
      "7 - ((1 - 11) - 7)",
      "7 + (11 - (1 - 7))",
      "7 + (11 + (7 - 1))",
      "(11 - 1) + (7 + 7)",
      "(11 + 7) + (7 - 1)",
      "7 + (7 - (1 - 11))",
      "7 - ((1 - 7) - 11)",
      "7 - (1 - (11 + 7))",
      "(11 + (7 + 7)) - 1",
      "(7 - 11) * (1 - 7)",
      "((7 - 1) + 7) + 11",
      "((7 + 7) - 1) + 11",
      "(7 + (7 - 1)) + 11",
      "7 + (7 + (11 - 1))",
      "(7 + (11 - 1)) + 7",
      "((7 + 7) + 11) - 1",
      "(7 - 1) + (11 + 7)",
      "(7 - 1) * (11 - 7)",
      "11 - (1 - (7 + 7))",
      "((7 + 11) + 7) - 1",
      "(7 - (1 - 7)) + 11",
      "((11 + 7) + 7) - 1",
      "(11 + (7 - 1)) + 7",
      "7 + ((11 + 7) - 1)",
      "(11 - 7) * (7 - 1)",
      "(11 - (1 - 7)) + 7",
      "7 - (1 - (7 + 11))",
      "(7 + (7 + 11)) - 1",
      "((7 + 11) - 1) + 7",
      "(7 + 7) + (11 - 1)",
      "(11 + 7) - (1 - 7)",
      "(7 - 1) + (7 + 11)",
      "(7 + (11 + 7)) - 1",
      "(7 + 11) - (1 - 7)",
      "7 + ((7 + 11) - 1)",
      "(1 - 7) * (7 - 11)",
      "11 + (7 - (1 - 7))"
    ]
  },
  "1 7 7 12": {
    "cards": "1 7 7 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 + (7 / 7)) * 12",
      "((7 / 7) + 1) * 12",
      "12 * ((7 / 7) + 1)",
      "12 * (1 + (7 / 7))"
    ]
  },
  "1 7 7 13": {
    "cards": "1 7 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 8 8": {
    "cards": "1 7 8 8",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "7 + (8 + (8 + 1))",
      "(8 + 7) + (8 + 1)",
      "(8 + (8 + 7)) + 1",
      "(1 + (8 + 7)) + 8",
      "1 + (7 + (8 + 8))",
      "(8 + (1 + 7)) + 8",
      "((8 + 8) + 1) + 7",
      "1 + ((8 + 7) + 8)",
      "(7 + (8 + 8)) + 1",
      "(1 + (8 + 8)) + 7",
      "((7 + 8) + 8) + 1",
      "(7 + (8 + 1)) + 8",
      "(1 + 8) + (7 + 8)",
      "8 + (7 + (8 + 1))",
      "1 + ((8 + 8) + 7)",
      "((8 + 7) + 1) + 8",
      "(8 + 1) + (8 + 7)",
      "8 + ((8 + 7) + 1)",
      "8 + ((7 + 1) + 8)",
      "8 + (8 + (1 + 7))",
      "((7 + 8) + 1) + 8",
      "(8 + (1 + 8)) + 7",
      "8 + ((1 + 8) + 7)",
      "((1 + 8) + 7) + 8",
      "1 + (8 + (7 + 8))",
      "(1 + 8) + (8 + 7)",
      "1 + (8 + (8 + 7))",
      "(1 + 7) + (8 + 8)",
      "(8 + (8 + 1)) + 7",
      "(8 + (7 + 8)) + 1",
      "8 + (7 + (1 + 8))",
      "((8 + 1) + 7) + 8",
      "((8 + 8) + 7) + 1",
      "(8 + 1) + (7 + 8)",
      "7 + ((8 + 8) + 1)",
      "((1 + 7) + 8) + 8",
      "7 + ((8 + 1) + 8)",
      "((1 + 8) + 8) + 7",
      "(7 + 8) + (8 + 1)",
      "((8 + 1) + 8) + 7",
      "(7 + 1) + (8 + 8)",
      "(7 + 8) + (1 + 8)",
      "8 + ((1 + 7) + 8)",
      "8 + (8 + (7 + 1))",
      "7 + (8 + (1 + 8))",
      "(8 + (7 + 1)) + 8",
      "(8 + 8) + (7 + 1)",
      "((7 + 1) + 8) + 8",
      "8 + (1 + (8 + 7))",
      "7 + (1 + (8 + 8))",
      "8 + ((8 + 1) + 7)",
      "((8 + 7) + 8) + 1",
      "8 + ((7 + 8) + 1)",
      "(8 + 8) + (1 + 7)",
      "(8 + 7) + (1 + 8)",
      "1 + ((7 + 8) + 8)",
      "(1 + (7 + 8)) + 8",
      "7 + ((1 + 8) + 8)",
      "(7 + (1 + 8)) + 8",
      "8 + (1 + (7 + 8))"
    ]
  },
  "1 7 8 9": {
    "cards": "1 7 8 9",
    "has_solution": "Y",
    "num_solutions": 196,
    "solutions": [
      "(7 + (1 * 8)) + 9",
      "((9 - 7) + 1) * 8",
      "7 + (9 + (8 * 1))",
      "7 + (1 * (8 + 9))",
      "((7 + 9) * 1) + 8",
      "(7 + (9 * 1)) + 8",
      "(9 + (1 * 7)) + 8",
      "9 + ((8 * 1) + 7)",
      "(8 + 7) + (9 * 1)",
      "((7 + 9) + 8) * 1",
      "(9 * 1) + (7 + 8)",
      "((9 / 1) + 8) + 7",
      "(9 + 7) + (8 * 1)",
      "((8 + 7) + 9) / 1",
      "((8 + 7) * 1) + 9",
      "(7 + 8) + (9 * 1)",
      "(9 + (7 + 8)) / 1",
      "(8 / 1) + (9 + 7)",
      "((8 + 7) / 1) + 9",
      "(9 + (8 + 7)) / 1",
      "(9 + (7 * 1)) + 8",
      "(9 + 7) + (1 * 8)",
      "8 + (1 * (7 + 9))",
      "((1 * 8) + 7) + 9",
      "7 + ((8 + 9) * 1)",
      "((8 + 9) * 1) + 7",
      "((1 * 9) + 7) + 8",
      "(7 + (9 + 8)) / 1",
      "8 + ((1 * 9) + 7)",
      "(8 + (9 + 7)) * 1",
      "(9 + 8) + (7 * 1)",
      "8 * ((1 - 7) + 9)",
      "(9 + 7) + (8 / 1)",
      "(7 + (9 / 1)) + 8",
      "(7 * 1) + (9 + 8)",
      "(8 + (7 + 9)) * 1",
      "((7 / 1) + 8) + 9",
      "8 * (1 + (9 - 7))",
      "8 + ((9 / 1) + 7)",
      "(1 * 8) + (7 + 9)",
      "1 * ((8 + 9) + 7)",
      "9 + (8 + (7 / 1))",
      "((9 * 1) + 8) + 7",
      "8 + ((7 * 1) + 9)",
      "(9 + (8 + 7)) * 1",
      "9 + ((7 * 1) + 8)",
      "7 + ((9 * 1) + 8)",
      "(7 + (8 + 9)) * 1",
      "((7 + 8) * 1) + 9",
      "((8 + 9) + 7) * 1",
      "1 * (9 + (7 + 8))",
      "(8 + (9 + 7)) / 1",
      "(8 + (1 * 9)) + 7",
      "8 + (1 * (9 + 7))",
      "8 + ((7 / 1) + 9)",
      "1 * (7 + (8 + 9))",
      "(7 + (8 + 9)) / 1",
      "9 + ((7 + 8) * 1)",
      "8 + ((7 + 9) * 1)",
      "8 + (9 + (7 / 1))",
      "7 + ((8 + 9) / 1)",
      "((8 / 1) + 9) + 7",
      "((9 + 8) + 7) / 1",
      "9 + ((1 * 7) + 8)",
      "1 * ((7 + 8) + 9)",
      "8 + (9 + (7 * 1))",
      "(9 - (7 - 1)) * 8",
      "((9 * 1) + 7) + 8",
      "(8 * 1) + (9 + 7)",
      "(9 + (1 * 8)) + 7",
      "9 + (1 * (7 + 8))",
      "8 + ((9 + 7) / 1)",
      "9 + ((8 / 1) + 7)",
      "7 + (8 + (1 * 9))",
      "8 + ((9 + 7) * 1)",
      "(1 * 8) + (9 + 7)",
      "(8 + (7 + 9)) / 1",
      "((8 * 1) + 9) + 7",
      "((7 + 8) / 1) + 9",
      "((8 * 1) + 7) + 9",
      "(9 + 8) + (7 / 1)",
      "((7 + 9) + 8) / 1",
      "(8 + (9 / 1)) + 7",
      "((1 * 9) + 8) + 7",
      "(8 * 1) + (7 + 9)",
      "(9 + (8 * 1)) + 7",
      "((9 + 8) * 1) + 7",
      "((8 / 1) + 7) + 9",
      "(8 + 9) + (7 / 1)",
      "(8 + 9) + (7 * 1)",
      "1 * (8 + (7 + 9))",
      "(1 * 9) + (8 + 7)",
      "(8 + 7) + (9 / 1)",
      "((9 + 8) + 7) * 1",
      "(8 + (7 * 1)) + 9",
      "1 * ((9 + 8) + 7)",
      "(8 + 7) + (1 * 9)",
      "(1 * (7 + 8)) + 9",
      "7 + (9 + (1 * 8))",
      "((7 / 1) + 9) + 8",
      "7 + (9 + (8 / 1))",
      "(1 + (9 - 7)) * 8",
      "(1 * 7) + (9 + 8)",
      "7 + (1 * (9 + 8))",
      "9 + (7 + (8 / 1))",
      "(9 + (1 - 7)) * 8",
      "((8 + 9) / 1) + 7",
      "(7 * 1) + (8 + 9)",
      "((1 - 7) + 9) * 8",
      "(1 * 9) + (7 + 8)",
      "8 * ((9 - 7) + 1)",
      "7 + ((1 * 9) + 8)",
      "(8 + (7 / 1)) + 9",
      "(7 + (1 * 9)) + 8",
      "((1 * 7) + 9) + 8",
      "7 + ((9 + 8) / 1)",
      "((7 * 1) + 9) + 8",
      "(8 + (9 * 1)) + 7",
      "(1 * (9 + 7)) + 8",
      "7 + ((9 + 8) * 1)",
      "(7 + (8 / 1)) + 9",
      "9 + (8 + (7 * 1))",
      "(8 + 9) + (1 * 7)",
      "8 + ((7 + 9) / 1)",
      "(7 + 8) + (9 / 1)",
      "8 * ((1 + 9) - 7)",
      "9 + ((8 + 7) * 1)",
      "(1 * (8 + 9)) + 7",
      "(7 + 9) + (8 * 1)",
      "((8 + 9) + 7) / 1",
      "((9 + 8) / 1) + 7",
      "(7 + 9) + (8 / 1)",
      "(1 - (7 - 9)) * 8",
      "(7 / 1) + (9 + 8)",
      "8 + ((9 * 1) + 7)",
      "1 * (9 + (8 + 7))",
      "9 + (7 + (1 * 8))",
      "9 + (7 + (8 * 1))",
      "1 * ((9 + 7) + 8)",
      "9 + ((1 * 8) + 7)",
      "9 + ((7 + 8) / 1)",
      "((1 + 9) - 7) * 8",
      "((9 + 7) + 8) * 1",
      "(9 + (8 / 1)) + 7",
      "8 + (7 + (9 * 1))",
      "7 + (8 + (9 * 1))",
      "((9 + 7) / 1) + 8",
      "((9 + 1) - 7) * 8",
      "(1 * (7 + 9)) + 8",
      "7 + (8 + (9 / 1))",
      "7 + ((9 / 1) + 8)",
      "8 * ((9 + 1) - 7)",
      "(1 * 7) + (8 + 9)",
      "(8 / 1) + (7 + 9)",
      "(9 * 1) + (8 + 7)",
      "((7 + 9) / 1) + 8",
      "1 * (8 + (9 + 7))",
      "(9 + (7 + 8)) * 1",
      "1 * (7 + (9 + 8))",
      "9 + (1 * (8 + 7))",
      "7 + ((8 * 1) + 9)",
      "7 + ((1 * 8) + 9)",
      "(9 / 1) + (8 + 7)",
      "((9 + 7) * 1) + 8",
      "(7 + 9) + (1 * 8)",
      "(7 / 1) + (8 + 9)",
      "(1 * (8 + 7)) + 9",
      "(1 * (9 + 8)) + 7",
      "(7 + (9 + 8)) * 1",
      "9 + (8 + (1 * 7))",
      "((7 + 8) + 9) / 1",
      "((8 + 7) + 9) * 1",
      "1 * ((7 + 9) + 8)",
      "9 + ((7 / 1) + 8)",
      "8 * (1 - (7 - 9))",
      "(8 + (1 * 7)) + 9",
      "7 + ((8 / 1) + 9)",
      "8 + (7 + (1 * 9))",
      "((9 + 7) + 8) / 1",
      "((9 / 1) + 7) + 8",
      "8 + (7 + (9 / 1))",
      "(7 + 8) + (1 * 9)",
      "(9 + (7 / 1)) + 8",
      "((7 * 1) + 8) + 9",
      "8 * (9 - (7 - 1))",
      "((1 * 7) + 8) + 9",
      "8 * (9 + (1 - 7))",
      "((7 + 8) + 9) * 1",
      "9 + ((8 + 7) / 1)",
      "8 + ((1 * 7) + 9)",
      "((1 * 8) + 9) + 7",
      "(9 / 1) + (7 + 8)",
      "(7 + (8 * 1)) + 9",
      "8 + (9 + (1 * 7))",
      "1 * ((8 + 7) + 9)",
      "(9 + 8) + (1 * 7)"
    ]
  },
  "1 7 8 10": {
    "cards": "1 7 8 10",
    "has_solution": "Y",
    "num_solutions": 122,
    "solutions": [
      "8 / (1 / (10 - 7))",
      "7 + (8 - (1 - 10))",
      "7 - (1 - (10 + 8))",
      "(10 + 7) - (1 - 8)",
      "(10 - (1 * 7)) * 8",
      "8 + (7 + (10 - 1))",
      "8 - ((1 - 7) - 10)",
      "(7 + (8 + 10)) - 1",
      "(7 - 1) + (8 + 10)",
      "(10 + 8) + (7 - 1)",
      "(8 * (10 - 7)) * 1",
      "(8 + 7) - (1 - 10)",
      "((8 + 10) - 1) + 7",
      "10 - (1 - (7 + 8))",
      "(10 + (8 + 7)) - 1",
      "8 * ((10 / 1) - 7)",
      "(10 - 7) * (1 * 8)",
      "8 + ((10 - 1) + 7)",
      "(10 + (7 + 8)) - 1",
      "(10 - (1 - 7)) + 8",
      "8 + ((7 - 1) + 10)",
      "(8 - 1) + (7 + 10)",
      "((7 + 10) + 8) - 1",
      "(1 * 8) * (10 - 7)",
      "7 + (8 + (10 - 1))",
      "((8 + 7) - 1) + 10",
      "(10 - 7) / (1 / 8)",
      "(8 - (1 - 10)) + 7",
      "8 - (1 - (10 + 7))",
      "((10 / 1) - 7) * 8",
      "(1 * (10 - 7)) * 8",
      "(7 + 10) + (8 - 1)",
      "(8 + (7 - 1)) + 10",
      "8 * (10 - (7 * 1))",
      "((8 + 10) + 7) - 1",
      "(7 + 10) - (1 - 8)",
      "((8 + 7) + 10) - 1",
      "10 - ((1 - 7) - 8)",
      "7 + ((8 + 10) - 1)",
      "8 * ((10 * 1) - 7)",
      "((8 - 1) + 7) + 10",
      "(7 - 1) + (10 + 8)",
      "((10 - 1) + 7) + 8",
      "((10 - 1) + 8) + 7",
      "(7 - (1 - 8)) + 10",
      "8 * ((10 - 7) / 1)",
      "10 - ((1 - 8) - 7)",
      "10 + ((7 - 1) + 8)",
      "(10 + 8) - (1 - 7)",
      "(8 / 1) * (10 - 7)",
      "(10 - 1) + (8 + 7)",
      "((10 + 7) - 1) + 8",
      "(7 + 8) + (10 - 1)",
      "8 * (10 - (1 * 7))",
      "7 - (1 - (8 + 10))",
      "10 + (7 + (8 - 1))",
      "(10 + 7) + (8 - 1)",
      "10 + ((8 + 7) - 1)",
      "((10 + 8) - 1) + 7",
      "8 * (1 * (10 - 7))",
      "8 + (7 - (1 - 10))",
      "((7 - 1) + 10) + 8",
      "(10 - (7 / 1)) * 8",
      "(7 + (10 + 8)) - 1",
      "8 * ((10 - 7) * 1)",
      "(8 + 7) + (10 - 1)",
      "8 + ((7 + 10) - 1)",
      "((10 + 8) + 7) - 1",
      "7 - ((1 - 8) - 10)",
      "7 + ((10 - 1) + 8)",
      "(10 - 7) * (8 * 1)",
      "(10 - (7 * 1)) * 8",
      "((10 - 7) * 1) * 8",
      "((8 - 1) + 10) + 7",
      "(8 + (10 - 1)) + 7",
      "8 + (10 + (7 - 1))",
      "10 + (7 - (1 - 8))",
      "10 + ((7 + 8) - 1)",
      "(8 * (10 - 7)) / 1",
      "(10 - 7) * (8 / 1)",
      "8 * ((1 * 10) - 7)",
      "((1 * 10) - 7) * 8",
      "(10 - 1) + (7 + 8)",
      "1 * (8 * (10 - 7))",
      "1 * ((10 - 7) * 8)",
      "(10 - (1 - 8)) + 7",
      "(10 + (8 - 1)) + 7",
      "7 + ((10 + 8) - 1)",
      "((7 + 10) - 1) + 8",
      "(8 - 1) + (10 + 7)",
      "(7 + 8) - (1 - 10)",
      "10 + (8 + (7 - 1))",
      "(8 + (7 + 10)) - 1",
      "7 + ((8 - 1) + 10)",
      "10 + (8 - (1 - 7))",
      "((10 - 7) * 8) / 1",
      "((7 - 1) + 8) + 10",
      "7 + (10 - (1 - 8))",
      "((7 + 8) + 10) - 1",
      "8 - (1 - (7 + 10))",
      "(7 + (8 - 1)) + 10",
      "((10 * 1) - 7) * 8",
      "8 * (10 - (7 / 1))",
      "(7 + (10 - 1)) + 8",
      "(8 - (1 - 7)) + 10",
      "10 + ((8 - 1) + 7)",
      "8 + ((10 + 7) - 1)",
      "8 - ((1 - 10) - 7)",
      "((10 + 7) + 8) - 1",
      "8 + (10 - (1 - 7))",
      "7 - ((1 - 10) - 8)",
      "((7 + 8) - 1) + 10",
      "(10 + (7 - 1)) + 8",
      "((10 - 7) * 8) * 1",
      "(8 * 1) * (10 - 7)",
      "(8 + 10) + (7 - 1)",
      "10 - (1 - (8 + 7))",
      "((10 - 7) / 1) * 8",
      "(8 + (10 + 7)) - 1",
      "(8 + 10) - (1 - 7)",
      "7 + (10 + (8 - 1))",
      "(7 - (1 - 10)) + 8"
    ]
  },
  "1 7 8 11": {
    "cards": "1 7 8 11",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(7 + 1) * (11 - 8)",
      "(11 - 8) * (7 + 1)",
      "((11 - 7) - 1) * 8",
      "((11 - 1) - 7) * 8",
      "8 * (11 - (1 + 7))",
      "(11 - 8) * (1 + 7)",
      "(11 - (1 + 7)) * 8",
      "8 * ((11 - 7) - 1)",
      "8 * ((11 - 1) - 7)",
      "8 * (11 - (7 + 1))",
      "(11 - (7 + 1)) * 8",
      "(1 + 7) * (11 - 8)"
    ]
  },
  "1 7 8 12": {
    "cards": "1 7 8 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "12 * (8 - (7 - 1))",
      "(8 + (1 - 7)) * 12",
      "(1 + (8 - 7)) * 12",
      "12 * (1 - (7 - 8))",
      "(8 - (7 - 1)) * 12",
      "(1 - 7) * (8 - 12)",
      "12 * ((8 + 1) - 7)",
      "((8 + 1) - 7) * 12",
      "12 * ((1 + 8) - 7)",
      "12 * (1 + (8 - 7))",
      "12 * (8 + (1 - 7))",
      "(8 - 12) * (1 - 7)",
      "((8 - 7) + 1) * 12",
      "12 * ((8 - 7) + 1)",
      "(7 - 1) * (12 - 8)",
      "((1 + 8) - 7) * 12",
      "((1 - 7) + 8) * 12",
      "(1 - (7 - 8)) * 12",
      "12 * ((1 - 7) + 8)",
      "(12 - 8) * (7 - 1)"
    ]
  },
  "1 7 8 13": {
    "cards": "1 7 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 9 9": {
    "cards": "1 7 9 9",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "9 - (1 - (7 + 9))",
      "(7 - 1) + (9 + 9)",
      "9 + ((9 + 7) - 1)",
      "(9 + 7) + (9 - 1)",
      "(9 - 1) + (9 + 7)",
      "(7 + 9) + (9 - 1)",
      "((9 + 9) - 1) + 7",
      "(9 - (1 - 9)) + 7",
      "9 - (1 - (9 + 7))",
      "9 + (9 - (1 - 7))",
      "((7 - 1) + 9) + 9",
      "9 + (7 + (9 - 1))",
      "9 - ((1 - 9) - 7)",
      "(7 - (1 - 9)) + 9",
      "((9 + 7) - 1) + 9",
      "9 - ((1 - 7) - 9)",
      "((9 - 1) + 7) + 9",
      "(7 + (9 + 9)) - 1",
      "(9 - 1) + (7 + 9)",
      "((7 + 9) + 9) - 1",
      "(9 + 9) - (1 - 7)",
      "((9 + 9) + 7) - 1",
      "7 + ((9 - 1) + 9)",
      "7 - (1 - (9 + 9))",
      "(9 + (7 + 9)) - 1",
      "9 + ((7 + 9) - 1)",
      "(9 + 7) - (1 - 9)",
      "((9 - 1) + 9) + 7",
      "7 + (9 - (1 - 9))",
      "(9 + 9) + (7 - 1)",
      "7 + ((9 + 9) - 1)",
      "((9 + 7) + 9) - 1",
      "((7 + 9) - 1) + 9",
      "7 + (9 + (9 - 1))",
      "(9 + (9 + 7)) - 1",
      "(7 + 9) - (1 - 9)",
      "9 + (7 - (1 - 9))",
      "7 - ((1 - 9) - 9)",
      "(9 + (9 - 1)) + 7",
      "9 + ((9 - 1) + 7)",
      "(7 + (9 - 1)) + 9",
      "9 + (9 + (7 - 1))",
      "9 + ((7 - 1) + 9)",
      "(9 + (7 - 1)) + 9",
      "(9 - (1 - 7)) + 9"
    ]
  },
  "1 7 9 10": {
    "cards": "1 7 9 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 - 1) * (10 - 7)",
      "(7 - 10) * (1 - 9)",
      "(10 - 7) * (9 - 1)",
      "(1 - 9) * (7 - 10)"
    ]
  },
  "1 7 9 11": {
    "cards": "1 7 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 - 7) * (1 + 11)",
      "(9 - 7) * (11 + 1)",
      "(1 + 11) * (9 - 7)",
      "(11 + 1) * (9 - 7)"
    ]
  },
  "1 7 9 12": {
    "cards": "1 7 9 12",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(9 - 7) * (12 * 1)",
      "((9 - 7) * 1) * 12",
      "1 * ((9 - 7) * 12)",
      "((1 * 9) - 7) * 12",
      "12 * (9 - (1 * 7))",
      "12 * (1 * (9 - 7))",
      "(12 - 9) * (1 + 7)",
      "((9 * 1) - 7) * 12",
      "((9 / 1) - 7) * 12",
      "(12 / 1) * (9 - 7)",
      "(12 * 1) * (9 - 7)",
      "12 * ((9 * 1) - 7)",
      "12 * ((9 - 7) * 1)",
      "(9 - (7 * 1)) * 12",
      "(7 + 1) * (12 - 9)",
      "12 * ((9 - 7) / 1)",
      "(1 * (9 - 7)) * 12",
      "(9 - (7 / 1)) * 12",
      "12 * ((9 / 1) - 7)",
      "(1 + 7) * (12 - 9)",
      "(12 * (9 - 7)) / 1",
      "(1 * 12) * (9 - 7)",
      "((9 - 7) * 12) / 1",
      "12 * (9 - (7 / 1))",
      "(12 * (9 - 7)) * 1",
      "(12 - 9) * (7 + 1)",
      "(9 - (1 * 7)) * 12",
      "(9 - 7) / (1 / 12)",
      "12 * (9 - (7 * 1))",
      "((9 - 7) * 12) * 1",
      "((9 - 7) / 1) * 12",
      "1 * (12 * (9 - 7))",
      "(9 - 7) * (1 * 12)",
      "12 * ((1 * 9) - 7)",
      "12 / (1 / (9 - 7))",
      "(9 - 7) * (12 / 1)"
    ]
  },
  "1 7 9 13": {
    "cards": "1 7 9 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 - 1) * (13 - 9)",
      "(1 - 7) * (9 - 13)",
      "(9 - 7) * (13 - 1)",
      "(13 - 1) * (9 - 7)",
      "(9 - 13) * (1 - 7)",
      "(7 - 9) * (1 - 13)",
      "(1 - 13) * (7 - 9)",
      "(13 - 9) * (7 - 1)"
    ]
  },
  "1 7 10 10": {
    "cards": "1 7 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 10 11": {
    "cards": "1 7 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 10 12": {
    "cards": "1 7 10 12",
    "has_solution": "Y",
    "num_solutions": 9,
    "solutions": [
      "(10 - (7 + 1)) * 12",
      "12 * ((10 - 7) - 1)",
      "12 * (10 - (7 + 1))",
      "(10 - (1 + 7)) * 12",
      "10 / (1 - (7 / 12))",
      "12 * ((10 - 1) - 7)",
      "((10 - 7) - 1) * 12",
      "((10 - 1) - 7) * 12",
      "12 * (10 - (1 + 7))"
    ]
  },
  "1 7 10 13": {
    "cards": "1 7 10 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 + 1) * (13 - 10)",
      "(13 - 10) * (7 + 1)",
      "(13 - 10) * (1 + 7)",
      "(1 + 7) * (13 - 10)"
    ]
  },
  "1 7 11 11": {
    "cards": "1 7 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 11 12": {
    "cards": "1 7 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 11 13": {
    "cards": "1 7 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 7 12 12": {
    "cards": "1 7 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "12 / ((7 - 1) / 12)",
      "(12 * 12) / (7 - 1)",
      "(12 / (7 - 1)) * 12",
      "12 * (12 / (7 - 1))"
    ]
  },
  "1 7 12 13": {
    "cards": "1 7 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(1 + 13) / (7 / 12)",
      "12 * ((13 + 1) / 7)",
      "12 / (7 / (1 + 13))",
      "(12 * (1 + 13)) / 7",
      "12 * ((1 + 13) / 7)",
      "(12 / 7) * (1 + 13)",
      "((1 + 13) * 12) / 7",
      "((13 + 1) * 12) / 7",
      "(13 + 1) * (12 / 7)",
      "(12 / 7) * (13 + 1)",
      "(13 + 1) / (7 / 12)",
      "12 / (7 / (13 + 1))",
      "((1 + 13) / 7) * 12",
      "((13 + 1) / 7) * 12",
      "(1 + 13) * (12 / 7)",
      "(12 * (13 + 1)) / 7"
    ]
  },
  "1 7 13 13": {
    "cards": "1 7 13 13",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "((13 * 13) - 1) / 7"
    ]
  },
  "1 8 8 8": {
    "cards": "1 8 8 8",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "8 + ((8 + 8) * 1)",
      "(1 * 8) + (8 + 8)",
      "((8 / 1) + 8) + 8",
      "(8 + (1 * 8)) + 8",
      "(8 + (8 + 8)) / 1",
      "(8 + 8) + (8 / 1)",
      "((8 + 8) / 1) + 8",
      "(8 + 8) + (1 * 8)",
      "(8 + (8 * 1)) + 8",
      "8 + (8 + (1 * 8))",
      "(1 * (8 + 8)) + 8",
      "(8 + (8 / 1)) + 8",
      "8 + ((8 + 8) / 1)",
      "(8 * 1) + (8 + 8)",
      "(8 + (8 + 8)) * 1",
      "8 + (1 * (8 + 8))",
      "((8 + 8) + 8) * 1",
      "((1 * 8) + 8) + 8",
      "8 + (8 + (8 * 1))",
      "((8 * 1) + 8) + 8",
      "8 + ((8 * 1) + 8)",
      "8 + ((1 * 8) + 8)",
      "((8 + 8) + 8) / 1",
      "1 * ((8 + 8) + 8)",
      "8 + (8 + (8 / 1))",
      "8 + ((8 / 1) + 8)",
      "(8 / 1) + (8 + 8)",
      "((8 + 8) * 1) + 8",
      "(8 + 8) + (8 * 1)",
      "1 * (8 + (8 + 8))"
    ]
  },
  "1 8 8 9": {
    "cards": "1 8 8 9",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "8 + ((8 - 1) + 9)",
      "((9 + 8) + 8) - 1",
      "(8 - 1) + (9 + 8)",
      "8 + ((9 + 8) - 1)",
      "(8 + 9) - (1 - 8)",
      "8 - ((1 - 9) - 8)",
      "(8 + 9) + (8 - 1)",
      "(9 + (8 + 8)) - 1",
      "8 - ((1 - 8) - 9)",
      "(8 + (8 - 1)) + 9",
      "8 - (1 - (9 + 8))",
      "(8 + 8) + (9 - 1)",
      "(9 + (8 - 1)) + 8",
      "(8 + (8 + 9)) - 1",
      "9 + (8 - (1 - 8))",
      "(9 - (1 - 8)) + 8",
      "(9 + 8) - (1 - 8)",
      "8 + ((8 + 9) - 1)",
      "8 + (8 + (9 - 1))",
      "((8 + 8) + 9) - 1",
      "((9 + 8) - 1) + 8",
      "9 + ((8 - 1) + 8)",
      "((8 + 9) + 8) - 1",
      "(8 - (1 - 8)) + 9",
      "(9 + 8) + (8 - 1)",
      "((8 + 9) - 1) + 8",
      "(8 - (1 - 9)) + 8",
      "8 + ((9 - 1) + 8)",
      "((9 - 1) + 8) + 8",
      "((8 + 8) - 1) + 9",
      "8 - (1 - (8 + 9))",
      "(8 + (9 + 8)) - 1",
      "9 - (1 - (8 + 8))",
      "(8 + (9 - 1)) + 8",
      "8 + (9 + (8 - 1))",
      "9 + ((8 + 8) - 1)",
      "(8 - 1) + (8 + 9)",
      "(8 + 8) - (1 - 9)",
      "((8 - 1) + 9) + 8",
      "9 + (8 + (8 - 1))",
      "8 + (9 - (1 - 8))",
      "8 + (8 - (1 - 9))",
      "((8 - 1) + 8) + 9",
      "9 - ((1 - 8) - 8)",
      "(9 - 1) + (8 + 8)"
    ]
  },
  "1 8 8 10": {
    "cards": "1 8 8 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * ((10 - 8) + 1)",
      "8 * (1 - (8 - 10))",
      "8 * ((1 + 10) - 8)",
      "8 * ((10 + 1) - 8)",
      "(10 - (8 - 1)) * 8",
      "((10 + 1) - 8) * 8",
      "((1 - 8) + 10) * 8",
      "((10 - 8) + 1) * 8",
      "((1 + 10) - 8) * 8",
      "8 * (10 - (8 - 1))",
      "8 * ((1 - 8) + 10)",
      "(1 + (10 - 8)) * 8",
      "8 * (10 + (1 - 8))",
      "(10 + (1 - 8)) * 8",
      "8 * (1 + (10 - 8))",
      "(1 - (8 - 10)) * 8"
    ]
  },
  "1 8 8 11": {
    "cards": "1 8 8 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "8 * ((11 - 8) * 1)",
      "8 / (1 / (11 - 8))",
      "((1 * 11) - 8) * 8",
      "1 * ((11 - 8) * 8)",
      "((11 - 8) * 8) / 1",
      "(11 - 8) * (8 * 1)",
      "8 * (11 - (8 * 1))",
      "8 * ((1 * 11) - 8)",
      "(8 * (11 - 8)) * 1",
      "(11 - (1 * 8)) * 8",
      "(8 / 1) * (11 - 8)",
      "(11 - 8) * (1 * 8)",
      "(11 - (8 * 1)) * 8",
      "8 * ((11 * 1) - 8)",
      "8 * (11 - (8 / 1))",
      "((11 - 8) * 8) * 1",
      "(1 * (11 - 8)) * 8",
      "(8 * (11 - 8)) / 1",
      "((11 * 1) - 8) * 8",
      "(8 * 1) * (11 - 8)",
      "((11 - 8) * 1) * 8",
      "(11 - (8 / 1)) * 8",
      "8 * ((11 / 1) - 8)",
      "8 * ((11 - 8) / 1)",
      "8 * (1 * (11 - 8))",
      "((11 / 1) - 8) * 8",
      "8 * (11 - (1 * 8))",
      "((11 - 8) / 1) * 8",
      "(11 - 8) / (1 / 8)",
      "(1 * 8) * (11 - 8)",
      "1 * (8 * (11 - 8))",
      "(11 - 8) * (8 / 1)"
    ]
  },
  "1 8 8 12": {
    "cards": "1 8 8 12",
    "has_solution": "Y",
    "num_solutions": 13,
    "solutions": [
      "((12 - 8) - 1) * 8",
      "(12 - (1 + 8)) * 8",
      "8 * (12 - (8 + 1))",
      "((8 / 8) + 1) * 12",
      "8 / (1 - (8 / 12))",
      "12 * ((8 / 8) + 1)",
      "8 * ((12 - 8) - 1)",
      "((12 - 1) - 8) * 8",
      "(1 + (8 / 8)) * 12",
      "12 * (1 + (8 / 8))",
      "8 * (12 - (1 + 8))",
      "8 * ((12 - 1) - 8)",
      "(12 - (8 + 1)) * 8"
    ]
  },
  "1 8 8 13": {
    "cards": "1 8 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 9 9": {
    "cards": "1 8 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 9 10": {
    "cards": "1 8 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 9 11": {
    "cards": "1 8 9 11",
    "has_solution": "Y",
    "num_solutions": 21,
    "solutions": [
      "((11 - 9) + 1) * 8",
      "(1 - (9 - 11)) * 8",
      "(11 - 8) * (9 - 1)",
      "((11 + 1) - 9) * 8",
      "8 * (1 + (11 - 9))",
      "9 / ((11 / 8) - 1)",
      "8 * (11 + (1 - 9))",
      "(1 + (11 - 9)) * 8",
      "((1 + 11) - 9) * 8",
      "8 * ((11 + 1) - 9)",
      "(8 - 11) * (1 - 9)",
      "(9 - 1) * (11 - 8)",
      "8 * (1 - (9 - 11))",
      "((1 - 9) + 11) * 8",
      "8 * ((1 + 11) - 9)",
      "(11 - (9 - 1)) * 8",
      "8 * ((11 - 9) + 1)",
      "8 * (11 - (9 - 1))",
      "(1 - 9) * (8 - 11)",
      "8 * ((1 - 9) + 11)",
      "(11 + (1 - 9)) * 8"
    ]
  },
  "1 8 9 12": {
    "cards": "1 8 9 12",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "((1 * 12) - 9) * 8",
      "(12 - (1 * 9)) * 8",
      "((12 - 9) * 8) * 1",
      "8 / (1 / (12 - 9))",
      "((12 - 9) / 1) * 8",
      "((9 + 1) - 8) * 12",
      "(12 - 9) * (8 / 1)",
      "8 * ((12 - 9) * 1)",
      "12 * ((1 + 9) - 8)",
      "8 * ((12 - 9) / 1)",
      "12 * ((1 - 8) + 9)",
      "8 * ((12 / 1) - 9)",
      "(1 * 8) * (12 - 9)",
      "12 * (9 + (1 - 8))",
      "(1 * (12 - 9)) * 8",
      "8 * (12 - (1 * 9))",
      "((12 - 9) * 8) / 1",
      "(12 - 9) * (8 * 1)",
      "(1 - (8 - 9)) * 12",
      "(8 * 1) * (12 - 9)",
      "8 / ((12 / 9) - 1)",
      "(12 - (9 * 1)) * 8",
      "8 * (1 * (12 - 9))",
      "(1 + (9 - 8)) * 12",
      "12 * (1 - (8 - 9))",
      "((1 - 8) + 9) * 12",
      "(8 * (12 - 9)) * 1",
      "12 * ((9 + 1) - 8)",
      "((12 / 1) - 9) * 8",
      "(9 + (1 - 8)) * 12",
      "8 * (12 - (9 * 1))",
      "((12 - 9) * 1) * 8",
      "12 * (9 - (8 - 1))",
      "(8 / 1) * (12 - 9)",
      "((12 * 1) - 9) * 8",
      "(12 - 9) * (1 * 8)",
      "8 * ((1 * 12) - 9)",
      "12 * ((9 - 8) + 1)",
      "8 * (12 - (9 / 1))",
      "1 * (8 * (12 - 9))",
      "(8 * (12 - 9)) / 1",
      "((9 - 8) + 1) * 12",
      "((1 + 9) - 8) * 12",
      "(12 - 9) / (1 / 8)",
      "(12 - (9 / 1)) * 8",
      "8 * ((12 * 1) - 9)",
      "1 * ((12 - 9) * 8)",
      "12 * (1 + (9 - 8))",
      "(9 - (8 - 1)) * 12"
    ]
  },
  "1 8 9 13": {
    "cards": "1 8 9 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "8 * (13 - (1 + 9))",
      "8 * ((13 - 1) - 9)",
      "(13 - (1 + 9)) * 8",
      "(13 - (9 + 1)) * 8",
      "((13 - 1) - 9) * 8",
      "8 * ((13 - 9) - 1)",
      "((13 - 9) - 1) * 8",
      "8 * (13 - (9 + 1))"
    ]
  },
  "1 8 10 10": {
    "cards": "1 8 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 10 11": {
    "cards": "1 8 10 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(10 - 8) * (11 + 1)",
      "(10 - 8) * (1 + 11)",
      "(1 + 11) * (10 - 8)",
      "(11 + 1) * (10 - 8)"
    ]
  },
  "1 8 10 12": {
    "cards": "1 8 10 12",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "((1 + 12) - 10) * 8",
      "(12 + (1 - 10)) * 8",
      "(1 - (10 - 12)) * 8",
      "8 * ((12 + 1) - 10)",
      "(12 / 1) * (10 - 8)",
      "((1 - 10) + 12) * 8",
      "((10 - 8) / 1) * 12",
      "12 * (10 - (8 / 1))",
      "1 * (12 * (10 - 8))",
      "(10 - 8) * (1 * 12)",
      "(12 * (10 - 8)) / 1",
      "(10 - 8) * (12 * 1)",
      "8 * ((1 + 12) - 10)",
      "8 * (12 - (10 - 1))",
      "((12 - 10) + 1) * 8",
      "12 * ((10 * 1) - 8)",
      "(10 - (8 * 1)) * 12",
      "1 * ((10 - 8) * 12)",
      "12 / (1 / (10 - 8))",
      "(12 * (10 - 8)) * 1",
      "8 * (1 + (12 - 10))",
      "8 * (12 + (1 - 10))",
      "((10 * 1) - 8) * 12",
      "(12 * 1) * (10 - 8)",
      "8 * ((12 - 10) + 1)",
      "8 * (1 - (10 - 12))",
      "8 * ((1 - 10) + 12)",
      "((10 - 8) * 1) * 12",
      "(10 - 8) * (12 / 1)",
      "(10 - (8 / 1)) * 12",
      "((10 - 8) * 12) * 1",
      "((1 * 10) - 8) * 12",
      "12 * (1 * (10 - 8))",
      "(1 * 12) * (10 - 8)",
      "12 * ((1 * 10) - 8)",
      "12 * ((10 - 8) / 1)",
      "((10 / 1) - 8) * 12",
      "(10 - (1 * 8)) * 12",
      "(10 - 8) / (1 / 12)",
      "12 * (10 - (1 * 8))",
      "12 * ((10 - 8) * 1)",
      "12 * ((10 / 1) - 8)",
      "12 * (10 - (8 * 1))",
      "((10 - 8) * 12) / 1",
      "(1 * (10 - 8)) * 12",
      "(12 - (10 - 1)) * 8",
      "(1 + (12 - 10)) * 8",
      "((12 + 1) - 10) * 8"
    ]
  },
  "1 8 10 13": {
    "cards": "1 8 10 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "8 * ((13 / 1) - 10)",
      "8 * ((13 - 10) / 1)",
      "((13 / 1) - 10) * 8",
      "8 * (13 - (10 * 1))",
      "8 / (1 / (13 - 10))",
      "(13 - (10 / 1)) * 8",
      "(1 * 8) * (13 - 10)",
      "((13 * 1) - 10) * 8",
      "(10 - 8) * (13 - 1)",
      "((13 - 10) * 8) / 1",
      "(13 - 10) * (8 * 1)",
      "1 * ((13 - 10) * 8)",
      "((13 - 10) * 1) * 8",
      "(8 * 1) * (13 - 10)",
      "((13 - 10) * 8) * 1",
      "(8 * (13 - 10)) * 1",
      "((1 * 13) - 10) * 8",
      "8 * ((1 * 13) - 10)",
      "8 * ((13 * 1) - 10)",
      "1 * (8 * (13 - 10))",
      "(1 * (13 - 10)) * 8",
      "(13 - 1) * (10 - 8)",
      "((13 - 10) / 1) * 8",
      "8 * (1 * (13 - 10))",
      "(1 - 13) * (8 - 10)",
      "(13 - 10) * (8 / 1)",
      "(13 - (10 * 1)) * 8",
      "(8 / 1) * (13 - 10)",
      "(13 - 10) / (1 / 8)",
      "8 * ((13 - 10) * 1)",
      "(8 - 10) * (1 - 13)",
      "(13 - 10) * (1 * 8)",
      "8 * (13 - (1 * 10))",
      "(8 * (13 - 10)) / 1",
      "8 * (13 - (10 / 1))",
      "(13 - (1 * 10)) * 8"
    ]
  },
  "1 8 11 11": {
    "cards": "1 8 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 11 12": {
    "cards": "1 8 11 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 - 8) - 1) * 12",
      "(11 - (8 + 1)) * 12",
      "12 * (11 - (8 + 1))",
      "(11 - (1 + 8)) * 12",
      "12 * (11 - (1 + 8))",
      "12 * ((11 - 1) - 8)",
      "((11 - 1) - 8) * 12",
      "12 * ((11 - 8) - 1)"
    ]
  },
  "1 8 11 13": {
    "cards": "1 8 11 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((1 - 11) + 13) * 8",
      "8 * ((13 + 1) - 11)",
      "8 * (13 + (1 - 11))",
      "8 * ((13 - 11) + 1)",
      "8 * (1 - (11 - 13))",
      "8 * ((1 + 13) - 11)",
      "((13 + 1) - 11) * 8",
      "(1 - (11 - 13)) * 8",
      "((13 - 11) + 1) * 8",
      "(13 - (11 - 1)) * 8",
      "(13 + (1 - 11)) * 8",
      "((1 + 13) - 11) * 8",
      "(1 + (13 - 11)) * 8",
      "8 * (13 - (11 - 1))",
      "8 * (1 + (13 - 11))",
      "8 * ((1 - 11) + 13)"
    ]
  },
  "1 8 12 12": {
    "cards": "1 8 12 12",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "12 / ((12 / 8) - 1)"
    ]
  },
  "1 8 12 13": {
    "cards": "1 8 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 8 13 13": {
    "cards": "1 8 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 9 9": {
    "cards": "1 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 9 10": {
    "cards": "1 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 9 11": {
    "cards": "1 9 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 9 12": {
    "cards": "1 9 9 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(1 + (9 / 9)) * 12",
      "((9 / 9) + 1) * 12",
      "12 * (1 + (9 / 9))",
      "12 * ((9 / 9) + 1)",
      "(1 - 9) * (9 - 12)",
      "(9 - 1) * (12 - 9)",
      "(9 - 12) * (1 - 9)",
      "(12 - 9) * (9 - 1)"
    ]
  },
  "1 9 9 13": {
    "cards": "1 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 10 10": {
    "cards": "1 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 10 11": {
    "cards": "1 9 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 10 12": {
    "cards": "1 9 10 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * ((1 - 9) + 10)",
      "12 * ((1 + 10) - 9)",
      "(10 + (1 - 9)) * 12",
      "12 * (1 + (10 - 9))",
      "12 * (10 + (1 - 9))",
      "((1 - 9) + 10) * 12",
      "12 * (10 - (9 - 1))",
      "12 * ((10 + 1) - 9)",
      "(10 - (9 - 1)) * 12",
      "12 * ((10 - 9) + 1)",
      "12 * (1 - (9 - 10))",
      "((10 + 1) - 9) * 12",
      "((10 - 9) + 1) * 12",
      "(1 + (10 - 9)) * 12",
      "((1 + 10) - 9) * 12",
      "(1 - (9 - 10)) * 12"
    ]
  },
  "1 9 10 13": {
    "cards": "1 9 10 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 - 9) * (10 - 13)",
      "(13 - 10) * (9 - 1)",
      "(10 - 13) * (1 - 9)",
      "(9 - 1) * (13 - 10)"
    ]
  },
  "1 9 11 11": {
    "cards": "1 9 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 + 11) * (11 - 9)",
      "(11 - 9) * (1 + 11)",
      "(11 - 9) * (11 + 1)",
      "(11 + 1) * (11 - 9)"
    ]
  },
  "1 9 11 12": {
    "cards": "1 9 11 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(11 - (9 * 1)) * 12",
      "(11 - 9) * (1 * 12)",
      "12 * (11 - (9 / 1))",
      "12 * ((11 * 1) - 9)",
      "(12 / 1) * (11 - 9)",
      "(12 * (11 - 9)) / 1",
      "12 / (1 / (11 - 9))",
      "((11 / 1) - 9) * 12",
      "(11 - 9) * (12 / 1)",
      "1 * (12 * (11 - 9))",
      "(12 * 1) * (11 - 9)",
      "(12 * (11 - 9)) * 1",
      "(1 * (11 - 9)) * 12",
      "((11 * 1) - 9) * 12",
      "12 * ((11 - 9) * 1)",
      "((11 - 9) * 12) * 1",
      "((11 - 9) * 1) * 12",
      "12 * (11 - (1 * 9))",
      "12 * ((11 / 1) - 9)",
      "12 * ((11 - 9) / 1)",
      "(1 * 12) * (11 - 9)",
      "((11 - 9) * 12) / 1",
      "(11 - (1 * 9)) * 12",
      "12 * ((1 * 11) - 9)",
      "(11 - 9) * (12 * 1)",
      "(11 - (9 / 1)) * 12",
      "((11 - 9) / 1) * 12",
      "12 * (1 * (11 - 9))",
      "(11 - 9) / (1 / 12)",
      "((1 * 11) - 9) * 12",
      "12 * (11 - (9 * 1))",
      "1 * ((11 - 9) * 12)"
    ]
  },
  "1 9 11 13": {
    "cards": "1 9 11 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 - 13) * (9 - 11)",
      "(11 - 9) * (13 - 1)",
      "(13 - 1) * (11 - 9)",
      "(9 - 11) * (1 - 13)"
    ]
  },
  "1 9 12 12": {
    "cards": "1 9 12 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((12 - 1) - 9) * 12",
      "12 * ((12 - 9) - 1)",
      "12 * ((12 - 1) - 9)",
      "((12 - 9) - 1) * 12",
      "(12 - (1 + 9)) * 12",
      "(12 - (9 + 1)) * 12",
      "12 * (12 - (1 + 9))",
      "12 * (12 - (9 + 1))"
    ]
  },
  "1 9 12 13": {
    "cards": "1 9 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 9 13 13": {
    "cards": "1 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 10 10": {
    "cards": "1 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 10 11": {
    "cards": "1 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 10 12": {
    "cards": "1 10 10 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "12 * (1 + (10 / 10))",
      "((10 / 10) + 1) * 12",
      "12 * ((10 / 10) + 1)",
      "(1 + (10 / 10)) * 12"
    ]
  },
  "1 10 10 13": {
    "cards": "1 10 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 11 11": {
    "cards": "1 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 11 12": {
    "cards": "1 10 11 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((11 - 10) + 1) * 12",
      "(11 + (1 - 10)) * 12",
      "((1 + 11) - 10) * 12",
      "12 * ((11 - 10) + 1)",
      "(12 - 10) * (1 + 11)",
      "12 * (11 + (1 - 10))",
      "(1 + (11 - 10)) * 12",
      "12 * ((1 - 10) + 11)",
      "12 * ((1 + 11) - 10)",
      "((1 - 10) + 11) * 12",
      "(1 - (10 - 11)) * 12",
      "(11 + 1) * (12 - 10)",
      "12 * (1 + (11 - 10))",
      "12 * ((11 + 1) - 10)",
      "12 * (1 - (10 - 11))",
      "(12 - 10) * (11 + 1)",
      "(1 + 11) * (12 - 10)",
      "(11 - (10 - 1)) * 12",
      "12 * (11 - (10 - 1))",
      "((11 + 1) - 10) * 12"
    ]
  },
  "1 10 11 13": {
    "cards": "1 10 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 10 12 12": {
    "cards": "1 10 12 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "12 * (12 - (1 * 10))",
      "(12 - (10 / 1)) * 12",
      "((12 - 10) * 12) / 1",
      "(12 * (12 - 10)) / 1",
      "(12 - (10 * 1)) * 12",
      "12 / (1 / (12 - 10))",
      "12 * (1 * (12 - 10))",
      "((12 * 1) - 10) * 12",
      "(12 - (1 * 10)) * 12",
      "12 * (12 - (10 * 1))",
      "(12 - 10) * (12 * 1)",
      "(12 - 10) / (1 / 12)",
      "(12 * 1) * (12 - 10)",
      "12 * ((12 - 10) / 1)",
      "(12 - 10) * (1 * 12)",
      "(12 * (12 - 10)) * 1",
      "(12 / 1) * (12 - 10)",
      "12 * ((1 * 12) - 10)",
      "1 * (12 * (12 - 10))",
      "12 * ((12 - 10) * 1)",
      "(1 * 12) * (12 - 10)",
      "(1 * (12 - 10)) * 12",
      "1 * ((12 - 10) * 12)",
      "12 * (12 - (10 / 1))",
      "12 * ((12 / 1) - 10)",
      "12 * ((12 * 1) - 10)",
      "((12 - 10) * 1) * 12",
      "(12 - 10) * (12 / 1)",
      "((12 - 10) / 1) * 12",
      "((12 - 10) * 12) * 1",
      "((1 * 12) - 10) * 12",
      "((12 / 1) - 10) * 12"
    ]
  },
  "1 10 12 13": {
    "cards": "1 10 12 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "12 * (13 - (10 + 1))",
      "(12 - 10) * (13 - 1)",
      "(13 - (10 + 1)) * 12",
      "((13 - 1) - 10) * 12",
      "12 * (13 - (1 + 10))",
      "(13 - (1 + 10)) * 12",
      "(13 - 1) * (12 - 10)",
      "(10 - 12) * (1 - 13)",
      "12 * ((13 - 10) - 1)",
      "(1 - 13) * (10 - 12)",
      "12 * ((13 - 1) - 10)",
      "((13 - 10) - 1) * 12"
    ]
  },
  "1 10 13 13": {
    "cards": "1 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 11 11 11": {
    "cards": "1 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "1 11 11 12": {
    "cards": "1 11 11 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((11 / 11) + 1) * 12",
      "12 * (1 + (11 / 11))",
      "12 * ((11 / 11) + 1)",
      "(1 + (11 / 11)) * 12"
    ]
  },
  "1 11 11 13": {
    "cards": "1 11 11 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(13 - 11) * (11 + 1)",
      "(13 - 11) * (1 + 11)",
      "(1 + (13 / 11)) * 11",
      "(11 + 1) * (13 - 11)",
      "(1 + 11) * (13 - 11)",
      "((13 / 11) + 1) * 11",
      "11 * (1 + (13 / 11))",
      "11 * ((13 / 11) + 1)"
    ]
  },
  "1 11 12 12": {
    "cards": "1 11 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * ((12 - 11) + 1)",
      "12 * (1 - (11 - 12))",
      "(1 + (12 - 11)) * 12",
      "12 * (12 + (1 - 11))",
      "12 * (1 + (12 - 11))",
      "12 * ((1 + 12) - 11)",
      "((12 - 11) + 1) * 12",
      "12 * (12 - (11 - 1))",
      "((1 + 12) - 11) * 12",
      "(12 - (11 - 1)) * 12",
      "((12 + 1) - 11) * 12",
      "(1 - (11 - 12)) * 12",
      "((1 - 11) + 12) * 12",
      "(12 + (1 - 11)) * 12",
      "12 * ((1 - 11) + 12)",
      "12 * ((12 + 1) - 11)"
    ]
  },
  "1 11 12 13": {
    "cards": "1 11 12 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "1 * ((13 - 11) * 12)",
      "12 * ((13 / 1) - 11)",
      "(12 * (13 - 11)) * 1",
      "12 * (13 - (11 / 1))",
      "((13 / 1) - 11) * 12",
      "(1 * 12) * (13 - 11)",
      "((13 * 1) - 11) * 12",
      "(13 - (1 * 11)) * 12",
      "((13 - 11) / 1) * 12",
      "1 * (12 * (13 - 11))",
      "(13 - 11) / (1 / 12)",
      "12 * ((13 - 11) / 1)",
      "(12 * (13 - 11)) / 1",
      "(13 - (11 * 1)) * 12",
      "(12 / 1) * (13 - 11)",
      "((1 * 13) - 11) * 12",
      "((13 - 11) * 1) * 12",
      "((13 - 11) * 12) * 1",
      "((13 - 11) * 12) / 1",
      "(13 - 11) * (12 / 1)",
      "12 * ((1 * 13) - 11)",
      "(13 - 11) * (1 * 12)",
      "12 * (13 - (11 * 1))",
      "(1 * (13 - 11)) * 12",
      "12 * (1 * (13 - 11))",
      "12 / (1 / (13 - 11))",
      "(13 - 11) * (12 * 1)",
      "12 * ((13 * 1) - 11)",
      "(13 - (11 / 1)) * 12",
      "(12 * 1) * (13 - 11)",
      "12 * ((13 - 11) * 1)",
      "12 * (13 - (1 * 11))"
    ]
  },
  "1 11 13 13": {
    "cards": "1 11 13 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(13 - 1) * (13 - 11)",
      "13 * (1 + (11 / 13))",
      "13 * ((11 / 13) + 1)",
      "((11 / 13) + 1) * 13",
      "(1 + (11 / 13)) * 13",
      "(11 - 13) * (1 - 13)",
      "(13 - 11) * (13 - 1)",
      "(1 - 13) * (11 - 13)"
    ]
  },
  "1 12 12 12": {
    "cards": "1 12 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((12 / 12) + 1) * 12",
      "12 * (1 + (12 / 12))",
      "12 * ((12 / 12) + 1)",
      "(1 + (12 / 12)) * 12"
    ]
  },
  "1 12 12 13": {
    "cards": "1 12 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((13 + 1) - 12) * 12",
      "12 * (1 + (13 - 12))",
      "((1 + 13) - 12) * 12",
      "12 * ((1 - 12) + 13)",
      "((1 - 12) + 13) * 12",
      "12 * ((1 + 13) - 12)",
      "(1 + (13 - 12)) * 12",
      "(13 - (12 - 1)) * 12",
      "((13 - 12) + 1) * 12",
      "12 * ((13 - 12) + 1)",
      "(1 - (12 - 13)) * 12",
      "12 * ((13 + 1) - 12)",
      "12 * (13 + (1 - 12))",
      "12 * (1 - (12 - 13))",
      "12 * (13 - (12 - 1))",
      "(13 + (1 - 12)) * 12"
    ]
  },
  "1 12 13 13": {
    "cards": "1 12 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(1 + (13 / 13)) * 12",
      "12 * ((13 / 13) + 1)",
      "12 * (1 + (13 / 13))",
      "((13 / 13) + 1) * 12"
    ]
  },
  "1 13 13 13": {
    "cards": "1 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 2 2": {
    "cards": "2 2 2 2",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 2 3": {
    "cards": "2 2 2 3",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "3 * ((2 + 2) * 2)",
      "2 * ((2 * 2) * 3)",
      "3 * ((2 * 2) * 2)",
      "3 * (2 * (2 * 2))",
      "(3 * (2 + 2)) * 2",
      "((2 * 3) * 2) * 2",
      "(2 * (2 * 3)) * 2",
      "(2 * 3) * (2 + 2)",
      "((2 * 2) * 3) * 2",
      "(2 + 2) * (2 * 3)",
      "2 * (2 * (3 * 2))",
      "((2 + 2) * 2) * 3",
      "(2 * 2) * (3 * 2)",
      "(2 + 2) * (3 * 2)",
      "(2 * (2 * 2)) * 3",
      "2 * (3 * (2 + 2))",
      "3 * (2 * (2 + 2))",
      "2 * ((2 + 2) * 3)",
      "2 * ((2 * 3) * 2)",
      "((2 + 2) * 3) * 2",
      "2 * ((3 * 2) * 2)",
      "(3 * 2) * (2 * 2)",
      "(3 * 2) * (2 + 2)",
      "(2 * 2) * (2 * 3)",
      "((3 * 2) * 2) * 2",
      "2 * (2 * (2 * 3))",
      "2 * (3 * (2 * 2))",
      "((2 * 2) * 2) * 3",
      "(3 * (2 * 2)) * 2",
      "(2 * 3) * (2 * 2)",
      "(2 * (3 * 2)) * 2",
      "(2 * (2 + 2)) * 3"
    ]
  },
  "2 2 2 4": {
    "cards": "2 2 2 4",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((4 + 2) * 2) * 2",
      "(2 * 2) * (4 + 2)",
      "(2 * (4 + 2)) * 2",
      "(2 + 4) * (2 * 2)",
      "2 * (2 * (2 + 4))",
      "(2 + (2 + 2)) * 4",
      "(4 + 2) * (2 * 2)",
      "(2 + 4) * (2 + 2)",
      "(2 + 2) * (2 + 4)",
      "4 * ((2 * 2) + 2)",
      "(4 + 2) * (2 + 2)",
      "((2 + 2) + 2) * 4",
      "4 * (2 + (2 * 2))",
      "2 * ((4 + 2) * 2)",
      "4 * (2 + (2 + 2))",
      "(2 * 2) * (2 + 4)",
      "((2 + 4) * 2) * 2",
      "4 * ((2 + 2) + 2)",
      "(2 * (2 + 4)) * 2",
      "(2 + 2) * (4 + 2)",
      "(2 + (2 * 2)) * 4",
      "2 * (2 * (4 + 2))",
      "((2 * 2) + 2) * 4",
      "2 * ((2 + 4) * 2)"
    ]
  },
  "2 2 2 5": {
    "cards": "2 2 2 5",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "2 * (2 + (2 * 5))",
      "2 * ((5 * 2) + 2)",
      "(2 + (5 * 2)) * 2",
      "2 * ((2 * 5) + 2)",
      "2 * (2 + (5 * 2))",
      "(2 + (2 * 5)) * 2",
      "((5 * 2) + 2) * 2",
      "((2 * 5) + 2) * 2"
    ]
  },
  "2 2 2 6": {
    "cards": "2 2 2 6",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 2 7": {
    "cards": "2 2 2 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * ((2 * 7) - 2)",
      "((2 * 7) - 2) * 2",
      "2 * ((7 * 2) - 2)",
      "((7 * 2) - 2) * 2"
    ]
  },
  "2 2 2 8": {
    "cards": "2 2 2 8",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(8 + (2 + 2)) * 2",
      "(8 - 2) * (2 + 2)",
      "(2 * (8 - 2)) * 2",
      "((2 + 8) + 2) * 2",
      "((2 / 2) + 2) * 8",
      "(8 - 2) * (2 * 2)",
      "2 * (8 + (2 + 2))",
      "(2 + (2 / 2)) * 8",
      "((2 * 2) + 8) * 2",
      "2 * ((2 * 2) + 8)",
      "(2 + 2) * (8 - 2)",
      "((8 + 2) + 2) * 2",
      "8 * (2 + (2 / 2))",
      "2 * (2 + (2 + 8))",
      "2 * ((8 - 2) * 2)",
      "(2 + (2 + 8)) * 2",
      "8 * ((2 / 2) + 2)",
      "2 * (2 + (8 + 2))",
      "2 * ((2 + 2) + 8)",
      "2 * ((8 + 2) + 2)",
      "(2 + (8 + 2)) * 2",
      "(2 * 2) * (8 - 2)",
      "((2 + 2) + 8) * 2",
      "2 * ((2 + 8) + 2)",
      "((8 - 2) * 2) * 2",
      "2 * (8 + (2 * 2))",
      "2 * (2 * (8 - 2))",
      "(8 + (2 * 2)) * 2"
    ]
  },
  "2 2 2 9": {
    "cards": "2 2 2 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "2 + ((9 + 2) * 2)",
      "2 + (2 * (2 + 9))",
      "((9 + 2) * 2) + 2",
      "2 + ((2 + 9) * 2)",
      "((2 + 9) * 2) + 2",
      "2 + (2 * (9 + 2))",
      "(2 * (9 + 2)) + 2",
      "(2 * (2 + 9)) + 2"
    ]
  },
  "2 2 2 10": {
    "cards": "2 2 2 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((2 * 10) + 2) + 2",
      "(2 * 10) + (2 + 2)",
      "2 + ((2 * 10) + 2)",
      "((10 * 2) + 2) + 2",
      "(2 + 2) + (10 * 2)",
      "(10 * 2) + (2 + 2)",
      "(10 * 2) + (2 * 2)",
      "(2 * 2) + (10 * 2)",
      "2 + (2 + (2 * 10))",
      "(2 * 2) + (2 * 10)",
      "(2 + (2 * 10)) + 2",
      "(2 * 10) + (2 * 2)",
      "2 + ((10 * 2) + 2)",
      "(2 + (10 * 2)) + 2",
      "(2 + 2) + (2 * 10)",
      "2 + (2 + (10 * 2))"
    ]
  },
  "2 2 2 11": {
    "cards": "2 2 2 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "2 * ((2 / 2) + 11)",
      "((11 + 2) * 2) - 2",
      "(11 + (2 / 2)) * 2",
      "((2 + 11) * 2) - 2",
      "((2 / 2) + 11) * 2",
      "(2 * (2 + 11)) - 2",
      "2 * (11 + (2 / 2))",
      "(2 * (11 + 2)) - 2"
    ]
  },
  "2 2 2 12": {
    "cards": "2 2 2 12",
    "has_solution": "Y",
    "num_solutions": 95,
    "solutions": [
      "(2 * 12) + (2 - 2)",
      "12 / ((2 / 2) / 2)",
      "((2 / 2) * 2) * 12",
      "12 * ((2 / 2) * 2)",
      "2 * ((2 * 12) / 2)",
      "(2 * 2) / (2 / 12)",
      "((2 + 2) * 12) / 2",
      "2 * ((2 / 2) * 12)",
      "(12 + (2 - 2)) * 2",
      "(2 * 12) - (2 - 2)",
      "(12 * 2) + (2 - 2)",
      "(12 / (2 / 2)) * 2",
      "2 * (12 - (2 - 2))",
      "(2 / 2) * (2 * 12)",
      "(2 / (2 / 12)) * 2",
      "(12 * 2) * (2 / 2)",
      "2 * (2 + (12 - 2))",
      "((2 + 12) - 2) * 2",
      "12 * (2 * (2 / 2))",
      "12 * ((2 * 2) / 2)",
      "12 * ((2 - 2) + 2)",
      "(2 + (2 * 12)) - 2",
      "((12 * 2) / 2) * 2",
      "2 * (12 * (2 / 2))",
      "((12 * 2) - 2) + 2",
      "((12 * 2) * 2) / 2",
      "(2 * 12) * (2 / 2)",
      "2 + ((2 * 12) - 2)",
      "(2 + 2) * (12 / 2)",
      "((12 - 2) + 2) * 2",
      "(2 * (12 * 2)) / 2",
      "((2 * 12) * 2) / 2",
      "((2 - 2) + 2) * 12",
      "(12 / 2) * (2 + 2)",
      "2 * (2 - (2 - 12))",
      "2 + ((12 * 2) - 2)",
      "(2 - (2 - 2)) * 12",
      "((12 + 2) - 2) * 2",
      "2 / ((2 / 12) / 2)",
      "((12 / 2) * 2) * 2",
      "(2 * 12) / (2 / 2)",
      "((2 + 2) - 2) * 12",
      "((2 + 2) / 2) * 12",
      "2 * (2 / (2 / 12))",
      "(2 / (2 / 2)) * 12",
      "12 / (2 / (2 + 2))",
      "((2 * 12) / 2) * 2",
      "((2 * 12) - 2) + 2",
      "(12 * (2 * 2)) / 2",
      "(2 / 2) * (12 * 2)",
      "((2 / 2) * 12) * 2",
      "12 * ((2 * 2) - 2)",
      "(12 * 2) - (2 - 2)",
      "2 / (2 / (12 * 2))",
      "2 * ((12 * 2) / 2)",
      "(2 * (12 / 2)) * 2",
      "12 / (2 / (2 * 2))",
      "2 * ((2 - 2) + 12)",
      "2 - (2 - (12 * 2))",
      "(2 - (2 - 12)) * 2",
      "(12 / 2) * (2 * 2)",
      "2 * ((12 / 2) * 2)",
      "2 * ((2 + 12) - 2)",
      "(2 * (2 / 2)) * 12",
      "(2 + 2) / (2 / 12)",
      "2 * (12 / (2 / 2))",
      "12 * (2 - (2 - 2))",
      "12 * (2 / (2 / 2))",
      "((2 * 2) / 2) * 12",
      "((12 * 2) + 2) - 2",
      "12 * ((2 + 2) - 2)",
      "(2 * 2) * (12 / 2)",
      "(2 - 2) + (2 * 12)",
      "2 - (2 - (2 * 12))",
      "(12 * 2) / (2 / 2)",
      "((2 * 2) * 12) / 2",
      "12 * ((2 + 2) / 2)",
      "2 * (12 + (2 - 2))",
      "(12 * (2 / 2)) * 2",
      "((2 * 2) - 2) * 12",
      "(2 + (12 * 2)) - 2",
      "(2 + (12 - 2)) * 2",
      "(2 * (2 * 12)) / 2",
      "((2 - 2) + 12) * 2",
      "(2 + (2 - 2)) * 12",
      "2 * (2 * (12 / 2))",
      "12 * (2 + (2 - 2))",
      "(12 - (2 - 2)) * 2",
      "((2 * 12) + 2) - 2",
      "2 / ((2 / 2) / 12)",
      "2 * ((12 + 2) - 2)",
      "(12 * (2 + 2)) / 2",
      "2 / (2 / (2 * 12))",
      "(2 - 2) + (12 * 2)",
      "2 * ((12 - 2) + 2)"
    ]
  },
  "2 2 2 13": {
    "cards": "2 2 2 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "2 - ((2 - 13) * 2)",
      "2 + ((13 - 2) * 2)",
      "((13 - 2) * 2) + 2",
      "2 * (13 - (2 / 2))",
      "2 + (2 * (13 - 2))",
      "(2 * (13 - 2)) + 2",
      "(13 - (2 / 2)) * 2",
      "2 - (2 * (2 - 13))"
    ]
  },
  "2 2 3 3": {
    "cards": "2 2 3 3",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "3 * (2 + (3 * 2))",
      "2 * (2 * (3 + 3))",
      "(2 + 2) * (3 + 3)",
      "(2 + (3 * 2)) * 3",
      "(2 + (2 * 3)) * 3",
      "3 * ((2 * 3) + 2)",
      "((3 * 2) + 2) * 3",
      "3 * (2 + (2 * 3))",
      "((2 * 3) + 2) * 3",
      "(3 + 3) * (2 + 2)",
      "(2 * 2) * (3 + 3)",
      "2 * ((3 + 3) * 2)",
      "(2 * (3 + 3)) * 2",
      "((3 + 3) * 2) * 2",
      "3 * ((3 * 2) + 2)",
      "(3 + 3) * (2 * 2)"
    ]
  },
  "2 2 3 4": {
    "cards": "2 2 3 4",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(2 + (2 + 4)) * 3",
      "(4 + (2 * 2)) * 3",
      "((2 * 2) + 4) * 3",
      "((2 + 4) + 2) * 3",
      "3 * (4 + (2 + 2))",
      "3 * ((2 * 2) + 4)",
      "3 * ((4 + 2) + 2)",
      "(4 + (2 + 2)) * 3",
      "((2 + 2) + 4) * 3",
      "((4 + 2) + 2) * 3",
      "3 * ((2 + 4) + 2)",
      "3 * (4 + (2 * 2))",
      "3 * (2 + (4 + 2))",
      "(2 + (4 + 2)) * 3",
      "3 * (2 + (2 + 4))",
      "3 * ((2 + 2) + 4)"
    ]
  },
  "2 2 3 5": {
    "cards": "2 2 3 5",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "3 * ((2 * 5) - 2)",
      "((2 * 5) - 2) * 3",
      "((5 * 2) - 2) * 3",
      "3 * ((5 * 2) - 2)"
    ]
  },
  "2 2 3 6": {
    "cards": "2 2 3 6",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(6 - 2) * (2 * 3)",
      "((2 * 3) + 6) * 2",
      "6 * ((2 * 3) - 2)",
      "((3 * 2) - 2) * 6",
      "2 * (3 * (6 - 2))",
      "(3 * 2) * (6 - 2)",
      "(3 * (6 - 2)) * 2",
      "3 * (2 * (6 - 2))",
      "2 * (6 + (2 * 3))",
      "((2 * 3) - 2) * 6",
      "6 * ((3 * 2) - 2)",
      "((3 * 2) + 6) * 2",
      "2 * ((3 * 2) + 6)",
      "2 * ((6 - 2) * 3)",
      "(6 + (3 * 2)) * 2",
      "(2 * 3) * (6 - 2)",
      "((6 - 2) * 3) * 2",
      "(2 * (6 - 2)) * 3",
      "6 * (3 + (2 / 2))",
      "(6 - 2) * (3 * 2)",
      "(3 + (2 / 2)) * 6",
      "2 * (6 + (3 * 2))",
      "6 * ((2 / 2) + 3)",
      "((2 / 2) + 3) * 6",
      "(6 + (2 * 3)) * 2",
      "((6 - 2) * 2) * 3",
      "3 * ((6 - 2) * 2)",
      "2 * ((2 * 3) + 6)"
    ]
  },
  "2 2 3 7": {
    "cards": "2 2 3 7",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "2 * ((2 + 3) + 7)",
      "((3 + 7) + 2) * 2",
      "((2 + 3) + 7) * 2",
      "2 * ((7 + 2) + 3)",
      "((7 + 2) + 3) * 2",
      "(7 + (3 + 2)) * 2",
      "(3 + (2 + 7)) * 2",
      "2 * (2 + (7 + 3))",
      "2 * (3 + (2 + 7))",
      "2 * (7 + (2 + 3))",
      "3 * (7 + (2 / 2))",
      "(3 + (7 + 2)) * 2",
      "2 * ((7 + 3) + 2)",
      "((2 / 2) + 7) * 3",
      "(7 + (2 + 3)) * 2",
      "2 * ((2 + 7) + 3)",
      "((2 + 7) + 3) * 2",
      "2 * (7 + (3 + 2))",
      "((7 + 3) + 2) * 2",
      "2 * (3 + (7 + 2))",
      "(2 + (7 + 3)) * 2",
      "2 * ((3 + 7) + 2)",
      "3 * ((2 / 2) + 7)",
      "((3 + 2) + 7) * 2",
      "2 * (2 + (3 + 7))",
      "(7 + (2 / 2)) * 3",
      "(2 + (3 + 7)) * 2",
      "2 * ((3 + 2) + 7)"
    ]
  },
  "2 2 3 8": {
    "cards": "2 2 3 8",
    "has_solution": "Y",
    "num_solutions": 146,
    "solutions": [
      "(8 / (2 / 2)) * 3",
      "(8 * (3 * 2)) / 2",
      "3 * ((8 * 2) / 2)",
      "(2 + (3 - 2)) * 8",
      "3 * (2 - (2 - 8))",
      "(3 * (2 * 8)) / 2",
      "(2 * 3) / (2 / 8)",
      "(2 - 2) + (3 * 8)",
      "(8 * 2) * (3 / 2)",
      "8 * ((2 / 2) * 3)",
      "8 / (2 / (3 * 2))",
      "2 + ((8 * 3) - 2)",
      "(3 * 2) / (2 / 8)",
      "((2 - 2) + 8) * 3",
      "2 * ((8 * 3) / 2)",
      "2 / (2 / (8 * 3))",
      "(2 + (3 * 8)) - 2",
      "3 * (2 + (8 - 2))",
      "2 - (2 - (3 * 8))",
      "(3 / (2 / 8)) * 2",
      "2 + (2 * (3 + 8))",
      "(2 * (8 / 2)) * 3",
      "((2 * 3) * 8) / 2",
      "3 / ((2 / 8) / 2)",
      "(8 * 3) - (2 - 2)",
      "8 * ((3 + 2) - 2)",
      "3 * ((2 / 2) * 8)",
      "8 / ((2 / 3) / 2)",
      "(2 + (8 - 2)) * 3",
      "2 + (2 * (8 + 3))",
      "(3 * (8 * 2)) / 2",
      "((8 * 3) - 2) + 2",
      "(2 - (2 - 8)) * 3",
      "3 * (8 + (2 - 2))",
      "(8 * (3 / 2)) * 2",
      "((8 - 2) + 2) * 3",
      "(8 * 3) + (2 - 2)",
      "(3 * (8 / 2)) * 2",
      "((2 * 8) / 2) * 3",
      "3 * ((8 - 2) + 2)",
      "((3 * 8) * 2) / 2",
      "(8 + (2 - 2)) * 3",
      "3 / (2 / (8 * 2))",
      "(8 * (2 * 3)) / 2",
      "((8 * 3) + 2) - 2",
      "8 * (3 * (2 / 2))",
      "8 * (3 / (2 / 2))",
      "((8 / 2) * 2) * 3",
      "2 + ((8 + 3) * 2)",
      "(3 * 2) * (8 / 2)",
      "3 * (8 * (2 / 2))",
      "2 * ((3 / 2) * 8)",
      "(8 * 2) / (2 / 3)",
      "(2 / 2) * (3 * 8)",
      "8 * ((2 - 2) + 3)",
      "2 * (3 * (8 / 2))",
      "(8 - (2 - 2)) * 3",
      "(2 - 2) + (8 * 3)",
      "2 / (2 / (3 * 8))",
      "((3 * 2) / 2) * 8",
      "8 * ((2 * 3) / 2)",
      "(2 + (8 * 3)) - 2",
      "((2 - 2) + 3) * 8",
      "2 + ((3 + 8) * 2)",
      "((2 / 2) * 3) * 8",
      "(3 * 8) / (2 / 2)",
      "3 * ((2 - 2) + 8)",
      "3 * ((8 + 2) - 2)",
      "(3 * 8) * (2 / 2)",
      "2 * (8 * (3 / 2))",
      "(2 / (2 / 3)) * 8",
      "8 * (2 - (2 - 3))",
      "((3 * 2) * 8) / 2",
      "((3 * 8) - 2) + 2",
      "((3 * 8) / 2) * 2",
      "3 * (2 / (2 / 8))",
      "((8 + 2) - 2) * 3",
      "2 * (3 / (2 / 8))",
      "8 * (2 * (3 / 2))",
      "((8 * 3) / 2) * 2",
      "2 * ((3 * 8) / 2)",
      "((8 + 3) * 2) + 2",
      "(2 * 3) * (8 / 2)",
      "8 * (2 + (3 - 2))",
      "2 * ((8 / 2) * 3)",
      "(8 * (2 / 2)) * 3",
      "(2 * 8) * (3 / 2)",
      "(2 * (3 * 8)) / 2",
      "((3 / 2) * 8) * 2",
      "(8 / 2) * (2 * 3)",
      "3 * (8 - (2 - 2))",
      "2 / ((2 / 3) / 8)",
      "8 / ((2 / 2) / 3)",
      "(8 / 2) * (3 * 2)",
      "(2 * (8 + 3)) + 2",
      "3 * ((8 / 2) * 2)",
      "8 * (3 + (2 - 2))",
      "(2 * (3 / 2)) * 8",
      "(2 / (2 / 8)) * 3",
      "2 - (2 - (8 * 3))",
      "(8 * 3) / (2 / 2)",
      "((8 * 2) * 3) / 2",
      "3 * (8 / (2 / 2))",
      "8 * ((2 + 3) - 2)",
      "(3 + (2 - 2)) * 8",
      "((8 / 2) * 3) * 2",
      "8 * ((3 / 2) * 2)",
      "(2 * 8) / (2 / 3)",
      "3 * ((2 * 8) / 2)",
      "((3 * 8) + 2) - 2",
      "((2 + 3) - 2) * 8",
      "(8 * 3) * (2 / 2)",
      "((2 * 3) / 2) * 8",
      "8 * ((3 * 2) / 2)",
      "((8 * 2) / 2) * 3",
      "(3 / 2) * (2 * 8)",
      "((2 + 8) - 2) * 3",
      "8 * ((3 - 2) + 2)",
      "3 / (2 / (2 * 8))",
      "(3 - (2 - 2)) * 8",
      "8 * (2 / (2 / 3))",
      "(2 / 2) * (8 * 3)",
      "3 / ((2 / 2) / 8)",
      "8 * (3 - (2 - 2))",
      "(3 * 8) + (2 - 2)",
      "(2 * (8 * 3)) / 2",
      "((3 / 2) * 2) * 8",
      "((3 - 2) + 2) * 8",
      "(8 / (2 / 3)) * 2",
      "3 * (2 * (8 / 2))",
      "(2 - (2 - 3)) * 8",
      "(3 / (2 / 2)) * 8",
      "((2 / 2) * 8) * 3",
      "2 + ((3 * 8) - 2)",
      "(3 * 8) - (2 - 2)",
      "((3 + 2) - 2) * 8",
      "((8 * 3) * 2) / 2",
      "((2 * 8) * 3) / 2",
      "8 / (2 / (2 * 3))",
      "((3 + 8) * 2) + 2",
      "(3 * (2 / 2)) * 8",
      "2 * (8 / (2 / 3))",
      "(2 * (3 + 8)) + 2",
      "2 / ((2 / 8) / 3)",
      "(3 / 2) * (8 * 2)",
      "3 * ((2 + 8) - 2)"
    ]
  },
  "2 2 3 9": {
    "cards": "2 2 3 9",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "2 * ((9 - 3) * 2)",
      "(2 * 9) + (3 * 2)",
      "9 * ((2 / 3) + 2)",
      "(9 - (2 / 2)) * 3",
      "(2 + 2) * (9 - 3)",
      "(2 + (2 / 3)) * 9",
      "3 * (9 - (2 / 2))",
      "(2 * (9 - 3)) * 2",
      "((2 / 3) + 2) * 9",
      "(2 * 9) + (2 * 3)",
      "(2 * 3) + (9 * 2)",
      "(2 * 2) * (9 - 3)",
      "(9 - 3) * (2 * 2)",
      "(9 * 2) + (2 * 3)",
      "(9 - 3) * (2 + 2)",
      "9 * (2 + (2 / 3))",
      "2 * (2 * (9 - 3))",
      "(9 * 2) + (3 * 2)",
      "(3 * 2) + (9 * 2)",
      "(3 * 2) + (2 * 9)",
      "(2 * 3) + (2 * 9)",
      "((9 - 3) * 2) * 2"
    ]
  },
  "2 2 3 10": {
    "cards": "2 2 3 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 * (10 + 3)) - 2",
      "((3 + 10) * 2) - 2",
      "((10 + 3) * 2) - 2",
      "(2 * (3 + 10)) - 2"
    ]
  },
  "2 2 3 11": {
    "cards": "2 2 3 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(3 - (2 - 11)) * 2",
      "((11 - 2) + 3) * 2",
      "2 * (11 + (3 - 2))",
      "2 * ((11 - 2) + 3)",
      "2 * (11 - (2 - 3))",
      "(11 + (3 - 2)) * 2",
      "2 * ((3 + 11) - 2)",
      "2 * (3 + (11 - 2))",
      "2 * (3 - (2 - 11))",
      "(11 - (2 - 3)) * 2",
      "2 * ((11 + 3) - 2)",
      "((3 - 2) + 11) * 2",
      "(3 + (11 - 2)) * 2",
      "((11 + 3) - 2) * 2",
      "((3 + 11) - 2) * 2",
      "2 * ((3 - 2) + 11)"
    ]
  },
  "2 2 3 12": {
    "cards": "2 2 3 12",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "2 * ((3 - 2) * 12)",
      "((3 - 2) * 12) * 2",
      "(2 * 12) / (3 - 2)",
      "(2 * (3 - 2)) * 12",
      "((12 / 2) + 2) * 3",
      "(12 - (2 * 2)) * 3",
      "3 * (12 - (2 + 2))",
      "12 + (2 * (3 * 2))",
      "(12 / (3 - 2)) * 2",
      "(3 * (2 * 2)) + 12",
      "12 + ((2 + 2) * 3)",
      "(3 - (2 / 2)) * 12",
      "12 + (3 * (2 + 2))",
      "12 + (3 * (2 * 2))",
      "(2 + (12 / 2)) * 3",
      "(3 * (2 + 2)) + 12",
      "(2 / (3 - 2)) * 12",
      "(12 * (3 - 2)) * 2",
      "2 * (12 * (3 - 2))",
      "(12 * 2) * (3 - 2)",
      "3 * (12 - (2 * 2))",
      "2 * (12 / (3 - 2))",
      "12 * (2 / (3 - 2))",
      "12 / ((3 - 2) / 2)",
      "12 * (2 * (3 - 2))",
      "3 * ((12 / 2) + 2)",
      "(3 - 2) * (12 * 2)",
      "((3 - 2) * 2) * 12",
      "12 + ((2 * 2) * 3)",
      "((2 * 2) * 3) + 12",
      "12 * ((3 - 2) * 2)",
      "((2 + 2) * 3) + 12",
      "(12 - (2 + 2)) * 3",
      "(12 * 2) / (3 - 2)",
      "12 + ((2 * 3) * 2)",
      "12 * (3 - (2 / 2))",
      "2 / ((3 - 2) / 12)",
      "(2 * (3 * 2)) + 12",
      "(2 * 12) * (3 - 2)",
      "12 + ((3 * 2) * 2)",
      "((3 * 2) * 2) + 12",
      "12 / (2 - (3 / 2))",
      "(2 * (2 * 3)) + 12",
      "3 * (2 + (12 / 2))",
      "((2 * 3) * 2) + 12",
      "12 + (2 * (2 * 3))",
      "(3 - 2) * (2 * 12)",
      "3 * ((12 - 2) - 2)",
      "((12 - 2) - 2) * 3"
    ]
  },
  "2 2 3 13": {
    "cards": "2 2 3 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "2 * ((2 + 13) - 3)",
      "((13 - 3) + 2) * 2",
      "((2 - 3) + 13) * 2",
      "(13 - (3 - 2)) * 2",
      "2 * ((13 - 3) + 2)",
      "2 * (13 - (3 - 2))",
      "2 * ((2 - 3) + 13)",
      "(13 + (2 - 3)) * 2",
      "(2 + (13 - 3)) * 2",
      "2 * (2 - (3 - 13))",
      "(2 - (3 - 13)) * 2",
      "2 * ((13 + 2) - 3)",
      "2 * (13 + (2 - 3))",
      "((13 + 2) - 3) * 2",
      "2 * (2 + (13 - 3))",
      "((2 + 13) - 3) * 2"
    ]
  },
  "2 2 4 4": {
    "cards": "2 2 4 4",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "2 * (4 + (2 * 4))",
      "((2 * 4) + 4) * 2",
      "4 * ((4 * 2) - 2)",
      "2 * ((4 * 2) + 4)",
      "((4 * 2) + 4) * 2",
      "4 * ((2 * 4) - 2)",
      "((2 * 4) - 2) * 4",
      "(4 + (4 * 2)) * 2",
      "2 * ((2 * 4) + 4)",
      "(4 + (2 * 4)) * 2",
      "2 * (4 + (4 * 2))",
      "((4 * 2) - 2) * 4"
    ]
  },
  "2 2 4 5": {
    "cards": "2 2 4 5",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(2 * 2) + (5 * 4)",
      "((5 * 2) * 2) + 4",
      "((5 - 2) * 4) * 2",
      "4 + ((5 * 2) * 2)",
      "(5 * 4) + (2 * 2)",
      "2 + ((5 * 4) + 2)",
      "((2 + 2) * 5) + 4",
      "4 + (2 * (2 * 5))",
      "4 + (5 * (2 * 2))",
      "(5 * (2 * 2)) + 4",
      "(4 * 2) * (5 - 2)",
      "4 * (5 + (2 / 2))",
      "(5 * 4) + (2 + 2)",
      "(4 * 5) + (2 + 2)",
      "2 + (2 + (5 * 4))",
      "((4 * 5) + 2) + 2",
      "(4 * 5) + (2 * 2)",
      "4 * ((2 / 2) + 5)",
      "2 + ((4 * 5) + 2)",
      "((2 * 2) * 5) + 4",
      "(2 * (5 - 2)) * 4",
      "(2 * (2 * 5)) + 4",
      "4 + ((2 * 5) * 2)",
      "(2 + (5 * 4)) + 2",
      "((2 / 2) + 5) * 4",
      "4 + ((2 * 2) * 5)",
      "2 + (2 + (4 * 5))",
      "(2 + 2) + (4 * 5)",
      "4 + (2 * (5 * 2))",
      "((5 * 4) + 2) + 2",
      "4 + (5 * (2 + 2))",
      "(5 + (2 / 2)) * 4",
      "(5 * (2 + 2)) + 4",
      "2 * ((5 - 2) * 4)",
      "4 * (2 * (5 - 2))",
      "((2 * 5) * 2) + 4",
      "4 + ((2 + 2) * 5)",
      "((5 - 2) * 2) * 4",
      "4 * ((5 - 2) * 2)",
      "(2 + (4 * 5)) + 2",
      "(2 + 2) + (5 * 4)",
      "(4 * (5 - 2)) * 2",
      "(5 - 2) * (2 * 4)",
      "(2 * 4) * (5 - 2)",
      "2 * (4 * (5 - 2))",
      "(5 - 2) * (4 * 2)",
      "(2 * 2) + (4 * 5)",
      "(2 * (5 * 2)) + 4"
    ]
  },
  "2 2 4 6": {
    "cards": "2 2 4 6",
    "has_solution": "Y",
    "num_solutions": 182,
    "solutions": [
      "2 * ((4 - 2) * 6)",
      "(4 * 2) * (6 / 2)",
      "6 * ((4 / 2) + 2)",
      "((2 * 4) * 6) / 2",
      "(6 / 2) * (4 * 2)",
      "(2 / (2 / 4)) * 6",
      "6 / (2 / (2 * 4))",
      "(2 * (4 - 2)) * 6",
      "((6 * 4) - 2) + 2",
      "(6 + (2 - 2)) * 4",
      "4 * (2 - (2 - 6))",
      "((2 + 4) + 6) * 2",
      "(6 * (2 * 4)) / 2",
      "6 * ((4 - 2) * 2)",
      "2 * ((6 * 4) / 2)",
      "((6 + 2) - 2) * 4",
      "2 * (4 / (2 / 6))",
      "6 * (2 * (4 - 2))",
      "((6 * 4) * 2) / 2",
      "(2 * (6 / 2)) * 4",
      "(6 / 2) * (2 * 4)",
      "(4 * 6) + (2 - 2)",
      "4 * (2 + (6 - 2))",
      "(6 / (2 / 4)) * 2",
      "2 * ((6 / 2) * 4)",
      "2 * (6 + (2 + 4))",
      "(4 * 6) / (2 / 2)",
      "((4 * 6) / 2) * 2",
      "(4 - (2 - 2)) * 6",
      "2 * ((4 + 6) + 2)",
      "((4 / 2) * 2) * 6",
      "(6 * 4) + (2 - 2)",
      "6 * (2 - (2 - 4))",
      "(6 * 2) * (4 - 2)",
      "((6 / 2) * 2) * 4",
      "((4 * 6) + 2) - 2",
      "6 * (4 * (2 / 2))",
      "6 * (4 + (2 - 2))",
      "(4 * (6 / 2)) * 2",
      "6 * (2 + (4 - 2))",
      "(4 * 2) / (2 / 6)",
      "(4 * (2 / 2)) * 6",
      "(6 * 4) / (2 / 2)",
      "(2 - (2 - 6)) * 4",
      "(2 * (4 * 6)) / 2",
      "2 * (4 * (6 / 2))",
      "(6 * 4) - (2 - 2)",
      "(6 * (4 - 2)) * 2",
      "(4 * (2 * 6)) / 2",
      "2 / ((2 / 4) / 6)",
      "2 * ((4 / 2) * 6)",
      "((6 + 2) + 4) * 2",
      "(4 + 2) * (6 - 2)",
      "2 * (6 / (2 / 4))",
      "2 * ((4 * 6) / 2)",
      "6 * ((4 - 2) + 2)",
      "(6 * 2) * (4 / 2)",
      "2 * (2 + (4 + 6))",
      "2 * ((6 + 2) + 4)",
      "4 / ((2 / 2) / 6)",
      "((2 - 2) + 4) * 6",
      "4 * ((2 * 6) / 2)",
      "((4 / 2) * 6) * 2",
      "(6 - 2) * (2 + 4)",
      "4 * ((6 - 2) + 2)",
      "((6 * 2) * 4) / 2",
      "6 * ((2 * 4) / 2)",
      "((4 * 2) * 6) / 2",
      "6 * ((4 / 2) * 2)",
      "((2 * 6) / 2) * 4",
      "((6 * 4) / 2) * 2",
      "(2 / (2 / 6)) * 4",
      "2 / ((2 / 6) / 4)",
      "((2 / 2) * 6) * 4",
      "(2 - 2) + (6 * 4)",
      "6 * ((2 - 2) + 4)",
      "4 * (2 / (2 / 6))",
      "2 - (2 - (6 * 4))",
      "((4 * 6) * 2) / 2",
      "((4 + 6) + 2) * 2",
      "((2 + 4) - 2) * 6",
      "(4 - 2) * (2 * 6)",
      "(4 * 6) - (2 - 2)",
      "2 * (4 + (6 + 2))",
      "4 * ((6 + 2) - 2)",
      "(2 + (6 + 4)) * 2",
      "6 * (2 + (4 / 2))",
      "(4 + (2 + 6)) * 2",
      "(2 * (4 / 2)) * 6",
      "(6 * 4) * (2 / 2)",
      "2 / (2 / (4 * 6))",
      "2 * ((4 + 2) + 6)",
      "((4 * 2) / 2) * 6",
      "(2 * 4) / (2 / 6)",
      "2 * (6 * (4 / 2))",
      "2 / (2 / (6 * 4))",
      "(2 - (2 - 4)) * 6",
      "2 + ((4 * 6) - 2)",
      "2 * (6 + (4 + 2))",
      "((4 + 2) + 6) * 2",
      "((4 - 2) + 2) * 6",
      "4 / (2 / (6 * 2))",
      "(2 + (4 * 6)) - 2",
      "((2 / 2) * 4) * 6",
      "(2 * 6) * (4 / 2)",
      "(6 + (2 + 4)) * 2",
      "((6 - 2) + 2) * 4",
      "4 * (6 * (2 / 2))",
      "(2 * (6 * 4)) / 2",
      "4 * (6 / (2 / 2))",
      "6 / (2 / (4 * 2))",
      "6 * (2 / (2 / 4))",
      "((2 - 2) + 6) * 4",
      "(4 / (2 / 2)) * 6",
      "2 + ((6 * 4) - 2)",
      "((4 + 2) - 2) * 6",
      "(4 / 2) * (6 * 2)",
      "((6 / 2) * 4) * 2",
      "4 * ((2 / 2) * 6)",
      "4 * ((2 - 2) + 6)",
      "6 * (4 / (2 / 2))",
      "4 / ((2 / 6) / 2)",
      "(2 + (4 / 2)) * 6",
      "2 * (4 + (2 + 6))",
      "((6 * 4) + 2) - 2",
      "(4 * 6) * (2 / 2)",
      "(4 * (6 * 2)) / 2",
      "((2 + 6) - 2) * 4",
      "(6 / (2 / 2)) * 4",
      "(6 - (2 - 2)) * 4",
      "(6 - 2) * (4 + 2)",
      "6 * ((4 * 2) / 2)",
      "6 * (2 * (4 / 2))",
      "4 * (2 * (6 / 2))",
      "(2 + (4 - 2)) * 6",
      "((6 * 2) / 2) * 4",
      "4 * (6 - (2 - 2))",
      "(2 + 4) * (6 - 2)",
      "((4 - 2) * 6) * 2",
      "(2 * 6) / (2 / 4)",
      "((2 * 6) * 4) / 2",
      "2 * (6 * (4 - 2))",
      "(4 + (2 - 2)) * 6",
      "2 - (2 - (4 * 6))",
      "6 / ((2 / 4) / 2)",
      "((4 / 2) + 2) * 6",
      "(2 * 4) * (6 / 2)",
      "((4 - 2) * 2) * 6",
      "6 * ((2 + 4) - 2)",
      "2 * (2 + (6 + 4))",
      "(6 * 2) / (2 / 4)",
      "(2 * 6) * (4 - 2)",
      "(2 + (6 * 4)) - 2",
      "4 / (2 / (2 * 6))",
      "(6 * (2 / 2)) * 4",
      "(6 * (4 / 2)) * 2",
      "6 / ((2 / 2) / 4)",
      "((2 * 4) / 2) * 6",
      "(6 * (4 * 2)) / 2",
      "(2 / 2) * (6 * 4)",
      "((4 * 6) - 2) + 2",
      "(4 / 2) * (2 * 6)",
      "6 * (4 - (2 - 2))",
      "4 * ((6 / 2) * 2)",
      "2 * ((6 + 4) + 2)",
      "(2 - 2) + (4 * 6)",
      "4 * ((6 * 2) / 2)",
      "((2 + 6) + 4) * 2",
      "(4 + (6 + 2)) * 2",
      "6 * ((2 / 2) * 4)",
      "(6 + (4 + 2)) * 2",
      "(2 / 2) * (4 * 6)",
      "(4 - 2) * (6 * 2)",
      "2 * ((2 + 4) + 6)",
      "(2 + (6 - 2)) * 4",
      "((6 + 4) + 2) * 2",
      "6 * ((4 + 2) - 2)",
      "(4 / (2 / 6)) * 2",
      "4 * ((2 + 6) - 2)",
      "2 * ((2 + 6) + 4)",
      "(2 + (4 + 6)) * 2",
      "4 * (6 + (2 - 2))"
    ]
  },
  "2 2 4 7": {
    "cards": "2 2 4 7",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "2 + ((4 + 7) * 2)",
      "(7 * 4) - (2 * 2)",
      "((7 * 2) * 2) - 4",
      "(7 * 4) - (2 + 2)",
      "((2 * 7) * 2) - 4",
      "(7 * (2 * 2)) - 4",
      "((2 + 2) * 7) - 4",
      "(4 * 7) - (2 + 2)",
      "((2 * 2) * 7) - 4",
      "4 * (7 - (2 / 2))",
      "(7 - (2 / 2)) * 4",
      "(7 * (2 + 2)) - 4",
      "(2 * (7 * 2)) - 4",
      "2 + (2 * (4 + 7))",
      "((7 * 4) - 2) - 2",
      "(4 * 7) - (2 * 2)",
      "2 + (2 * (7 + 4))",
      "(2 * (7 + 4)) + 2",
      "((7 + 4) * 2) + 2",
      "2 + ((7 + 4) * 2)",
      "((4 * 7) - 2) - 2",
      "(2 * (4 + 7)) + 2",
      "((4 + 7) * 2) + 2",
      "(2 * (2 * 7)) - 4"
    ]
  },
  "2 2 4 8": {
    "cards": "2 2 4 8",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "(4 + 2) / (2 / 8)",
      "(2 * 4) + (8 * 2)",
      "((2 * 4) * 2) + 8",
      "4 + ((8 + 2) * 2)",
      "(8 / 2) * (4 + 2)",
      "8 + ((2 * 4) * 2)",
      "(2 * 8) + (4 * 2)",
      "(2 * 8) + (2 * 4)",
      "((4 * 2) * 2) + 8",
      "8 + (2 * (2 * 4))",
      "8 * ((4 + 2) / 2)",
      "(2 + 4) / (2 / 8)",
      "(4 - (2 / 2)) * 8",
      "((2 * 2) * 4) + 8",
      "(4 * (2 * 2)) + 8",
      "2 * ((2 * 8) - 4)",
      "8 + (4 * (2 * 2))",
      "8 + (2 * (4 * 2))",
      "(4 + 2) * (8 / 2)",
      "4 * ((8 / 2) + 2)",
      "4 + (2 * (2 + 8))",
      "(8 * 2) + (2 * 4)",
      "((8 * 2) - 4) * 2",
      "8 + ((2 * 2) * 4)",
      "(2 + 4) * (8 / 2)",
      "((2 + 8) * 2) + 4",
      "(8 * (4 + 2)) / 2",
      "(2 * (4 * 2)) + 8",
      "((2 * 8) - 4) * 2",
      "((2 + 2) * 4) + 8",
      "(2 * (2 + 8)) + 4",
      "(8 * 2) + (4 * 2)",
      "4 * (2 + (8 / 2))",
      "(4 * (2 + 2)) + 8",
      "((4 + 2) * 8) / 2",
      "8 / (2 / (2 + 4))",
      "8 + ((4 * 2) * 2)",
      "8 + (4 * (2 + 2))",
      "8 / (2 / (4 + 2))",
      "(2 * 4) + (2 * 8)",
      "((8 + 2) * 2) + 4",
      "(2 * (8 + 2)) + 4",
      "((2 + 4) * 8) / 2",
      "((4 + 2) / 2) * 8",
      "((8 / 2) + 2) * 4",
      "2 * ((8 * 2) - 4)",
      "((2 + 4) / 2) * 8",
      "4 + (2 * (8 + 2))",
      "4 + ((2 + 8) * 2)",
      "(2 * (2 * 4)) + 8",
      "(2 + (8 / 2)) * 4",
      "8 + ((2 + 2) * 4)",
      "(4 * 2) + (2 * 8)",
      "(8 / 2) * (2 + 4)",
      "8 * (4 - (2 / 2))",
      "(4 * 2) + (8 * 2)",
      "8 * ((2 + 4) / 2)",
      "(8 * (2 + 4)) / 2"
    ]
  },
  "2 2 4 9": {
    "cards": "2 2 4 9",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "4 + (2 + (9 * 2))",
      "2 + (4 + (9 * 2))",
      "2 + ((2 * 9) + 4)",
      "4 + ((9 * 2) + 2)",
      "(2 * (9 + 4)) - 2",
      "((2 * 9) + 4) + 2",
      "(9 * 2) + (2 + 4)",
      "4 + ((2 * 9) + 2)",
      "((9 * 2) + 4) + 2",
      "(4 + 2) + (9 * 2)",
      "(2 + 4) + (9 * 2)",
      "(2 * 9) + (4 + 2)",
      "((9 + 4) * 2) - 2",
      "(4 + (2 * 9)) + 2",
      "2 + (4 + (2 * 9))",
      "(4 + 2) + (2 * 9)",
      "(2 * 9) + (2 + 4)",
      "4 + (2 + (2 * 9))",
      "(2 + (9 * 2)) + 4",
      "2 + ((9 * 2) + 4)",
      "(2 + (2 * 9)) + 4",
      "(9 * 2) + (4 + 2)",
      "((2 * 9) + 2) + 4",
      "(2 + 4) + (2 * 9)",
      "(2 * (4 + 9)) - 2",
      "((9 * 2) + 2) + 4",
      "(4 + (9 * 2)) + 2",
      "((4 + 9) * 2) - 2"
    ]
  },
  "2 2 4 10": {
    "cards": "2 2 4 10",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "2 * (4 - (2 - 10))",
      "4 * ((2 + 10) / 2)",
      "(2 + 10) * (4 / 2)",
      "2 * (2 * (10 - 4))",
      "2 * (10 + (4 / 2))",
      "(10 + 2) * (4 / 2)",
      "2 * (4 + (10 - 2))",
      "2 * ((10 - 4) * 2)",
      "4 * ((10 + 2) / 2)",
      "4 / (2 / (2 + 10))",
      "2 * (10 - (2 - 4))",
      "(10 + 2) / (2 / 4)",
      "((4 + 10) - 2) * 2",
      "((10 + 2) * 4) / 2",
      "4 * (10 - (2 + 2))",
      "(2 + 10) * (4 - 2)",
      "4 * ((10 - 2) - 2)",
      "((10 - 2) - 2) * 4",
      "(10 - (2 - 4)) * 2",
      "(2 + 10) / (2 / 4)",
      "2 * ((10 + 4) - 2)",
      "(10 + (4 / 2)) * 2",
      "(4 - 2) * (2 + 10)",
      "((10 + 4) - 2) * 2",
      "(10 + (4 - 2)) * 2",
      "2 * ((10 - 2) + 4)",
      "(10 - 4) * (2 + 2)",
      "2 * ((4 / 2) + 10)",
      "(10 + 2) * (4 - 2)",
      "((10 + 2) / 2) * 4",
      "((4 - 2) + 10) * 2",
      "(4 / 2) * (2 + 10)",
      "(4 / 2) * (10 + 2)",
      "((10 - 2) + 4) * 2",
      "4 / (2 / (10 + 2))",
      "(4 + (10 - 2)) * 2",
      "2 * ((4 - 2) + 10)",
      "(10 - (2 + 2)) * 4",
      "(4 * (2 + 10)) / 2",
      "(4 - (2 - 10)) * 2",
      "((10 - 4) * 2) * 2",
      "(2 + 2) * (10 - 4)",
      "(10 - 4) * (2 * 2)",
      "4 * (10 - (2 * 2))",
      "(2 * 2) * (10 - 4)",
      "((2 + 10) * 4) / 2",
      "((2 + 10) / 2) * 4",
      "2 * ((4 + 10) - 2)",
      "(4 - 2) * (10 + 2)",
      "(4 * (10 + 2)) / 2",
      "2 * (10 + (4 - 2))",
      "(10 - (2 * 2)) * 4",
      "(2 * (10 - 4)) * 2",
      "((4 / 2) + 10) * 2"
    ]
  },
  "2 2 4 11": {
    "cards": "2 2 4 11",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "((11 / 2) * 4) + 2",
      "2 - ((2 - 4) * 11)",
      "((2 * 11) - 2) + 4",
      "((11 * 2) - 2) + 4",
      "((4 - 2) * 11) + 2",
      "(4 * (11 / 2)) + 2",
      "(4 - 2) + (2 * 11)",
      "2 + (4 / (2 / 11))",
      "2 + ((4 / 2) * 11)",
      "2 + ((11 / 2) * 4)",
      "(11 * 2) - (2 - 4)",
      "(4 - 2) + (11 * 2)",
      "((11 * 4) / 2) + 2",
      "(2 * 11) - (2 - 4)",
      "(11 / (2 / 4)) + 2",
      "((2 * 11) + 4) - 2",
      "2 - (11 * (2 - 4))",
      "(4 / 2) + (11 * 2)",
      "(2 * 11) + (4 - 2)",
      "(2 * 11) + (4 / 2)",
      "2 + ((11 * 4) / 2)",
      "4 + ((11 * 2) - 2)",
      "(4 / (2 / 11)) + 2",
      "2 + (11 * (4 - 2))",
      "((11 * 2) + 4) - 2",
      "((4 / 2) * 11) + 2",
      "2 + (11 / (2 / 4))",
      "(11 * (4 - 2)) + 2",
      "2 + ((4 * 11) / 2)",
      "(11 * 2) + (4 / 2)",
      "2 + (4 * (11 / 2))",
      "((4 * 11) / 2) + 2",
      "(4 + (11 * 2)) - 2",
      "2 + (11 * (4 / 2))",
      "(4 / 2) + (2 * 11)",
      "(11 * 2) + (4 - 2)",
      "4 - (2 - (2 * 11))",
      "2 + ((4 - 2) * 11)",
      "(4 + (2 * 11)) - 2",
      "4 - (2 - (11 * 2))",
      "4 + ((2 * 11) - 2)",
      "(11 * (4 / 2)) + 2"
    ]
  },
  "2 2 4 12": {
    "cards": "2 2 4 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "4 + ((12 - 2) * 2)",
      "4 - ((2 - 12) * 2)",
      "(2 * (2 + 4)) + 12",
      "12 + (2 * (2 + 4))",
      "12 + (2 * (4 + 2))",
      "((2 + 12) * 2) - 4",
      "12 + ((4 + 2) * 2)",
      "4 + (2 * (12 - 2))",
      "12 + ((2 + 4) * 2)",
      "(2 * (2 + 12)) - 4",
      "((2 + 4) * 2) + 12",
      "((12 + 2) * 2) - 4",
      "((4 + 2) * 2) + 12",
      "(2 * (4 + 2)) + 12",
      "(2 * (12 + 2)) - 4",
      "4 - (2 * (2 - 12))",
      "((12 - 2) * 2) + 4",
      "(2 * (12 - 2)) + 4"
    ]
  },
  "2 2 4 13": {
    "cards": "2 2 4 13",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(13 * 2) - (4 - 2)",
      "(2 - 4) + (13 * 2)",
      "(4 * (13 / 2)) - 2",
      "((13 * 2) - 4) + 2",
      "(4 / (2 / 13)) - 2",
      "(13 * (4 - 2)) - 2",
      "2 + ((13 * 2) - 4)",
      "((4 / 2) * 13) - 2",
      "((4 * 13) / 2) - 2",
      "((4 - 2) * 13) - 2",
      "2 - (4 - (13 * 2))",
      "(13 * (4 / 2)) - 2",
      "(2 * 13) + (2 - 4)",
      "2 + ((2 * 13) - 4)",
      "((2 * 13) + 2) - 4",
      "((13 * 2) + 2) - 4",
      "(2 + (2 * 13)) - 4",
      "(13 * 2) - (4 / 2)",
      "(2 + (13 * 2)) - 4",
      "(2 - 4) + (2 * 13)",
      "(13 * 2) + (2 - 4)",
      "(13 / (2 / 4)) - 2",
      "((13 * 4) / 2) - 2",
      "(2 * 13) - (4 - 2)",
      "(2 * 13) - (4 / 2)",
      "((13 / 2) * 4) - 2",
      "((2 * 13) - 4) + 2",
      "2 - (4 - (2 * 13))"
    ]
  },
  "2 2 5 5": {
    "cards": "2 2 5 5",
    "has_solution": "Y",
    "num_solutions": 13,
    "solutions": [
      "(2 + (5 + 5)) * 2",
      "((2 + 5) + 5) * 2",
      "2 * (5 + (2 + 5))",
      "2 * ((2 + 5) + 5)",
      "2 * (2 + (5 + 5))",
      "2 * (5 + (5 + 2))",
      "2 * ((5 + 2) + 5)",
      "(5 * 5) - (2 / 2)",
      "(5 + (2 + 5)) * 2",
      "((5 + 2) + 5) * 2",
      "2 * ((5 + 5) + 2)",
      "((5 + 5) + 2) * 2",
      "(5 + (5 + 2)) * 2"
    ]
  },
  "2 2 5 6": {
    "cards": "2 2 5 6",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(5 - 2) * (2 + 6)",
      "((6 + 5) * 2) + 2",
      "((5 + 6) * 2) + 2",
      "2 + (2 * (5 + 6))",
      "6 * (5 - (2 / 2))",
      "(2 * (6 + 5)) + 2",
      "(5 - 2) * (6 + 2)",
      "(2 + 6) * (5 - 2)",
      "2 + ((6 + 5) * 2)",
      "2 + (2 * (6 + 5))",
      "(5 - (2 / 2)) * 6",
      "(2 * (5 + 6)) + 2",
      "(6 + 2) * (5 - 2)",
      "2 + ((5 + 6) * 2)"
    ]
  },
  "2 2 5 7": {
    "cards": "2 2 5 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(2 * 7) + (5 * 2)",
      "(5 * 2) + (7 * 2)",
      "(2 * 5) + (2 * 7)",
      "(7 * 2) + (5 * 2)",
      "(2 * 7) + (2 * 5)",
      "(7 * 2) + (2 * 5)",
      "(5 * 2) + (2 * 7)",
      "(2 * 5) + (7 * 2)"
    ]
  },
  "2 2 5 8": {
    "cards": "2 2 5 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 * (8 + 5)) - 2",
      "((8 + 5) * 2) - 2",
      "(2 * (5 + 8)) - 2",
      "((5 + 8) * 2) - 2"
    ]
  },
  "2 2 5 9": {
    "cards": "2 2 5 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((5 - 2) + 9) * 2",
      "(5 - (2 - 9)) * 2",
      "(5 + (9 - 2)) * 2",
      "2 * (9 + (5 - 2))",
      "2 * (9 - (2 - 5))",
      "((5 + 9) - 2) * 2",
      "2 * (5 + (9 - 2))",
      "2 * (5 - (2 - 9))",
      "2 * ((9 - 2) + 5)",
      "(9 - (2 - 5)) * 2",
      "2 * ((9 + 5) - 2)",
      "((9 - 2) + 5) * 2",
      "(9 + (5 - 2)) * 2",
      "2 * ((5 - 2) + 9)",
      "((9 + 5) - 2) * 2",
      "2 * ((5 + 9) - 2)"
    ]
  },
  "2 2 5 10": {
    "cards": "2 2 5 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((2 + 5) * 2) + 10",
      "10 * (2 + (2 / 5))",
      "((2 / 5) + 2) * 10",
      "((5 + 2) * 2) + 10",
      "(2 + (2 / 5)) * 10",
      "(2 - 10) * (2 - 5)",
      "10 + (2 * (2 + 5))",
      "((10 * 5) - 2) / 2",
      "((5 * 10) - 2) / 2",
      "10 + (2 * (5 + 2))",
      "10 + ((2 + 5) * 2)",
      "(10 - 2) * (5 - 2)",
      "(2 * (5 + 2)) + 10",
      "10 * ((2 / 5) + 2)",
      "(2 * (2 + 5)) + 10",
      "(5 - 2) * (10 - 2)",
      "(2 - 5) * (2 - 10)",
      "10 + ((5 + 2) * 2)"
    ]
  },
  "2 2 5 11": {
    "cards": "2 2 5 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "2 * (2 * (11 - 5))",
      "(2 * (11 - 5)) * 2",
      "2 * ((11 - 5) * 2)",
      "(11 - 5) * (2 * 2)",
      "(11 - 5) * (2 + 2)",
      "(2 + 2) * (11 - 5)",
      "((11 - 5) * 2) * 2",
      "(2 * 2) * (11 - 5)"
    ]
  },
  "2 2 5 12": {
    "cards": "2 2 5 12",
    "has_solution": "Y",
    "num_solutions": 25,
    "solutions": [
      "12 + ((5 * 2) + 2)",
      "(2 + 12) + (5 * 2)",
      "12 + ((2 * 5) + 2)",
      "2 + (12 + (2 * 5))",
      "12 + (2 + (5 * 2))",
      "((2 * 5) + 12) + 2",
      "(12 + 2) + (5 * 2)",
      "(12 + (5 * 2)) + 2",
      "(12 + (2 * 5)) + 2",
      "(5 * 2) + (12 + 2)",
      "12 + (2 + (2 * 5))",
      "2 + (12 + (5 * 2))",
      "(2 + 12) + (2 * 5)",
      "2 + ((5 * 2) + 12)",
      "(2 * 5) + (2 + 12)",
      "12 / ((5 / 2) - 2)",
      "(2 + (5 * 2)) + 12",
      "(5 * 2) + (2 + 12)",
      "((5 * 2) + 2) + 12",
      "((2 * 5) + 2) + 12",
      "(2 * 5) + (12 + 2)",
      "((5 * 2) + 12) + 2",
      "(12 + 2) + (2 * 5)",
      "(2 + (2 * 5)) + 12",
      "2 + ((2 * 5) + 12)"
    ]
  },
  "2 2 5 13": {
    "cards": "2 2 5 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 6 6": {
    "cards": "2 2 6 6",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(2 + 6) * (6 / 2)",
      "(6 / 2) * (2 + 6)",
      "((2 + 6) * 6) / 2",
      "(2 * 6) + (6 * 2)",
      "(6 / 2) * (6 + 2)",
      "((6 + 2) * 6) / 2",
      "(6 + 2) / (2 / 6)",
      "6 * ((6 + 2) / 2)",
      "(6 * (2 + 6)) / 2",
      "(2 * 6) + (2 * 6)",
      "(2 + 6) / (2 / 6)",
      "6 * ((2 + 6) / 2)",
      "(6 + 2) * (6 / 2)",
      "(6 * 2) + (6 * 2)",
      "((2 + 6) / 2) * 6",
      "((6 + 2) / 2) * 6",
      "(6 * (6 + 2)) / 2",
      "6 / (2 / (2 + 6))",
      "(6 * 2) + (2 * 6)",
      "6 / (2 / (6 + 2))"
    ]
  },
  "2 2 6 7": {
    "cards": "2 2 6 7",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "6 + ((2 + 7) * 2)",
      "((6 + 7) * 2) - 2",
      "((7 + 2) * 2) + 6",
      "(2 * (7 + 6)) - 2",
      "(2 * (2 + 7)) + 6",
      "6 + (2 * (7 + 2))",
      "((2 + 7) * 2) + 6",
      "(2 * (7 + 2)) + 6",
      "((7 + 6) * 2) - 2",
      "6 + (2 * (2 + 7))",
      "(2 * (6 + 7)) - 2",
      "6 + ((7 + 2) * 2)"
    ]
  },
  "2 2 6 8": {
    "cards": "2 2 6 8",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "8 + ((2 + 6) * 2)",
      "2 + (6 + (2 * 8))",
      "(2 + (2 * 8)) + 6",
      "((6 + 2) * 2) + 8",
      "((8 - 2) + 6) * 2",
      "2 + ((8 * 2) + 6)",
      "2 * (8 - (2 - 6))",
      "((2 + 6) * 2) + 8",
      "(6 + 2) + (2 * 8)",
      "6 + (2 + (8 * 2))",
      "((6 + 8) - 2) * 2",
      "(8 * 2) + (2 + 6)",
      "(8 * 2) + (6 + 2)",
      "8 + (2 * (2 + 6))",
      "((8 * 2) + 6) + 2",
      "((8 - 2) - 2) * 6",
      "((8 + 6) - 2) * 2",
      "((2 * 8) + 2) + 6",
      "((2 * 8) + 6) + 2",
      "6 * ((8 - 2) - 2)",
      "(2 * (6 + 2)) + 8",
      "(6 - (2 - 8)) * 2",
      "(2 * (2 + 6)) + 8",
      "(6 + (2 * 8)) + 2",
      "2 * ((6 - 2) + 8)",
      "(6 + 2) + (8 * 2)",
      "(2 - 8) * (2 - 6)",
      "(2 - 6) * (2 - 8)",
      "6 + (2 + (2 * 8))",
      "(6 + (8 * 2)) + 2",
      "2 + (6 + (8 * 2))",
      "2 * ((6 + 8) - 2)",
      "(2 * 8) + (2 + 6)",
      "(6 + (8 - 2)) * 2",
      "2 * (6 - (2 - 8))",
      "8 + (2 * (6 + 2))",
      "(2 + (8 * 2)) + 6",
      "2 + ((2 * 8) + 6)",
      "(2 + 6) + (2 * 8)",
      "((8 * 2) + 2) + 6",
      "(8 - (2 - 6)) * 2",
      "2 * (6 + (8 - 2))",
      "6 * (8 - (2 + 2))",
      "6 + ((8 * 2) + 2)",
      "6 * (8 - (2 * 2))",
      "(8 - (2 * 2)) * 6",
      "(6 - 2) * (8 - 2)",
      "(8 - (2 + 2)) * 6",
      "(8 - 2) * (6 - 2)",
      "(2 * 8) + (6 + 2)",
      "(8 + (6 - 2)) * 2",
      "2 * (8 + (6 - 2))",
      "((6 - 2) + 8) * 2",
      "(2 + 6) + (8 * 2)",
      "2 * ((8 - 2) + 6)",
      "8 + ((6 + 2) * 2)",
      "6 + ((2 * 8) + 2)",
      "2 * ((8 + 6) - 2)"
    ]
  },
  "2 2 6 9": {
    "cards": "2 2 6 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(9 + (6 / 2)) * 2",
      "((2 * 9) - 6) * 2",
      "2 * ((9 * 2) - 6)",
      "((6 / 2) + 9) * 2",
      "((9 * 2) - 6) * 2",
      "2 * (9 + (6 / 2))",
      "2 * ((6 / 2) + 9)",
      "2 * ((2 * 9) - 6)"
    ]
  },
  "2 2 6 10": {
    "cards": "2 2 6 10",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(6 + (10 * 2)) - 2",
      "(10 - 2) / (2 / 6)",
      "6 + ((2 * 10) - 2)",
      "2 + ((6 * 2) + 10)",
      "6 / (2 / (10 - 2))",
      "((2 * 10) - 2) + 6",
      "2 + (10 + (2 * 6))",
      "(2 * 10) - (2 - 6)",
      "(2 + 10) + (6 * 2)",
      "2 + ((2 * 6) + 10)",
      "((6 * 2) + 10) + 2",
      "((10 * 2) + 6) - 2",
      "(2 * 6) + (10 + 2)",
      "2 + (10 + (6 * 2))",
      "(10 + (6 * 2)) + 2",
      "((10 * 2) - 2) + 6",
      "(2 + 10) + (2 * 6)",
      "(10 - 2) * (6 / 2)",
      "(10 + 2) + (6 * 2)",
      "10 + ((6 * 2) + 2)",
      "(10 + (2 * 6)) + 2",
      "(6 - 2) + (10 * 2)",
      "(6 + (2 * 10)) - 2",
      "6 - (2 - (10 * 2))",
      "6 * ((10 - 2) / 2)",
      "(6 * (10 - 2)) / 2",
      "(6 * 2) + (10 + 2)",
      "((6 * 2) + 2) + 10",
      "(2 * 10) + (6 - 2)",
      "(10 * 2) - (2 - 6)",
      "6 + ((10 * 2) - 2)",
      "(6 - 2) + (2 * 10)",
      "((2 * 6) + 2) + 10",
      "(2 + (2 * 6)) + 10",
      "((2 * 6) + 10) + 2",
      "(2 + (6 * 2)) + 10",
      "6 - (2 - (2 * 10))",
      "(2 * 6) + (2 + 10)",
      "10 + (2 + (6 * 2))",
      "(6 * 2) + (2 + 10)",
      "10 + ((2 * 6) + 2)",
      "(6 / 2) * (10 - 2)",
      "(10 * 2) + (6 - 2)",
      "((10 - 2) / 2) * 6",
      "(10 + 2) + (2 * 6)",
      "10 + (2 + (2 * 6))",
      "((2 * 10) + 6) - 2",
      "((10 - 2) * 6) / 2"
    ]
  },
  "2 2 6 11": {
    "cards": "2 2 6 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "6 + (2 * (11 - 2))",
      "((11 - 2) * 2) + 6",
      "6 - ((2 - 11) * 2)",
      "6 + ((11 - 2) * 2)",
      "6 - (2 * (2 - 11))",
      "(2 * (11 - 2)) + 6"
    ]
  },
  "2 2 6 12": {
    "cards": "2 2 6 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(2 * (12 - 6)) * 2",
      "(2 + 2) * (12 - 6)",
      "((12 / 2) - 2) * 6",
      "12 * ((6 - 2) / 2)",
      "(6 - (2 * 2)) * 12",
      "(12 * (6 - 2)) / 2",
      "2 * (6 + (12 / 2))",
      "((12 / 2) + 6) * 2",
      "6 * ((12 / 2) - 2)",
      "((6 - 2) / 2) * 12",
      "2 * ((12 / 2) + 6)",
      "((12 - 6) * 2) * 2",
      "12 * ((6 - 2) - 2)",
      "(12 - 6) * (2 + 2)",
      "2 * (2 * (12 - 6))",
      "12 * (6 - (2 + 2))",
      "((6 - 2) * 12) / 2",
      "(6 + (12 / 2)) * 2",
      "12 / (2 / (6 - 2))",
      "(6 - 2) * (12 / 2)",
      "(6 - 2) / (2 / 12)",
      "(12 / 2) * (6 - 2)",
      "(2 * 2) * (12 - 6)",
      "(12 - 6) * (2 * 2)",
      "(6 - (2 + 2)) * 12",
      "12 * (6 - (2 * 2))",
      "2 * ((12 - 6) * 2)",
      "((6 - 2) - 2) * 12"
    ]
  },
  "2 2 6 13": {
    "cards": "2 2 6 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 * (13 + 2)) - 6",
      "((2 + 13) * 2) - 6",
      "((13 + 2) * 2) - 6",
      "(2 * (2 + 13)) - 6"
    ]
  },
  "2 2 7 7": {
    "cards": "2 2 7 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 - (2 - 7)) * 2",
      "2 * ((7 - 2) + 7)",
      "2 * (7 + (7 - 2))",
      "((7 + 7) - 2) * 2",
      "2 * ((7 + 7) - 2)",
      "(7 + (7 - 2)) * 2",
      "2 * (7 - (2 - 7))",
      "((7 - 2) + 7) * 2"
    ]
  },
  "2 2 7 8": {
    "cards": "2 2 7 8",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(7 - (2 + 2)) * 8",
      "(8 + (7 * 2)) + 2",
      "(2 + 8) + (7 * 2)",
      "(2 + 8) + (2 * 7)",
      "(7 * 2) + (8 + 2)",
      "((2 * 7) + 2) + 8",
      "(2 + (2 * 7)) + 8",
      "(8 + 2) + (2 * 7)",
      "8 * (7 - (2 + 2))",
      "8 + (2 + (2 * 7))",
      "8 * (7 - (2 * 2))",
      "8 * ((7 - 2) - 2)",
      "((2 * 7) + 8) + 2",
      "2 + (8 + (2 * 7))",
      "(7 - (2 * 2)) * 8",
      "(7 * 2) + (2 + 8)",
      "(2 * 7) + (8 + 2)",
      "8 + ((7 * 2) + 2)",
      "2 + (8 + (7 * 2))",
      "(2 + (7 * 2)) + 8",
      "(2 * 7) + (2 + 8)",
      "((7 - 2) - 2) * 8",
      "((7 * 2) + 8) + 2",
      "((7 * 2) + 2) + 8",
      "(8 + 2) + (7 * 2)",
      "8 + ((2 * 7) + 2)",
      "2 + ((7 * 2) + 8)",
      "8 + (2 + (7 * 2))",
      "(8 + (2 * 7)) + 2",
      "2 + ((2 * 7) + 8)"
    ]
  },
  "2 2 7 9": {
    "cards": "2 2 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 7 10": {
    "cards": "2 2 7 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * (7 + (10 / 2))",
      "2 * ((10 / 2) + 7)",
      "((10 / 2) + 7) * 2",
      "(7 + (10 / 2)) * 2"
    ]
  },
  "2 2 7 11": {
    "cards": "2 2 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 7 12": {
    "cards": "2 2 7 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((7 * 2) - 2) + 12",
      "12 + ((2 * 7) - 2)",
      "(7 * 2) + (12 - 2)",
      "12 + ((7 * 2) - 2)",
      "(12 + (2 * 7)) - 2",
      "((2 * 7) + 12) - 2",
      "(2 * 7) + (12 - 2)",
      "(12 - 2) + (7 * 2)",
      "12 - (2 - (2 * 7))",
      "((2 * 7) - 2) + 12",
      "(12 - 2) + (2 * 7)",
      "(2 * 7) - (2 - 12)",
      "((7 * 2) + 12) - 2",
      "(12 + (7 * 2)) - 2",
      "12 - (2 - (7 * 2))",
      "(7 * 2) - (2 - 12)"
    ]
  },
  "2 2 7 13": {
    "cards": "2 2 7 13",
    "has_solution": "Y",
    "num_solutions": 80,
    "solutions": [
      "7 + (2 + (13 + 2))",
      "((13 - 7) * 2) * 2",
      "2 + (13 + (2 + 7))",
      "((13 + 2) + 7) + 2",
      "((13 + 7) + 2) + 2",
      "(2 * (13 - 7)) * 2",
      "(13 + (2 + 7)) + 2",
      "(13 - 7) * (2 + 2)",
      "(7 + 2) + (2 + 13)",
      "(2 + (2 + 13)) + 7",
      "(2 + 13) + (2 + 7)",
      "((2 * 2) + 13) + 7",
      "2 + ((7 + 13) + 2)",
      "((2 + 2) + 7) + 13",
      "2 + ((2 + 13) + 7)",
      "(13 + 7) + (2 * 2)",
      "2 * (2 * (13 - 7))",
      "(13 + (2 + 2)) + 7",
      "(13 + 2) + (2 + 7)",
      "(2 * 2) + (13 + 7)",
      "(13 + (2 * 2)) + 7",
      "(7 + (2 * 2)) + 13",
      "(2 + 2) + (13 + 7)",
      "2 + ((7 + 2) + 13)",
      "(2 + 7) + (2 + 13)",
      "((2 + 2) + 13) + 7",
      "13 + (7 + (2 + 2))",
      "(2 + 7) + (13 + 2)",
      "((13 + 2) + 2) + 7",
      "((2 + 13) + 7) + 2",
      "(7 + 2) + (13 + 2)",
      "(13 + 2) + (7 + 2)",
      "((2 + 7) + 2) + 13",
      "2 + ((13 + 2) + 7)",
      "7 + (13 + (2 * 2))",
      "((7 + 2) + 13) + 2",
      "(7 + (2 + 13)) + 2",
      "2 + (2 + (7 + 13))",
      "2 + (2 + (13 + 7))",
      "13 + ((2 * 2) + 7)",
      "((7 + 13) + 2) + 2",
      "13 + (2 + (7 + 2))",
      "(2 + 2) * (13 - 7)",
      "13 + ((2 + 2) + 7)",
      "(2 * 2) * (13 - 7)",
      "2 + (7 + (2 + 13))",
      "((7 + 2) + 2) + 13",
      "(13 - 7) * (2 * 2)",
      "((2 * 2) + 7) + 13",
      "7 + ((2 + 2) + 13)",
      "(2 + (2 + 7)) + 13",
      "2 + (7 + (13 + 2))",
      "(7 + 13) + (2 * 2)",
      "2 + (13 + (7 + 2))",
      "(2 + (7 + 2)) + 13",
      "(7 + 13) + (2 + 2)",
      "2 + ((13 + 7) + 2)",
      "13 + ((2 + 7) + 2)",
      "(2 * 2) + (7 + 13)",
      "2 + ((2 + 7) + 13)",
      "7 + (2 + (2 + 13))",
      "(7 + (2 + 2)) + 13",
      "13 + ((7 + 2) + 2)",
      "7 + ((2 + 13) + 2)",
      "(2 + (13 + 7)) + 2",
      "((2 + 13) + 2) + 7",
      "7 + (13 + (2 + 2))",
      "(2 + 13) + (7 + 2)",
      "13 + (7 + (2 * 2))",
      "((2 + 7) + 13) + 2",
      "(13 + (7 + 2)) + 2",
      "(7 + (13 + 2)) + 2",
      "(13 + 7) + (2 + 2)",
      "7 + ((13 + 2) + 2)",
      "(2 + (13 + 2)) + 7",
      "(2 + 2) + (7 + 13)",
      "13 + (2 + (2 + 7))",
      "7 + ((2 * 2) + 13)",
      "2 * ((13 - 7) * 2)",
      "(2 + (7 + 13)) + 2"
    ]
  },
  "2 2 8 8": {
    "cards": "2 2 8 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(8 - 2) * (8 / 2)",
      "(8 / 2) * (8 - 2)",
      "(2 * (8 * 2)) - 8",
      "2 * (8 + (8 / 2))",
      "(8 * (2 + 2)) - 8",
      "8 / (2 / (8 - 2))",
      "(8 + (8 / 2)) * 2",
      "((2 * 8) * 2) - 8",
      "(8 * (2 * 2)) - 8",
      "((2 * 2) * 8) - 8",
      "((8 - 2) * 8) / 2",
      "8 * ((8 - 2) / 2)",
      "(8 * (8 - 2)) / 2",
      "(8 - 2) / (2 / 8)",
      "(2 * (2 * 8)) - 8",
      "((8 * 2) * 2) - 8",
      "((8 / 2) + 8) * 2",
      "((8 - 2) / 2) * 8",
      "((2 + 2) * 8) - 8",
      "2 * ((8 / 2) + 8)"
    ]
  },
  "2 2 8 9": {
    "cards": "2 2 8 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(8 + (9 * 2)) - 2",
      "(2 * 9) - (2 - 8)",
      "(8 - 2) + (9 * 2)",
      "8 + ((2 * 9) - 2)",
      "(9 * 2) + (8 - 2)",
      "8 - (2 - (9 * 2))",
      "8 + ((9 * 2) - 2)",
      "(8 - 2) + (2 * 9)",
      "8 - (2 - (2 * 9))",
      "((2 * 9) - 2) + 8",
      "(9 * 2) - (2 - 8)",
      "((2 * 9) + 8) - 2",
      "((9 * 2) - 2) + 8",
      "((9 * 2) + 8) - 2",
      "(2 * 9) + (8 - 2)",
      "(8 + (2 * 9)) - 2"
    ]
  },
  "2 2 8 10": {
    "cards": "2 2 8 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "2 * ((10 * 2) - 8)",
      "(10 - 2) + (2 * 8)",
      "(10 + (2 * 8)) - 2",
      "((2 * 8) - 2) + 10",
      "((10 - 2) * 2) + 8",
      "(2 * 8) - (2 - 10)",
      "((8 * 2) - 2) + 10",
      "(10 * 2) + (8 / 2)",
      "8 - ((2 - 10) * 2)",
      "(2 * (10 - 2)) + 8",
      "(2 * 10) + (8 / 2)",
      "(10 + (8 * 2)) - 2",
      "8 * ((10 / 2) - 2)",
      "(8 / 2) + (2 * 10)",
      "(8 / 2) + (10 * 2)",
      "((2 * 10) - 8) * 2",
      "10 - (2 - (8 * 2))",
      "((10 * 2) - 8) * 2",
      "8 - (2 * (2 - 10))",
      "(8 * 2) + (10 - 2)",
      "10 - (2 - (2 * 8))",
      "8 + ((10 - 2) * 2)",
      "(2 * 8) + (10 - 2)",
      "(10 - 2) + (8 * 2)",
      "(8 * 2) - (2 - 10)",
      "10 + ((8 * 2) - 2)",
      "((10 / 2) - 2) * 8",
      "((8 * 2) + 10) - 2",
      "((2 * 8) + 10) - 2",
      "2 * ((2 * 10) - 8)",
      "10 + ((2 * 8) - 2)",
      "8 + (2 * (10 - 2))"
    ]
  },
  "2 2 8 11": {
    "cards": "2 2 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 8 12": {
    "cards": "2 2 8 12",
    "has_solution": "Y",
    "num_solutions": 118,
    "solutions": [
      "8 + ((2 + 12) + 2)",
      "12 / ((2 / 8) * 2)",
      "((8 - 2) * 2) + 12",
      "12 + ((2 + 8) + 2)",
      "(2 + 2) + (12 + 8)",
      "12 + ((8 + 2) + 2)",
      "((12 + 8) + 2) + 2",
      "(12 * 8) / (2 + 2)",
      "(2 + 8) + (2 + 12)",
      "(8 * 12) / (2 * 2)",
      "((2 + 8) + 2) + 12",
      "12 + (8 + (2 + 2))",
      "8 * (12 / (2 + 2))",
      "8 / (2 * (2 / 12))",
      "(2 + (2 + 12)) + 8",
      "(2 * 2) + (12 + 8)",
      "(12 * 8) / (2 * 2)",
      "12 + ((8 - 2) * 2)",
      "((2 + 2) + 12) + 8",
      "(8 * (12 / 2)) / 2",
      "8 + (2 + (12 + 2))",
      "(12 + 2) + (2 + 8)",
      "2 + (8 + (12 + 2))",
      "12 / (2 * (2 / 8))",
      "((8 / 2) / 2) * 12",
      "(2 + (8 + 12)) + 2",
      "(2 + 12) + (2 + 8)",
      "(8 + (2 + 2)) + 12",
      "((2 + 12) + 2) + 8",
      "8 + (12 + (2 + 2))",
      "(8 + 12) + (2 * 2)",
      "((2 * 2) + 8) + 12",
      "(12 / (2 + 2)) * 8",
      "(12 + 8) + (2 * 2)",
      "(8 / (2 + 2)) * 12",
      "12 / (2 / (8 / 2))",
      "(2 + (2 + 8)) + 12",
      "8 / ((2 * 2) / 12)",
      "12 + (2 * (8 - 2))",
      "2 + (12 + (2 + 8))",
      "12 + (8 + (2 * 2))",
      "(12 + 8) + (2 + 2)",
      "12 * ((8 / 2) - 2)",
      "(2 * (8 - 2)) + 12",
      "(2 + 2) + (8 + 12)",
      "(8 * 12) / (2 + 2)",
      "(12 + (2 + 2)) + 8",
      "((12 + 2) + 2) + 8",
      "8 * ((12 / 2) / 2)",
      "(8 / 2) / (2 / 12)",
      "8 / (2 / (12 / 2))",
      "12 * (8 / (2 + 2))",
      "8 * (12 / (2 * 2))",
      "12 - (2 * (2 - 8))",
      "12 + ((2 * 2) + 8)",
      "8 + (2 + (2 + 12))",
      "(8 + (12 + 2)) + 2",
      "(12 + (8 + 2)) + 2",
      "(12 / 2) / (2 / 8)",
      "(12 / (2 / 8)) / 2",
      "2 + ((2 + 12) + 8)",
      "8 + ((2 * 2) + 12)",
      "2 + (2 + (12 + 8))",
      "(12 + (2 + 8)) + 2",
      "(8 / (2 * 2)) * 12",
      "((2 + 8) + 12) + 2",
      "(12 / 2) * (8 / 2)",
      "12 + (2 + (8 + 2))",
      "12 + ((2 + 2) + 8)",
      "(2 + 12) + (8 + 2)",
      "(8 + (2 + 12)) + 2",
      "((8 + 2) + 2) + 12",
      "2 + (8 + (2 + 12))",
      "(8 + 12) + (2 + 2)",
      "2 + ((12 + 2) + 8)",
      "(12 * (8 / 2)) / 2",
      "(12 / (2 * 2)) * 8",
      "2 + (2 + (8 + 12))",
      "8 / ((2 / 12) * 2)",
      "(2 + (12 + 8)) + 2",
      "8 + ((12 + 2) + 2)",
      "(8 + (2 * 2)) + 12",
      "2 + (12 + (8 + 2))",
      "((2 * 2) + 12) + 8",
      "8 + (12 + (2 * 2))",
      "(2 + (12 + 2)) + 8",
      "((8 / 2) * 12) / 2",
      "12 / ((2 * 2) / 8)",
      "12 * (8 / (2 * 2))",
      "((12 / 2) * 8) / 2",
      "((2 + 2) + 8) + 12",
      "((8 * 12) / 2) / 2",
      "(2 + (8 + 2)) + 12",
      "8 + ((2 + 2) + 12)",
      "12 / ((2 + 2) / 8)",
      "2 + ((8 + 2) + 12)",
      "((12 * 8) / 2) / 2",
      "2 + ((12 + 8) + 2)",
      "((8 / 2) - 2) * 12",
      "((8 + 2) + 12) + 2",
      "(8 + 2) + (2 + 12)",
      "((8 + 12) + 2) + 2",
      "((12 / 2) / 2) * 8",
      "8 / ((2 + 2) / 12)",
      "(8 / 2) * (12 / 2)",
      "(12 + (2 * 2)) + 8",
      "2 + ((8 + 12) + 2)",
      "((12 + 2) + 8) + 2",
      "(2 * 2) + (8 + 12)",
      "((2 + 12) + 8) + 2",
      "(8 / (2 / 12)) / 2",
      "12 * ((8 / 2) / 2)",
      "(2 + 8) + (12 + 2)",
      "12 - ((2 - 8) * 2)",
      "(8 + 2) + (12 + 2)",
      "(12 + 2) + (8 + 2)",
      "12 + (2 + (2 + 8))",
      "2 + ((2 + 8) + 12)"
    ]
  },
  "2 2 8 13": {
    "cards": "2 2 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 9 9": {
    "cards": "2 2 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 9 10": {
    "cards": "2 2 9 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "10 - (2 * (2 - 9))",
      "10 + (2 * (9 - 2))",
      "(2 * (9 - 2)) + 10",
      "((9 - 2) * 2) + 10",
      "10 - ((2 - 9) * 2)",
      "10 + ((9 - 2) * 2)"
    ]
  },
  "2 2 9 11": {
    "cards": "2 2 9 11",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "(9 + (2 + 11)) + 2",
      "11 + (2 + (9 + 2))",
      "(2 * 2) + (9 + 11)",
      "9 + ((11 + 2) + 2)",
      "(2 * 2) + (11 + 9)",
      "2 + ((2 + 11) + 9)",
      "(11 + 9) + (2 * 2)",
      "11 + (9 + (2 + 2))",
      "2 + (9 + (2 + 11))",
      "2 + ((9 + 11) + 2)",
      "(2 + (2 + 11)) + 9",
      "(2 + 11) + (9 + 2)",
      "11 + (9 + (2 * 2))",
      "11 + ((9 + 2) + 2)",
      "((2 + 9) + 11) + 2",
      "9 + ((2 + 2) + 11)",
      "(9 + 11) + (2 + 2)",
      "(11 + 9) + (2 + 2)",
      "(11 + (9 + 2)) + 2",
      "9 + ((2 * 2) + 11)",
      "((11 + 2) + 2) + 9",
      "(11 + 2) + (9 + 2)",
      "((2 + 9) + 2) + 11",
      "((9 + 11) + 2) + 2",
      "9 + (11 + (2 + 2))",
      "(11 + (2 + 2)) + 9",
      "2 + (2 + (9 + 11))",
      "(2 + (11 + 9)) + 2",
      "11 + ((2 * 2) + 9)",
      "9 + (11 + (2 * 2))",
      "2 + ((11 + 9) + 2)",
      "2 + (11 + (2 + 9))",
      "((2 * 2) + 9) + 11",
      "(2 + 11) + (2 + 9)",
      "2 + ((11 + 2) + 9)",
      "2 + (11 + (9 + 2))",
      "9 + ((2 + 11) + 2)",
      "(2 + (9 + 11)) + 2",
      "((11 + 9) + 2) + 2",
      "(9 + (2 + 2)) + 11",
      "9 + (2 + (11 + 2))",
      "(11 + (2 * 2)) + 9",
      "((2 + 2) + 11) + 9",
      "((9 + 2) + 11) + 2",
      "((2 + 2) + 9) + 11",
      "2 + (9 + (11 + 2))",
      "(11 + 2) + (2 + 9)",
      "((2 + 11) + 9) + 2",
      "(9 + (11 + 2)) + 2",
      "(2 + 9) + (2 + 11)",
      "11 + ((2 + 2) + 9)",
      "(2 + (2 + 9)) + 11",
      "2 + ((2 + 9) + 11)",
      "((9 + 2) + 2) + 11",
      "((2 * 2) + 11) + 9",
      "(2 + (9 + 2)) + 11",
      "(2 + 2) + (11 + 9)",
      "((11 + 2) + 9) + 2",
      "(11 + (2 + 9)) + 2",
      "(2 + 9) + (11 + 2)",
      "2 + ((9 + 2) + 11)",
      "(2 + (11 + 2)) + 9",
      "11 + ((2 + 9) + 2)",
      "(9 + 2) + (11 + 2)",
      "2 + (2 + (11 + 9))",
      "(9 + 2) + (2 + 11)",
      "(9 + (2 * 2)) + 11",
      "9 + (2 + (2 + 11))",
      "11 + (2 + (2 + 9))",
      "(9 + 11) + (2 * 2)",
      "((2 + 11) + 2) + 9",
      "(2 + 2) + (9 + 11)"
    ]
  },
  "2 2 9 12": {
    "cards": "2 2 9 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(2 * (9 * 2)) - 12",
      "((2 * 2) * 9) - 12",
      "((2 + 2) * 9) - 12",
      "(12 / 2) + (9 * 2)",
      "(2 * (2 * 9)) - 12",
      "(9 * 2) + (12 / 2)",
      "(12 / 2) + (2 * 9)",
      "(9 * (2 + 2)) - 12",
      "(9 * (2 * 2)) - 12",
      "((2 * 9) * 2) - 12",
      "((9 * 2) * 2) - 12",
      "(2 * 9) + (12 / 2)"
    ]
  },
  "2 2 9 13": {
    "cards": "2 2 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 10 10": {
    "cards": "2 2 10 10",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "((2 + 2) + 10) + 10",
      "(10 + 2) + (10 + 2)",
      "(2 + (10 + 10)) + 2",
      "((2 * 2) + 10) + 10",
      "10 + ((10 + 2) + 2)",
      "(10 + (2 + 2)) + 10",
      "(2 + (10 + 2)) + 10",
      "2 + (2 + (10 + 10))",
      "(2 * 2) + (10 + 10)",
      "2 + (10 + (10 + 2))",
      "(2 + 10) + (10 + 2)",
      "2 + ((10 + 10) + 2)",
      "((2 + 10) + 10) + 2",
      "(2 + 2) + (10 + 10)",
      "(10 + 2) + (2 + 10)",
      "(10 + 10) + (2 + 2)",
      "2 + ((10 + 2) + 10)",
      "10 + (2 + (10 + 2))",
      "2 + ((2 + 10) + 10)",
      "((10 + 2) + 2) + 10",
      "(10 + 10) + (2 * 2)",
      "10 + (10 + (2 + 2))",
      "(2 + (2 + 10)) + 10",
      "10 + (2 + (2 + 10))",
      "(10 + (10 + 2)) + 2",
      "((10 + 10) + 2) + 2",
      "10 + (10 + (2 * 2))",
      "(10 + (2 + 10)) + 2",
      "(10 + (2 * 2)) + 10",
      "((2 + 10) + 2) + 10",
      "10 + ((2 + 10) + 2)",
      "10 + ((2 * 2) + 10)",
      "(2 + 10) + (2 + 10)",
      "2 + (10 + (2 + 10))",
      "10 + ((2 + 2) + 10)",
      "((10 + 2) + 10) + 2"
    ]
  },
  "2 2 10 11": {
    "cards": "2 2 10 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((11 * 2) - 10) * 2",
      "((2 * 11) - 10) * 2",
      "2 * ((11 * 2) - 10)",
      "2 * ((2 * 11) - 10)"
    ]
  },
  "2 2 10 12": {
    "cards": "2 2 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 2 10 13": {
    "cards": "2 2 10 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "10 + (13 + (2 / 2))",
      "(2 / 2) + (10 + 13)",
      "(2 / 2) + (13 + 10)",
      "((2 / 2) + 13) + 10",
      "(10 + 13) + (2 / 2)",
      "10 + ((2 / 2) + 13)",
      "(13 + 10) + (2 / 2)",
      "(10 + (2 / 2)) + 13",
      "13 + ((2 / 2) + 10)",
      "((2 / 2) + 10) + 13",
      "13 + (10 + (2 / 2))",
      "(13 + (2 / 2)) + 10"
    ]
  },
  "2 2 11 11": {
    "cards": "2 2 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((2 / 11) + 2) * 11",
      "(2 + (2 / 11)) * 11",
      "11 * ((2 / 11) + 2)",
      "11 * (2 + (2 / 11))"
    ]
  },
  "2 2 11 12": {
    "cards": "2 2 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "12 + ((2 / 2) + 11)",
      "((2 / 2) + 12) + 11",
      "(11 + (2 / 2)) + 12",
      "((2 / 2) + 11) + 12",
      "(2 / 2) + (11 + 12)",
      "11 + ((2 / 2) + 12)",
      "(12 + 11) + (2 / 2)",
      "12 + (11 + (2 / 2))",
      "(12 + (2 / 2)) + 11",
      "(2 / 2) + (12 + 11)",
      "(11 + 12) + (2 / 2)",
      "11 + (12 + (2 / 2))"
    ]
  },
  "2 2 11 13": {
    "cards": "2 2 11 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "2 + (11 + (13 - 2))",
      "(13 * (2 / 2)) + 11",
      "((13 - 2) + 2) + 11",
      "(2 * (13 + 11)) / 2",
      "(11 + 2) - (2 - 13)",
      "(13 + 11) * (2 / 2)",
      "(13 + (11 + 2)) - 2",
      "(2 - 2) + (13 + 11)",
      "(13 + (2 - 2)) + 11",
      "11 + ((2 + 13) - 2)",
      "(11 + (2 - 2)) + 13",
      "((13 + 11) * 2) / 2",
      "((2 * 13) / 2) + 11",
      "((13 + 11) + 2) - 2",
      "(2 / (2 / 13)) + 11",
      "(11 - 2) + (13 + 2)",
      "(11 + 2) + (13 - 2)",
      "11 - (2 - (2 + 13))",
      "((13 + 2) + 11) - 2",
      "2 - (2 - (13 + 11))",
      "2 * ((13 + 11) / 2)",
      "((13 / 2) * 2) + 11",
      "(2 / (2 / 11)) + 13",
      "(13 + 2) + (11 - 2)",
      "(2 + (13 - 2)) + 11",
      "(11 + 13) * (2 / 2)",
      "((13 * 2) / 2) + 11",
      "13 + ((11 / 2) * 2)",
      "((2 + 11) + 13) - 2",
      "11 - (2 - (13 + 2))",
      "11 - ((2 - 13) - 2)",
      "(11 - (2 - 2)) + 13",
      "(2 - (2 - 13)) + 11",
      "((2 / 2) * 13) + 11",
      "11 + (13 + (2 - 2))",
      "((2 + 11) - 2) + 13",
      "(2 + 13) + (11 - 2)",
      "(2 + (13 + 11)) - 2",
      "((13 + 2) - 2) + 11",
      "13 - (2 - (2 + 11))",
      "(13 - (2 - 11)) + 2",
      "2 - (2 - (11 + 13))",
      "(13 + 11) / (2 / 2)",
      "((11 - 2) + 13) + 2",
      "(11 + 13) - (2 - 2)",
      "13 + (2 * (11 / 2))",
      "13 + (11 / (2 / 2))",
      "2 * ((11 + 13) / 2)",
      "11 + (13 / (2 / 2))",
      "(13 - 2) + (2 + 11)",
      "(2 * (13 / 2)) + 11",
      "(2 / 2) * (11 + 13)",
      "((2 - 2) + 11) + 13",
      "((13 + 11) - 2) + 2",
      "13 + ((11 - 2) + 2)",
      "(2 + (11 - 2)) + 13",
      "11 + ((2 * 13) / 2)",
      "11 + ((2 - 2) + 13)",
      "2 / (2 / (11 + 13))",
      "2 - ((2 - 11) - 13)",
      "((11 + 13) / 2) * 2",
      "2 + ((11 - 2) + 13)",
      "(11 / (2 / 2)) + 13",
      "2 + (13 + (11 - 2))",
      "(13 - 2) + (11 + 2)",
      "13 + (2 / (2 / 11))",
      "((11 - 2) + 2) + 13",
      "(11 * (2 / 2)) + 13",
      "(13 / (2 / 2)) + 11",
      "11 + (2 + (13 - 2))",
      "((11 * 2) / 2) + 13",
      "13 + ((11 + 2) - 2)",
      "((11 + 13) + 2) - 2",
      "11 + (13 - (2 - 2))",
      "13 + (2 + (11 - 2))",
      "((11 + 13) * 2) / 2",
      "((11 + 2) - 2) + 13",
      "(13 + (2 + 11)) - 2",
      "(13 + 11) + (2 - 2)",
      "13 + ((11 * 2) / 2)",
      "13 + (2 - (2 - 11))",
      "(2 * (11 + 13)) / 2",
      "(11 + 13) + (2 - 2)",
      "(11 - (2 - 13)) + 2",
      "(13 + 2) - (2 - 11)",
      "11 + (2 * (13 / 2))",
      "((2 + 13) + 11) - 2",
      "11 + ((13 * 2) / 2)",
      "13 + (11 - (2 - 2))",
      "((2 * 11) / 2) + 13",
      "2 + ((13 - 2) + 11)",
      "(2 - (2 - 11)) + 13",
      "2 - ((2 - 13) - 11)",
      "13 + ((2 + 11) - 2)",
      "11 + (13 * (2 / 2))",
      "((2 + 13) - 2) + 11",
      "11 + (2 - (2 - 13))",
      "(2 / 2) * (13 + 11)",
      "(11 + (2 + 13)) - 2",
      "(13 + (11 - 2)) + 2",
      "13 + ((2 - 2) + 11)",
      "13 + (11 * (2 / 2))",
      "13 - ((2 - 11) - 2)",
      "((11 + 13) - 2) + 2",
      "13 + (11 + (2 - 2))",
      "2 + ((13 + 11) - 2)",
      "((11 / 2) * 2) + 13",
      "13 + ((2 / 2) * 11)",
      "11 + ((13 / 2) * 2)",
      "(2 + (11 + 13)) - 2",
      "(2 + 11) + (13 - 2)",
      "(2 + 13) - (2 - 11)",
      "(11 + 13) / (2 / 2)",
      "((13 - 2) + 11) + 2",
      "11 + (2 / (2 / 13))",
      "((2 / 2) * 11) + 13",
      "(2 - 2) + (11 + 13)",
      "(2 * (11 / 2)) + 13",
      "13 + ((2 * 11) / 2)",
      "(13 - (2 - 2)) + 11",
      "(11 - 2) + (2 + 13)",
      "(11 + (13 + 2)) - 2",
      "2 + (11 - (2 - 13))",
      "(2 + 11) - (2 - 13)",
      "2 / (2 / (13 + 11))",
      "13 - (2 - (11 + 2))",
      "(11 + (13 - 2)) + 2",
      "(13 + 11) - (2 - 2)",
      "2 + (13 - (2 - 11))",
      "13 - ((2 - 2) - 11)",
      "11 + ((13 + 2) - 2)",
      "((13 + 11) / 2) * 2",
      "((11 + 2) + 13) - 2",
      "11 + ((13 - 2) + 2)",
      "11 - ((2 - 2) - 13)",
      "11 + ((2 / 2) * 13)",
      "((2 - 2) + 13) + 11",
      "2 + ((11 + 13) - 2)"
    ]
  },
  "2 2 12 12": {
    "cards": "2 2 12 12",
    "has_solution": "Y",
    "num_solutions": 73,
    "solutions": [
      "((12 + 2) + 12) - 2",
      "12 - (2 - (12 + 2))",
      "12 + ((2 + 12) - 2)",
      "(2 + (12 + 12)) - 2",
      "((2 * 12) - 12) * 2",
      "(12 - 2) + (12 + 2)",
      "((2 - 2) + 12) + 12",
      "2 + (12 + (12 - 2))",
      "2 * ((12 * 2) - 12)",
      "(12 + 12) + (2 - 2)",
      "(12 + 12) * (2 / 2)",
      "(12 + (12 + 2)) - 2",
      "((12 / 2) * 2) + 12",
      "2 / (2 / (12 + 12))",
      "2 + ((12 + 12) - 2)",
      "12 - ((2 - 12) - 2)",
      "2 + (12 - (2 - 12))",
      "12 + ((12 * 2) / 2)",
      "((12 + 12) * 2) / 2",
      "(12 * (2 / 2)) + 12",
      "((12 + 12) - 2) + 2",
      "((2 * 12) / 2) + 12",
      "(12 + 12) / (2 / 2)",
      "((12 * 2) / 2) + 12",
      "(12 / (2 / 2)) + 12",
      "(12 - 2) + (2 + 12)",
      "(12 + (2 - 2)) + 12",
      "12 + (12 / (2 / 2))",
      "((2 + 12) + 12) - 2",
      "((12 - 2) + 12) + 2",
      "(12 + (2 + 12)) - 2",
      "(12 + 12) - (2 - 2)",
      "12 + (12 + (2 - 2))",
      "12 + (12 - (2 - 2))",
      "(2 * (12 / 2)) + 12",
      "2 - ((2 - 12) - 12)",
      "12 + (2 / (2 / 12))",
      "((12 + 2) - 2) + 12",
      "((12 * 2) - 12) * 2",
      "12 + ((2 - 2) + 12)",
      "2 + ((12 - 2) + 12)",
      "2 * ((2 * 12) - 12)",
      "(12 + 2) - (2 - 12)",
      "12 - (2 - (2 + 12))",
      "2 * ((12 + 12) / 2)",
      "(2 - (2 - 12)) + 12",
      "12 + (2 - (2 - 12))",
      "((2 / 2) * 12) + 12",
      "(2 * (12 + 12)) / 2",
      "12 + ((2 / 2) * 12)",
      "(2 / 2) * (12 + 12)",
      "(2 + 12) + (12 - 2)",
      "12 + ((2 * 12) / 2)",
      "(12 + 2) + (12 - 2)",
      "(12 + (12 - 2)) + 2",
      "(2 + 12) - (2 - 12)",
      "((2 + 12) - 2) + 12",
      "(2 + (12 - 2)) + 12",
      "12 + (2 * (12 / 2))",
      "12 + (2 + (12 - 2))",
      "12 + ((12 - 2) + 2)",
      "(2 / (2 / 12)) + 12",
      "((12 + 12) / 2) * 2",
      "12 + ((12 + 2) - 2)",
      "(2 - 2) + (12 + 12)",
      "((12 - 2) + 2) + 12",
      "2 - (2 - (12 + 12))",
      "(12 - (2 - 12)) + 2",
      "((12 + 12) + 2) - 2",
      "12 + ((12 / 2) * 2)",
      "12 - ((2 - 2) - 12)",
      "(12 - (2 - 2)) + 12",
      "12 + (12 * (2 / 2))"
    ]
  },
  "2 2 12 13": {
    "cards": "2 2 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 + (13 - (2 / 2))",
      "(12 - (2 / 2)) + 13",
      "(12 + 13) - (2 / 2)",
      "13 + (12 - (2 / 2))",
      "(13 + 12) - (2 / 2)",
      "12 - ((2 / 2) - 13)",
      "13 - ((2 / 2) - 12)",
      "(13 - (2 / 2)) + 12"
    ]
  },
  "2 2 13 13": {
    "cards": "2 2 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(2 - (2 / 13)) * 13",
      "13 * (2 - (2 / 13))"
    ]
  },
  "2 3 3 3": {
    "cards": "2 3 3 3",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(2 + (3 + 3)) * 3",
      "((3 * 3) + 3) * 2",
      "((3 + 2) + 3) * 3",
      "2 * ((3 * 3) + 3)",
      "((3 + 3) + 2) * 3",
      "(3 + (3 * 3)) * 2",
      "2 * (3 + (3 * 3))",
      "3 * ((3 + 3) + 2)",
      "((2 + 3) + 3) * 3",
      "3 * (3 + (2 + 3))",
      "(3 + (3 + 2)) * 3",
      "3 * (2 + (3 + 3))",
      "3 * ((3 + 2) + 3)",
      "3 * (3 + (3 + 2))",
      "3 * ((2 + 3) + 3)",
      "(3 + (2 + 3)) * 3"
    ]
  },
  "2 3 3 4": {
    "cards": "2 3 3 4",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 3 3 5": {
    "cards": "2 3 3 5",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "3 + ((5 + 2) * 3)",
      "(3 * (2 + 5)) + 3",
      "2 * ((3 * 5) - 3)",
      "3 + (3 * (5 + 2))",
      "3 + ((2 + 5) * 3)",
      "((5 + 2) * 3) + 3",
      "(3 * (5 + 2)) + 3",
      "2 * ((5 * 3) - 3)",
      "3 + (3 * (2 + 5))",
      "((2 + 5) * 3) + 3",
      "((3 * 5) - 3) * 2",
      "((5 * 3) - 3) * 2"
    ]
  },
  "2 3 3 6": {
    "cards": "2 3 3 6",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "6 + (3 * (3 * 2))",
      "(3 * 6) + (2 * 3)",
      "(3 * (3 * 2)) + 6",
      "(2 * (3 * 3)) + 6",
      "2 * (3 + (6 + 3))",
      "2 * ((3 + 3) + 6)",
      "(3 + 3) * (6 - 2)",
      "(6 * 3) + (2 * 3)",
      "(6 * 3) + (3 * 2)",
      "(3 * 6) + (3 * 2)",
      "((3 * 3) * 2) + 6",
      "(3 * (2 * 3)) + 6",
      "6 * ((3 + 3) - 2)",
      "(6 - 2) * (3 + 3)",
      "(2 * 3) + (3 * 6)",
      "(6 + (3 + 3)) * 2",
      "((2 * 3) * 3) + 6",
      "2 * (3 + (3 + 6))",
      "((3 + 6) + 3) * 2",
      "((6 + 3) + 3) * 2",
      "(3 + (3 + 6)) * 2",
      "(3 * 2) + (3 * 6)",
      "((3 - 2) + 3) * 6",
      "2 * ((3 + 6) + 3)",
      "6 + (2 * (3 * 3))",
      "2 * (6 + (3 + 3))",
      "(2 * 3) + (6 * 3)",
      "6 + ((2 * 3) * 3)",
      "(3 - (2 - 3)) * 6",
      "6 * (3 + (3 - 2))",
      "(3 + (3 - 2)) * 6",
      "6 * ((3 - 2) + 3)",
      "6 + ((3 * 3) * 2)",
      "6 + (3 * (2 * 3))",
      "6 * (3 - (2 - 3))",
      "((3 + 3) + 6) * 2",
      "((3 * 2) * 3) + 6",
      "(3 + (6 + 3)) * 2",
      "6 + ((3 * 2) * 3)",
      "2 * ((6 + 3) + 3)",
      "(3 * 2) + (6 * 3)",
      "((3 + 3) - 2) * 6"
    ]
  },
  "2 3 3 7": {
    "cards": "2 3 3 7",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(7 - (2 - 3)) * 3",
      "2 * ((7 - 3) * 3)",
      "(3 - (2 - 7)) * 3",
      "(7 - 3) * (2 * 3)",
      "((3 - 2) + 7) * 3",
      "(3 * (7 - 3)) * 2",
      "((7 + 2) * 3) - 3",
      "((7 - 3) * 3) * 2",
      "((7 - 2) + 3) * 3",
      "(2 * (7 - 3)) * 3",
      "3 * ((7 - 2) + 3)",
      "2 * (3 * (7 - 3))",
      "(3 * (7 + 2)) - 3",
      "3 * (2 * (7 - 3))",
      "3 * ((7 - 3) * 2)",
      "(7 + (3 - 2)) * 3",
      "(2 * 3) * (7 - 3)",
      "((2 + 7) * 3) - 3",
      "(7 - 3) * (3 * 2)",
      "3 * (7 + (3 - 2))",
      "3 * (3 + (7 - 2))",
      "3 * (3 - (2 - 7))",
      "(3 * (2 + 7)) - 3",
      "3 * (7 - (2 - 3))",
      "(3 * 2) * (7 - 3)",
      "3 * ((3 + 7) - 2)",
      "3 * ((7 + 3) - 2)",
      "((3 + 7) - 2) * 3",
      "3 * ((3 - 2) + 7)",
      "((7 - 3) * 2) * 3",
      "((7 + 3) - 2) * 3",
      "(3 + (7 - 2)) * 3"
    ]
  },
  "2 3 3 8": {
    "cards": "2 3 3 8",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "8 * ((3 - 2) * 3)",
      "((2 * 3) - 3) * 8",
      "8 * ((2 * 3) - 3)",
      "8 * (3 / (3 - 2))",
      "((3 - 2) * 3) * 8",
      "(3 * 8) * (3 - 2)",
      "(8 / (3 - 2)) * 3",
      "(8 * (3 - 2)) * 3",
      "8 / (2 / (3 + 3))",
      "(8 * 3) / (3 - 2)",
      "(2 + (3 / 3)) * 8",
      "8 * ((3 / 3) + 2)",
      "((3 + 3) / 2) * 8",
      "3 / ((3 - 2) / 8)",
      "(3 - 2) * (8 * 3)",
      "(3 * (3 - 2)) * 8",
      "8 * ((3 + 3) / 2)",
      "(3 - 2) * (3 * 8)",
      "((3 / 3) + 2) * 8",
      "((3 * 2) - 3) * 8",
      "(3 + 3) * (8 / 2)",
      "8 * ((3 * 2) - 3)",
      "(3 * 8) / (3 - 2)",
      "((3 - 2) * 8) * 3",
      "8 * (2 + (3 / 3))",
      "(3 / (3 - 2)) * 8",
      "3 * (8 * (3 - 2))",
      "(3 + 3) / (2 / 8)",
      "(8 * (3 + 3)) / 2",
      "8 * (3 * (3 - 2))",
      "((3 + 3) * 8) / 2",
      "(8 * 3) * (3 - 2)",
      "(8 / 2) * (3 + 3)",
      "8 / ((3 - 2) / 3)",
      "3 * ((3 - 2) * 8)",
      "3 * (8 / (3 - 2))"
    ]
  },
  "2 3 3 9": {
    "cards": "2 3 3 9",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "9 + ((3 + 2) * 3)",
      "((9 - 2) * 3) + 3",
      "3 + (3 * (9 - 2))",
      "(2 + (9 - 3)) * 3",
      "3 + (3 + (2 * 9))",
      "3 * ((9 - 3) + 2)",
      "9 + (3 * (2 + 3))",
      "3 * (9 - (3 - 2))",
      "((9 + 2) - 3) * 3",
      "((2 + 9) - 3) * 3",
      "9 + (3 * (3 + 2))",
      "3 * (2 + (9 - 3))",
      "(3 + 3) + (2 * 9)",
      "3 * ((2 + 9) - 3)",
      "3 * ((9 + 2) - 3)",
      "(3 + (9 * 2)) + 3",
      "3 - (3 * (2 - 9))",
      "3 - ((2 - 9) * 3)",
      "((9 * 2) + 3) + 3",
      "(2 - (3 - 9)) * 3",
      "(9 + (2 - 3)) * 3",
      "3 + ((9 * 2) + 3)",
      "(3 * (9 - 2)) + 3",
      "3 + ((9 - 2) * 3)",
      "3 * ((2 - 3) + 9)",
      "(9 - (3 - 2)) * 3",
      "9 + ((2 + 3) * 3)",
      "(3 + 3) + (9 * 2)",
      "((9 - 3) + 2) * 3",
      "(2 * 9) + (3 + 3)",
      "3 * (9 + (2 - 3))",
      "3 + ((2 * 9) + 3)",
      "(9 * 2) + (3 + 3)",
      "((3 + 2) * 3) + 9",
      "3 + (3 + (9 * 2))",
      "((2 - 3) + 9) * 3",
      "3 * (2 - (3 - 9))",
      "((2 + 3) * 3) + 9",
      "(3 * (3 + 2)) + 9",
      "((2 * 9) + 3) + 3",
      "(3 + (2 * 9)) + 3",
      "(3 * (2 + 3)) + 9"
    ]
  },
  "2 3 3 10": {
    "cards": "2 3 3 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(10 * 3) - (3 * 2)",
      "(3 + (10 / 2)) * 3",
      "(10 * 3) - (2 * 3)",
      "3 * (3 + (10 / 2))",
      "(3 * 10) - (2 * 3)",
      "((10 / 2) + 3) * 3",
      "(3 * 10) - (3 * 2)",
      "3 * ((10 / 2) + 3)"
    ]
  },
  "2 3 3 11": {
    "cards": "2 3 3 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "2 * (11 + (3 / 3))",
      "((11 - 2) * 3) - 3",
      "(11 + (3 / 3)) * 2",
      "(3 * (11 - 2)) - 3",
      "2 * ((3 / 3) + 11)",
      "((3 / 3) + 11) * 2"
    ]
  },
  "2 3 3 12": {
    "cards": "2 3 3 12",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "(3 / 3) * (2 * 12)",
      "(3 / 3) * (12 * 2)",
      "2 * ((3 + 12) - 3)",
      "2 * (12 - (3 - 3))",
      "((3 / 3) * 2) * 12",
      "12 * (2 - (3 - 3))",
      "((3 + 2) - 3) * 12",
      "((3 + 3) * 2) + 12",
      "2 * ((12 * 3) / 3)",
      "((2 * 12) / 3) * 3",
      "(12 - (3 - 3)) * 2",
      "((2 + 3) - 3) * 12",
      "2 * (3 - (3 - 12))",
      "(2 * 12) / (3 / 3)",
      "((3 - 3) + 2) * 12",
      "(2 * (3 * 12)) / 3",
      "((3 * 2) * 12) / 3",
      "(2 * 3) / (3 / 12)",
      "(12 * 2) + (3 - 3)",
      "2 * ((12 / 3) * 3)",
      "(2 / (3 / 3)) * 12",
      "((12 - 3) + 3) * 2",
      "((3 / 3) * 12) * 2",
      "2 * ((3 - 3) + 12)",
      "(2 * (3 + 3)) + 12",
      "(12 * 3) * (2 / 3)",
      "12 * (3 + (2 - 3))",
      "(2 * (12 / 3)) * 3",
      "12 * ((2 - 3) + 3)",
      "12 / ((3 / 2) / 3)",
      "(12 * (2 * 3)) / 3",
      "(3 * 12) / (3 / 2)",
      "12 / ((3 / 3) / 2)",
      "12 * (2 / (3 / 3))",
      "2 * (3 * (12 / 3))",
      "(3 * 2) / (3 / 12)",
      "(12 * (2 / 3)) * 3",
      "((2 * 12) * 3) / 3",
      "12 + ((3 + 3) * 2)",
      "(12 * 2) / (3 / 3)",
      "(3 / (3 / 12)) * 2",
      "(3 - 3) + (12 * 2)",
      "(3 - 3) + (2 * 12)",
      "12 * ((2 / 3) * 3)",
      "((2 - 3) + 3) * 12",
      "((12 * 2) * 3) / 3",
      "(3 + (2 - 3)) * 12",
      "2 * ((3 / 3) * 12)",
      "(3 * (12 / 3)) * 2",
      "((3 - 3) + 12) * 2",
      "(3 * (2 * 12)) / 3",
      "2 * ((12 + 3) - 3)",
      "3 * (12 * (2 / 3))",
      "((12 / 3) * 3) * 2",
      "(2 - (3 - 3)) * 12",
      "2 / ((3 / 3) / 12)",
      "(2 / (3 / 12)) * 3",
      "12 * ((3 + 2) - 3)",
      "12 * (3 * (2 / 3))",
      "(3 * (2 / 3)) * 12",
      "2 / (3 / (12 * 3))",
      "(2 * 3) * (12 / 3)",
      "2 * (3 + (12 - 3))",
      "(2 * 12) + (3 - 3)",
      "((12 * 3) / 3) * 2",
      "(12 * (3 / 3)) * 2",
      "((12 * 3) * 2) / 3",
      "((12 * 2) / 3) * 3",
      "(12 * (3 * 2)) / 3",
      "3 + ((12 * 2) - 3)",
      "3 * (2 * (12 / 3))",
      "3 - (3 - (2 * 12))",
      "3 * ((2 / 3) * 12)",
      "3 * (12 / (3 / 2))",
      "12 * (2 + (3 - 3))",
      "((3 * 2) / 3) * 12",
      "12 * ((2 + 3) - 3)",
      "(12 * 2) * (3 / 3)",
      "12 / (3 / (2 * 3))",
      "((12 * 2) + 3) - 3",
      "12 * ((2 * 3) / 3)",
      "2 * (12 * (3 / 3))",
      "2 * ((3 * 12) / 3)",
      "2 * ((12 - 3) + 3)",
      "(2 * (12 * 3)) / 3",
      "(12 + (3 - 3)) * 2",
      "(2 / 3) * (3 * 12)",
      "((2 * 12) + 3) - 3",
      "2 * (12 + (3 - 3))",
      "((3 * 12) * 2) / 3",
      "(3 + (12 - 3)) * 2",
      "12 * (3 - (3 - 2))",
      "3 / (3 / (12 * 2))",
      "12 * (2 * (3 / 3))",
      "(3 - (3 - 2)) * 12",
      "(12 * 2) - (3 - 3)",
      "(12 / (3 / 3)) * 2",
      "12 / (3 / (3 * 2))",
      "(2 + (3 - 3)) * 12",
      "((12 + 3) - 3) * 2",
      "((12 * 2) - 3) + 3",
      "((2 * 12) - 3) + 3",
      "3 * ((12 * 2) / 3)",
      "(2 * 12) * (3 / 3)",
      "((2 * 3) / 3) * 12",
      "12 + (2 * (3 + 3))",
      "12 * ((3 - 3) + 2)",
      "(12 * 3) / (3 / 2)",
      "12 * ((3 / 3) * 2)",
      "2 / (3 / (3 * 12))",
      "(3 * (12 * 2)) / 3",
      "3 * ((2 * 12) / 3)",
      "3 / ((3 / 12) / 2)",
      "((3 * 12) / 3) * 2",
      "2 * (3 / (3 / 12))",
      "12 * ((3 * 2) / 3)",
      "3 / ((3 / 2) / 12)",
      "(12 / 3) * (2 * 3)",
      "(3 / (3 / 2)) * 12",
      "((2 / 3) * 12) * 3",
      "(3 * 12) * (2 / 3)",
      "(2 * (3 / 3)) * 12",
      "((2 * 3) * 12) / 3",
      "((12 / 3) * 2) * 3",
      "12 * (3 / (3 / 2))",
      "2 * (12 / (3 / 3))",
      "(2 * 12) - (3 - 3)",
      "3 * ((12 / 3) * 2)",
      "((3 + 12) - 3) * 2",
      "(3 * 2) * (12 / 3)",
      "(3 + (12 * 2)) - 3",
      "3 / (3 / (2 * 12))",
      "(3 + (2 * 12)) - 3",
      "(3 - (3 - 12)) * 2",
      "3 - (3 - (12 * 2))",
      "(12 / 3) * (3 * 2)",
      "(2 / 3) * (12 * 3)",
      "((2 / 3) * 3) * 12",
      "2 / ((3 / 12) / 3)",
      "3 + ((2 * 12) - 3)",
      "3 * (2 / (3 / 12))",
      "(12 / (3 / 2)) * 3"
    ]
  },
  "2 3 3 13": {
    "cards": "2 3 3 13",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "3 * ((3 + 13) / 2)",
      "13 + ((3 * 3) + 2)",
      "((13 + 3) * 3) / 2",
      "(3 + 13) * (3 / 2)",
      "2 + ((3 * 3) + 13)",
      "((3 + 13) * 3) / 2",
      "2 * (13 - (3 / 3))",
      "(13 + 2) + (3 * 3)",
      "13 + (2 + (3 * 3))",
      "((3 * 3) + 13) + 2",
      "2 + (13 + (3 * 3))",
      "((13 + 3) / 2) * 3",
      "(13 + 3) * (3 / 2)",
      "((13 - 2) - 3) * 3",
      "3 * ((13 - 2) - 3)",
      "3 * (13 - (3 + 2))",
      "(3 + 13) / (2 / 3)",
      "(3 * 3) + (13 + 2)",
      "(13 - (3 + 2)) * 3",
      "3 * (13 - (2 + 3))",
      "(13 - (3 / 3)) * 2",
      "((13 - 3) - 2) * 3",
      "3 / (2 / (3 + 13))",
      "(2 + 13) + (3 * 3)",
      "(3 * (3 + 13)) / 2",
      "(3 / 2) * (3 + 13)",
      "3 * ((13 + 3) / 2)",
      "3 / (2 / (13 + 3))",
      "(3 * 3) + (2 + 13)",
      "3 * ((13 - 3) - 2)",
      "(3 * (13 + 3)) / 2",
      "(3 / 2) * (13 + 3)",
      "(13 + 3) / (2 / 3)",
      "(2 + (3 * 3)) + 13",
      "((3 + 13) / 2) * 3",
      "(13 - (2 + 3)) * 3",
      "(13 + (3 * 3)) + 2",
      "((3 * 3) + 2) + 13"
    ]
  },
  "2 3 4 4": {
    "cards": "2 3 4 4",
    "has_solution": "Y",
    "num_solutions": 65,
    "solutions": [
      "(4 * (4 - 2)) * 3",
      "3 * (4 / (2 / 4))",
      "(4 * (4 / 2)) * 3",
      "(3 * 4) * (4 - 2)",
      "(4 / (2 / 3)) * 4",
      "(4 - 2) * (4 * 3)",
      "(3 * (4 / 2)) * 4",
      "(4 * (3 + 2)) + 4",
      "((3 / 2) * 4) * 4",
      "4 * (3 * (4 / 2))",
      "((2 + 3) * 4) + 4",
      "4 / (2 / (3 * 4))",
      "((4 - 2) * 4) * 3",
      "4 + ((2 + 3) * 4)",
      "(4 / 2) * (3 * 4)",
      "3 * ((4 - 2) * 4)",
      "((3 + 2) * 4) + 4",
      "(4 * (4 * 3)) / 2",
      "(3 * 4) / (2 / 4)",
      "(3 * 4) * (4 / 2)",
      "4 * ((4 * 3) / 2)",
      "(4 - 2) * (3 * 4)",
      "((4 / 2) * 3) * 4",
      "((4 - 2) * 3) * 4",
      "3 * ((4 * 4) / 2)",
      "4 / ((2 / 4) / 3)",
      "(4 / (2 / 4)) * 3",
      "(3 / (2 / 4)) * 4",
      "(4 * 4) / (2 / 3)",
      "4 + (4 * (3 + 2))",
      "((4 * 3) * 4) / 2",
      "((3 * 4) / 2) * 4",
      "((4 * 3) / 2) * 4",
      "3 / ((2 / 4) / 4)",
      "((4 * 4) * 3) / 2",
      "4 * ((3 / 2) * 4)",
      "(4 * (3 * 4)) / 2",
      "4 * (3 / (2 / 4))",
      "3 * ((4 / 2) * 4)",
      "3 * (4 * (4 / 2))",
      "(4 * 3) * (4 - 2)",
      "4 / (2 / (4 * 3))",
      "(4 * (3 / 2)) * 4",
      "((4 / 2) * 4) * 3",
      "(4 / 2) * (4 * 3)",
      "4 + (4 * (2 + 3))",
      "(4 * 4) * (3 / 2)",
      "4 * ((4 / 2) * 3)",
      "(3 / 2) * (4 * 4)",
      "4 * ((3 * 4) / 2)",
      "(4 * 3) / (2 / 4)",
      "4 * (4 / (2 / 3))",
      "(4 * 3) * (4 / 2)",
      "(3 * (4 - 2)) * 4",
      "((4 * 4) / 2) * 3",
      "((3 * 4) * 4) / 2",
      "3 / (2 / (4 * 4))",
      "(3 * (4 * 4)) / 2",
      "4 * (4 * (3 / 2))",
      "(4 * (2 + 3)) + 4",
      "4 * ((4 - 2) * 3)",
      "3 * (4 * (4 - 2))",
      "4 + ((3 + 2) * 4)",
      "4 / ((2 / 3) / 4)",
      "4 * (3 * (4 - 2))"
    ]
  },
  "2 3 4 5": {
    "cards": "2 3 4 5",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "4 * ((5 + 3) - 2)",
      "4 * (3 + (5 - 2))",
      "(3 + (5 - 2)) * 4",
      "2 * ((5 + 3) + 4)",
      "4 * (3 - (2 - 5))",
      "4 * (5 - (2 - 3))",
      "(3 + (4 + 5)) * 2",
      "2 * ((5 + 4) + 3)",
      "(5 + (3 + 4)) * 2",
      "4 * ((3 + 5) - 2)",
      "2 * (3 + (5 + 4))",
      "2 * (5 + (4 + 3))",
      "2 * (5 + (3 + 4))",
      "(4 + (3 + 5)) * 2",
      "(5 - (2 - 3)) * 4",
      "4 * (5 + (3 - 2))",
      "(5 + (4 + 3)) * 2",
      "((4 + 3) + 5) * 2",
      "(4 + (5 + 3)) * 2",
      "(5 + (3 - 2)) * 4",
      "2 * (4 + (5 + 3))",
      "2 * ((3 + 5) + 4)",
      "((3 + 4) + 5) * 2",
      "((5 + 4) + 3) * 2",
      "2 * (3 + (4 + 5))",
      "((3 + 5) + 4) * 2",
      "(3 + (5 + 4)) * 2",
      "2 * (4 + (3 + 5))",
      "((4 + 5) + 3) * 2",
      "2 * ((3 + 4) + 5)",
      "4 * ((5 - 2) + 3)",
      "((5 + 3) - 2) * 4",
      "2 * ((4 + 5) + 3)",
      "((3 - 2) + 5) * 4",
      "((3 + 5) - 2) * 4",
      "((5 + 3) + 4) * 2",
      "4 * ((3 - 2) + 5)",
      "(3 - (2 - 5)) * 4",
      "2 * ((4 + 3) + 5)",
      "((5 - 2) + 3) * 4"
    ]
  },
  "2 3 4 6": {
    "cards": "2 3 4 6",
    "has_solution": "Y",
    "num_solutions": 100,
    "solutions": [
      "((6 + 4) - 2) * 3",
      "2 * ((6 - 3) * 4)",
      "(3 - 2) * (6 * 4)",
      "(2 * 6) + (3 * 4)",
      "6 + (3 * (4 + 2))",
      "(6 * (3 - 2)) * 4",
      "3 * (4 + (6 - 2))",
      "(4 * 2) * (6 - 3)",
      "4 * (3 + (6 / 2))",
      "((2 * 6) - 4) * 3",
      "4 * (2 * (6 - 3))",
      "3 * ((6 - 2) + 4)",
      "3 * ((2 * 6) - 4)",
      "3 * ((4 / 2) + 6)",
      "(3 * 4) + (6 * 2)",
      "((4 + 6) - 2) * 3",
      "(4 * 6) / (3 - 2)",
      "(2 + 4) + (6 * 3)",
      "(6 * 2) + (3 * 4)",
      "2 + ((3 * 6) + 4)",
      "(6 - 3) * (2 * 4)",
      "2 * (4 * (6 - 3))",
      "4 * ((3 - 2) * 6)",
      "(2 + 4) + (3 * 6)",
      "((4 / 2) + 6) * 3",
      "((6 * 2) - 4) * 3",
      "(6 - (2 - 4)) * 3",
      "((3 - 2) * 6) * 4",
      "(3 * (4 + 2)) + 6",
      "(4 - (2 - 6)) * 3",
      "(6 * 4) * (3 - 2)",
      "(2 * 4) * (6 - 3)",
      "4 / ((3 - 2) / 6)",
      "6 + ((2 + 4) * 3)",
      "(3 * 6) + (4 + 2)",
      "3 * (6 + (4 - 2))",
      "4 + (2 + (3 * 6))",
      "(6 * 3) + (2 + 4)",
      "3 * ((4 + 6) - 2)",
      "(4 / (3 - 2)) * 6",
      "4 * (6 / (3 - 2))",
      "3 * (6 + (4 / 2))",
      "(2 * (6 - 3)) * 4",
      "((4 - 2) + 6) * 3",
      "(4 * 6) * (3 - 2)",
      "6 * (4 * (3 - 2))",
      "((6 - 3) * 4) * 2",
      "(3 - 2) * (4 * 6)",
      "(4 + 2) + (3 * 6)",
      "(6 / (3 - 2)) * 4",
      "(3 * (2 + 4)) + 6",
      "((6 / 2) + 3) * 4",
      "4 * ((6 - 3) * 2)",
      "((3 * 6) + 4) + 2",
      "3 * ((6 + 4) - 2)",
      "((6 * 3) + 2) + 4",
      "6 * (4 / (3 - 2))",
      "4 + ((3 * 6) + 2)",
      "2 + (4 + (6 * 3))",
      "(3 * 6) + (2 + 4)",
      "(6 + (4 / 2)) * 3",
      "((6 - 2) + 4) * 3",
      "(3 * 4) + (2 * 6)",
      "(6 * 3) + (4 + 2)",
      "(3 + (6 / 2)) * 4",
      "3 * (4 - (2 - 6))",
      "(6 - 3) * (4 * 2)",
      "(6 + (4 - 2)) * 3",
      "4 + (2 + (6 * 3))",
      "(4 * 3) + (6 * 2)",
      "6 + (3 * (2 + 4))",
      "(2 * 6) + (4 * 3)",
      "(4 + (3 * 6)) + 2",
      "((3 * 6) + 2) + 4",
      "((6 - 3) * 2) * 4",
      "(4 + 2) + (6 * 3)",
      "(2 + (6 * 3)) + 4",
      "(4 * 3) + (2 * 6)",
      "6 + ((4 + 2) * 3)",
      "4 * ((6 / 2) + 3)",
      "2 + (4 + (3 * 6))",
      "((2 + 4) * 3) + 6",
      "(4 + (6 * 3)) + 2",
      "((4 + 2) * 3) + 6",
      "3 * (6 - (2 - 4))",
      "(4 * (6 - 3)) * 2",
      "(6 * 4) / (3 - 2)",
      "6 * ((3 - 2) * 4)",
      "3 * ((4 - 2) + 6)",
      "(2 + (3 * 6)) + 4",
      "2 + ((6 * 3) + 4)",
      "4 + ((6 * 3) + 2)",
      "(4 + (6 - 2)) * 3",
      "6 / ((3 - 2) / 4)",
      "((3 - 2) * 4) * 6",
      "4 * (6 * (3 - 2))",
      "(4 * (3 - 2)) * 6",
      "((6 * 3) + 4) + 2",
      "(6 * 2) + (4 * 3)",
      "3 * ((6 * 2) - 4)"
    ]
  },
  "2 3 4 7": {
    "cards": "2 3 4 7",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((7 + 3) * 2) + 4",
      "(2 + 4) * (7 - 3)",
      "((7 - 3) + 2) * 4",
      "(7 + (2 - 3)) * 4",
      "(2 + (7 - 3)) * 4",
      "((2 - 3) + 7) * 4",
      "4 * (7 + (2 - 3))",
      "4 * ((7 - 3) + 2)",
      "4 + ((7 + 3) * 2)",
      "((7 + 2) - 3) * 4",
      "4 * ((7 + 2) - 3)",
      "(7 - 3) * (4 + 2)",
      "4 * (7 - (3 - 2))",
      "(7 - 3) * (2 + 4)",
      "(2 - (3 - 7)) * 4",
      "(2 * (3 + 7)) + 4",
      "((2 + 7) - 3) * 4",
      "4 * ((2 - 3) + 7)",
      "4 + ((3 + 7) * 2)",
      "(4 + 2) * (7 - 3)",
      "4 * (2 + (7 - 3))",
      "4 * ((2 + 7) - 3)",
      "(2 * (7 + 3)) + 4",
      "(7 - (3 - 2)) * 4",
      "4 + (2 * (3 + 7))",
      "((3 + 7) * 2) + 4",
      "4 * (2 - (3 - 7))",
      "4 + (2 * (7 + 3))"
    ]
  },
  "2 3 4 8": {
    "cards": "2 3 4 8",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((4 + 2) - 3) * 8",
      "3 * ((8 / 2) + 4)",
      "8 * ((4 - 3) + 2)",
      "((8 - 4) * 2) * 3",
      "8 * (4 + (2 - 3))",
      "(4 + (2 - 3)) * 8",
      "((2 - 3) + 4) * 8",
      "(3 * (8 - 4)) * 2",
      "((2 + 4) - 3) * 8",
      "(4 + (8 / 2)) * 3",
      "8 * ((4 + 2) - 3)",
      "3 * (4 + (8 / 2))",
      "(2 - (3 - 4)) * 8",
      "3 * ((8 - 4) * 2)",
      "8 * (2 - (3 - 4))",
      "((4 - 3) + 2) * 8",
      "((8 / 2) + 4) * 3",
      "2 * ((8 - 4) * 3)",
      "(3 * 2) * (8 - 4)",
      "((8 - 4) * 3) * 2",
      "8 * (2 + (4 - 3))",
      "(8 - 4) * (2 * 3)",
      "(8 - 4) * (3 * 2)",
      "(2 * 3) * (8 - 4)",
      "(2 + (4 - 3)) * 8",
      "3 * (2 * (8 - 4))",
      "2 * (3 * (8 - 4))",
      "8 * (4 - (3 - 2))",
      "8 * ((2 - 3) + 4)",
      "(4 - (3 - 2)) * 8",
      "(2 * (8 - 4)) * 3",
      "8 * ((2 + 4) - 3)"
    ]
  },
  "2 3 4 9": {
    "cards": "2 3 4 9",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "4 / (3 / (9 * 2))",
      "(4 / (3 / 9)) * 2",
      "9 * (4 / (3 / 2))",
      "(2 * (4 * 9)) / 3",
      "(3 + 9) * (4 - 2)",
      "(4 * 2) * (9 / 3)",
      "((4 * 2) * 9) / 3",
      "2 * ((9 * 4) / 3)",
      "9 * ((2 / 3) * 4)",
      "9 / ((3 / 4) / 2)",
      "4 * ((2 / 3) * 9)",
      "(2 * (9 / 3)) * 4",
      "2 / (3 / (4 * 9))",
      "4 / (3 / (2 * 9))",
      "(2 * (9 * 4)) / 3",
      "2 * (4 / (3 / 9))",
      "2 / (3 / (9 * 4))",
      "4 / ((3 / 9) / 2)",
      "4 * (2 / (3 / 9))",
      "(9 / 3) * (2 * 4)",
      "(2 / (3 / 9)) * 4",
      "2 * ((9 / 3) * 4)",
      "((9 * 2) * 4) / 3",
      "(4 * (9 * 2)) / 3",
      "(4 / 2) * (3 + 9)",
      "((9 * 4) / 3) * 2",
      "(2 * 9) / (3 / 4)",
      "(2 / 3) * (9 * 4)",
      "(9 * 4) * (2 / 3)",
      "9 / (3 / (2 * 4))",
      "9 / ((3 / 2) / 4)",
      "((9 * 2) / 3) * 4",
      "(2 / (3 / 4)) * 9",
      "(2 * (4 / 3)) * 9",
      "(4 * (2 * 9)) / 3",
      "(3 + 9) * (4 / 2)",
      "9 * ((4 / 3) * 2)",
      "((4 * 9) * 2) / 3",
      "(4 * 2) / (3 / 9)",
      "(9 / 3) * (4 * 2)",
      "((2 * 4) * 9) / 3",
      "4 * ((9 + 3) / 2)",
      "4 / (2 / (3 + 9))",
      "((9 + 3) / 2) * 4",
      "9 * (2 * (4 / 3))",
      "(9 * 2) / (3 / 4)",
      "(9 + 3) * (4 / 2)",
      "((3 + 9) * 4) / 2",
      "((9 * 4) * 2) / 3",
      "2 / ((3 / 4) / 9)",
      "(9 * (2 * 4)) / 3",
      "4 * ((9 * 2) / 3)",
      "(9 + 3) / (2 / 4)",
      "2 * (4 * (9 / 3))",
      "(4 * (3 + 9)) / 2",
      "((9 / 3) * 4) * 2",
      "(9 / (3 / 4)) * 2",
      "(4 * (9 + 3)) / 2",
      "(4 * 9) / (3 / 2)",
      "(2 * 4) / (3 / 9)",
      "2 * (9 / (3 / 4))",
      "(4 - 2) * (3 + 9)",
      "((2 * 4) / 3) * 9",
      "(4 * (2 / 3)) * 9",
      "9 / (3 / (4 * 2))",
      "(2 * 9) * (4 / 3)",
      "4 * ((2 * 9) / 3)",
      "4 * ((9 / 3) * 2)",
      "(4 / 3) * (2 * 9)",
      "2 / ((3 / 9) / 4)",
      "2 * (9 * (4 / 3))",
      "4 / (2 / (9 + 3))",
      "(9 * (2 / 3)) * 4",
      "((9 + 3) * 4) / 2",
      "(2 / 3) * (4 * 9)",
      "((3 + 9) / 2) * 4",
      "((2 * 9) * 4) / 3",
      "4 * (2 * (9 / 3))",
      "2 * ((4 * 9) / 3)",
      "4 * (9 / (3 / 2))",
      "4 * ((3 + 9) / 2)",
      "(4 / (3 / 2)) * 9",
      "((4 * 2) / 3) * 9",
      "(4 * (9 / 3)) * 2",
      "((4 / 3) * 9) * 2",
      "((2 / 3) * 4) * 9",
      "((4 * 9) / 3) * 2",
      "(2 * 4) * (9 / 3)",
      "((2 * 9) / 3) * 4",
      "9 * (2 / (3 / 4))",
      "9 * (4 * (2 / 3))",
      "(4 / 2) * (9 + 3)",
      "(9 * 4) / (3 / 2)",
      "((2 / 3) * 9) * 4",
      "(9 / (3 / 2)) * 4",
      "(4 - 2) * (9 + 3)",
      "9 * ((2 * 4) / 3)",
      "9 * ((4 * 2) / 3)",
      "4 / ((3 / 2) / 9)",
      "(3 + 9) / (2 / 4)",
      "(9 * 2) * (4 / 3)",
      "2 * ((4 / 3) * 9)",
      "(9 + 3) * (4 - 2)",
      "4 * (9 * (2 / 3))",
      "(4 / 3) * (9 * 2)",
      "(9 * (4 * 2)) / 3",
      "((4 / 3) * 2) * 9",
      "(4 * 9) * (2 / 3)",
      "((9 / 3) * 2) * 4",
      "(9 * (4 / 3)) * 2"
    ]
  },
  "2 3 4 10": {
    "cards": "2 3 4 10",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "((3 * 10) - 2) - 4",
      "((3 + 4) * 2) + 10",
      "10 + ((4 + 3) * 2)",
      "3 * ((10 - 4) + 2)",
      "10 + ((3 + 4) * 2)",
      "(10 + (3 * 4)) + 2",
      "(10 * 3) - (4 + 2)",
      "2 + (10 + (4 * 3))",
      "(3 * 10) - (2 + 4)",
      "(10 - (4 - 2)) * 3",
      "(2 + (3 * 4)) + 10",
      "((10 + 2) - 4) * 3",
      "((2 - 4) + 10) * 3",
      "3 * ((2 + 10) - 4)",
      "(10 * 3) - (2 + 4)",
      "10 + (2 + (4 * 3))",
      "3 * (2 + (10 - 4))",
      "10 + (2 * (3 + 4))",
      "((2 + 10) - 4) * 3",
      "(10 + (4 * 3)) + 2",
      "((3 * 10) - 4) - 2",
      "((3 * 4) + 2) + 10",
      "((3 * 4) + 10) + 2",
      "(2 + 10) + (3 * 4)",
      "((10 - 4) + 2) * 3",
      "3 * (2 - (4 - 10))",
      "3 * (10 - (4 - 2))",
      "(4 * 3) + (2 + 10)",
      "((4 + 3) * 2) + 10",
      "(10 + (2 - 4)) * 3",
      "(10 + 2) + (4 * 3)",
      "(2 + (4 * 3)) + 10",
      "3 * ((10 + 2) - 4)",
      "10 + (2 + (3 * 4))",
      "10 + (2 * (4 + 3))",
      "2 + ((4 * 3) + 10)",
      "(10 + 2) + (3 * 4)",
      "(2 * (4 + 3)) + 10",
      "3 * (10 - (4 / 2))",
      "((10 * 3) - 4) - 2",
      "2 + (10 + (3 * 4))",
      "(2 + (10 - 4)) * 3",
      "((10 * 3) - 2) - 4",
      "3 * (10 + (2 - 4))",
      "(3 * 10) - (4 + 2)",
      "3 * ((2 - 4) + 10)",
      "(2 * (3 + 4)) + 10",
      "10 + ((3 * 4) + 2)",
      "2 + ((3 * 4) + 10)",
      "((4 * 3) + 2) + 10",
      "(10 - (4 / 2)) * 3",
      "((4 * 3) + 10) + 2",
      "(2 - (4 - 10)) * 3",
      "(4 * 3) + (10 + 2)",
      "(3 * 4) + (10 + 2)",
      "10 + ((4 * 3) + 2)",
      "(3 * 4) + (2 + 10)",
      "(2 + 10) + (4 * 3)"
    ]
  },
  "2 3 4 11": {
    "cards": "2 3 4 11",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(11 - (2 + 3)) * 4",
      "((4 - 3) + 11) * 2",
      "2 * (4 - (3 - 11))",
      "4 * (11 - (2 + 3))",
      "((11 - 2) - 3) * 4",
      "2 * ((4 - 3) + 11)",
      "((11 - 3) + 4) * 2",
      "((11 + 4) - 3) * 2",
      "4 * ((11 - 3) - 2)",
      "(11 - (3 + 2)) * 4",
      "(11 - (3 - 4)) * 2",
      "((3 + 11) * 2) - 4",
      "2 * ((4 + 11) - 3)",
      "(2 * (11 + 3)) - 4",
      "(4 + (11 - 3)) * 2",
      "(11 + (4 - 3)) * 2",
      "2 * (4 + (11 - 3))",
      "4 * ((11 - 2) - 3)",
      "(2 * (3 + 11)) - 4",
      "(4 - (3 - 11)) * 2",
      "2 * (11 - (3 - 4))",
      "2 * (11 + (4 - 3))",
      "((11 + 3) * 2) - 4",
      "4 * (11 - (3 + 2))",
      "((11 - 3) - 2) * 4",
      "2 * ((11 + 4) - 3)",
      "((4 + 11) - 3) * 2",
      "2 * ((11 - 3) + 4)"
    ]
  },
  "2 3 4 12": {
    "cards": "2 3 4 12",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(12 + 4) / (2 / 3)",
      "((12 + 4) / 2) * 3",
      "(4 + 2) * (12 / 3)",
      "(2 * 12) * (4 - 3)",
      "(2 + (12 / 3)) * 4",
      "2 / ((4 - 3) / 12)",
      "((12 + 4) * 3) / 2",
      "12 * (2 * (4 - 3))",
      "(4 + 12) / (2 / 3)",
      "(3 / 2) * (4 + 12)",
      "((4 - 3) * 2) * 12",
      "4 * (2 + (12 / 3))",
      "12 * ((4 + 2) / 3)",
      "(12 * (2 + 4)) / 3",
      "((12 / 3) + 2) * 4",
      "(12 - (3 * 2)) * 4",
      "((4 + 2) * 12) / 3",
      "(12 + 4) * (3 / 2)",
      "(12 / (4 - 3)) * 2",
      "12 * ((2 * 3) - 4)",
      "(3 / 2) * (12 + 4)",
      "((4 + 12) * 3) / 2",
      "(12 / 3) * (2 + 4)",
      "4 * (12 - (3 * 2))",
      "(2 + 4) / (3 / 12)",
      "((3 * 2) - 4) * 12",
      "3 / (2 / (4 + 12))",
      "(3 * (4 + 12)) / 2",
      "2 * ((4 - 3) * 12)",
      "(4 - 3) * (2 * 12)",
      "12 / (3 / (2 + 4))",
      "4 * ((12 / 3) + 2)",
      "(2 * 12) / (4 - 3)",
      "(2 + 4) * (12 / 3)",
      "(2 / (4 - 3)) * 12",
      "4 * (12 - (2 * 3))",
      "2 * (12 * (4 - 3))",
      "((4 + 2) / 3) * 12",
      "(12 / 3) * (4 + 2)",
      "(4 + 2) / (3 / 12)",
      "(3 * (12 + 4)) / 2",
      "((2 + 4) / 3) * 12",
      "(12 * 2) * (4 - 3)",
      "((2 * 3) - 4) * 12",
      "12 * ((3 * 2) - 4)",
      "((2 + 4) * 12) / 3",
      "12 * ((4 - 3) * 2)",
      "(4 + 12) * (3 / 2)",
      "(12 * 2) / (4 - 3)",
      "2 * (12 / (4 - 3))",
      "3 / (2 / (12 + 4))",
      "12 * ((2 + 4) / 3)",
      "((4 + 12) / 2) * 3",
      "(12 * (4 + 2)) / 3",
      "(12 - (2 * 3)) * 4",
      "((4 - 3) * 12) * 2",
      "(12 * (4 - 3)) * 2",
      "(2 * (4 - 3)) * 12",
      "12 * (2 / (4 - 3))",
      "12 / ((4 - 3) / 2)",
      "12 / (3 / (4 + 2))",
      "(4 - 3) * (12 * 2)",
      "3 * ((4 + 12) / 2)",
      "3 * ((12 + 4) / 2)"
    ]
  },
  "2 3 4 13": {
    "cards": "2 3 4 13",
    "has_solution": "Y",
    "num_solutions": 46,
    "solutions": [
      "13 + ((2 * 4) + 3)",
      "(3 + (13 - 4)) * 2",
      "(3 + 13) + (4 * 2)",
      "(3 - (4 - 13)) * 2",
      "((2 * 4) + 3) + 13",
      "2 * ((3 - 4) + 13)",
      "((4 * 2) + 13) + 3",
      "((3 + 13) - 4) * 2",
      "2 * (13 - (4 - 3))",
      "(3 + (4 * 2)) + 13",
      "((2 * 4) + 13) + 3",
      "4 + (2 * (13 - 3))",
      "4 - (2 * (3 - 13))",
      "(13 + 3) + (2 * 4)",
      "13 + (3 + (4 * 2))",
      "2 * ((13 - 4) + 3)",
      "4 - ((3 - 13) * 2)",
      "2 * ((3 + 13) - 4)",
      "(13 + (2 * 4)) + 3",
      "((4 * 2) + 3) + 13",
      "4 + ((13 - 3) * 2)",
      "(2 * (13 - 3)) + 4",
      "(13 + (4 * 2)) + 3",
      "2 * (3 - (4 - 13))",
      "(13 + (3 - 4)) * 2",
      "13 + ((4 * 2) + 3)",
      "2 * (13 + (3 - 4))",
      "(13 - (4 - 3)) * 2",
      "3 + (13 + (4 * 2))",
      "(4 * 2) + (3 + 13)",
      "(2 * 4) + (3 + 13)",
      "((13 - 3) * 2) + 4",
      "2 * ((13 + 3) - 4)",
      "(3 + 13) + (2 * 4)",
      "(4 * 2) + (13 + 3)",
      "((3 - 4) + 13) * 2",
      "((13 - 4) + 3) * 2",
      "3 + (13 + (2 * 4))",
      "3 + ((2 * 4) + 13)",
      "(3 + (2 * 4)) + 13",
      "((13 + 3) - 4) * 2",
      "3 + ((4 * 2) + 13)",
      "2 * (3 + (13 - 4))",
      "13 + (3 + (2 * 4))",
      "(2 * 4) + (13 + 3)",
      "(13 + 3) + (4 * 2)"
    ]
  },
  "2 3 5 5": {
    "cards": "2 3 5 5",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(5 * 5) + (2 - 3)",
      "(5 - (2 - 5)) * 3",
      "(5 + 3) * (5 - 2)",
      "2 + ((5 * 5) - 3)",
      "(5 + (5 - 2)) * 3",
      "((5 + 5) - 2) * 3",
      "3 * ((5 + 5) - 2)",
      "(2 + (5 * 5)) - 3",
      "(5 - 2) * (5 + 3)",
      "3 * ((5 - 2) + 5)",
      "(2 - 3) + (5 * 5)",
      "2 - (3 - (5 * 5))",
      "3 * (5 - (2 - 5))",
      "(5 - 2) * (3 + 5)",
      "(3 + 5) * (5 - 2)",
      "((5 - 2) + 5) * 3",
      "3 * (5 + (5 - 2))",
      "((5 * 5) - 3) + 2",
      "(5 * 5) - (3 - 2)",
      "((5 * 5) + 2) - 3"
    ]
  },
  "2 3 5 6": {
    "cards": "2 3 5 6",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "6 * ((5 - 3) + 2)",
      "(5 + (6 / 2)) * 3",
      "((2 * 5) * 3) - 6",
      "6 / (2 / (5 + 3))",
      "(6 * (5 - 3)) * 2",
      "2 * (6 * (5 - 3))",
      "6 * ((5 + 2) - 3)",
      "(5 * (3 * 2)) - 6",
      "(6 * 2) * (5 - 3)",
      "(6 / 2) * (5 + 3)",
      "6 * (5 - (3 - 2))",
      "6 / (2 / (3 + 5))",
      "3 * (5 + (6 / 2))",
      "6 * (2 - (3 - 5))",
      "(2 * (5 * 3)) - 6",
      "((2 * 3) * 5) - 6",
      "(5 * (2 * 3)) - 6",
      "(6 / 2) * (3 + 5)",
      "(5 + 3) * (6 / 2)",
      "(5 + (2 - 3)) * 6",
      "((5 - 3) + 2) * 6",
      "(6 * 5) - (3 * 2)",
      "(5 - (3 - 2)) * 6",
      "((6 / 2) + 5) * 3",
      "((5 - 3) * 6) * 2",
      "(3 + 5) * (6 / 2)",
      "((3 * 5) * 2) - 6",
      "(2 - (3 - 5)) * 6",
      "((3 + 5) * 6) / 2",
      "(2 + (5 - 3)) * 6",
      "((5 * 2) * 3) - 6",
      "6 * ((2 + 5) - 3)",
      "((3 + 5) / 2) * 6",
      "((5 + 3) / 2) * 6",
      "(5 - 3) * (6 * 2)",
      "((3 * 2) * 5) - 6",
      "6 * ((5 - 3) * 2)",
      "(5 * 6) - (2 * 3)",
      "(6 * 5) - (2 * 3)",
      "(2 * (3 * 5)) - 6",
      "(6 * (3 + 5)) / 2",
      "6 * (5 + (2 - 3))",
      "((2 + 5) - 3) * 6",
      "(6 * (5 + 3)) / 2",
      "(3 + 5) / (2 / 6)",
      "(3 * (5 * 2)) - 6",
      "((5 * 3) * 2) - 6",
      "(2 * (5 - 3)) * 6",
      "6 * ((2 - 3) + 5)",
      "((5 + 3) * 6) / 2",
      "3 * ((6 / 2) + 5)",
      "6 * (2 + (5 - 3))",
      "6 * ((3 + 5) / 2)",
      "(5 + 3) / (2 / 6)",
      "6 * (2 * (5 - 3))",
      "(5 * 6) - (3 * 2)",
      "2 * ((5 - 3) * 6)",
      "(5 - 3) * (2 * 6)",
      "((5 - 3) * 2) * 6",
      "6 * ((5 + 3) / 2)",
      "((5 + 2) - 3) * 6",
      "((2 - 3) + 5) * 6",
      "(2 * 6) * (5 - 3)",
      "(3 * (2 * 5)) - 6"
    ]
  },
  "2 3 5 7": {
    "cards": "2 3 5 7",
    "has_solution": "Y",
    "num_solutions": 46,
    "solutions": [
      "((3 * 7) - 2) + 5",
      "(2 + 7) + (5 * 3)",
      "2 + ((5 * 3) + 7)",
      "((3 * 5) + 7) + 2",
      "(7 + 2) + (5 * 3)",
      "7 + (2 + (3 * 5))",
      "7 + ((3 * 5) + 2)",
      "(7 + 2) + (3 * 5)",
      "3 - ((2 - 5) * 7)",
      "7 + ((5 * 3) + 2)",
      "(3 * 5) + (2 + 7)",
      "((5 * 3) + 7) + 2",
      "(5 * 3) + (7 + 2)",
      "5 - (2 - (7 * 3))",
      "3 + ((5 - 2) * 7)",
      "3 - (7 * (2 - 5))",
      "7 + (2 + (5 * 3))",
      "(5 + (7 * 3)) - 2",
      "(7 + (5 * 3)) + 2",
      "2 + (7 + (5 * 3))",
      "(7 + (3 * 5)) + 2",
      "5 - (2 - (3 * 7))",
      "2 + ((3 * 5) + 7)",
      "(2 + (3 * 5)) + 7",
      "((5 * 3) + 2) + 7",
      "(5 - 2) + (3 * 7)",
      "((5 - 2) * 7) + 3",
      "((3 * 5) + 2) + 7",
      "(7 * 3) + (5 - 2)",
      "3 + (7 * (5 - 2))",
      "((7 * 3) - 2) + 5",
      "5 + ((3 * 7) - 2)",
      "((3 * 7) + 5) - 2",
      "(7 * (5 - 2)) + 3",
      "(3 * 7) + (5 - 2)",
      "(2 + 7) + (3 * 5)",
      "(2 + (5 * 3)) + 7",
      "5 + ((7 * 3) - 2)",
      "(5 + (3 * 7)) - 2",
      "((7 * 3) + 5) - 2",
      "(7 * 3) - (2 - 5)",
      "(5 * 3) + (2 + 7)",
      "(3 * 7) - (2 - 5)",
      "(5 - 2) + (7 * 3)",
      "2 + (7 + (3 * 5))",
      "(3 * 5) + (7 + 2)"
    ]
  },
  "2 3 5 8": {
    "cards": "2 3 5 8",
    "has_solution": "Y",
    "num_solutions": 33,
    "solutions": [
      "(2 * (3 + 5)) + 8",
      "(5 + (2 * 8)) + 3",
      "3 + ((8 * 2) + 5)",
      "(2 * 8) + (5 + 3)",
      "(3 + 5) + (2 * 8)",
      "5 + (3 + (2 * 8))",
      "(5 + 3) + (8 * 2)",
      "(8 * 2) + (5 + 3)",
      "((2 * 8) + 3) + 5",
      "(3 + (8 * 2)) + 5",
      "((8 * 2) + 3) + 5",
      "3 + (5 + (2 * 8))",
      "8 + ((5 + 3) * 2)",
      "8 + (2 * (5 + 3))",
      "(2 * 8) + (3 + 5)",
      "5 + (3 + (8 * 2))",
      "5 + ((8 * 2) + 3)",
      "(3 + (2 * 8)) + 5",
      "8 + ((3 + 5) * 2)",
      "(5 + 3) + (2 * 8)",
      "((8 * 2) + 5) + 3",
      "(3 + 5) + (8 * 2)",
      "((2 * 8) + 5) + 3",
      "8 / (2 - (5 / 3))",
      "3 + ((2 * 8) + 5)",
      "5 + ((2 * 8) + 3)",
      "(8 * 2) + (3 + 5)",
      "(2 * (5 + 3)) + 8",
      "((5 + 3) * 2) + 8",
      "((3 + 5) * 2) + 8",
      "(5 + (8 * 2)) + 3",
      "3 + (5 + (8 * 2))",
      "8 + (2 * (3 + 5))"
    ]
  },
  "2 3 5 9": {
    "cards": "2 3 5 9",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "2 - (5 - (9 * 3))",
      "(3 * 2) * (9 - 5)",
      "(9 * (5 - 2)) - 3",
      "(2 * 3) * (9 - 5)",
      "(2 * (9 - 5)) * 3",
      "2 + ((9 * 3) - 5)",
      "((5 * 9) + 3) / 2",
      "(3 * (9 - 5)) * 2",
      "(3 * 9) - (5 - 2)",
      "3 * (2 * (9 - 5))",
      "((3 * 9) + 2) - 5",
      "(9 * 3) - (5 - 2)",
      "(2 - 5) + (9 * 3)",
      "(2 - 5) + (3 * 9)",
      "(3 + (5 * 9)) / 2",
      "((9 * 5) + 3) / 2",
      "2 * ((9 - 5) * 3)",
      "2 * (3 * (9 - 5))",
      "(9 - 5) * (3 * 2)",
      "((5 - 2) * 9) - 3",
      "(9 * 3) + (2 - 5)",
      "2 - (5 - (3 * 9))",
      "(2 + (9 * 3)) - 5",
      "2 + ((3 * 9) - 5)",
      "3 * ((9 - 5) * 2)",
      "(2 + (3 * 9)) - 5",
      "((9 - 5) * 2) * 3",
      "(9 - 5) * (2 * 3)",
      "((3 * 9) - 5) + 2",
      "(3 + (9 * 5)) / 2",
      "(3 * 9) + (2 - 5)",
      "((9 * 3) + 2) - 5",
      "((9 - 5) * 3) * 2",
      "((9 * 3) - 5) + 2"
    ]
  },
  "2 3 5 10": {
    "cards": "2 3 5 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "2 * ((5 - 3) + 10)",
      "((5 + 10) - 3) * 2",
      "2 * (10 - (3 - 5))",
      "(10 + (5 - 3)) * 2",
      "2 * (10 + (5 - 3))",
      "2 * (5 + (10 - 3))",
      "(5 + (10 - 3)) * 2",
      "(5 - 3) * (10 + 2)",
      "((5 - 3) + 10) * 2",
      "2 * (5 - (3 - 10))",
      "(2 + 10) * (5 - 3)",
      "(10 + 2) * (5 - 3)",
      "(5 - 3) * (2 + 10)",
      "2 * ((10 + 5) - 3)",
      "((10 - 3) + 5) * 2",
      "((10 + 5) - 3) * 2",
      "2 * ((10 - 3) + 5)",
      "(5 - (3 - 10)) * 2",
      "2 * ((5 + 10) - 3)",
      "(10 - (3 - 5)) * 2"
    ]
  },
  "2 3 5 11": {
    "cards": "2 3 5 11",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "3 + (11 + (5 * 2))",
      "(11 - (5 - 2)) * 3",
      "(2 + (11 - 5)) * 3",
      "((11 + 5) * 3) / 2",
      "((5 + 11) / 2) * 3",
      "3 * ((2 - 5) + 11)",
      "11 + ((5 * 3) - 2)",
      "(3 + 11) + (2 * 5)",
      "(11 + 3) + (2 * 5)",
      "(11 * 2) - (3 - 5)",
      "11 - (2 - (5 * 3))",
      "(11 + (5 * 2)) + 3",
      "(5 * 2) + (3 + 11)",
      "(11 - 2) + (3 * 5)",
      "(11 * (5 - 3)) + 2",
      "((5 * 3) + 11) - 2",
      "((3 * 5) + 11) - 2",
      "2 - ((3 - 5) * 11)",
      "(5 + 11) * (3 / 2)",
      "2 + (11 * (5 - 3))",
      "(11 + (2 * 5)) + 3",
      "(3 * 5) + (11 - 2)",
      "((2 * 11) + 5) - 3",
      "((5 + 11) * 3) / 2",
      "((5 * 3) - 2) + 11",
      "3 + (11 + (2 * 5))",
      "(2 - 5) * (3 - 11)",
      "3 / (2 / (11 + 5))",
      "((11 + 5) / 2) * 3",
      "((5 - 3) * 11) + 2",
      "2 + ((5 - 3) * 11)",
      "((11 * 2) - 3) + 5",
      "(3 + (5 * 2)) + 11",
      "(11 + 3) + (5 * 2)",
      "(3 / 2) * (11 + 5)",
      "(5 - 3) + (2 * 11)",
      "(5 + (2 * 11)) - 3",
      "(11 + 5) * (3 / 2)",
      "((2 * 5) + 3) + 11",
      "(3 / 2) * (5 + 11)",
      "(5 * 3) - (2 - 11)",
      "(2 * 5) + (3 + 11)",
      "(11 - 3) * (5 - 2)",
      "11 + ((2 * 5) + 3)",
      "(5 + (11 * 2)) - 3",
      "11 + (3 + (5 * 2))",
      "(2 * 11) - (3 - 5)",
      "((2 * 5) + 11) + 3",
      "11 + (3 + (2 * 5))",
      "3 * (11 - (5 - 2))",
      "((2 * 11) - 3) + 5",
      "(11 + (3 * 5)) - 2",
      "(11 - 2) + (5 * 3)",
      "3 * ((2 + 11) - 5)",
      "((2 + 11) - 5) * 3",
      "((3 * 5) - 2) + 11",
      "((5 * 2) + 3) + 11",
      "(3 + 11) + (5 * 2)",
      "(11 + (5 * 3)) - 2",
      "3 + ((5 * 2) + 11)",
      "3 * (11 + (2 - 5))",
      "((11 * 2) + 5) - 3",
      "3 * ((11 + 2) - 5)",
      "3 * (2 - (5 - 11))",
      "2 - (11 * (3 - 5))",
      "(5 * 3) + (11 - 2)",
      "(3 * (11 + 5)) / 2",
      "(11 + (2 - 5)) * 3",
      "(5 - 2) * (11 - 3)",
      "3 / (2 / (5 + 11))",
      "(3 * (5 + 11)) / 2",
      "((5 * 2) + 11) + 3",
      "11 + ((3 * 5) - 2)",
      "((2 - 5) + 11) * 3",
      "((11 - 5) + 2) * 3",
      "3 * (2 + (11 - 5))",
      "11 - (2 - (3 * 5))",
      "5 - (3 - (11 * 2))",
      "(2 * 5) + (11 + 3)",
      "(3 + (2 * 5)) + 11",
      "(5 * 2) + (11 + 3)",
      "3 * ((11 + 5) / 2)",
      "(5 + 11) / (2 / 3)",
      "(3 - 11) * (2 - 5)",
      "3 * ((11 - 5) + 2)",
      "(11 * 2) + (5 - 3)",
      "5 + ((2 * 11) - 3)",
      "(2 * 11) + (5 - 3)",
      "(11 + 5) / (2 / 3)",
      "((11 + 2) - 5) * 3",
      "11 + ((5 * 2) + 3)",
      "(5 - 3) + (11 * 2)",
      "(2 - (5 - 11)) * 3",
      "5 - (3 - (2 * 11))",
      "(3 * 5) - (2 - 11)",
      "3 + ((2 * 5) + 11)",
      "3 * ((5 + 11) / 2)",
      "5 + ((11 * 2) - 3)"
    ]
  },
  "2 3 5 12": {
    "cards": "2 3 5 12",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "12 / (3 - (5 / 2))"
    ]
  },
  "2 3 5 13": {
    "cards": "2 3 5 13",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "(3 * 2) + (5 + 13)",
      "(13 + 5) + (3 * 2)",
      "(3 - 5) + (13 * 2)",
      "(13 + 5) + (2 * 3)",
      "(3 * 2) + (13 + 5)",
      "((2 * 13) - 5) + 3",
      "((3 * 2) + 13) + 5",
      "3 + ((2 * 13) - 5)",
      "(13 * (5 - 3)) - 2",
      "((2 * 3) + 5) + 13",
      "((3 * 2) + 5) + 13",
      "5 + (13 + (2 * 3))",
      "(13 + (2 * 3)) + 5",
      "5 + ((3 * 2) + 13)",
      "(13 + (3 * 2)) + 5",
      "3 - (5 - (13 * 2))",
      "(2 * 13) + (3 - 5)",
      "((2 * 13) + 3) - 5",
      "(5 + (3 * 2)) + 13",
      "((13 * 2) - 5) + 3",
      "13 + ((2 * 3) + 5)",
      "3 + ((13 * 2) - 5)",
      "(3 - 5) + (2 * 13)",
      "(2 * 13) - (5 - 3)",
      "((13 * 2) + 3) - 5",
      "5 + (13 + (3 * 2))",
      "((5 - 3) * 13) - 2",
      "(5 + (2 * 3)) + 13",
      "13 + ((3 * 2) + 5)",
      "(13 * 2) + (3 - 5)",
      "(3 + (2 * 13)) - 5",
      "5 + ((2 * 3) + 13)",
      "(5 + 13) + (3 * 2)",
      "(2 * 3) + (5 + 13)",
      "13 + (5 + (2 * 3))",
      "13 + (5 + (3 * 2))",
      "(5 + 13) + (2 * 3)",
      "(13 * 2) - (5 - 3)",
      "(3 + (13 * 2)) - 5",
      "((2 * 3) + 13) + 5",
      "(2 * 3) + (13 + 5)",
      "3 - (5 - (2 * 13))"
    ]
  },
  "2 3 6 6": {
    "cards": "2 3 6 6",
    "has_solution": "Y",
    "num_solutions": 69,
    "solutions": [
      "6 * ((2 / 3) * 6)",
      "(6 * 6) * (2 / 3)",
      "(2 * (3 + 6)) + 6",
      "6 + (2 * (6 + 3))",
      "(6 / (3 / 6)) * 2",
      "(6 * 2) / (3 / 6)",
      "6 * (2 + (6 / 3))",
      "((6 * 6) / 3) * 2",
      "(2 + 6) * (6 - 3)",
      "(2 + (6 / 3)) * 6",
      "((6 / 3) * 6) * 2",
      "(6 - 3) * (2 + 6)",
      "(2 * (6 * 6)) / 3",
      "6 * ((2 * 6) / 3)",
      "((6 / 3) * 2) * 6",
      "2 * ((6 / 3) * 6)",
      "2 * ((3 * 6) - 6)",
      "6 * (6 * (2 / 3))",
      "(6 * (6 / 3)) * 2",
      "(6 * (3 + 2)) - 6",
      "2 / ((3 / 6) / 6)",
      "(2 / (3 / 6)) * 6",
      "2 * (6 / (3 / 6))",
      "((6 / 3) + 2) * 6",
      "(6 / (3 / 2)) * 6",
      "6 / (3 / (2 * 6))",
      "(6 / 3) * (2 * 6)",
      "((6 * 3) - 6) * 2",
      "(6 * (2 * 6)) / 3",
      "(6 * 6) / (3 / 2)",
      "((3 + 6) * 2) + 6",
      "6 + (2 * (3 + 6))",
      "((6 * 2) * 6) / 3",
      "2 * ((6 * 6) / 3)",
      "((3 * 6) - 6) * 2",
      "((3 + 2) * 6) - 6",
      "(2 * (6 / 3)) * 6",
      "((6 + 3) * 2) + 6",
      "(6 * 2) * (6 / 3)",
      "6 + ((6 + 3) * 2)",
      "6 * ((6 * 2) / 3)",
      "(6 / 3) * (6 * 2)",
      "(6 * (2 / 3)) * 6",
      "6 / (3 / (6 * 2))",
      "((6 * 6) * 2) / 3",
      "(6 * (2 + 3)) - 6",
      "(6 + 2) * (6 - 3)",
      "(6 - 3) * (6 + 2)",
      "6 / ((3 / 2) / 6)",
      "2 * ((6 * 3) - 6)",
      "2 / (3 / (6 * 6))",
      "(6 * (6 * 2)) / 3",
      "6 / ((3 / 6) / 2)",
      "6 * (6 / (3 / 2))",
      "((2 + 3) * 6) - 6",
      "(2 * (6 + 3)) + 6",
      "6 + ((3 + 6) * 2)",
      "(2 * 6) * (6 / 3)",
      "2 * (6 * (6 / 3))",
      "6 * ((6 / 3) + 2)",
      "(2 * 6) / (3 / 6)",
      "((2 * 6) / 3) * 6",
      "((6 * 2) / 3) * 6",
      "((2 / 3) * 6) * 6",
      "((2 * 6) * 6) / 3",
      "6 * (2 / (3 / 6))",
      "(2 / 3) * (6 * 6)",
      "6 * ((6 / 3) * 2)",
      "6 * (2 * (6 / 3))"
    ]
  },
  "2 3 6 7": {
    "cards": "2 3 6 7",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(6 / 2) + (3 * 7)",
      "3 * ((2 * 7) - 6)",
      "3 + (7 / (2 / 6))",
      "((7 * 6) / 2) + 3",
      "(6 / (2 / 7)) + 3",
      "3 + (7 * (6 / 2))",
      "3 + ((6 * 7) / 2)",
      "(6 / 2) + (7 * 3)",
      "((7 / 2) * 6) + 3",
      "3 + (6 / (2 / 7))",
      "((2 * 7) - 6) * 3",
      "((6 / 2) * 7) + 3",
      "3 + ((6 / 2) * 7)",
      "(7 * (6 / 2)) + 3",
      "3 + (6 * (7 / 2))",
      "((7 * 2) - 6) * 3",
      "3 + ((7 * 6) / 2)",
      "(7 / (2 / 6)) + 3",
      "(7 * 3) + (6 / 2)",
      "3 * ((7 * 2) - 6)",
      "3 + ((7 / 2) * 6)",
      "((6 * 7) / 2) + 3",
      "(6 * (7 / 2)) + 3",
      "(3 * 7) + (6 / 2)"
    ]
  },
  "2 3 6 8": {
    "cards": "2 3 6 8",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "8 + ((3 * 6) - 2)",
      "(8 + (3 * 6)) - 2",
      "6 - (3 * (2 - 8))",
      "(8 + (6 * 3)) - 2",
      "((8 + 2) * 3) - 6",
      "(3 * (2 + 8)) - 6",
      "6 - ((2 - 8) * 3)",
      "(8 - 2) + (6 * 3)",
      "8 - (2 - (3 * 6))",
      "6 + (3 * (8 - 2))",
      "(6 * 3) - (2 - 8)",
      "(3 * (8 + 2)) - 6",
      "((3 * 6) - 2) + 8",
      "(3 * (8 - 2)) + 6",
      "((6 * 3) - 2) + 8",
      "6 + ((8 - 2) * 3)",
      "((8 - 2) * 3) + 6",
      "((2 + 8) * 3) - 6",
      "((6 * 3) + 8) - 2",
      "(6 * 3) + (8 - 2)",
      "(3 * 6) - (2 - 8)",
      "((3 * 6) + 8) - 2",
      "8 + ((6 * 3) - 2)",
      "(8 - 2) + (3 * 6)",
      "8 - (2 - (6 * 3))",
      "(3 * 6) + (8 - 2)"
    ]
  },
  "2 3 6 9": {
    "cards": "2 3 6 9",
    "has_solution": "Y",
    "num_solutions": 80,
    "solutions": [
      "9 + (3 + (2 * 6))",
      "((9 - 2) - 3) * 6",
      "(2 + 6) / (3 / 9)",
      "2 * ((6 + 9) - 3)",
      "((6 * 2) + 3) + 9",
      "(6 + 2) * (9 / 3)",
      "((6 * 9) / 2) - 3",
      "((9 * 6) / 2) - 3",
      "((2 * 6) + 9) + 3",
      "(9 / (2 / 6)) - 3",
      "((6 + 9) - 3) * 2",
      "((9 + 6) - 3) * 2",
      "(9 - 3) * (6 - 2)",
      "9 * (3 - (2 / 6))",
      "(9 - (3 + 2)) * 6",
      "(9 + (6 * 2)) + 3",
      "9 + (3 + (6 * 2))",
      "2 * (6 + (9 - 3))",
      "((2 * 6) + 3) + 9",
      "9 * ((6 + 2) / 3)",
      "9 / (3 / (2 + 6))",
      "(6 * 2) + (3 + 9)",
      "(9 + (6 - 3)) * 2",
      "(6 + (9 - 3)) * 2",
      "6 * ((9 - 2) - 3)",
      "3 + ((2 * 6) + 9)",
      "2 * ((9 + 6) - 3)",
      "3 + (9 + (6 * 2))",
      "((9 - 3) - 2) * 6",
      "3 + (9 + (2 * 6))",
      "((2 + 6) / 3) * 9",
      "2 * (6 - (3 - 9))",
      "(6 + 2) / (3 / 9)",
      "(9 / 3) * (6 + 2)",
      "(9 * (2 + 6)) / 3",
      "9 / (3 / (6 + 2))",
      "3 + ((6 * 2) + 9)",
      "(6 * (9 / 2)) - 3",
      "(3 + 9) + (2 * 6)",
      "((6 * 2) + 9) + 3",
      "(9 - (2 + 3)) * 6",
      "(2 - 6) * (3 - 9)",
      "(9 + 3) + (6 * 2)",
      "(9 * (6 / 2)) - 3",
      "2 * ((6 - 3) + 9)",
      "9 + ((6 * 2) + 3)",
      "(9 * 3) - (6 / 2)",
      "(6 / (2 / 9)) - 3",
      "(6 - 2) * (9 - 3)",
      "(3 + (2 * 6)) + 9",
      "((9 / 2) * 6) - 3",
      "(3 * 9) - (6 / 2)",
      "(3 + (6 * 2)) + 9",
      "((6 + 2) / 3) * 9",
      "(3 + 9) + (6 * 2)",
      "(2 * 6) + (9 + 3)",
      "9 + ((2 * 6) + 3)",
      "(6 - (3 - 9)) * 2",
      "((2 + 6) * 9) / 3",
      "9 * ((2 + 6) / 3)",
      "(3 - (2 / 6)) * 9",
      "((6 + 2) * 9) / 3",
      "6 * (9 - (3 + 2))",
      "6 * ((9 - 3) - 2)",
      "2 * (9 - (3 - 6))",
      "(3 - 9) * (2 - 6)",
      "(6 * 2) + (9 + 3)",
      "(9 * (6 + 2)) / 3",
      "((9 - 3) + 6) * 2",
      "(9 - (3 - 6)) * 2",
      "2 * (9 + (6 - 3))",
      "(2 + 6) * (9 / 3)",
      "2 * ((9 - 3) + 6)",
      "(9 + 3) + (2 * 6)",
      "((6 / 2) * 9) - 3",
      "((6 - 3) + 9) * 2",
      "(9 / 3) * (2 + 6)",
      "(9 + (2 * 6)) + 3",
      "(2 * 6) + (3 + 9)",
      "6 * (9 - (2 + 3))"
    ]
  },
  "2 3 6 10": {
    "cards": "2 3 6 10",
    "has_solution": "Y",
    "num_solutions": 56,
    "solutions": [
      "((6 + 10) * 3) / 2",
      "6 * ((10 + 2) / 3)",
      "(10 - 6) * (3 * 2)",
      "(2 * 3) * (10 - 6)",
      "6 * ((2 + 10) / 3)",
      "(10 + 2) / (3 / 6)",
      "(3 - 6) * (2 - 10)",
      "(10 + 6) / (2 / 3)",
      "3 * ((10 - 6) * 2)",
      "(2 + 10) / (3 / 6)",
      "(6 / 3) * (10 + 2)",
      "((2 + 10) * 6) / 3",
      "2 * (3 * (10 - 6))",
      "6 / (3 / (2 + 10))",
      "(10 - 2) * (6 - 3)",
      "(3 * (10 - 6)) * 2",
      "6 / (3 / (10 + 2))",
      "(10 + 2) * (6 / 3)",
      "(10 - (2 * 3)) * 6",
      "6 * (10 - (3 * 2))",
      "(2 * (10 - 6)) * 3",
      "(3 * (10 + 6)) / 2",
      "(6 - 3) * (10 - 2)",
      "((10 + 2) * 6) / 3",
      "2 * ((10 - 6) * 3)",
      "((10 + 2) / 3) * 6",
      "((6 + 10) / 2) * 3",
      "2 * (10 + (6 / 3))",
      "((10 - 6) * 2) * 3",
      "((2 + 10) / 3) * 6",
      "(6 * (10 + 2)) / 3",
      "(6 + 10) / (2 / 3)",
      "3 * ((6 + 10) / 2)",
      "((10 + 6) * 3) / 2",
      "(2 + 10) * (6 / 3)",
      "2 * ((6 / 3) + 10)",
      "(3 * 2) * (10 - 6)",
      "3 * ((10 + 6) / 2)",
      "(3 * (6 + 10)) / 2",
      "(6 / 3) * (2 + 10)",
      "(6 + 10) * (3 / 2)",
      "3 / (2 / (6 + 10))",
      "((10 - 6) * 3) * 2",
      "(10 - (3 * 2)) * 6",
      "((6 / 3) + 10) * 2",
      "(3 / 2) * (10 + 6)",
      "(10 + (6 / 3)) * 2",
      "3 * (2 * (10 - 6))",
      "((10 + 6) / 2) * 3",
      "(6 * (2 + 10)) / 3",
      "(10 + 6) * (3 / 2)",
      "(3 / 2) * (6 + 10)",
      "3 / (2 / (10 + 6))",
      "(10 - 6) * (2 * 3)",
      "(2 - 10) * (3 - 6)",
      "6 * (10 - (2 * 3))"
    ]
  },
  "2 3 6 11": {
    "cards": "2 3 6 11",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "2 + (6 / (3 / 11))",
      "2 + (6 * (11 / 3))",
      "2 + (11 / (3 / 6))",
      "3 * (11 - (6 / 2))",
      "(11 / (3 / 6)) + 2",
      "((6 * 11) / 3) + 2",
      "(6 / 2) * (11 - 3)",
      "(6 / 3) + (2 * 11)",
      "2 + ((6 / 3) * 11)",
      "(11 * 2) + (6 / 3)",
      "2 + ((11 * 6) / 3)",
      "2 + ((11 / 3) * 6)",
      "(6 * (11 / 3)) + 2",
      "6 / (2 / (11 - 3))",
      "(6 / (3 / 11)) + 2",
      "2 + ((6 * 11) / 3)",
      "(11 - 3) * (6 / 2)",
      "((6 / 3) * 11) + 2",
      "(11 - 3) / (2 / 6)",
      "((11 - 3) * 6) / 2",
      "((11 - 3) / 2) * 6",
      "(11 - (6 / 2)) * 3",
      "6 * ((11 - 3) / 2)",
      "(6 * (11 - 3)) / 2",
      "((11 * 6) / 3) + 2",
      "(11 * (6 / 3)) + 2",
      "(2 * 11) + (6 / 3)",
      "((11 / 3) * 6) + 2",
      "(6 / 3) + (11 * 2)",
      "2 + (11 * (6 / 3))"
    ]
  },
  "2 3 6 12": {
    "cards": "2 3 6 12",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "((12 + 3) * 2) - 6",
      "3 * ((12 - 6) + 2)",
      "6 + ((2 * 3) + 12)",
      "(12 + 6) + (3 * 2)",
      "(3 * 2) + (6 + 12)",
      "(2 - (6 - 12)) * 3",
      "((2 * 3) + 6) + 12",
      "(3 * 6) + (12 / 2)",
      "(3 * (12 / 2)) + 6",
      "3 * (2 + (12 - 6))",
      "((12 - 6) + 2) * 3",
      "6 + ((3 * 2) + 12)",
      "((3 * 2) * 6) - 12",
      "3 * ((12 + 2) - 6)",
      "(3 * 12) - (2 * 6)",
      "12 + ((6 - 2) * 3)",
      "6 + (2 * (12 - 3))",
      "((6 * 3) * 2) - 12",
      "(12 - (6 - 2)) * 3",
      "6 + (3 / (2 / 12))",
      "(2 * (6 * 3)) - 12",
      "12 + (6 + (2 * 3))",
      "((12 - 3) * 2) + 6",
      "(12 + (2 * 3)) + 6",
      "(12 / (2 / 3)) + 6",
      "((3 + 12) * 2) - 6",
      "(6 + 12) + (3 * 2)",
      "((2 * 6) * 3) - 12",
      "(2 + (12 - 6)) * 3",
      "6 + ((12 - 3) * 2)",
      "((12 - 2) * 3) - 6",
      "(6 * 3) + (12 / 2)",
      "3 * (12 + (2 - 6))",
      "6 - (2 * (3 - 12))",
      "(6 * (3 * 2)) - 12",
      "6 + ((3 / 2) * 12)",
      "(12 / 2) + (3 * 6)",
      "6 + ((12 / 2) * 3)",
      "((3 / 2) * 12) + 6",
      "(12 * 3) - (6 * 2)",
      "(12 * 3) - (2 * 6)",
      "(12 * (3 / 2)) + 6",
      "(3 * 2) + (12 + 6)",
      "(3 * 12) - (6 * 2)",
      "((12 / 2) * 3) + 6",
      "6 + ((12 * 3) / 2)",
      "((3 * 2) + 12) + 6",
      "((2 * 3) * 6) - 12",
      "6 + (12 + (2 * 3))",
      "((3 * 6) * 2) - 12",
      "(6 + (3 * 2)) + 12",
      "(2 * (3 * 6)) - 12",
      "(6 * (2 * 3)) - 12",
      "(3 * (6 * 2)) - 12",
      "12 + ((2 * 3) + 6)",
      "3 * ((2 + 12) - 6)",
      "(2 * (12 + 3)) - 6",
      "(2 * 3) + (12 + 6)",
      "((2 * 3) + 12) + 6",
      "(12 + (3 * 2)) + 6",
      "(12 + (2 - 6)) * 3",
      "((2 + 12) - 6) * 3",
      "12 - ((2 - 6) * 3)",
      "6 + (12 * (3 / 2))",
      "6 + (3 * (12 / 2))",
      "6 + ((3 * 12) / 2)",
      "((3 * 2) + 6) + 12",
      "3 * ((2 - 6) + 12)",
      "((6 * 2) * 3) - 12",
      "6 - ((3 - 12) * 2)",
      "((12 + 2) - 6) * 3",
      "6 + (12 + (3 * 2))",
      "(6 + 12) + (2 * 3)",
      "12 + ((3 * 2) + 6)",
      "3 * (12 - (6 - 2))",
      "((2 - 6) + 12) * 3",
      "((3 * 12) / 2) + 6",
      "12 + (6 + (3 * 2))",
      "(12 / 2) + (6 * 3)",
      "6 + (12 / (2 / 3))",
      "((6 - 2) * 3) + 12",
      "(2 * 3) + (6 + 12)",
      "12 + (3 * (6 - 2))",
      "(3 * (6 - 2)) + 12",
      "(3 / (2 / 12)) + 6",
      "(2 * (3 + 12)) - 6",
      "3 * (2 - (6 - 12))",
      "12 - (3 * (2 - 6))",
      "(3 * (2 * 6)) - 12",
      "(2 * (12 - 3)) + 6",
      "(12 + 6) + (2 * 3)",
      "((12 * 3) / 2) + 6",
      "(6 + (2 * 3)) + 12",
      "(3 * (12 - 2)) - 6"
    ]
  },
  "2 3 6 13": {
    "cards": "2 3 6 13",
    "has_solution": "Y",
    "num_solutions": 130,
    "solutions": [
      "(6 + (3 + 2)) + 13",
      "(6 + (3 + 13)) + 2",
      "13 + (2 + (3 + 6))",
      "(2 * 13) - (6 / 3)",
      "((2 + 3) + 6) + 13",
      "((6 + 13) + 2) + 3",
      "2 + ((13 + 6) + 3)",
      "((13 + 2) + 6) + 3",
      "2 + (6 + (3 + 13))",
      "(2 + (13 + 3)) + 6",
      "((13 + 2) + 3) + 6",
      "((13 + 3) + 2) + 6",
      "((6 + 13) + 3) + 2",
      "((13 / 3) * 6) - 2",
      "13 + (6 + (3 + 2))",
      "(6 + 13) + (2 + 3)",
      "(3 + (6 + 2)) + 13",
      "((2 + 13) + 3) + 6",
      "(13 + 3) + (6 + 2)",
      "(2 + (13 + 6)) + 3",
      "13 + ((3 + 6) + 2)",
      "13 + (2 + (6 + 3))",
      "3 + (13 + (2 + 6))",
      "3 + ((6 + 13) + 2)",
      "3 + (6 + (2 + 13))",
      "(2 + 13) + (6 + 3)",
      "3 + ((6 + 2) + 13)",
      "6 + ((2 + 13) + 3)",
      "(3 + 2) + (13 + 6)",
      "(6 + (13 + 3)) + 2",
      "((3 + 6) + 13) + 2",
      "(2 + (6 + 13)) + 3",
      "(2 + (3 + 6)) + 13",
      "13 + ((6 + 3) + 2)",
      "((6 + 2) + 13) + 3",
      "((3 + 13) + 6) + 2",
      "2 + ((13 + 3) + 6)",
      "((6 + 2) + 3) + 13",
      "(3 + 6) + (2 + 13)",
      "3 + ((2 + 6) + 13)",
      "6 + ((13 + 2) + 3)",
      "(2 + (3 + 13)) + 6",
      "6 + ((3 + 2) + 13)",
      "(6 + 13) + (3 + 2)",
      "(13 + 2) + (3 + 6)",
      "(3 + 2) + (6 + 13)",
      "13 + ((2 + 6) + 3)",
      "(6 + 2) + (3 + 13)",
      "((3 + 6) + 2) + 13",
      "2 + (3 + (6 + 13))",
      "(3 + (2 + 13)) + 6",
      "(3 + 13) + (6 + 2)",
      "(2 + 13) + (3 + 6)",
      "13 + (6 + (2 + 3))",
      "2 + ((6 + 3) + 13)",
      "6 + (13 + (3 + 2))",
      "(6 + 2) + (13 + 3)",
      "6 + ((2 + 3) + 13)",
      "(2 + (6 + 3)) + 13",
      "(6 + (2 + 3)) + 13",
      "13 + (3 + (6 + 2))",
      "3 + (13 + (6 + 2))",
      "((2 + 13) + 6) + 3",
      "6 + (2 + (13 + 3))",
      "2 + (6 + (13 + 3))",
      "(13 + (3 + 6)) + 2",
      "(13 + 6) + (2 + 3)",
      "13 + ((6 + 2) + 3)",
      "(3 + (13 + 6)) + 2",
      "3 + (2 + (13 + 6))",
      "3 + (2 + (6 + 13))",
      "(13 + (3 + 2)) + 6",
      "(6 + (13 + 2)) + 3",
      "(3 + (13 + 2)) + 6",
      "(3 + 6) + (13 + 2)",
      "(6 * (13 / 3)) - 2",
      "((6 / 3) * 13) - 2",
      "((13 + 6) + 3) + 2",
      "6 + (3 + (13 + 2))",
      "(2 + 6) + (3 + 13)",
      "(13 * (6 / 3)) - 2",
      "(6 + 3) + (2 + 13)",
      "2 + (13 + (6 + 3))",
      "(3 + 13) + (2 + 6)",
      "(6 + (2 + 13)) + 3",
      "6 + ((13 + 3) + 2)",
      "(3 + (2 + 6)) + 13",
      "((2 + 6) + 13) + 3",
      "((6 * 13) / 3) - 2",
      "(6 / (3 / 13)) - 2",
      "13 + (3 + (2 + 6))",
      "((6 + 3) + 2) + 13",
      "((2 + 6) + 3) + 13",
      "(13 / (3 / 6)) - 2",
      "((2 + 3) + 13) + 6",
      "6 + (13 + (2 + 3))",
      "(13 + 6) + (3 + 2)",
      "13 + ((2 + 3) + 6)",
      "(2 + 6) + (13 + 3)",
      "3 + ((13 + 2) + 6)",
      "(13 + (2 + 6)) + 3",
      "(13 + 2) + (6 + 3)",
      "(2 + 3) + (13 + 6)",
      "13 + ((3 + 2) + 6)",
      "3 + ((2 + 13) + 6)",
      "6 + (2 + (3 + 13))",
      "2 + ((3 + 6) + 13)",
      "(13 + 3) + (2 + 6)",
      "(13 + (6 + 3)) + 2",
      "(13 * 2) - (6 / 3)",
      "((3 + 2) + 6) + 13",
      "((6 + 3) + 13) + 2",
      "2 + ((3 + 13) + 6)",
      "(13 + (2 + 3)) + 6",
      "(3 + (6 + 13)) + 2",
      "(2 + 3) + (6 + 13)",
      "((13 * 6) / 3) - 2",
      "2 + ((6 + 13) + 3)",
      "2 + (3 + (13 + 6))",
      "((3 + 2) + 13) + 6",
      "((13 + 6) + 2) + 3",
      "((13 + 3) + 6) + 2",
      "3 + (6 + (13 + 2))",
      "6 + (3 + (2 + 13))",
      "((3 + 13) + 2) + 6",
      "(6 + 3) + (13 + 2)",
      "(13 + (6 + 2)) + 3",
      "2 + (13 + (3 + 6))",
      "3 + ((13 + 6) + 2)",
      "6 + ((3 + 13) + 2)"
    ]
  },
  "2 3 7 7": {
    "cards": "2 3 7 7",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(3 + (2 * 7)) + 7",
      "((2 * 7) + 7) + 3",
      "3 + (7 + (7 * 2))",
      "(3 + (7 * 2)) + 7",
      "(7 + 3) + (2 * 7)",
      "(2 * 7) + (7 + 3)",
      "((2 * 7) + 3) + 7",
      "7 + ((7 * 2) + 3)",
      "7 + ((2 * 7) + 3)",
      "3 + ((7 * 2) + 7)",
      "((7 * 2) + 7) + 3",
      "7 + (3 + (7 * 2))",
      "(7 * 2) + (3 + 7)",
      "(7 + 3) + (7 * 2)",
      "3 + ((2 * 7) + 7)",
      "3 + (7 + (2 * 7))",
      "7 + (3 + (2 * 7))",
      "(7 + (2 * 7)) + 3",
      "(3 + 7) + (7 * 2)",
      "(3 + 7) + (2 * 7)",
      "(7 + (7 * 2)) + 3",
      "(7 * 2) + (7 + 3)",
      "(2 * 7) + (3 + 7)",
      "((7 * 2) + 3) + 7"
    ]
  },
  "2 3 7 8": {
    "cards": "2 3 7 8",
    "has_solution": "Y",
    "num_solutions": 37,
    "solutions": [
      "(7 - 3) * (8 - 2)",
      "((8 - 3) + 7) * 2",
      "8 / (3 / (7 + 2))",
      "(7 + (8 - 3)) * 2",
      "(2 + 7) * (8 / 3)",
      "(8 / 3) * (2 + 7)",
      "(7 + 2) / (3 / 8)",
      "(7 - (3 - 8)) * 2",
      "(2 + 7) / (3 / 8)",
      "8 / ((7 / 3) - 2)",
      "((2 + 7) * 8) / 3",
      "2 * (8 + (7 - 3))",
      "((8 + 7) - 3) * 2",
      "2 * ((8 + 7) - 3)",
      "2 * ((8 - 3) + 7)",
      "2 * ((7 - 3) + 8)",
      "8 * ((2 + 7) / 3)",
      "8 * ((7 + 2) / 3)",
      "2 * (7 - (3 - 8))",
      "((7 + 8) - 3) * 2",
      "(7 + 2) * (8 / 3)",
      "(8 - 2) * (7 - 3)",
      "8 / (3 / (2 + 7))",
      "((2 + 7) / 3) * 8",
      "(8 - (3 - 7)) * 2",
      "((7 + 2) / 3) * 8",
      "(8 * (7 + 2)) / 3",
      "(2 - 8) * (3 - 7)",
      "(8 + (7 - 3)) * 2",
      "2 * (8 - (3 - 7))",
      "(8 * (2 + 7)) / 3",
      "(3 - 7) * (2 - 8)",
      "((7 + 2) * 8) / 3",
      "((7 - 3) + 8) * 2",
      "(8 / 3) * (7 + 2)",
      "2 * ((7 + 8) - 3)",
      "2 * (7 + (8 - 3))"
    ]
  },
  "2 3 7 9": {
    "cards": "2 3 7 9",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((9 + 7) * 3) / 2",
      "((7 + 9) * 3) / 2",
      "(3 * (7 - 2)) + 9",
      "(7 + 9) / (2 / 3)",
      "(9 + 7) / (2 / 3)",
      "((7 + 9) / 2) * 3",
      "3 * ((7 + 9) / 2)",
      "((7 * 3) - 9) * 2",
      "(9 + 7) * (3 / 2)",
      "(3 / 2) * (9 + 7)",
      "9 + (3 * (7 - 2))",
      "3 / (2 / (7 + 9))",
      "3 / (2 / (9 + 7))",
      "(7 + 9) * (3 / 2)",
      "9 + ((7 - 2) * 3)",
      "9 - (3 * (2 - 7))",
      "((3 * 7) - 9) * 2",
      "9 - ((2 - 7) * 3)",
      "2 * ((3 * 7) - 9)",
      "(3 / 2) * (7 + 9)",
      "2 * ((7 * 3) - 9)",
      "(3 * (7 + 9)) / 2",
      "((9 + 7) / 2) * 3",
      "((7 - 2) * 3) + 9",
      "(3 * (9 + 7)) / 2",
      "3 * ((9 + 7) / 2)"
    ]
  },
  "2 3 7 10": {
    "cards": "2 3 7 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "7 - (3 - (2 * 10))",
      "((2 * 10) + 7) - 3",
      "(7 + (10 * 2)) - 3",
      "(10 * 2) - (3 - 7)",
      "(7 + (2 * 10)) - 3",
      "((2 * 10) - 3) + 7",
      "(7 - 3) + (10 * 2)",
      "7 + ((10 * 2) - 3)",
      "(7 - 3) + (2 * 10)",
      "7 + ((2 * 10) - 3)",
      "(2 * 10) - (3 - 7)",
      "(10 * 2) + (7 - 3)",
      "((10 * 2) - 3) + 7",
      "((7 * 10) + 2) / 3",
      "7 - (3 - (10 * 2))",
      "(2 + (10 * 7)) / 3",
      "((10 * 7) + 2) / 3",
      "((10 * 2) + 7) - 3",
      "(2 + (7 * 10)) / 3",
      "(2 * 10) + (7 - 3)"
    ]
  },
  "2 3 7 11": {
    "cards": "2 3 7 11",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "11 + (7 + (2 * 3))",
      "(2 * (11 - 7)) * 3",
      "(3 * 11) - (2 + 7)",
      "(3 * 2) + (7 + 11)",
      "(11 * 3) - (2 + 7)",
      "(2 * 3) + (11 + 7)",
      "11 + ((2 * 3) + 7)",
      "((11 - 7) * 3) * 2",
      "(3 * 2) + (11 + 7)",
      "((11 - 7) * 2) * 3",
      "7 + (11 + (2 * 3))",
      "((3 * 2) + 7) + 11",
      "7 + (11 + (3 * 2))",
      "2 * ((11 - 7) * 3)",
      "(7 + (2 * 3)) + 11",
      "3 * (2 * (11 - 7))",
      "((3 * 11) - 2) - 7",
      "((3 + 2) * 7) - 11",
      "(3 * 11) - (7 + 2)",
      "11 + ((3 * 2) + 7)",
      "3 * ((11 - 7) * 2)",
      "((3 * 2) + 11) + 7",
      "(3 * 2) * (11 - 7)",
      "(3 * (11 - 7)) * 2",
      "((11 * 3) - 2) - 7",
      "((2 * 3) + 7) + 11",
      "(11 + (3 * 2)) + 7",
      "11 + (7 + (3 * 2))",
      "(7 + 11) + (3 * 2)",
      "((3 * 11) - 7) - 2",
      "7 + ((2 * 3) + 11)",
      "(7 + (3 * 2)) + 11",
      "(11 + (2 * 3)) + 7",
      "(11 - 7) * (3 * 2)",
      "(2 * 3) + (7 + 11)",
      "((2 + 3) * 7) - 11",
      "(11 + 7) + (2 * 3)",
      "(7 + 11) + (2 * 3)",
      "(11 * 3) - (7 + 2)",
      "2 * (3 * (11 - 7))",
      "(7 * (3 + 2)) - 11",
      "(7 * (2 + 3)) - 11",
      "((11 * 3) - 7) - 2",
      "(2 * 3) * (11 - 7)",
      "7 + ((3 * 2) + 11)",
      "((2 * 3) + 11) + 7",
      "(11 - 7) * (2 * 3)",
      "(11 + 7) + (3 * 2)"
    ]
  },
  "2 3 7 12": {
    "cards": "2 3 7 12",
    "has_solution": "Y",
    "num_solutions": 137,
    "solutions": [
      "2 + (3 + (12 + 7))",
      "2 + (12 + (3 + 7))",
      "((3 + 7) + 2) + 12",
      "(3 + 7) + (2 + 12)",
      "(3 + (2 + 12)) + 7",
      "((7 + 3) + 2) + 12",
      "(3 + 12) + (7 + 2)",
      "3 + ((7 + 2) + 12)",
      "2 + ((3 + 12) + 7)",
      "(7 + (12 + 2)) + 3",
      "2 + ((12 + 7) + 3)",
      "(12 + (3 + 7)) + 2",
      "3 + (2 + (7 + 12))",
      "(7 + (3 + 12)) + 2",
      "7 + ((3 + 12) + 2)",
      "((7 - 2) - 3) * 12",
      "12 / (2 / (7 - 3))",
      "(7 + 12) + (2 + 3)",
      "((12 + 2) + 7) + 3",
      "2 + ((7 + 3) + 12)",
      "(2 + 12) + (3 + 7)",
      "7 + ((12 + 3) + 2)",
      "(7 - 3) / (2 / 12)",
      "((12 + 7) + 2) + 3",
      "(2 + (3 + 12)) + 7",
      "2 + ((12 + 3) + 7)",
      "7 + (12 + (2 + 3))",
      "(3 + (7 + 2)) + 12",
      "12 * ((7 - 3) / 2)",
      "2 + ((3 + 7) + 12)",
      "12 + ((7 + 3) + 2)",
      "(3 + (7 + 12)) + 2",
      "12 * ((7 - 2) - 3)",
      "((7 + 12) + 3) + 2",
      "3 + ((12 + 7) + 2)",
      "7 + (3 + (2 + 12))",
      "(2 + (3 + 7)) + 12",
      "(3 + 2) + (12 + 7)",
      "(12 + (7 + 3)) + 2",
      "3 + ((7 + 12) + 2)",
      "(7 - (2 + 3)) * 12",
      "(12 + 3) + (2 + 7)",
      "12 + ((3 + 7) + 2)",
      "((2 + 12) + 7) + 3",
      "(7 + 3) + (2 + 12)",
      "((2 + 3) + 7) + 12",
      "2 + (3 + (7 + 12))",
      "(7 + 12) + (3 + 2)",
      "(12 + (7 + 2)) + 3",
      "3 + (2 + (12 + 7))",
      "((7 - 3) * 12) / 2",
      "((12 + 7) + 3) + 2",
      "2 + (7 + (12 + 3))",
      "3 + (12 + (2 + 7))",
      "12 / ((7 / 2) - 3)",
      "12 + (7 + (2 + 3))",
      "((3 + 7) + 12) + 2",
      "12 * (7 - (3 + 2))",
      "(7 + 3) + (12 + 2)",
      "3 + (7 + (2 + 12))",
      "(2 + (7 + 12)) + 3",
      "12 + ((3 + 2) + 7)",
      "(2 + (12 + 3)) + 7",
      "7 + (2 + (3 + 12))",
      "12 + (2 + (3 + 7))",
      "((3 + 2) + 7) + 12",
      "((2 + 7) + 3) + 12",
      "(3 + 7) + (12 + 2)",
      "(12 + 2) + (3 + 7)",
      "((7 - 3) / 2) * 12",
      "12 + (2 + (7 + 3))",
      "(7 + (3 + 2)) + 12",
      "((7 + 12) + 2) + 3",
      "((7 + 3) + 12) + 2",
      "((2 + 12) + 3) + 7",
      "(2 + 3) + (7 + 12)",
      "((12 + 3) + 2) + 7",
      "3 + (12 + (7 + 2))",
      "(3 + (2 + 7)) + 12",
      "(7 + (12 + 3)) + 2",
      "((2 + 7) + 12) + 3",
      "(2 + 3) + (12 + 7)",
      "(12 + 3) + (7 + 2)",
      "((7 - 3) - 2) * 12",
      "((12 + 2) + 3) + 7",
      "12 + (3 + (2 + 7))",
      "((7 + 2) + 3) + 12",
      "(12 + 7) + (2 + 3)",
      "12 + ((2 + 7) + 3)",
      "((3 + 12) + 7) + 2",
      "3 + ((2 + 12) + 7)",
      "((3 + 2) + 12) + 7",
      "(12 + (2 + 3)) + 7",
      "12 * ((7 - 3) - 2)",
      "(7 - 3) * (12 / 2)",
      "((12 + 3) + 7) + 2",
      "12 + (7 + (3 + 2))",
      "(2 + 12) + (7 + 3)",
      "3 + ((12 + 2) + 7)",
      "12 + ((7 + 2) + 3)",
      "2 + (12 + (7 + 3))",
      "(12 + 7) + (3 + 2)",
      "7 + ((2 + 12) + 3)",
      "(12 + (3 + 2)) + 7",
      "(7 + (2 + 12)) + 3",
      "7 + ((3 + 2) + 12)",
      "(12 + (2 + 7)) + 3",
      "7 + (2 + (12 + 3))",
      "(12 + 2) + (7 + 3)",
      "12 + (3 + (7 + 2))",
      "(7 - (3 + 2)) * 12",
      "(12 / 2) * (7 - 3)",
      "(7 + 2) + (12 + 3)",
      "7 + (3 + (12 + 2))",
      "(3 + 2) + (7 + 12)",
      "7 + (12 + (3 + 2))",
      "((3 + 12) + 2) + 7",
      "((7 + 2) + 12) + 3",
      "(2 + (12 + 7)) + 3",
      "2 + (7 + (3 + 12))",
      "7 + ((2 + 3) + 12)",
      "(2 + 7) + (12 + 3)",
      "(12 * (7 - 3)) / 2",
      "(2 + (7 + 3)) + 12",
      "12 + ((2 + 3) + 7)",
      "(3 + (12 + 2)) + 7",
      "3 + ((2 + 7) + 12)",
      "12 * (7 - (2 + 3))",
      "(3 + (12 + 7)) + 2",
      "(7 + (2 + 3)) + 12",
      "3 + (7 + (12 + 2))",
      "(7 + 2) + (3 + 12)",
      "((2 + 3) + 12) + 7",
      "(3 + 12) + (2 + 7)",
      "7 + ((12 + 2) + 3)",
      "(2 + 7) + (3 + 12)",
      "2 + ((7 + 12) + 3)"
    ]
  },
  "2 3 7 13": {
    "cards": "2 3 7 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((7 * 2) - 3) + 13",
      "(13 - (7 - 2)) * 3",
      "((2 + 13) - 7) * 3",
      "((13 - 7) + 2) * 3",
      "(2 - (7 - 13)) * 3",
      "((2 * 7) - 3) + 13",
      "(13 - 3) + (2 * 7)",
      "13 - (3 - (7 * 2))",
      "3 * (13 - (7 - 2))",
      "3 * ((2 + 13) - 7)",
      "3 * ((13 - 7) + 2)",
      "3 * ((13 + 2) - 7)",
      "3 * ((2 - 7) + 13)",
      "(13 - 3) + (7 * 2)",
      "(7 * 2) + (13 - 3)",
      "((13 + 2) - 7) * 3",
      "((2 * 7) + 13) - 3",
      "3 * (2 - (7 - 13))",
      "(13 + (2 - 7)) * 3",
      "(2 * 7) - (3 - 13)",
      "(13 + (2 * 7)) - 3",
      "(2 * 7) + (13 - 3)",
      "3 * (13 + (2 - 7))",
      "(7 * 2) - (3 - 13)",
      "(2 + (13 - 7)) * 3",
      "13 + ((7 * 2) - 3)",
      "3 * (2 + (13 - 7))",
      "((2 - 7) + 13) * 3",
      "13 - (3 - (2 * 7))",
      "13 + ((2 * 7) - 3)",
      "((7 * 2) + 13) - 3",
      "(13 + (7 * 2)) - 3"
    ]
  },
  "2 3 8 8": {
    "cards": "2 3 8 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "8 * (8 - (2 + 3))",
      "((8 + 8) / 2) * 3",
      "((8 * 2) - 8) * 3",
      "((2 * 8) - 8) * 3",
      "3 * ((8 * 2) - 8)",
      "(8 + 8) / (2 / 3)",
      "((8 + 8) * 3) / 2",
      "(8 - (2 + 3)) * 8",
      "(8 + 8) * (3 / 2)",
      "8 * ((8 - 3) - 2)",
      "(8 - (3 + 2)) * 8",
      "(3 / 2) * (8 + 8)",
      "3 / (2 / (8 + 8))",
      "3 * ((2 * 8) - 8)",
      "(3 * (8 + 8)) / 2",
      "((8 - 3) - 2) * 8",
      "((8 - 2) - 3) * 8",
      "8 * (8 - (3 + 2))",
      "3 * ((8 + 8) / 2)",
      "8 * ((8 - 2) - 3)"
    ]
  },
  "2 3 8 9": {
    "cards": "2 3 8 9",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(9 - 3) * (8 / 2)",
      "(8 * (9 - 3)) / 2",
      "8 / (2 / (9 - 3))",
      "8 * (9 - (2 * 3))",
      "8 * ((9 - 3) / 2)",
      "((9 - 3) / 2) * 8",
      "8 * (9 - (3 * 2))",
      "(9 - 3) / (2 / 8)",
      "(9 - (3 * 2)) * 8",
      "(8 / 2) * (9 - 3)",
      "((9 - 3) * 8) / 2",
      "(9 - (2 * 3)) * 8"
    ]
  },
  "2 3 8 10": {
    "cards": "2 3 8 10",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(10 + (2 * 3)) + 8",
      "2 - (8 - (10 * 3))",
      "(3 * 10) - (8 - 2)",
      "(8 + (2 * 3)) + 10",
      "(2 * 3) + (8 + 10)",
      "(2 + (10 * 3)) - 8",
      "((3 * 2) + 10) + 8",
      "(8 + 10) + (3 * 2)",
      "(2 * 3) + (10 + 8)",
      "8 + (10 + (3 * 2))",
      "10 + (8 + (3 * 2))",
      "(10 * 3) - (8 - 2)",
      "((10 * 3) + 2) - 8",
      "8 + ((3 * 2) + 10)",
      "2 + ((3 * 10) - 8)",
      "(2 + (3 * 10)) - 8",
      "8 + ((2 * 3) + 10)",
      "((2 * 3) + 8) + 10",
      "(2 - 8) + (10 * 3)",
      "((3 * 10) + 2) - 8",
      "(3 * 10) + (2 - 8)",
      "((3 * 2) + 8) + 10",
      "((3 * 10) - 8) + 2",
      "2 + ((10 * 3) - 8)",
      "(8 + 10) + (2 * 3)",
      "10 + (8 + (2 * 3))",
      "(10 * 3) + (2 - 8)",
      "(2 - 8) + (3 * 10)",
      "10 + ((3 * 2) + 8)",
      "(10 + 8) + (2 * 3)",
      "(8 + (3 * 2)) + 10",
      "10 + ((2 * 3) + 8)",
      "(10 + 8) + (3 * 2)",
      "2 - (8 - (3 * 10))",
      "(10 + (3 * 2)) + 8",
      "8 + (10 + (2 * 3))",
      "(3 * 2) + (10 + 8)",
      "(3 * 2) + (8 + 10)",
      "((10 * 3) - 8) + 2",
      "((2 * 3) + 10) + 8"
    ]
  },
  "2 3 8 11": {
    "cards": "2 3 8 11",
    "has_solution": "Y",
    "num_solutions": 150,
    "solutions": [
      "3 + ((11 + 8) + 2)",
      "((2 + 3) + 11) + 8",
      "(2 + (8 + 3)) + 11",
      "8 + ((2 + 3) + 11)",
      "(2 * 8) - (3 - 11)",
      "11 + (8 + (3 + 2))",
      "3 + (8 + (2 + 11))",
      "8 - ((3 - 11) * 2)",
      "3 + (8 + (11 + 2))",
      "11 + ((2 + 8) + 3)",
      "3 + (11 + (8 + 2))",
      "(2 + 11) + (3 + 8)",
      "3 + ((2 + 11) + 8)",
      "(8 + 11) + (2 + 3)",
      "((8 + 2) + 11) + 3",
      "8 + (11 + (3 + 2))",
      "((8 * 2) + 11) - 3",
      "2 + ((11 + 3) + 8)",
      "(2 * (11 - 3)) + 8",
      "(2 + 3) + (11 + 8)",
      "((2 + 8) + 11) + 3",
      "11 + (2 + (8 + 3))",
      "(11 + 8) + (2 + 3)",
      "((8 + 2) + 3) + 11",
      "(2 + (11 + 8)) + 3",
      "(8 + 2) + (3 + 11)",
      "2 + (11 + (8 + 3))",
      "11 + (8 + (2 + 3))",
      "(3 + 11) + (8 + 2)",
      "3 + (2 + (8 + 11))",
      "((3 + 2) + 8) + 11",
      "((11 + 8) + 2) + 3",
      "(11 + 2) + (3 + 8)",
      "((3 + 11) + 2) + 8",
      "(11 - 2) / (3 / 8)",
      "8 + (2 + (3 + 11))",
      "(11 + 2) + (8 + 3)",
      "((11 - 2) / 3) * 8",
      "8 + ((11 - 3) * 2)",
      "8 - (2 * (3 - 11))",
      "((8 + 11) + 2) + 3",
      "(11 + (2 + 3)) + 8",
      "(2 + 8) + (11 + 3)",
      "(11 - 3) + (8 * 2)",
      "(11 + (2 + 8)) + 3",
      "(8 + (3 + 11)) + 2",
      "2 + ((8 + 11) + 3)",
      "8 + (3 + (11 + 2))",
      "(3 + (11 + 2)) + 8",
      "((2 + 11) + 3) + 8",
      "(8 * (11 - 2)) / 3",
      "11 - (3 - (2 * 8))",
      "(11 + (8 + 3)) + 2",
      "2 + ((8 + 3) + 11)",
      "3 + (2 + (11 + 8))",
      "(8 + 2) + (11 + 3)",
      "2 + (11 + (3 + 8))",
      "(2 + 11) + (8 + 3)",
      "(11 - 3) + (2 * 8)",
      "8 + ((2 + 11) + 3)",
      "((2 * 8) - 3) + 11",
      "(11 + 3) + (2 + 8)",
      "(11 - 2) * (8 / 3)",
      "(2 + 8) + (3 + 11)",
      "((11 - 3) * 2) + 8",
      "((11 + 3) + 2) + 8",
      "3 + ((11 + 2) + 8)",
      "((3 + 2) + 11) + 8",
      "(8 + (11 + 3)) + 2",
      "((8 * 2) - 3) + 11",
      "2 + (3 + (8 + 11))",
      "(11 + 8) + (3 + 2)",
      "11 + (3 + (2 + 8))",
      "3 + ((2 + 8) + 11)",
      "3 + ((8 + 11) + 2)",
      "((2 + 11) + 8) + 3",
      "((3 + 8) + 11) + 2",
      "8 + ((11 + 3) + 2)",
      "3 + (11 + (2 + 8))",
      "(3 + (8 + 11)) + 2",
      "11 + ((2 + 3) + 8)",
      "((8 + 3) + 2) + 11",
      "11 + ((2 * 8) - 3)",
      "8 + (11 + (2 + 3))",
      "11 + (3 + (8 + 2))",
      "11 + (2 + (3 + 8))",
      "2 + ((3 + 11) + 8)",
      "11 + ((3 + 2) + 8)",
      "2 + ((11 + 8) + 3)",
      "2 + (8 + (11 + 3))",
      "(8 + (2 + 11)) + 3",
      "3 + ((8 + 2) + 11)",
      "11 + ((8 * 2) - 3)",
      "(3 + (2 + 8)) + 11",
      "11 - (3 - (8 * 2))",
      "(8 / 3) * (11 - 2)",
      "(8 + 11) + (3 + 2)",
      "8 + ((11 + 2) + 3)",
      "(8 + 3) + (11 + 2)",
      "(8 + 3) + (2 + 11)",
      "(3 + 8) + (2 + 11)",
      "(11 + (2 * 8)) - 3",
      "(2 + 3) + (8 + 11)",
      "(2 + (3 + 8)) + 11",
      "(2 + (8 + 11)) + 3",
      "((11 + 3) + 8) + 2",
      "8 + (3 + (2 + 11))",
      "2 + (3 + (11 + 8))",
      "(8 + (2 + 3)) + 11",
      "((2 + 8) + 3) + 11",
      "8 / (3 / (11 - 2))",
      "(8 * 2) + (11 - 3)",
      "(3 + 11) + (2 + 8)",
      "(3 + (8 + 2)) + 11",
      "((11 + 8) + 3) + 2",
      "8 * ((11 - 2) / 3)",
      "11 + ((8 + 2) + 3)",
      "(2 + (3 + 11)) + 8",
      "8 + ((3 + 11) + 2)",
      "8 + (2 * (11 - 3))",
      "8 + (2 + (11 + 3))",
      "(3 + (11 + 8)) + 2",
      "2 + (8 + (3 + 11))",
      "(11 + (8 * 2)) - 3",
      "((11 - 2) * 8) / 3",
      "11 + ((8 + 3) + 2)",
      "(2 * 8) + (11 - 3)",
      "((11 + 2) + 3) + 8",
      "((3 + 8) + 2) + 11",
      "((3 + 11) + 8) + 2",
      "(11 + (3 + 8)) + 2",
      "(3 + 2) + (8 + 11)",
      "8 + ((3 + 2) + 11)",
      "(8 + (11 + 2)) + 3",
      "(8 + (3 + 2)) + 11",
      "(3 + 8) + (11 + 2)",
      "11 + ((3 + 8) + 2)",
      "(3 + 2) + (11 + 8)",
      "(8 * 2) - (3 - 11)",
      "(2 + (11 + 3)) + 8",
      "((2 + 3) + 8) + 11",
      "((8 + 3) + 11) + 2",
      "(11 + (3 + 2)) + 8",
      "(3 + (2 + 11)) + 8",
      "2 + ((3 + 8) + 11)",
      "((8 + 11) + 3) + 2",
      "((2 * 8) + 11) - 3",
      "(11 + 3) + (8 + 2)",
      "(11 + (8 + 2)) + 3",
      "((11 + 2) + 8) + 3"
    ]
  },
  "2 3 8 12": {
    "cards": "2 3 8 12",
    "has_solution": "Y",
    "num_solutions": 52,
    "solutions": [
      "3 * (2 * (12 - 8))",
      "(3 * 2) * (12 - 8)",
      "((3 * 8) - 12) * 2",
      "(8 - (2 * 3)) * 12",
      "(8 + (12 / 3)) * 2",
      "2 * ((12 / 3) + 8)",
      "(3 * (12 - 8)) * 2",
      "12 + ((3 / 2) * 8)",
      "(8 - 2) * (12 / 3)",
      "(12 / 3) * (8 - 2)",
      "12 / (3 / (8 - 2))",
      "(12 - 8) * (3 * 2)",
      "((3 / 2) * 8) + 12",
      "(3 * (8 / 2)) + 12",
      "12 + ((8 / 2) * 3)",
      "12 * (8 - (2 * 3))",
      "12 + (8 / (2 / 3))",
      "(8 - 2) / (3 / 12)",
      "((12 - 8) * 3) * 2",
      "(12 - 8) * (2 * 3)",
      "3 * (12 - (8 / 2))",
      "12 * (8 - (3 * 2))",
      "2 * (8 + (12 / 3))",
      "((8 * 3) - 12) * 2",
      "((12 / 2) - 3) * 8",
      "((8 / 2) * 3) + 12",
      "((3 * 8) / 2) + 12",
      "2 * ((8 * 3) - 12)",
      "(8 - (3 * 2)) * 12",
      "(2 * 3) * (12 - 8)",
      "(8 * (3 / 2)) + 12",
      "(12 - (8 / 2)) * 3",
      "12 + (3 / (2 / 8))",
      "12 + (8 * (3 / 2))",
      "((8 - 2) / 3) * 12",
      "((12 / 3) + 8) * 2",
      "12 * ((8 - 2) / 3)",
      "((8 - 2) * 12) / 3",
      "2 * ((12 - 8) * 3)",
      "3 * ((12 - 8) * 2)",
      "2 * ((3 * 8) - 12)",
      "((12 - 8) * 2) * 3",
      "12 + ((3 * 8) / 2)",
      "12 + ((8 * 3) / 2)",
      "2 * (3 * (12 - 8))",
      "8 * ((12 / 2) - 3)",
      "(12 * (8 - 2)) / 3",
      "(8 / (2 / 3)) + 12",
      "12 + (3 * (8 / 2))",
      "(3 / (2 / 8)) + 12",
      "((8 * 3) / 2) + 12",
      "(2 * (12 - 8)) * 3"
    ]
  },
  "2 3 8 13": {
    "cards": "2 3 8 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 * (3 + 13)) - 8",
      "((3 + 13) * 2) - 8",
      "(2 * (13 + 3)) - 8",
      "((13 + 3) * 2) - 8"
    ]
  },
  "2 3 9 9": {
    "cards": "2 3 9 9",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(2 * 9) + (9 - 3)",
      "9 - (3 - (9 * 2))",
      "(2 * 3) + (9 + 9)",
      "(9 + 9) + (3 * 2)",
      "9 - (3 - (2 * 9))",
      "((2 * 3) + 9) + 9",
      "((9 + 2) * 3) - 9",
      "(9 - 3) + (2 * 9)",
      "(9 + (2 * 9)) - 3",
      "(9 * 2) - (3 - 9)",
      "((9 / 3) + 9) * 2",
      "(2 * 9) - (3 - 9)",
      "9 + ((9 * 2) - 3)",
      "2 * ((9 / 3) + 9)",
      "(9 + (9 * 2)) - 3",
      "(9 + 9) + (2 * 3)",
      "9 + (9 + (2 * 3))",
      "(3 * 2) + (9 + 9)",
      "(3 * (2 + 9)) - 9",
      "(9 + (3 * 2)) + 9",
      "((9 * 2) - 3) + 9",
      "((2 + 9) * 3) - 9",
      "9 + ((3 * 2) + 9)",
      "((3 * 2) + 9) + 9",
      "(9 + (9 / 3)) * 2",
      "9 + (9 + (3 * 2))",
      "(3 * (9 + 2)) - 9",
      "((2 * 9) + 9) - 3",
      "9 + ((2 * 9) - 3)",
      "((9 * 2) + 9) - 3",
      "2 * (9 + (9 / 3))",
      "(9 * 2) + (9 - 3)",
      "((2 * 9) - 3) + 9",
      "(9 + (2 * 3)) + 9",
      "(9 - 3) + (9 * 2)",
      "9 + ((2 * 3) + 9)"
    ]
  },
  "2 3 9 10": {
    "cards": "2 3 9 10",
    "has_solution": "Y",
    "num_solutions": 148,
    "solutions": [
      "9 + ((2 + 10) + 3)",
      "(2 + 9) + (10 + 3)",
      "(10 + 9) + (3 + 2)",
      "10 + ((2 + 3) + 9)",
      "(9 + (2 + 3)) + 10",
      "(3 + (2 + 9)) + 10",
      "3 + (2 + (10 + 9))",
      "(9 + 2) + (10 + 3)",
      "((10 + 3) + 2) + 9",
      "9 + ((10 + 2) + 3)",
      "((2 + 10) + 9) + 3",
      "(10 + (2 + 3)) + 9",
      "10 + (3 + (9 + 2))",
      "(10 + 3) + (9 + 2)",
      "((10 - 2) / 3) * 9",
      "2 + (10 + (3 + 9))",
      "(9 + (3 + 10)) + 2",
      "((9 + 3) + 2) + 10",
      "((10 + 9) + 2) + 3",
      "(3 + 9) + (10 + 2)",
      "9 + ((3 + 2) + 10)",
      "3 + (2 + (9 + 10))",
      "3 + (9 + (10 + 2))",
      "(10 / (2 / 3)) + 9",
      "3 + ((9 + 2) + 10)",
      "(10 * (3 / 2)) + 9",
      "3 * ((9 * 2) - 10)",
      "2 + (10 + (9 + 3))",
      "2 + ((3 + 10) + 9)",
      "9 + ((10 * 3) / 2)",
      "((9 + 10) + 3) + 2",
      "(10 + (3 + 9)) + 2",
      "((3 + 9) + 10) + 2",
      "(10 + 9) + (2 + 3)",
      "(10 + (3 + 2)) + 9",
      "(10 + 2) + (9 + 3)",
      "3 + ((2 + 10) + 9)",
      "((9 + 2) + 10) + 3",
      "2 + (3 + (10 + 9))",
      "10 + (3 + (2 + 9))",
      "(10 - 2) / (3 / 9)",
      "3 + (10 + (9 + 2))",
      "((2 + 3) + 9) + 10",
      "9 + (3 * (10 / 2))",
      "(3 + 10) + (2 + 9)",
      "((2 + 9) + 3) + 10",
      "9 + (3 + (10 + 2))",
      "9 * ((10 - 2) / 3)",
      "(2 + 3) + (10 + 9)",
      "9 + (10 + (3 + 2))",
      "2 + ((10 + 3) + 9)",
      "(3 + 9) + (2 + 10)",
      "3 + (9 + (2 + 10))",
      "10 + ((9 + 3) + 2)",
      "((10 + 9) + 3) + 2",
      "(3 * (10 / 2)) + 9",
      "2 + ((10 + 9) + 3)",
      "(3 + (10 + 9)) + 2",
      "((9 + 3) + 10) + 2",
      "(9 + (10 + 2)) + 3",
      "(9 + 3) + (2 + 10)",
      "(3 + (2 + 10)) + 9",
      "10 + (9 + (3 + 2))",
      "2 + (9 + (3 + 10))",
      "(2 + 3) + (9 + 10)",
      "(3 + (10 + 2)) + 9",
      "((10 + 2) + 9) + 3",
      "(9 + (10 + 3)) + 2",
      "(3 + 2) + (9 + 10)",
      "10 + ((3 + 2) + 9)",
      "(9 + 3) + (10 + 2)",
      "((3 + 9) + 2) + 10",
      "(3 + 2) + (10 + 9)",
      "((9 * 2) - 10) * 3",
      "(3 + 10) + (9 + 2)",
      "(9 * (10 - 2)) / 3",
      "9 + (2 + (3 + 10))",
      "2 + ((3 + 9) + 10)",
      "9 + ((3 * 10) / 2)",
      "9 + ((10 + 3) + 2)",
      "3 + ((10 + 9) + 2)",
      "9 + (10 + (2 + 3))",
      "3 + (10 + (2 + 9))",
      "((10 * 3) / 2) + 9",
      "(2 + (9 + 10)) + 3",
      "(3 + (9 + 10)) + 2",
      "(9 + 2) + (3 + 10)",
      "10 + ((9 + 2) + 3)",
      "10 + ((3 + 9) + 2)",
      "((2 + 10) + 3) + 9",
      "(3 + (9 + 2)) + 10",
      "2 + (3 + (9 + 10))",
      "9 + ((2 + 3) + 10)",
      "((3 + 10) + 9) + 2",
      "(9 + (3 + 2)) + 10",
      "(9 + 10) + (3 + 2)",
      "3 * ((2 * 9) - 10)",
      "((9 + 2) + 3) + 10",
      "9 + (2 + (10 + 3))",
      "9 + ((10 / 2) * 3)",
      "(10 + (9 + 2)) + 3",
      "2 + (9 + (10 + 3))",
      "(10 + (2 + 9)) + 3",
      "(2 + (10 + 9)) + 3",
      "2 + ((9 + 3) + 10)",
      "3 + ((9 + 10) + 2)",
      "9 + (10 / (2 / 3))",
      "(2 + (10 + 3)) + 9",
      "(2 + (3 + 9)) + 10",
      "(2 + 9) + (3 + 10)",
      "((2 + 9) + 10) + 3",
      "9 + (10 * (3 / 2))",
      "(2 + (9 + 3)) + 10",
      "((2 + 3) + 10) + 9",
      "9 + ((3 + 10) + 2)",
      "9 + (3 + (2 + 10))",
      "((3 / 2) * 10) + 9",
      "9 + (3 / (2 / 10))",
      "10 + ((2 + 9) + 3)",
      "((2 * 9) - 10) * 3",
      "(3 / (2 / 10)) + 9",
      "9 / (3 / (10 - 2))",
      "((10 + 2) + 3) + 9",
      "2 + ((9 + 10) + 3)",
      "(9 / 3) * (10 - 2)",
      "10 + (9 + (2 + 3))",
      "((10 / 2) * 3) + 9",
      "(2 + (3 + 10)) + 9",
      "10 + (2 + (3 + 9))",
      "((9 + 10) + 2) + 3",
      "((3 + 2) + 10) + 9",
      "3 + ((2 + 9) + 10)",
      "(2 + 10) + (3 + 9)",
      "((3 + 10) + 2) + 9",
      "(9 + 10) + (2 + 3)",
      "((3 * 10) / 2) + 9",
      "3 + ((10 + 2) + 9)",
      "(10 - 2) * (9 / 3)",
      "(10 + (9 + 3)) + 2",
      "10 + (2 + (9 + 3))",
      "9 + ((3 / 2) * 10)",
      "((3 + 2) + 9) + 10",
      "(10 + 3) + (2 + 9)",
      "((10 + 3) + 9) + 2",
      "(10 + 2) + (3 + 9)",
      "(9 + (2 + 10)) + 3",
      "(2 + 10) + (9 + 3)",
      "((10 - 2) * 9) / 3"
    ]
  },
  "2 3 9 11": {
    "cards": "2 3 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 3 9 12": {
    "cards": "2 3 9 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "12 - ((3 - 9) * 2)",
      "(2 * (9 - 3)) + 12",
      "12 + ((9 - 3) * 2)",
      "((9 - 3) * 2) + 12",
      "12 + (2 * (9 - 3))",
      "12 - (2 * (3 - 9))"
    ]
  },
  "2 3 9 13": {
    "cards": "2 3 9 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(2 * 3) * (13 - 9)",
      "((13 * 3) + 9) / 2",
      "((3 * 13) + 9) / 2",
      "(9 + (3 * 13)) / 2",
      "((13 - 9) * 3) * 2",
      "3 * (2 * (13 - 9))",
      "(3 * (13 - 2)) - 9",
      "2 * ((13 - 9) * 3)",
      "(2 * (13 - 9)) * 3",
      "(9 + (13 * 3)) / 2",
      "(13 - 9) * (3 * 2)",
      "((13 - 2) * 3) - 9",
      "3 * ((13 - 9) * 2)",
      "(3 * 2) * (13 - 9)",
      "(13 - 9) * (2 * 3)",
      "((13 - 9) * 2) * 3",
      "(3 * (13 - 9)) * 2",
      "2 * (3 * (13 - 9))"
    ]
  },
  "2 3 10 10": {
    "cards": "2 3 10 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(2 * (10 - 3)) + 10",
      "((10 - 3) * 2) + 10",
      "10 - (2 * (3 - 10))",
      "10 + ((10 - 3) * 2)",
      "10 + (2 * (10 - 3))",
      "10 - ((3 - 10) * 2)"
    ]
  },
  "2 3 10 11": {
    "cards": "2 3 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 3 10 12": {
    "cards": "2 3 10 12",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(12 / (3 + 2)) * 10",
      "(3 * (2 + 10)) - 12",
      "12 / ((2 + 3) / 10)",
      "((12 * 3) - 2) - 10",
      "10 / ((2 + 3) / 12)",
      "(3 * 10) - (12 / 2)",
      "(10 / (2 + 3)) * 12",
      "(10 / (3 + 2)) * 12",
      "(10 * 12) / (2 + 3)",
      "(12 * 10) / (2 + 3)",
      "10 / ((3 + 2) / 12)",
      "(12 / 3) + (10 * 2)",
      "(12 / (2 + 3)) * 10",
      "3 * ((2 * 10) - 12)",
      "(12 * 10) / (3 + 2)",
      "3 * ((10 * 2) - 12)",
      "((3 * 12) - 2) - 10",
      "12 * ((10 / 2) - 3)",
      "(10 * 3) - (12 / 2)",
      "((10 / 2) - 3) * 12",
      "(3 * 12) - (2 + 10)",
      "12 * (10 / (3 + 2))",
      "(12 * 3) - (10 + 2)",
      "((2 * 10) - 12) * 3",
      "((3 * 12) - 10) - 2",
      "(10 * 2) + (12 / 3)",
      "(12 / 3) + (2 * 10)",
      "(10 * 12) / (3 + 2)",
      "((2 + 10) * 3) - 12",
      "(3 * (10 + 2)) - 12",
      "(12 * 3) - (2 + 10)",
      "12 / ((3 + 2) / 10)",
      "(3 * 12) - (10 + 2)",
      "(2 * 10) + (12 / 3)",
      "((10 + 2) * 3) - 12",
      "((12 * 3) - 10) - 2",
      "10 * (12 / (3 + 2))",
      "((10 * 2) - 12) * 3",
      "10 * (12 / (2 + 3))",
      "12 * (10 / (2 + 3))"
    ]
  },
  "2 3 10 13": {
    "cards": "2 3 10 13",
    "has_solution": "Y",
    "num_solutions": 92,
    "solutions": [
      "3 - (2 - (10 + 13))",
      "13 + ((3 - 2) + 10)",
      "(13 + 3) - (2 - 10)",
      "((3 + 13) - 2) + 10",
      "((13 + 3) + 10) - 2",
      "3 - ((2 - 13) - 10)",
      "13 - (2 - (3 + 10))",
      "10 - (2 - (3 + 13))",
      "((13 + 10) + 3) - 2",
      "((3 - 2) + 10) + 13",
      "13 + ((10 + 3) - 2)",
      "3 + (13 + (10 - 2))",
      "(13 + (3 - 2)) + 10",
      "13 + (10 + (3 - 2))",
      "13 - ((2 - 3) - 10)",
      "((3 - 2) + 13) + 10",
      "(10 + (13 - 2)) + 3",
      "10 + ((13 - 2) + 3)",
      "13 + (10 - (2 - 3))",
      "(13 - 2) + (3 + 10)",
      "3 + (13 - (2 - 10))",
      "(10 - 2) + (3 + 13)",
      "(10 - (2 - 13)) + 3",
      "(3 + 10) - (2 - 13)",
      "13 + ((10 - 2) + 3)",
      "(10 + 3) + (13 - 2)",
      "13 + ((3 + 10) - 2)",
      "(13 - (2 - 10)) + 3",
      "(3 + (13 - 2)) + 10",
      "(13 + 3) + (10 - 2)",
      "(3 + (13 + 10)) - 2",
      "(13 + (10 - 2)) + 3",
      "(10 + (3 + 13)) - 2",
      "(13 + (10 + 3)) - 2",
      "3 + ((10 + 13) - 2)",
      "10 - ((2 - 13) - 3)",
      "3 + ((13 + 10) - 2)",
      "3 - (2 - (13 + 10))",
      "13 - (2 - (10 + 3))",
      "((13 - 2) + 10) + 3",
      "(10 + 13) - (2 - 3)",
      "10 + (13 + (3 - 2))",
      "(3 - 2) + (13 + 10)",
      "((10 + 13) + 3) - 2",
      "10 - (2 - (13 + 3))",
      "3 - ((2 - 10) - 13)",
      "(3 + (10 - 2)) + 13",
      "((10 + 3) - 2) + 13",
      "13 + (3 + (10 - 2))",
      "((13 + 3) - 2) + 10",
      "((3 + 10) + 13) - 2",
      "(10 - 2) + (13 + 3)",
      "13 - ((2 - 10) - 3)",
      "((10 - 2) + 3) + 13",
      "3 + ((13 - 2) + 10)",
      "(13 + (3 + 10)) - 2",
      "(3 - (2 - 10)) + 13",
      "(13 + 10) - (2 - 3)",
      "(10 + 3) - (2 - 13)",
      "10 + ((13 + 3) - 2)",
      "((3 + 13) + 10) - 2",
      "3 + (10 + (13 - 2))",
      "10 + (13 - (2 - 3))",
      "((10 + 3) + 13) - 2",
      "3 + (10 - (2 - 13))",
      "(3 - (2 - 13)) + 10",
      "(3 + 13) + (10 - 2)",
      "((13 - 2) + 3) + 10",
      "10 + ((3 - 2) + 13)",
      "(3 + 10) + (13 - 2)",
      "((3 + 10) - 2) + 13",
      "10 + (3 - (2 - 13))",
      "((13 + 10) - 2) + 3",
      "(10 - (2 - 3)) + 13",
      "(3 - 2) + (10 + 13)",
      "(13 + 10) + (3 - 2)",
      "((10 + 13) - 2) + 3",
      "(10 + (13 + 3)) - 2",
      "10 + (3 + (13 - 2))",
      "13 + (3 - (2 - 10))",
      "((10 - 2) + 13) + 3",
      "(13 - (2 - 3)) + 10",
      "(13 - (10 / 2)) * 3",
      "10 - ((2 - 3) - 13)",
      "3 * (13 - (10 / 2))",
      "(10 + (3 - 2)) + 13",
      "(3 + (10 + 13)) - 2",
      "3 + ((10 - 2) + 13)",
      "(13 - 2) + (10 + 3)",
      "(10 + 13) + (3 - 2)",
      "10 + ((3 + 13) - 2)",
      "(3 + 13) - (2 - 10)"
    ]
  },
  "2 3 11 11": {
    "cards": "2 3 11 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "2 + ((3 * 11) - 11)",
      "((11 * 3) - 11) + 2",
      "((11 * 3) + 2) - 11",
      "(3 * 11) + (2 - 11)",
      "(2 - 11) + (11 * 3)",
      "2 + ((11 * 3) - 11)",
      "2 - (11 - (11 * 3))",
      "((3 * 11) + 2) - 11",
      "(2 + (11 * 3)) - 11",
      "((3 * 11) - 11) + 2",
      "(3 * 11) - (11 - 2)",
      "(2 + (3 * 11)) - 11",
      "2 - (11 - (3 * 11))",
      "(2 - 11) + (3 * 11)",
      "(11 * 3) + (2 - 11)",
      "(11 * 3) - (11 - 2)"
    ]
  },
  "2 3 11 12": {
    "cards": "2 3 11 12",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "((12 - 2) + 11) + 3",
      "(3 + 11) - (2 - 12)",
      "(12 + (3 + 11)) - 2",
      "(11 - (2 - 12)) + 3",
      "(3 + (12 + 11)) - 2",
      "12 - ((2 - 3) - 11)",
      "12 + (11 + (3 - 2))",
      "(12 - 2) + (3 + 11)",
      "12 + ((3 - 2) + 11)",
      "11 + (3 + (12 - 2))",
      "11 + ((3 - 2) + 12)",
      "((11 + 12) + 3) - 2",
      "11 - (2 - (12 + 3))",
      "(11 + 3) + (12 - 2)",
      "(11 - 2) + (12 + 3)",
      "((3 + 11) - 2) + 12",
      "12 + ((3 + 11) - 2)",
      "((12 + 11) - 2) + 3",
      "(12 - (2 - 11)) + 3",
      "12 + ((11 - 2) + 3)",
      "3 + (11 + (12 - 2))",
      "((3 + 12) + 11) - 2",
      "((12 + 3) - 2) + 11",
      "(12 + 3) - (2 - 11)",
      "12 - (2 - (11 + 3))",
      "((11 - 2) + 3) + 12",
      "(11 + (3 + 12)) - 2",
      "11 - ((2 - 3) - 12)",
      "(11 - (2 - 3)) + 12",
      "(12 - (2 - 3)) + 11",
      "(12 + (11 + 3)) - 2",
      "11 + ((3 + 12) - 2)",
      "((11 - 2) + 12) + 3",
      "((11 + 3) + 12) - 2",
      "3 + ((12 + 11) - 2)",
      "11 + (3 - (2 - 12))",
      "12 + (3 - (2 - 11))",
      "((3 - 2) + 12) + 11",
      "(12 + (11 - 2)) + 3",
      "((3 + 12) - 2) + 11",
      "12 + (3 + (11 - 2))",
      "(12 + 11) + (3 - 2)",
      "((12 + 3) + 11) - 2",
      "3 + ((12 - 2) + 11)",
      "11 + (12 - (2 - 3))",
      "(11 + (12 - 2)) + 3",
      "((12 - 2) + 3) + 11",
      "((3 - 2) + 11) + 12",
      "12 - (2 - (3 + 11))",
      "3 + (12 + (11 - 2))",
      "(12 - 2) + (11 + 3)",
      "(3 - 2) + (11 + 12)",
      "11 + ((12 - 2) + 3)",
      "3 + (12 - (2 - 11))",
      "(12 + (3 - 2)) + 11",
      "11 - (2 - (3 + 12))",
      "11 - ((2 - 12) - 3)",
      "3 + ((11 + 12) - 2)",
      "((11 + 3) - 2) + 12",
      "(11 + (12 + 3)) - 2",
      "((12 + 11) + 3) - 2",
      "11 + ((12 + 3) - 2)",
      "(3 + 12) - (2 - 11)",
      "(3 - (2 - 12)) + 11",
      "(3 - (2 - 11)) + 12",
      "3 - (2 - (12 + 11))",
      "(3 - 2) + (12 + 11)",
      "(3 + 11) + (12 - 2)",
      "(12 + 11) - (2 - 3)",
      "(12 + 3) + (11 - 2)",
      "(11 + 12) + (3 - 2)",
      "(3 + 12) + (11 - 2)",
      "(3 + (11 - 2)) + 12",
      "(11 + 12) - (2 - 3)",
      "3 - ((2 - 12) - 11)",
      "11 + (12 + (3 - 2))",
      "12 + ((11 + 3) - 2)",
      "(11 - 2) + (3 + 12)",
      "12 + (11 - (2 - 3))",
      "(3 + (11 + 12)) - 2",
      "3 - ((2 - 11) - 12)",
      "3 + ((11 - 2) + 12)",
      "12 - ((2 - 11) - 3)",
      "(11 + (3 - 2)) + 12",
      "((11 + 12) - 2) + 3",
      "3 + (11 - (2 - 12))",
      "(3 + (12 - 2)) + 11",
      "(11 + 3) - (2 - 12)",
      "((3 + 11) + 12) - 2",
      "3 - (2 - (11 + 12))"
    ]
  },
  "2 3 11 13": {
    "cards": "2 3 11 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "13 - (11 * (2 - 3))",
      "(13 + 11) / (3 - 2)",
      "(3 - 2) * (13 + 11)",
      "(13 + 11) * (3 - 2)",
      "13 - ((2 - 3) * 11)",
      "(13 / (3 - 2)) + 11",
      "(11 * (3 - 2)) + 13",
      "11 + (13 * (3 - 2))",
      "11 - ((2 - 3) * 13)",
      "11 - (13 * (2 - 3))",
      "((3 - 2) * 13) + 11",
      "(11 / (3 - 2)) + 13",
      "(11 + 13) * (3 - 2)",
      "13 - (11 / (2 - 3))",
      "13 + (11 * (3 - 2))",
      "13 + (11 / (3 - 2))",
      "11 + (13 / (3 - 2))",
      "11 + ((3 - 2) * 13)",
      "11 - (13 / (2 - 3))",
      "13 + ((3 - 2) * 11)",
      "(11 + 13) / (3 - 2)",
      "((3 - 2) * 11) + 13",
      "(3 - 2) * (11 + 13)",
      "(13 * (3 - 2)) + 11"
    ]
  },
  "2 3 12 12": {
    "cards": "2 3 12 12",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "12 * ((12 / 3) - 2)",
      "12 / (3 * (2 / 12))",
      "((3 - 2) * 12) + 12",
      "(12 / (3 / 12)) / 2",
      "12 / ((2 / 12) * 3)",
      "12 / ((3 / 12) * 2)",
      "(12 / (2 * 3)) * 12",
      "((12 * 12) / 2) / 3",
      "((12 * 3) + 12) / 2",
      "((12 / 2) * 12) / 3",
      "((12 / 3) - 2) * 12",
      "(12 * (3 - 2)) + 12",
      "(12 * (12 / 3)) / 2",
      "12 / (2 * (3 / 12))",
      "12 * (12 / (2 * 3))",
      "(12 / (3 * 2)) * 12",
      "(12 + 12) / (3 - 2)",
      "12 * (12 / (3 * 2))",
      "(12 / 3) / (2 / 12)",
      "((12 * 12) / 3) / 2",
      "((12 / 2) / 3) * 12",
      "(12 * 12) / (2 * 3)",
      "(3 - 2) * (12 + 12)",
      "12 - (12 / (2 - 3))",
      "12 - ((2 - 3) * 12)",
      "12 / (2 / (12 / 3))",
      "((12 / 3) / 2) * 12",
      "(12 * (12 / 2)) / 3",
      "(12 / 3) * (12 / 2)",
      "12 / (3 / (12 / 2))",
      "12 / ((3 * 2) / 12)",
      "(12 / (3 - 2)) + 12",
      "12 + (12 * (3 - 2))",
      "12 * ((12 / 2) / 3)",
      "((12 / 3) * 12) / 2",
      "(12 / 2) * (12 / 3)",
      "(12 + (12 * 3)) / 2",
      "12 * ((12 / 3) / 2)",
      "(12 / 2) / (3 / 12)",
      "(12 + (3 * 12)) / 2",
      "12 / ((2 * 3) / 12)",
      "(12 * 12) / (3 * 2)",
      "((3 * 12) + 12) / 2",
      "(12 / (2 / 12)) / 3",
      "(12 + 12) * (3 - 2)",
      "12 - (12 * (2 - 3))",
      "12 + ((3 - 2) * 12)",
      "12 + (12 / (3 - 2))"
    ]
  },
  "2 3 12 13": {
    "cards": "2 3 12 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "(2 + (12 + 13)) - 3",
      "2 + ((12 + 13) - 3)",
      "(2 + 13) + (12 - 3)",
      "13 + (12 + (2 - 3))",
      "12 + (2 - (3 - 13))",
      "((2 - 3) + 13) + 12",
      "((12 + 2) - 3) + 13",
      "(13 + 12) - (3 - 2)",
      "(13 + 2) - (3 - 12)",
      "(13 - 3) + (2 + 12)",
      "(12 + (2 + 13)) - 3",
      "2 + (12 + (13 - 3))",
      "12 - (3 - (2 + 13))",
      "((2 + 12) + 13) - 3",
      "(2 + (12 - 3)) + 13",
      "(13 - 3) + (12 + 2)",
      "12 + ((13 + 2) - 3)",
      "2 - ((3 - 13) - 12)",
      "((13 + 2) + 12) - 3",
      "(12 - 3) + (2 + 13)",
      "12 + ((2 + 13) - 3)",
      "(2 - 3) + (12 + 13)",
      "12 - (3 - (13 + 2))",
      "(13 + (12 - 3)) + 2",
      "12 + (2 + (13 - 3))",
      "((13 - 3) + 12) + 2",
      "13 + ((12 + 2) - 3)",
      "(2 - (3 - 13)) + 12",
      "(12 + (13 - 3)) + 2",
      "((12 + 2) + 13) - 3",
      "((12 + 13) + 2) - 3",
      "13 + (12 - (3 - 2))",
      "13 + ((12 - 3) + 2)",
      "(13 + (2 + 12)) - 3",
      "(12 + 2) - (3 - 13)",
      "((13 + 2) - 3) + 12",
      "2 - ((3 - 12) - 13)",
      "(13 + (12 + 2)) - 3",
      "2 + ((13 - 3) + 12)",
      "(2 + 13) - (3 - 12)",
      "13 - (3 - (12 + 2))",
      "2 + (13 - (3 - 12))",
      "(12 + 13) + (2 - 3)",
      "(2 - 3) + (13 + 12)",
      "12 - ((3 - 2) - 13)",
      "(12 - (3 - 2)) + 13",
      "13 + (2 + (12 - 3))",
      "(2 + 12) + (13 - 3)",
      "(12 + (2 - 3)) + 13",
      "((12 + 13) - 3) + 2",
      "12 + (13 + (2 - 3))",
      "(12 - 3) + (13 + 2)",
      "2 + ((12 - 3) + 13)",
      "(2 + (13 + 12)) - 3",
      "(12 - (3 - 13)) + 2",
      "(13 + 2) + (12 - 3)",
      "((12 - 3) + 2) + 13",
      "((2 + 13) + 12) - 3",
      "((12 - 3) + 13) + 2",
      "13 + ((2 + 12) - 3)",
      "(13 - (3 - 2)) + 12",
      "13 - ((3 - 12) - 2)",
      "((2 + 12) - 3) + 13",
      "(13 + (2 - 3)) + 12",
      "13 + (2 - (3 - 12))",
      "2 + (12 - (3 - 13))",
      "(12 + 2) + (13 - 3)",
      "13 - (3 - (2 + 12))",
      "((13 + 12) - 3) + 2",
      "(12 + (13 + 2)) - 3",
      "(2 + (13 - 3)) + 12",
      "(2 + 12) - (3 - 13)",
      "((13 + 12) + 2) - 3",
      "2 + ((13 + 12) - 3)",
      "12 + ((2 - 3) + 13)",
      "12 - ((3 - 13) - 2)",
      "(2 - (3 - 12)) + 13",
      "((2 + 13) - 3) + 12",
      "12 + (13 - (3 - 2))",
      "(12 + 13) - (3 - 2)",
      "12 + ((13 - 3) + 2)",
      "(13 + 12) + (2 - 3)",
      "2 - (3 - (12 + 13))",
      "13 + ((2 - 3) + 12)",
      "2 - (3 - (13 + 12))",
      "2 + (13 + (12 - 3))",
      "((2 - 3) + 12) + 13",
      "(13 - (3 - 12)) + 2",
      "13 - ((3 - 2) - 12)",
      "((13 - 3) + 2) + 12"
    ]
  },
  "2 3 13 13": {
    "cards": "2 3 13 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(13 * 3) - (2 + 13)",
      "(3 * 13) - (13 + 2)",
      "((3 * 13) - 2) - 13",
      "((3 * 13) - 13) - 2",
      "((13 * 3) - 2) - 13",
      "((13 * 3) - 13) - 2",
      "(3 * 13) - (2 + 13)",
      "(13 * 3) - (13 + 2)"
    ]
  },
  "2 4 4 4": {
    "cards": "2 4 4 4",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((4 * 4) - 4) * 2",
      "(4 * 4) + (2 * 4)",
      "4 * ((4 - 2) + 4)",
      "((4 - 2) + 4) * 4",
      "(2 * 4) + (4 * 4)",
      "(4 * 4) + (4 * 2)",
      "2 * ((4 + 4) + 4)",
      "(4 - (2 - 4)) * 4",
      "(4 + (4 + 4)) * 2",
      "4 * (4 + (4 / 2))",
      "4 * (4 + (4 - 2))",
      "4 * ((4 / 2) + 4)",
      "4 * (4 - (2 - 4))",
      "((4 + 4) - 2) * 4",
      "((4 / 2) + 4) * 4",
      "2 * (4 + (4 + 4))",
      "(4 + (4 / 2)) * 4",
      "(4 * 2) + (4 * 4)",
      "4 * ((4 + 4) - 2)",
      "2 * ((4 * 4) - 4)",
      "((4 + 4) + 4) * 2",
      "(4 + (4 - 2)) * 4"
    ]
  },
  "2 4 4 5": {
    "cards": "2 4 4 5",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "4 * ((2 * 5) - 4)",
      "((5 + 2) * 4) - 4",
      "(5 - 2) * (4 + 4)",
      "(4 * (2 + 5)) - 4",
      "4 * ((5 * 2) - 4)",
      "(4 + 4) * (5 - 2)",
      "((2 * 5) - 4) * 4",
      "(4 * (5 + 2)) - 4",
      "((5 * 2) - 4) * 4",
      "((2 + 5) * 4) - 4"
    ]
  },
  "2 4 4 6": {
    "cards": "2 4 4 6",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "4 + ((6 + 4) * 2)",
      "(2 + (4 * 4)) + 6",
      "4 + ((4 + 6) * 2)",
      "6 * ((4 + 4) / 2)",
      "2 + ((4 * 4) + 6)",
      "((4 + 4) * 6) / 2",
      "6 + (2 + (4 * 4))",
      "(4 * 4) + (6 + 2)",
      "6 + ((4 * 4) + 2)",
      "((4 + 4) / 2) * 6",
      "2 + (6 + (4 * 4))",
      "(4 + 4) * (6 / 2)",
      "(4 + 4) / (2 / 6)",
      "(6 / 2) * (4 + 4)",
      "(2 * (4 + 6)) + 4",
      "((4 * 2) - 4) * 6",
      "4 + (2 * (6 + 4))",
      "(2 * (6 + 4)) + 4",
      "6 * ((4 * 2) - 4)",
      "((4 * 4) + 6) + 2",
      "((4 * 4) + 2) + 6",
      "(2 + 6) + (4 * 4)",
      "(6 * (4 + 4)) / 2",
      "((4 + 6) * 2) + 4",
      "(6 + 2) + (4 * 4)",
      "6 / (2 / (4 + 4))",
      "(4 * 4) + (2 + 6)",
      "((6 + 4) * 2) + 4",
      "4 + (2 * (4 + 6))",
      "6 * ((2 * 4) - 4)",
      "((2 * 4) - 4) * 6",
      "(6 + (4 * 4)) + 2"
    ]
  },
  "2 4 4 7": {
    "cards": "2 4 4 7",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "4 - (4 * (2 - 7))",
      "(7 - 4) * (4 * 2)",
      "4 * ((7 - 4) * 2)",
      "2 * (4 * (7 - 4))",
      "((7 - 4) * 2) * 4",
      "4 + ((7 - 2) * 4)",
      "2 * ((7 - 4) * 4)",
      "4 - ((2 - 7) * 4)",
      "(2 * (7 - 4)) * 4",
      "(4 * (7 - 4)) * 2",
      "(4 * (7 - 2)) + 4",
      "4 * (2 * (7 - 4))",
      "(2 * 4) * (7 - 4)",
      "(4 * 2) * (7 - 4)",
      "((7 - 2) * 4) + 4",
      "(7 - 4) * (2 * 4)",
      "((7 - 4) * 4) * 2",
      "4 + (4 * (7 - 2))"
    ]
  },
  "2 4 4 8": {
    "cards": "2 4 4 8",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "((4 + 8) / 2) * 4",
      "(2 * (4 * 4)) - 8",
      "(4 * (8 + 4)) / 2",
      "((8 + 4) * 4) / 2",
      "4 + (4 + (8 * 2))",
      "((8 + 4) / 2) * 4",
      "4 * (8 - (4 / 2))",
      "4 * ((8 + 4) / 2)",
      "(4 + (8 * 2)) + 4",
      "(2 - (4 - 8)) * 4",
      "(4 * 8) - (2 * 4)",
      "(8 * 4) - (2 * 4)",
      "((2 * 4) * 4) - 8",
      "(4 + 8) * (4 - 2)",
      "4 * ((2 - 4) + 8)",
      "(4 + 8) / (2 / 4)",
      "(2 * 8) + (4 + 4)",
      "(4 * 8) - (4 * 2)",
      "(4 + 4) + (2 * 8)",
      "(4 + 4) + (8 * 2)",
      "((4 + 8) * 4) / 2",
      "(8 * 2) + (4 + 4)",
      "4 * ((8 + 2) - 4)",
      "(8 + 4) * (4 / 2)",
      "4 + ((2 * 8) + 4)",
      "(8 + 4) * (4 - 2)",
      "(4 * (4 + 8)) / 2",
      "(4 * (4 * 2)) - 8",
      "(4 - 2) * (4 + 8)",
      "((8 + 2) - 4) * 4",
      "((8 * 2) + 4) + 4",
      "(8 - 4) * (4 + 2)",
      "8 * ((4 / 4) + 2)",
      "((4 + 4) * 2) + 8",
      "(4 * (2 * 4)) - 8",
      "((4 * 4) * 2) - 8",
      "(8 + 4) / (2 / 4)",
      "(8 - (4 - 2)) * 4",
      "((2 - 4) + 8) * 4",
      "(8 - 4) * (2 + 4)",
      "8 + ((4 + 4) * 2)",
      "(4 + (2 * 8)) + 4",
      "4 + ((8 * 2) + 4)",
      "(4 + 8) * (4 / 2)",
      "((2 * 8) + 4) + 4",
      "4 * ((8 - 4) + 2)",
      "((8 - 4) + 2) * 4",
      "(8 * 4) - (4 * 2)",
      "(4 - 2) * (8 + 4)",
      "4 * (8 - (4 - 2))",
      "(2 * (4 + 4)) + 8",
      "((2 + 8) - 4) * 4",
      "(4 / 2) * (4 + 8)",
      "(8 - (4 / 2)) * 4",
      "4 * (8 + (2 - 4))",
      "4 + (4 + (2 * 8))",
      "(2 + (8 - 4)) * 4",
      "((4 / 4) + 2) * 8",
      "(4 + 2) * (8 - 4)",
      "(8 + (2 - 4)) * 4",
      "4 * (2 - (4 - 8))",
      "4 * ((4 + 8) / 2)",
      "4 / (2 / (4 + 8))",
      "8 + (2 * (4 + 4))",
      "(4 / 2) * (8 + 4)",
      "(2 + (4 / 4)) * 8",
      "(2 + 4) * (8 - 4)",
      "4 * ((2 + 8) - 4)",
      "8 * (2 + (4 / 4))",
      "4 / (2 / (8 + 4))",
      "((4 * 2) * 4) - 8",
      "4 * (2 + (8 - 4))"
    ]
  },
  "2 4 4 9": {
    "cards": "2 4 4 9",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((9 - 2) * 4) - 4",
      "(4 * (9 - 2)) - 4"
    ]
  },
  "2 4 4 10": {
    "cards": "2 4 4 10",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "4 + ((10 * 4) / 2)",
      "(2 * (10 + 4)) - 4",
      "4 + (10 * (4 - 2))",
      "((10 * 4) / 2) + 4",
      "4 + (10 / (2 / 4))",
      "4 - ((2 - 4) * 10)",
      "((4 * 4) - 2) + 10",
      "4 + (10 * (4 / 2))",
      "4 + ((4 - 2) * 10)",
      "((10 / 2) * 4) + 4",
      "(10 + (4 * 4)) - 2",
      "4 + (4 / (2 / 10))",
      "(10 / (2 / 4)) + 4",
      "(4 * 4) + (10 - 2)",
      "4 + ((4 / 2) * 10)",
      "4 - (10 * (2 - 4))",
      "4 + (4 * (10 / 2))",
      "(10 - 2) + (4 * 4)",
      "10 + ((4 * 4) - 2)",
      "((4 * 10) / 2) + 4",
      "((4 / 2) * 10) + 4",
      "10 - (2 - (4 * 4))",
      "((4 + 10) * 2) - 4",
      "(10 * (4 - 2)) + 4",
      "(4 * 4) - (2 - 10)",
      "((4 - 2) * 10) + 4",
      "4 + ((10 / 2) * 4)",
      "(2 * (4 + 10)) - 4",
      "4 + ((4 * 10) / 2)",
      "((10 + 4) * 2) - 4",
      "(4 * (10 / 2)) + 4",
      "(10 * (4 / 2)) + 4",
      "((4 * 4) + 10) - 2",
      "(4 / (2 / 10)) + 4"
    ]
  },
  "2 4 4 11": {
    "cards": "2 4 4 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((4 / 4) + 11) * 2",
      "((4 * 11) + 4) / 2",
      "(11 + (4 / 4)) * 2",
      "2 * ((4 / 4) + 11)",
      "2 * (11 + (4 / 4))",
      "(4 + (11 * 4)) / 2",
      "((11 * 4) + 4) / 2",
      "(4 + (4 * 11)) / 2"
    ]
  },
  "2 4 4 12": {
    "cards": "2 4 4 12",
    "has_solution": "Y",
    "num_solutions": 180,
    "solutions": [
      "(2 + (4 - 4)) * 12",
      "12 / ((4 / 2) / 4)",
      "(4 / (4 - 2)) * 12",
      "(12 * 2) / (4 / 4)",
      "((2 * 4) * 12) / 4",
      "(4 + (4 * 2)) + 12",
      "((12 * 4) / 4) * 2",
      "4 + (12 + (4 * 2))",
      "(12 - (4 + 2)) * 4",
      "2 * ((12 + 4) - 4)",
      "((2 / 4) * 4) * 12",
      "(12 / 4) * (2 * 4)",
      "(12 * 2) * (4 / 4)",
      "12 * ((4 / 4) * 2)",
      "(12 * 4) / (4 / 2)",
      "(4 * 2) + (4 + 12)",
      "((2 / 4) * 12) * 4",
      "(2 * 12) + (4 - 4)",
      "(2 * (4 / 4)) * 12",
      "(4 * 2) + (12 + 4)",
      "(2 / (4 / 12)) * 4",
      "(4 + (2 * 12)) - 4",
      "4 * ((12 / 4) * 2)",
      "(4 / (4 / 12)) * 2",
      "(12 + (4 * 2)) + 4",
      "12 / ((4 / 4) / 2)",
      "((2 + 4) - 4) * 12",
      "((2 * 12) / 4) * 4",
      "(4 * 12) / (4 - 2)",
      "12 * (2 + (4 - 4))",
      "(12 - (4 - 4)) * 2",
      "((4 + 2) - 4) * 12",
      "(4 - (4 - 12)) * 2",
      "(4 * (12 * 2)) / 4",
      "12 * (4 - (4 / 2))",
      "4 + ((2 * 4) + 12)",
      "(4 * 2) / (4 / 12)",
      "(4 - (4 - 2)) * 12",
      "(4 / 4) * (2 * 12)",
      "(12 * (2 * 4)) / 4",
      "12 + (4 + (4 * 2))",
      "2 * ((4 / 4) * 12)",
      "((12 - 4) - 2) * 4",
      "(2 / (4 / 4)) * 12",
      "((12 * 2) + 4) - 4",
      "2 * ((12 * 4) / 4)",
      "((2 * 4) + 4) + 12",
      "(12 * 4) * (2 / 4)",
      "2 * (4 + (12 - 4))",
      "(4 + 12) + (2 * 4)",
      "4 * (12 / (4 - 2))",
      "(2 * 12) / (4 / 4)",
      "4 / ((4 / 12) / 2)",
      "(4 * 12) * (2 / 4)",
      "((4 * 2) + 4) + 12",
      "(4 + (2 - 4)) * 12",
      "((2 * 4) + 12) + 4",
      "4 + (12 + (2 * 4))",
      "(12 + (4 - 4)) * 2",
      "2 / (4 / (12 * 4))",
      "((4 * 12) / 4) * 2",
      "2 * (12 * (4 / 4))",
      "((12 * 4) * 2) / 4",
      "((4 + 12) - 4) * 2",
      "12 + ((2 * 4) + 4)",
      "(4 - 4) + (12 * 2)",
      "2 / ((4 / 12) / 4)",
      "((4 / 4) * 2) * 12",
      "(2 * (12 * 4)) / 4",
      "12 / (4 / (2 * 4))",
      "4 * (12 / (4 / 2))",
      "12 * ((2 / 4) * 4)",
      "4 / ((4 / 2) / 12)",
      "((2 * 12) + 4) - 4",
      "4 + ((2 * 12) - 4)",
      "((12 + 4) - 4) * 2",
      "12 * (4 * (2 / 4))",
      "4 / ((4 - 2) / 12)",
      "4 + ((12 * 2) - 4)",
      "4 * ((12 - 4) - 2)",
      "(4 + 12) + (4 * 2)",
      "2 * (4 * (12 / 4))",
      "((4 * 12) * 2) / 4",
      "((12 - 2) - 4) * 4",
      "2 * ((4 + 12) - 4)",
      "4 * (12 - (2 + 4))",
      "((4 - 4) + 12) * 2",
      "12 + (4 + (2 * 4))",
      "(4 + (2 * 4)) + 12",
      "4 / (4 / (12 * 2))",
      "2 * (4 / (4 / 12))",
      "(12 - (2 + 4)) * 4",
      "(12 + (2 * 4)) + 4",
      "4 * ((12 * 2) / 4)",
      "(2 * 4) + (4 + 12)",
      "(12 / 4) * (4 * 2)",
      "4 * (12 * (2 / 4))",
      "4 * ((2 / 4) * 12)",
      "(2 * 4) / (4 / 12)",
      "2 * (12 / (4 / 4))",
      "(4 / (4 / 2)) * 12",
      "(4 / 4) * (12 * 2)",
      "((2 * 12) - 4) + 4",
      "((2 * 12) * 4) / 4",
      "(4 * (2 / 4)) * 12",
      "(2 - (4 - 4)) * 12",
      "4 + ((4 * 2) + 12)",
      "((12 * 2) * 4) / 4",
      "((12 - 4) + 4) * 2",
      "(4 - (4 / 2)) * 12",
      "12 * ((4 - 4) + 2)",
      "12 / ((4 - 2) / 4)",
      "2 * (12 + (4 - 4))",
      "(2 * (4 * 12)) / 4",
      "(2 * 12) - (4 - 4)",
      "2 * ((4 * 12) / 4)",
      "4 * ((12 - 2) - 4)",
      "(4 * (12 / 4)) * 2",
      "12 * ((2 * 4) / 4)",
      "(2 / 4) * (12 * 4)",
      "2 * (4 - (4 - 12))",
      "(2 * 12) * (4 / 4)",
      "12 + ((4 * 2) + 4)",
      "12 * (2 / (4 / 4))",
      "(12 / (4 / 2)) * 4",
      "2 * ((12 - 4) + 4)",
      "((12 / 4) * 2) * 4",
      "(4 * 12) / (4 / 2)",
      "(2 * 4) * (12 / 4)",
      "12 * (4 / (4 - 2))",
      "(12 / (4 / 4)) * 2",
      "((4 * 2) / 4) * 12",
      "(12 * 2) - (4 - 4)",
      "((4 - 4) + 2) * 12",
      "(12 + 4) + (2 * 4)",
      "2 / ((4 / 4) / 12)",
      "2 * (12 - (4 - 4))",
      "(4 - 4) + (2 * 12)",
      "(2 * (12 / 4)) * 4",
      "12 * (2 - (4 - 4))",
      "12 * ((4 + 2) - 4)",
      "12 * (2 * (4 / 4))",
      "((4 * 2) + 12) + 4",
      "4 * (2 / (4 / 12))",
      "4 * (2 * (12 / 4))",
      "(4 * 2) * (12 / 4)",
      "4 * (12 - (4 + 2))",
      "(12 * (2 / 4)) * 4",
      "2 * ((12 / 4) * 4)",
      "((2 * 4) / 4) * 12",
      "(4 + (12 - 4)) * 2",
      "2 * ((4 - 4) + 12)",
      "(12 * (4 * 2)) / 4",
      "(2 / 4) * (4 * 12)",
      "((4 / 4) * 12) * 2",
      "(12 * (4 / 4)) * 2",
      "((2 - 4) + 4) * 12",
      "(12 / (4 - 2)) * 4",
      "12 * (4 - (4 - 2))",
      "12 * ((4 * 2) / 4)",
      "(2 * 4) + (12 + 4)",
      "4 - (4 - (2 * 12))",
      "12 * (4 / (4 / 2))",
      "12 * ((2 - 4) + 4)",
      "((12 * 2) - 4) + 4",
      "12 * ((2 + 4) - 4)",
      "((12 / 4) * 4) * 2",
      "(12 + 4) + (4 * 2)",
      "(12 * 2) + (4 - 4)",
      "12 / (4 / (4 * 2))",
      "((4 * 2) * 12) / 4",
      "4 * ((2 * 12) / 4)",
      "(12 * 4) / (4 - 2)",
      "2 / (4 / (4 * 12))",
      "(4 + (12 * 2)) - 4",
      "4 - (4 - (12 * 2))",
      "(4 * (2 * 12)) / 4",
      "((12 * 2) / 4) * 4",
      "4 / (4 / (2 * 12))",
      "12 * (4 + (2 - 4))"
    ]
  },
  "2 4 4 13": {
    "cards": "2 4 4 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - (4 / 4)) * 2",
      "((13 * 4) - 4) / 2",
      "2 * (13 - (4 / 4))",
      "((4 * 13) - 4) / 2"
    ]
  },
  "2 4 5 5": {
    "cards": "2 4 5 5",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "4 + (2 * (5 + 5))",
      "(2 * (5 + 5)) + 4",
      "4 + ((5 + 5) * 2)",
      "((5 + 5) * 2) + 4"
    ]
  },
  "2 4 5 6": {
    "cards": "2 4 5 6",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "4 - (5 * (2 - 6))",
      "(5 * 6) - (4 + 2)",
      "(2 * (4 + 5)) + 6",
      "((4 + 2) * 5) - 6",
      "(6 + (4 * 5)) - 2",
      "6 + (2 * (4 + 5))",
      "6 - (2 - (4 * 5))",
      "((5 * 6) - 4) - 2",
      "(5 * 6) - (2 + 4)",
      "(5 * 4) + (6 - 2)",
      "4 - ((2 - 6) * 5)",
      "((5 * 6) - 2) - 4",
      "6 + ((5 * 4) - 2)",
      "((5 + 4) * 2) + 6",
      "((4 + 5) * 2) + 6",
      "((2 + 4) * 5) - 6",
      "((5 * 4) - 2) + 6",
      "(5 * (6 - 2)) + 4",
      "((4 * 5) + 6) - 2",
      "6 + ((4 + 5) * 2)",
      "((6 - 2) * 5) + 4",
      "(5 * (2 + 4)) - 6",
      "(6 + (5 * 4)) - 2",
      "(6 - 2) + (4 * 5)",
      "(6 - 2) + (5 * 4)",
      "(5 * (4 + 2)) - 6",
      "(4 * 5) - (2 - 6)",
      "(6 * 5) - (2 + 4)",
      "6 + (2 * (5 + 4))",
      "6 + ((4 * 5) - 2)",
      "4 + ((6 - 2) * 5)",
      "((4 * 5) - 2) + 6",
      "(6 * 5) - (4 + 2)",
      "(5 * 4) - (2 - 6)",
      "6 - (2 - (5 * 4))",
      "(2 * (5 + 4)) + 6",
      "((6 * 5) - 2) - 4",
      "(4 * 5) + (6 - 2)",
      "((6 * 5) - 4) - 2",
      "4 + (5 * (6 - 2))",
      "((5 * 4) + 6) - 2",
      "6 + ((5 + 4) * 2)"
    ]
  },
  "2 4 5 7": {
    "cards": "2 4 5 7",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(7 + 5) * (4 / 2)",
      "((7 + 5) * 4) / 2",
      "(4 / 2) * (7 + 5)",
      "(4 - 2) * (7 + 5)",
      "4 * ((7 + 5) / 2)",
      "(4 * (7 + 5)) / 2",
      "((5 + 7) / 2) * 4",
      "((7 + 5) / 2) * 4",
      "(5 + 7) * (4 - 2)",
      "4 / (2 / (5 + 7))",
      "(7 + 5) * (4 - 2)",
      "(5 + 7) * (4 / 2)",
      "(4 - 2) * (5 + 7)",
      "(4 / 2) * (5 + 7)",
      "(7 + 5) / (2 / 4)",
      "((5 + 7) * 4) / 2",
      "(4 * (5 + 7)) / 2",
      "4 / (2 / (7 + 5))",
      "(5 + 7) / (2 / 4)",
      "4 * ((5 + 7) / 2)"
    ]
  },
  "2 4 5 8": {
    "cards": "2 4 5 8",
    "has_solution": "Y",
    "num_solutions": 58,
    "solutions": [
      "((4 * 5) - 8) * 2",
      "8 * (5 - (4 / 2))",
      "((5 - 4) + 2) * 8",
      "(8 - 5) * (2 * 4)",
      "(2 - (4 - 5)) * 8",
      "((8 - 5) * 4) * 2",
      "8 * (2 - (4 - 5))",
      "(5 / (2 / 8)) + 4",
      "8 * ((5 - 4) + 2)",
      "8 * ((2 - 4) + 5)",
      "2 * ((5 * 4) - 8)",
      "(4 * 2) * (8 - 5)",
      "((8 - 5) * 2) * 4",
      "((5 + 2) - 4) * 8",
      "((2 * 4) - 5) * 8",
      "4 + ((8 * 5) / 2)",
      "4 + ((5 * 8) / 2)",
      "((5 * 8) / 2) + 4",
      "4 + (8 * (5 / 2))",
      "4 * (2 * (8 - 5))",
      "8 * ((2 * 4) - 5)",
      "((5 * 4) - 8) * 2",
      "2 * ((8 - 5) * 4)",
      "(4 * (8 - 5)) * 2",
      "(2 * 4) * (8 - 5)",
      "((4 * 2) - 5) * 8",
      "8 * ((5 + 2) - 4)",
      "8 * ((4 * 2) - 5)",
      "(2 + (5 - 4)) * 8",
      "8 * ((2 + 5) - 4)",
      "(5 - (4 / 2)) * 8",
      "8 * (5 - (4 - 2))",
      "(8 / 2) + (4 * 5)",
      "8 * (2 + (5 - 4))",
      "((2 + 5) - 4) * 8",
      "(8 * (5 / 2)) + 4",
      "2 * ((4 * 5) - 8)",
      "(8 / 2) + (5 * 4)",
      "(8 / (2 / 5)) + 4",
      "(5 * (8 / 2)) + 4",
      "(5 + (2 - 4)) * 8",
      "4 + ((5 / 2) * 8)",
      "4 + (5 / (2 / 8))",
      "(5 * 4) + (8 / 2)",
      "8 * (5 + (2 - 4))",
      "4 + ((8 / 2) * 5)",
      "2 * (4 * (8 - 5))",
      "((5 / 2) * 8) + 4",
      "(4 * 5) + (8 / 2)",
      "((8 * 5) / 2) + 4",
      "4 + (5 * (8 / 2))",
      "((2 - 4) + 5) * 8",
      "(8 - 5) * (4 * 2)",
      "4 + (8 / (2 / 5))",
      "4 * ((8 - 5) * 2)",
      "(5 - (4 - 2)) * 8",
      "((8 / 2) * 5) + 4",
      "(2 * (8 - 5)) * 4"
    ]
  },
  "2 4 5 9": {
    "cards": "2 4 5 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "4 * (9 - (5 - 2))",
      "(4 + 2) * (9 - 5)",
      "((5 + 9) * 2) - 4",
      "4 * (2 + (9 - 5))",
      "((9 + 5) * 2) - 4",
      "(2 * (9 + 5)) - 4",
      "4 * ((9 + 2) - 5)",
      "(9 - 5) * (4 + 2)",
      "(2 + (9 - 5)) * 4",
      "(9 - (5 - 2)) * 4",
      "4 * (9 + (2 - 5))",
      "(9 + (2 - 5)) * 4",
      "4 * (2 - (5 - 9))",
      "((9 + 2) - 5) * 4",
      "4 * ((9 - 5) + 2)",
      "((2 - 5) + 9) * 4",
      "4 * ((2 + 9) - 5)",
      "(2 - (5 - 9)) * 4",
      "(2 * (5 + 9)) - 4",
      "(9 - 5) * (2 + 4)",
      "(2 + 4) * (9 - 5)",
      "((9 - 5) + 2) * 4",
      "((2 + 9) - 5) * 4",
      "4 * ((2 - 5) + 9)"
    ]
  },
  "2 4 5 10": {
    "cards": "2 4 5 10",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "10 + ((2 * 5) + 4)",
      "((2 * 5) + 10) + 4",
      "(4 + (2 * 5)) + 10",
      "4 + ((2 * 5) + 10)",
      "(4 + (5 * 2)) + 10",
      "((5 * 2) + 4) + 10",
      "4 + (10 + (2 * 5))",
      "4 + ((5 * 2) + 10)",
      "10 + ((5 * 2) + 4)",
      "(2 * 5) + (10 + 4)",
      "10 + (4 + (2 * 5))",
      "(10 + 4) + (5 * 2)",
      "(5 * 2) + (4 + 10)",
      "(5 * 2) + (10 + 4)",
      "(10 + (2 * 5)) + 4",
      "(2 * 5) + (4 + 10)",
      "((5 * 2) + 10) + 4",
      "(4 + 10) + (2 * 5)",
      "(4 + 10) + (5 * 2)",
      "4 + (10 + (5 * 2))",
      "(10 + (5 * 2)) + 4",
      "((2 * 5) + 4) + 10",
      "10 + (4 + (5 * 2))",
      "(10 + 4) + (2 * 5)"
    ]
  },
  "2 4 5 11": {
    "cards": "2 4 5 11",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(5 + 11) + (2 * 4)",
      "5 + (11 + (2 * 4))",
      "(5 + 11) + (4 * 2)",
      "((4 * 2) + 11) + 5",
      "((4 * 2) + 5) + 11",
      "((2 * 4) + 5) + 11",
      "11 + (5 + (2 * 4))",
      "((5 + 11) - 4) * 2",
      "(11 + (2 * 4)) + 5",
      "((11 - 4) + 5) * 2",
      "11 + ((4 * 2) + 5)",
      "2 * ((5 + 11) - 4)",
      "((2 * 4) + 11) + 5",
      "2 * (11 + (5 - 4))",
      "2 * ((11 + 5) - 4)",
      "(11 + (5 - 4)) * 2",
      "(4 * 2) + (5 + 11)",
      "(11 + 5) + (2 * 4)",
      "((11 + 5) - 4) * 2",
      "11 + ((2 * 4) + 5)",
      "(11 - (4 - 5)) * 2",
      "2 * (11 - (4 - 5))",
      "2 * (5 + (11 - 4))",
      "(11 + 5) + (4 * 2)",
      "11 + (5 + (4 * 2))",
      "(5 + (4 * 2)) + 11",
      "5 + ((4 * 2) + 11)",
      "((5 - 4) + 11) * 2",
      "2 * (5 - (4 - 11))",
      "(4 * 2) + (11 + 5)",
      "(5 + (11 - 4)) * 2",
      "(5 + (2 * 4)) + 11",
      "(2 * 4) + (11 + 5)",
      "(2 * 4) + (5 + 11)",
      "2 * ((5 - 4) + 11)",
      "5 + (11 + (4 * 2))",
      "2 * ((11 - 4) + 5)",
      "5 + ((2 * 4) + 11)",
      "(5 - (4 - 11)) * 2",
      "(11 + (4 * 2)) + 5"
    ]
  },
  "2 4 5 12": {
    "cards": "2 4 5 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "12 + ((5 - 2) * 4)",
      "((5 - 2) * 4) + 12",
      "(5 - 2) * (12 - 4)",
      "(2 / (5 - 4)) * 12",
      "(2 * (5 - 4)) * 12",
      "(12 * 2) / (5 - 4)",
      "(12 * (5 - 4)) * 2",
      "12 - (4 * (2 - 5))",
      "(2 - 5) * (4 - 12)",
      "(4 - 12) * (2 - 5)",
      "(12 * 2) * (5 - 4)",
      "12 * ((5 - 4) * 2)",
      "(5 - 4) * (2 * 12)",
      "(2 * 12) / (5 - 4)",
      "2 / ((5 - 4) / 12)",
      "2 * ((5 - 4) * 12)",
      "12 + (4 * (5 - 2))",
      "(12 - 4) * (5 - 2)",
      "12 * (2 / (5 - 4))",
      "12 - ((2 - 5) * 4)",
      "(2 * 12) * (5 - 4)",
      "(5 - 4) * (12 * 2)",
      "12 * (2 * (5 - 4))",
      "2 * (12 / (5 - 4))",
      "((5 - 4) * 2) * 12",
      "((5 - 4) * 12) * 2",
      "(12 / (5 - 4)) * 2",
      "(4 * (5 - 2)) + 12",
      "12 / ((5 - 4) / 2)",
      "2 * (12 * (5 - 4))"
    ]
  },
  "2 4 5 13": {
    "cards": "2 4 5 13",
    "has_solution": "Y",
    "num_solutions": 144,
    "solutions": [
      "(4 + (13 + 5)) + 2",
      "2 * (13 + (4 - 5))",
      "(13 + (5 + 2)) + 4",
      "2 + (4 + (5 + 13))",
      "(13 + 4) + (2 + 5)",
      "5 + (13 + (4 + 2))",
      "5 + ((4 + 13) + 2)",
      "2 + ((4 + 5) + 13)",
      "4 + (5 + (2 + 13))",
      "((5 + 4) + 2) + 13",
      "((13 + 2) + 4) + 5",
      "(2 + 13) + (4 + 5)",
      "(13 + (2 + 5)) + 4",
      "(2 + 5) + (13 + 4)",
      "5 + (4 + (2 + 13))",
      "2 + ((5 + 13) + 4)",
      "13 + (4 + (5 + 2))",
      "(5 + (4 + 13)) + 2",
      "4 + ((5 + 2) + 13)",
      "2 * ((4 - 5) + 13)",
      "((4 + 5) + 13) + 2",
      "((5 + 4) + 13) + 2",
      "(4 + 13) + (5 + 2)",
      "2 + (13 + (4 + 5))",
      "((2 + 4) + 5) + 13",
      "5 + ((13 + 4) + 2)",
      "2 + ((5 + 4) + 13)",
      "4 + ((2 + 5) + 13)",
      "2 + ((13 + 4) + 5)",
      "4 + ((2 + 13) + 5)",
      "(5 + (2 + 4)) + 13",
      "(13 + (5 + 4)) + 2",
      "(13 + 4) + (5 + 2)",
      "13 + (5 + (4 + 2))",
      "2 * (4 - (5 - 13))",
      "4 * ((13 - 5) - 2)",
      "5 + (13 + (2 + 4))",
      "2 + (5 + (4 + 13))",
      "4 + ((5 + 13) + 2)",
      "4 + (2 + (13 + 5))",
      "(2 + 4) + (13 + 5)",
      "(4 + (13 + 2)) + 5",
      "4 + (5 + (13 + 2))",
      "(13 + (4 - 5)) * 2",
      "4 * ((13 - 2) - 5)",
      "(5 + (13 + 4)) + 2",
      "5 + ((4 + 2) + 13)",
      "5 + ((13 + 2) + 4)",
      "((13 + 4) - 5) * 2",
      "13 + ((2 + 5) + 4)",
      "5 + ((2 + 13) + 4)",
      "((2 + 13) + 5) + 4",
      "(13 - (5 + 2)) * 4",
      "(5 + 2) + (4 + 13)",
      "(13 + 2) + (4 + 5)",
      "((2 + 4) + 13) + 5",
      "(13 + 5) + (2 + 4)",
      "(4 + (5 + 13)) + 2",
      "(4 + 5) + (2 + 13)",
      "((4 + 2) + 13) + 5",
      "13 + (2 + (5 + 4))",
      "2 + (5 + (13 + 4))",
      "13 + ((5 + 4) + 2)",
      "((13 - 5) - 2) * 4",
      "(4 + 2) + (5 + 13)",
      "2 * ((4 + 13) - 5)",
      "2 * (4 + (13 - 5))",
      "(5 + (2 + 13)) + 4",
      "((13 + 2) + 5) + 4",
      "((5 + 2) + 4) + 13",
      "2 + (4 + (13 + 5))",
      "(5 + 4) + (13 + 2)",
      "((13 - 2) - 5) * 4",
      "(4 + (5 + 2)) + 13",
      "(5 + 13) + (2 + 4)",
      "4 * (13 - (5 + 2))",
      "2 + (13 + (5 + 4))",
      "((4 + 13) + 5) + 2",
      "2 * ((13 - 5) + 4)",
      "2 * ((13 + 4) - 5)",
      "(4 + (2 + 13)) + 5",
      "13 + ((5 + 2) + 4)",
      "13 + (2 + (4 + 5))",
      "(13 + (4 + 2)) + 5",
      "((2 + 5) + 13) + 4",
      "(2 + (4 + 13)) + 5",
      "13 + ((2 + 4) + 5)",
      "((4 + 13) + 2) + 5",
      "(4 - (5 - 13)) * 2",
      "4 + ((13 + 5) + 2)",
      "((2 + 13) + 4) + 5",
      "((13 - 5) + 4) * 2",
      "(2 + 4) + (5 + 13)",
      "(5 + 2) + (13 + 4)",
      "((5 + 13) + 4) + 2",
      "4 + (2 + (5 + 13))",
      "5 + (2 + (13 + 4))",
      "(13 + (4 + 5)) + 2",
      "13 + ((4 + 2) + 5)",
      "4 * (13 - (2 + 5))",
      "(2 + (13 + 5)) + 4",
      "13 + (4 + (2 + 5))",
      "(5 + 13) + (4 + 2)",
      "(13 + 5) + (4 + 2)",
      "((4 + 2) + 5) + 13",
      "2 * (13 - (5 - 4))",
      "(2 + (5 + 4)) + 13",
      "(2 + (13 + 4)) + 5",
      "((13 + 4) + 5) + 2",
      "((13 + 5) + 2) + 4",
      "2 + ((13 + 5) + 4)",
      "(2 + (4 + 5)) + 13",
      "(4 + 5) + (13 + 2)",
      "(5 + 4) + (2 + 13)",
      "(5 + (13 + 2)) + 4",
      "(13 - (5 - 4)) * 2",
      "(4 + 13) + (2 + 5)",
      "4 + (13 + (5 + 2))",
      "((13 + 4) + 2) + 5",
      "5 + ((2 + 4) + 13)",
      "13 + ((4 + 5) + 2)",
      "((4 + 13) - 5) * 2",
      "4 + ((13 + 2) + 5)",
      "2 + ((4 + 13) + 5)",
      "5 + (2 + (4 + 13))",
      "(13 + 2) + (5 + 4)",
      "(4 + (2 + 5)) + 13",
      "4 + (13 + (2 + 5))",
      "(4 + 2) + (13 + 5)",
      "((4 + 5) + 2) + 13",
      "((2 + 5) + 4) + 13",
      "(2 + 5) + (4 + 13)",
      "(2 + 13) + (5 + 4)",
      "((5 + 13) + 2) + 4",
      "(2 + (5 + 13)) + 4",
      "((13 + 5) + 4) + 2",
      "((5 + 2) + 13) + 4",
      "13 + (5 + (2 + 4))",
      "(13 + (2 + 4)) + 5",
      "(5 + (4 + 2)) + 13",
      "5 + (4 + (13 + 2))",
      "(4 + (13 - 5)) * 2",
      "(13 - (2 + 5)) * 4",
      "((4 - 5) + 13) * 2"
    ]
  },
  "2 4 6 6": {
    "cards": "2 4 6 6",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "((6 + 6) * 4) / 2",
      "(6 - (4 / 2)) * 6",
      "6 * ((6 - 4) * 2)",
      "6 * ((6 - 4) + 2)",
      "(2 + (6 - 4)) * 6",
      "((6 + 6) / 2) * 4",
      "6 * ((2 - 4) + 6)",
      "((6 - 4) * 2) * 6",
      "(6 - 4) * (6 * 2)",
      "((6 + 2) - 4) * 6",
      "(6 * (6 - 4)) * 2",
      "4 / (2 / (6 + 6))",
      "4 * ((2 * 6) - 6)",
      "(4 / 2) * (6 + 6)",
      "(6 * 2) * (6 - 4)",
      "(6 + 6) * (4 / 2)",
      "((6 - 4) * 6) * 2",
      "((2 * 6) - 6) * 4",
      "(2 * 6) * (6 - 4)",
      "6 * (2 - (4 - 6))",
      "4 * ((6 * 2) - 6)",
      "6 * (6 - (4 - 2))",
      "6 * ((2 + 6) - 4)",
      "(2 * (6 - 4)) * 6",
      "6 * (2 + (6 - 4))",
      "6 * ((6 + 2) - 4)",
      "(6 + 6) * (4 - 2)",
      "2 * ((6 - 4) * 6)",
      "(6 + 6) / (2 / 4)",
      "4 * ((6 + 6) / 2)",
      "((2 - 4) + 6) * 6",
      "(4 * (6 + 6)) / 2",
      "((6 * 2) - 6) * 4",
      "(6 - 4) * (2 * 6)",
      "((2 + 6) - 4) * 6",
      "(6 + (2 - 4)) * 6",
      "(6 - (4 - 2)) * 6",
      "6 * (6 - (4 / 2))",
      "2 * (6 * (6 - 4))",
      "(4 - 2) * (6 + 6)",
      "((6 - 4) + 2) * 6",
      "(2 - (4 - 6)) * 6",
      "6 * (2 * (6 - 4))",
      "6 * (6 + (2 - 4))"
    ]
  },
  "2 4 6 7": {
    "cards": "2 4 6 7",
    "has_solution": "Y",
    "num_solutions": 47,
    "solutions": [
      "2 - (6 - (7 * 4))",
      "2 + ((7 * 4) - 6)",
      "(7 - 4) * (2 + 6)",
      "((7 * 4) + 2) - 6",
      "(2 - 6) + (7 * 4)",
      "(7 * (6 - 2)) - 4",
      "(6 + (2 * 7)) + 4",
      "(7 * 2) + (4 + 6)",
      "(2 + (7 * 4)) - 6",
      "4 + (6 + (2 * 7))",
      "(4 + (2 * 7)) + 6",
      "(2 * 7) + (6 + 4)",
      "6 / (2 - (7 / 4))",
      "2 - (6 - (4 * 7))",
      "(7 * 2) + (6 + 4)",
      "(2 + 6) * (7 - 4)",
      "((4 * 7) + 2) - 6",
      "(4 * 7) - (6 - 2)",
      "(6 + (7 * 2)) + 4",
      "(6 + 4) + (7 * 2)",
      "((7 * 2) + 6) + 4",
      "2 + ((4 * 7) - 6)",
      "(7 * 4) - (6 - 2)",
      "6 + ((2 * 7) + 4)",
      "4 + ((2 * 7) + 6)",
      "(4 + (7 * 2)) + 6",
      "6 + (4 + (7 * 2))",
      "(4 + 6) + (7 * 2)",
      "(4 + 6) + (2 * 7)",
      "((2 * 7) + 6) + 4",
      "(2 + (4 * 7)) - 6",
      "(4 * 7) + (2 - 6)",
      "(6 + 2) * (7 - 4)",
      "4 + (6 + (7 * 2))",
      "(2 - 6) + (4 * 7)",
      "((2 * 7) + 4) + 6",
      "4 + ((7 * 2) + 6)",
      "6 + ((7 * 2) + 4)",
      "((6 - 2) * 7) - 4",
      "6 + (4 + (2 * 7))",
      "((4 * 7) - 6) + 2",
      "(7 * 4) + (2 - 6)",
      "(7 - 4) * (6 + 2)",
      "((7 * 4) - 6) + 2",
      "(2 * 7) + (4 + 6)",
      "(6 + 4) + (2 * 7)",
      "((7 * 2) + 4) + 6"
    ]
  },
  "2 4 6 8": {
    "cards": "2 4 6 8",
    "has_solution": "Y",
    "num_solutions": 148,
    "solutions": [
      "(8 / 4) * (6 * 2)",
      "2 * (6 / (4 / 8))",
      "6 * ((2 * 8) / 4)",
      "((2 * 6) / 4) * 8",
      "((4 * 8) - 2) - 6",
      "(8 + 4) + (2 * 6)",
      "((2 * 6) * 8) / 4",
      "6 * ((8 / 4) + 2)",
      "8 + ((6 * 2) + 4)",
      "((8 * 6) / 4) * 2",
      "((2 * 8) * 6) / 4",
      "(2 * 6) + (8 + 4)",
      "8 / (4 / (6 * 2))",
      "8 * (2 * (6 / 4))",
      "8 / ((4 - 2) / 6)",
      "((6 + 8) * 2) - 4",
      "2 / (4 / (8 * 6))",
      "4 + (8 + (6 * 2))",
      "(4 * 8) - (6 + 2)",
      "(2 * (8 / 4)) * 6",
      "((2 / 4) * 6) * 8",
      "(6 * 2) / (4 / 8)",
      "((2 + 6) * 4) - 8",
      "(8 / (4 - 2)) * 6",
      "((6 / 4) * 8) * 2",
      "(6 * 2) * (8 / 4)",
      "(2 * 6) * (8 / 4)",
      "2 * (8 / (4 / 6))",
      "(4 + (2 * 6)) + 8",
      "(2 / (4 / 6)) * 8",
      "((8 + 6) * 2) - 4",
      "((6 * 2) + 8) + 4",
      "(4 * (6 - 2)) + 8",
      "(8 * (2 / 4)) * 6",
      "2 / (4 / (6 * 8))",
      "(2 * 6) / (4 / 8)",
      "6 / (4 / (2 * 8))",
      "2 / ((4 / 6) / 8)",
      "((8 / 4) * 2) * 6",
      "(8 * (2 * 6)) / 4",
      "2 * ((6 / 4) * 8)",
      "8 * ((6 / 4) * 2)",
      "6 * ((2 / 4) * 8)",
      "(4 * (6 + 2)) - 8",
      "((2 * 6) + 4) + 8",
      "(8 * (6 * 2)) / 4",
      "(2 * (6 + 8)) - 4",
      "(4 + 8) + (6 * 2)",
      "6 * ((8 * 2) / 4)",
      "(2 / 4) * (6 * 8)",
      "((6 * 8) * 2) / 4",
      "((6 * 2) / 4) * 8",
      "(6 * 8) / (4 / 2)",
      "((8 * 6) * 2) / 4",
      "(8 * 2) * (6 / 4)",
      "6 * (8 / (4 / 2))",
      "((6 - 2) * 4) + 8",
      "(8 * 2) / (4 / 6)",
      "8 / ((4 / 2) / 6)",
      "2 * (8 * (6 / 4))",
      "(8 * 6) * (2 / 4)",
      "(8 + 4) + (6 * 2)",
      "2 * ((8 / 4) * 6)",
      "2 * (6 * (8 / 4))",
      "2 * ((8 * 6) / 4)",
      "(8 * (6 / 4)) * 2",
      "(6 * (2 * 8)) / 4",
      "((4 * 8) - 6) - 2",
      "(6 / 4) * (2 * 8)",
      "(8 * 4) - (2 + 6)",
      "8 + ((6 - 2) * 4)",
      "8 - ((2 - 6) * 4)",
      "8 + (4 + (2 * 6))",
      "6 / ((4 - 2) / 8)",
      "((8 * 2) * 6) / 4",
      "(2 * 8) * (6 / 4)",
      "(4 + (6 * 2)) + 8",
      "4 + ((2 * 6) + 8)",
      "(4 + 8) + (2 * 6)",
      "(2 * (6 * 8)) / 4",
      "(8 + (6 * 2)) + 4",
      "2 / ((4 / 8) / 6)",
      "(6 / (4 - 2)) * 8",
      "8 / ((4 / 6) / 2)",
      "8 * (6 / (4 / 2))",
      "((8 * 2) / 4) * 6",
      "(2 * (8 + 6)) - 4",
      "(6 * (2 / 4)) * 8",
      "((8 * 4) - 2) - 6",
      "(8 / (4 / 6)) * 2",
      "(6 / 4) * (8 * 2)",
      "(8 + (2 * 6)) + 4",
      "(2 / 4) * (8 * 6)",
      "(2 * 6) + (4 + 8)",
      "(8 * 6) / (4 / 2)",
      "8 / (4 / (2 * 6))",
      "8 + ((2 * 6) + 4)",
      "(2 + (8 / 4)) * 6",
      "(4 * 8) - (2 + 6)",
      "(2 * (8 * 6)) / 4",
      "((6 * 2) * 8) / 4",
      "(2 * (6 / 4)) * 8",
      "8 * ((2 * 6) / 4)",
      "6 * (2 + (8 / 4))",
      "(6 / (4 / 8)) * 2",
      "6 / ((4 / 8) / 2)",
      "((2 * 6) + 8) + 4",
      "(8 / 4) * (2 * 6)",
      "(6 * 8) * (2 / 4)",
      "8 + (4 + (6 * 2))",
      "((6 * 2) + 4) + 8",
      "8 * (2 / (4 / 6))",
      "8 - (4 * (2 - 6))",
      "6 / (4 / (8 * 2))",
      "6 * (8 * (2 / 4))",
      "(6 * 2) + (8 + 4)",
      "((2 / 4) * 8) * 6",
      "((8 / 4) + 2) * 6",
      "(6 / (4 / 2)) * 8",
      "((8 * 4) - 6) - 2",
      "(6 * 2) + (4 + 8)",
      "((8 / 4) * 6) * 2",
      "4 + ((6 * 2) + 8)",
      "8 + (4 * (6 - 2))",
      "(8 * 6) / (4 - 2)",
      "6 * (2 / (4 / 8))",
      "2 * ((6 * 8) / 4)",
      "(2 * 8) / (4 / 6)",
      "((6 * 8) / 4) * 2",
      "4 + (8 + (2 * 6))",
      "(6 * (8 / 4)) * 2",
      "6 * (8 / (4 - 2))",
      "8 * ((6 * 2) / 4)",
      "(2 / (4 / 8)) * 6",
      "8 * (6 * (2 / 4))",
      "(8 * 4) - (6 + 2)",
      "(6 * (8 * 2)) / 4",
      "6 / ((4 / 2) / 8)",
      "((6 + 2) * 4) - 8",
      "(8 / (4 / 2)) * 6",
      "8 * ((2 / 4) * 6)",
      "((2 * 8) / 4) * 6",
      "6 * (2 * (8 / 4))",
      "(6 * 8) / (4 - 2)",
      "8 * (6 / (4 - 2))",
      "6 * ((8 / 4) * 2)",
      "(4 * (2 + 6)) - 8",
      "((6 / 4) * 2) * 8"
    ]
  },
  "2 4 6 9": {
    "cards": "2 4 6 9",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(9 * 4) - (2 * 6)",
      "(9 - (6 / 2)) * 4",
      "6 + ((4 * 9) / 2)",
      "(4 * (9 / 2)) + 6",
      "2 * ((9 - 6) * 4)",
      "((9 - 6) * 4) * 2",
      "(9 * 4) - (6 * 2)",
      "(4 * 2) * (9 - 6)",
      "2 * (4 * (9 - 6))",
      "6 + (4 * (9 / 2))",
      "(9 / (2 / 4)) + 6",
      "((4 - 2) * 9) + 6",
      "(4 * 9) - (2 * 6)",
      "6 + ((9 * 4) / 2)",
      "4 * (2 * (9 - 6))",
      "6 - ((2 - 4) * 9)",
      "(4 * (9 - 6)) * 2",
      "((9 * 4) / 2) + 6",
      "6 / ((9 / 4) - 2)",
      "(2 + (4 / 6)) * 9",
      "((4 / 2) * 9) + 6",
      "4 * (9 - (6 / 2))",
      "6 + (9 / (2 / 4))",
      "9 * (2 + (4 / 6))",
      "6 + ((4 / 2) * 9)",
      "(9 - 6) * (2 * 4)",
      "9 * ((4 / 6) + 2)",
      "6 - (9 * (2 - 4))",
      "((9 / 2) * 4) + 6",
      "((4 / 6) + 2) * 9",
      "6 + (9 * (4 - 2))",
      "6 + ((4 - 2) * 9)",
      "6 + (4 / (2 / 9))",
      "((4 * 9) / 2) + 6",
      "((9 - 6) * 2) * 4",
      "(9 * (4 / 2)) + 6",
      "6 + (9 * (4 / 2))",
      "(9 - 6) * (4 * 2)",
      "(9 * (4 - 2)) + 6",
      "4 * ((9 - 6) * 2)",
      "(2 * (9 - 6)) * 4",
      "(4 / (2 / 9)) + 6",
      "(2 * 4) * (9 - 6)",
      "(4 * 9) - (6 * 2)",
      "6 + ((9 / 2) * 4)"
    ]
  },
  "2 4 6 10": {
    "cards": "2 4 6 10",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "(2 * 4) + (10 + 6)",
      "((4 * 2) + 10) + 6",
      "6 + (10 + (4 * 2))",
      "(10 + 6) + (4 * 2)",
      "4 * (2 + (10 - 6))",
      "(6 + (10 - 4)) * 2",
      "(6 - 4) * (10 + 2)",
      "((10 - 2) - 4) * 6",
      "((2 * 4) + 10) + 6",
      "6 + ((4 * 2) + 10)",
      "2 * (10 + (6 - 4))",
      "(6 + 10) + (2 * 4)",
      "2 * (10 - (4 - 6))",
      "4 * ((10 - 6) + 2)",
      "2 * (6 - (4 - 10))",
      "(4 * 2) + (6 + 10)",
      "4 * (10 - (6 - 2))",
      "10 + ((4 * 2) + 6)",
      "(6 - 4) * (2 + 10)",
      "(2 + (10 - 6)) * 4",
      "(10 - 6) * (2 + 4)",
      "6 * (10 - (4 + 2))",
      "((4 * 2) + 6) + 10",
      "(10 + 6) + (2 * 4)",
      "(6 - (4 - 10)) * 2",
      "(10 - 4) * (6 - 2)",
      "4 * ((10 + 2) - 6)",
      "2 * ((10 - 4) + 6)",
      "(4 + 2) * (10 - 6)",
      "(6 + (4 * 2)) + 10",
      "(10 + (6 - 4)) * 2",
      "6 + ((2 * 4) + 10)",
      "6 + (10 + (2 * 4))",
      "((2 + 10) - 6) * 4",
      "(10 - (4 + 2)) * 6",
      "(10 + (4 * 2)) + 6",
      "2 * ((6 - 4) + 10)",
      "((10 - 6) + 2) * 4",
      "(10 - (4 - 6)) * 2",
      "10 + (6 + (4 * 2))",
      "((10 - 4) + 6) * 2",
      "((10 - 4) - 2) * 6",
      "10 + (6 + (2 * 4))",
      "((10 + 6) - 4) * 2",
      "(4 - 10) * (2 - 6)",
      "6 * (10 - (2 + 4))",
      "4 * ((2 - 6) + 10)",
      "6 * ((10 - 4) - 2)",
      "((6 + 10) - 4) * 2",
      "(2 - 6) * (4 - 10)",
      "2 * ((6 + 10) - 4)",
      "10 + ((2 * 4) + 6)",
      "6 * ((10 - 2) - 4)",
      "4 * (2 - (6 - 10))",
      "(2 * 4) + (6 + 10)",
      "(2 + 4) * (10 - 6)",
      "4 * ((2 + 10) - 6)",
      "((2 - 6) + 10) * 4",
      "((6 - 4) + 10) * 2",
      "(10 - (2 + 4)) * 6",
      "(10 - 6) * (4 + 2)",
      "2 * ((10 + 6) - 4)",
      "4 * (10 + (2 - 6))",
      "2 * (6 + (10 - 4))",
      "((10 + 2) - 6) * 4",
      "(10 + 2) * (6 - 4)",
      "(2 - (6 - 10)) * 4",
      "(10 + (2 - 6)) * 4",
      "(2 + 10) * (6 - 4)",
      "(6 - 2) * (10 - 4)",
      "(10 - (6 - 2)) * 4",
      "((2 * 4) + 6) + 10",
      "(4 * 2) + (10 + 6)",
      "(6 + (2 * 4)) + 10",
      "(10 + (2 * 4)) + 6",
      "(6 + 10) + (4 * 2)"
    ]
  },
  "2 4 6 11": {
    "cards": "2 4 6 11",
    "has_solution": "Y",
    "num_solutions": 27,
    "solutions": [
      "2 + ((6 - 4) * 11)",
      "6 + ((2 * 11) - 4)",
      "6 - (4 - (11 * 2))",
      "(2 * (4 + 11)) - 6",
      "2 + (11 * (6 - 4))",
      "(11 * 2) + (6 - 4)",
      "(6 + (2 * 11)) - 4",
      "(2 * 11) - (4 - 6)",
      "2 - (11 * (4 - 6))",
      "((11 * 2) - 4) + 6",
      "(2 * (11 + 4)) - 6",
      "2 - ((4 - 6) * 11)",
      "((11 * 2) + 6) - 4",
      "(6 - 4) + (2 * 11)",
      "((11 + 4) * 2) - 6",
      "((4 + 11) * 2) - 6",
      "(11 * 2) - (4 - 6)",
      "(6 - 4) + (11 * 2)",
      "((2 * 11) - 4) + 6",
      "6 - (4 - (2 * 11))",
      "6 + ((11 * 2) - 4)",
      "((6 - 4) * 11) + 2",
      "(2 * 11) + (6 - 4)",
      "((2 * 11) + 6) - 4",
      "(11 * (6 - 4)) + 2",
      "4 / (2 - (11 / 6))",
      "(6 + (11 * 2)) - 4"
    ]
  },
  "2 4 6 12": {
    "cards": "2 4 6 12",
    "has_solution": "Y",
    "num_solutions": 183,
    "solutions": [
      "(2 + 6) / (4 / 12)",
      "((2 + 6) / 4) * 12",
      "(4 + (12 + 6)) + 2",
      "2 * ((4 * 6) - 12)",
      "2 + (6 + (4 + 12))",
      "12 + (2 + (6 + 4))",
      "((12 - 4) / 2) * 6",
      "12 - ((2 - 4) * 6)",
      "(6 + (2 + 4)) + 12",
      "(12 + (6 + 4)) + 2",
      "((2 + 12) + 6) + 4",
      "(6 + 2) + (12 + 4)",
      "12 + (4 * (6 / 2))",
      "4 + ((6 + 12) + 2)",
      "(6 * (2 + 4)) - 12",
      "12 + ((6 / 2) * 4)",
      "2 + ((6 + 12) + 4)",
      "12 * ((6 + 2) / 4)",
      "4 + (2 + (6 + 12))",
      "((2 + 12) + 4) + 6",
      "4 + (12 + (6 + 2))",
      "(6 + (4 + 12)) + 2",
      "((2 + 6) + 4) + 12",
      "6 / (2 / (12 - 4))",
      "12 + ((6 + 2) + 4)",
      "(4 + 6) + (2 + 12)",
      "12 * ((2 + 6) / 4)",
      "(6 + 12) + (2 + 4)",
      "(12 * (2 + 6)) / 4",
      "(4 + (12 + 2)) + 6",
      "((4 * 6) - 12) * 2",
      "(6 + (12 + 4)) + 2",
      "12 + ((6 + 4) + 2)",
      "12 + (4 / (2 / 6))",
      "6 + ((2 + 12) + 4)",
      "((2 + 6) + 12) + 4",
      "((2 + 4) * 6) - 12",
      "6 + (4 + (12 + 2))",
      "(12 * (6 + 2)) / 4",
      "12 + ((4 / 2) * 6)",
      "(4 + 2) + (6 + 12)",
      "((2 * 4) - 6) * 12",
      "(4 + 12) + (6 + 2)",
      "((12 - 4) * 6) / 2",
      "(6 + (12 + 2)) + 4",
      "(2 + 12) + (6 + 4)",
      "12 / (4 / (6 + 2))",
      "(12 - 4) * (6 / 2)",
      "(12 + 2) + (4 + 6)",
      "(4 + (2 + 6)) + 12",
      "((6 + 4) + 12) + 2",
      "12 + (4 + (2 + 6))",
      "4 + ((2 + 12) + 6)",
      "(2 + (6 + 4)) + 12",
      "2 + ((6 + 4) + 12)",
      "(12 / 4) * (2 + 6)",
      "(2 + 6) + (4 + 12)",
      "12 + (6 + (4 + 2))",
      "((4 * 2) - 6) * 12",
      "(6 + (2 + 12)) + 4",
      "(2 + 4) + (12 + 6)",
      "(12 + (2 + 6)) + 4",
      "2 + (12 + (4 + 6))",
      "((2 + 4) + 12) + 6",
      "(4 / (2 / 6)) + 12",
      "((12 + 6) + 2) + 4",
      "(4 * (6 / 2)) + 12",
      "(6 + 4) + (2 + 12)",
      "12 + (6 * (4 - 2))",
      "12 + ((4 * 6) / 2)",
      "((12 + 2) + 6) + 4",
      "(2 + (6 + 12)) + 4",
      "(6 + 4) + (12 + 2)",
      "6 + ((4 + 12) + 2)",
      "(2 + (4 + 6)) + 12",
      "(6 * (4 + 2)) - 12",
      "4 + ((2 + 6) + 12)",
      "((12 + 6) + 4) + 2",
      "(4 + (6 + 12)) + 2",
      "(4 + 6) + (12 + 2)",
      "(2 + 4) + (6 + 12)",
      "(12 + (4 + 2)) + 6",
      "((12 + 2) + 4) + 6",
      "4 + (2 + (12 + 6))",
      "6 * (12 - (2 * 4))",
      "((2 + 6) * 12) / 4",
      "(12 / 4) * (6 + 2)",
      "4 + ((6 + 2) + 12)",
      "6 * (12 - (4 * 2))",
      "2 + (4 + (12 + 6))",
      "(6 / (2 / 4)) + 12",
      "(12 + 6) + (4 + 2)",
      "6 + (2 + (4 + 12))",
      "6 + ((12 + 2) + 4)",
      "4 + ((12 + 2) + 6)",
      "4 + (6 + (12 + 2))",
      "(6 * (12 - 4)) / 2",
      "4 + ((12 + 6) + 2)",
      "((6 + 2) / 4) * 12",
      "((4 * 6) / 2) + 12",
      "((4 - 2) * 6) + 12",
      "12 + ((4 - 2) * 6)",
      "12 + (6 * (4 / 2))",
      "((6 + 2) + 4) + 12",
      "(12 + (2 + 4)) + 6",
      "(4 + 2) + (12 + 6)",
      "12 - (6 * (2 - 4))",
      "(2 + 6) * (12 / 4)",
      "(2 + (4 + 12)) + 6",
      "(12 + 2) + (6 + 4)",
      "6 + (4 + (2 + 12))",
      "12 * ((2 * 4) - 6)",
      "((12 + 4) + 6) + 2",
      "(12 - (2 * 4)) * 6",
      "2 + ((4 + 6) + 12)",
      "((4 / 2) * 6) + 12",
      "(6 + 2) + (4 + 12)",
      "(2 + (12 + 4)) + 6",
      "12 + ((4 + 6) + 2)",
      "((12 + 4) + 2) + 6",
      "((4 + 2) + 6) + 12",
      "((6 + 12) + 4) + 2",
      "(2 + 12) + (4 + 6)",
      "6 + ((4 + 2) + 12)",
      "12 / (4 / (2 + 6))",
      "((4 + 2) + 12) + 6",
      "(6 + 2) / (4 / 12)",
      "(12 + 4) + (6 + 2)",
      "2 + (6 + (12 + 4))",
      "(12 + (4 + 6)) + 2",
      "6 + (2 + (12 + 4))",
      "12 + ((4 + 2) + 6)",
      "6 + (12 + (4 + 2))",
      "(6 / 2) * (12 - 4)",
      "((6 * 4) - 12) * 2",
      "(12 + 6) + (2 + 4)",
      "(6 * (4 / 2)) + 12",
      "12 * ((4 * 2) - 6)",
      "(4 + (2 + 12)) + 6",
      "((6 + 12) + 2) + 4",
      "6 + ((2 + 4) + 12)",
      "((4 + 6) + 2) + 12",
      "(12 - (4 * 2)) * 6",
      "(4 + (6 + 2)) + 12",
      "((4 + 12) + 2) + 6",
      "(6 + 2) * (12 / 4)",
      "((2 + 4) + 6) + 12",
      "6 + (12 + (2 + 4))",
      "((4 + 2) * 6) - 12",
      "((6 + 2) * 12) / 4",
      "6 + ((12 + 4) + 2)",
      "4 + (6 + (2 + 12))",
      "12 + ((2 + 6) + 4)",
      "(4 + 12) + (2 + 6)",
      "2 + (12 + (6 + 4))",
      "12 + (2 + (4 + 6))",
      "(2 + (12 + 6)) + 4",
      "12 + (4 + (6 + 2))",
      "((6 + 2) + 12) + 4",
      "6 * ((12 - 4) / 2)",
      "((4 + 12) + 6) + 2",
      "2 + ((12 + 6) + 4)",
      "2 + (4 + (6 + 12))",
      "((6 + 4) + 2) + 12",
      "12 / (2 - (6 / 4))",
      "(6 + 12) + (4 + 2)",
      "12 + (6 / (2 / 4))",
      "(2 + 6) + (12 + 4)",
      "2 * ((6 * 4) - 12)",
      "12 + ((6 * 4) / 2)",
      "4 + (12 + (2 + 6))",
      "12 + ((2 + 4) + 6)",
      "(12 + 4) + (2 + 6)",
      "((6 * 4) / 2) + 12",
      "((6 / 2) * 4) + 12",
      "(6 * (4 - 2)) + 12",
      "(12 - 4) / (2 / 6)",
      "(6 + (4 + 2)) + 12",
      "12 + (6 + (2 + 4))",
      "(12 + (6 + 2)) + 4",
      "2 + ((4 + 12) + 6)",
      "2 + ((12 + 4) + 6)",
      "((4 + 6) + 12) + 2"
    ]
  },
  "2 4 6 13": {
    "cards": "2 4 6 13",
    "has_solution": "Y",
    "num_solutions": 25,
    "solutions": [
      "6 - (2 * (4 - 13))",
      "4 - (6 - (13 * 2))",
      "(2 * (13 - 4)) + 6",
      "4 - (6 - (2 * 13))",
      "((6 - 4) * 13) - 2",
      "(2 * 13) + (4 - 6)",
      "(13 * 2) - (6 - 4)",
      "4 / ((13 / 6) - 2)",
      "(4 - 6) + (2 * 13)",
      "(4 + (2 * 13)) - 6",
      "((2 * 13) + 4) - 6",
      "((2 * 13) - 6) + 4",
      "(13 * 2) + (4 - 6)",
      "(4 - 6) + (13 * 2)",
      "6 - ((4 - 13) * 2)",
      "(4 + (13 * 2)) - 6",
      "((13 * 2) - 6) + 4",
      "(2 * 13) - (6 - 4)",
      "6 + (2 * (13 - 4))",
      "((13 - 4) * 2) + 6",
      "((13 * 2) + 4) - 6",
      "4 + ((13 * 2) - 6)",
      "(13 * (6 - 4)) - 2",
      "4 + ((2 * 13) - 6)",
      "6 + ((13 - 4) * 2)"
    ]
  },
  "2 4 7 7": {
    "cards": "2 4 7 7",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(2 * (7 + 7)) - 4",
      "((7 + 7) * 2) - 4"
    ]
  },
  "2 4 7 8": {
    "cards": "2 4 7 8",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "((8 * 7) / 2) - 4",
      "((2 * 7) - 8) * 4",
      "((7 * 8) / 2) - 4",
      "(7 * 4) - (8 / 2)",
      "(8 * (7 / 2)) - 4",
      "(7 * (8 / 2)) - 4",
      "4 * ((2 * 7) - 8)",
      "((8 / 2) * 7) - 4",
      "((7 * 2) - 8) * 4",
      "((7 / 2) * 8) - 4",
      "(4 * 7) - (8 / 2)",
      "(8 / (2 / 7)) - 4",
      "(7 / (2 / 8)) - 4",
      "4 * ((7 * 2) - 8)"
    ]
  },
  "2 4 7 9": {
    "cards": "2 4 7 9",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(7 + 9) + (4 * 2)",
      "(7 + 9) + (2 * 4)",
      "(2 * 4) + (7 + 9)",
      "((2 * 4) + 7) + 9",
      "2 * (9 + (7 - 4))",
      "(4 * 2) + (7 + 9)",
      "2 * (7 - (4 - 9))",
      "(7 + (2 * 4)) + 9",
      "(9 + 7) + (4 * 2)",
      "(7 - (4 - 9)) * 2",
      "(7 + (9 - 4)) * 2",
      "(7 + (4 * 2)) + 9",
      "9 + ((4 * 2) + 7)",
      "(2 * 4) + (9 + 7)",
      "2 * ((9 - 4) + 7)",
      "(9 + (2 * 4)) + 7",
      "(9 - (4 - 7)) * 2",
      "((4 * 2) + 7) + 9",
      "7 + (9 + (4 * 2))",
      "9 + (7 + (2 * 4))",
      "9 + (7 + (4 * 2))",
      "((7 - 4) + 9) * 2",
      "(9 + (4 * 2)) + 7",
      "((4 * 2) + 9) + 7",
      "(9 + 7) + (2 * 4)",
      "9 + ((2 * 4) + 7)",
      "7 + (9 + (2 * 4))",
      "((7 + 9) - 4) * 2",
      "2 * ((9 + 7) - 4)",
      "2 * (7 + (9 - 4))",
      "(9 + (7 - 4)) * 2",
      "7 + ((4 * 2) + 9)",
      "2 * (9 - (4 - 7))",
      "7 + ((2 * 4) + 9)",
      "(4 * 2) + (9 + 7)",
      "((9 - 4) + 7) * 2",
      "2 * ((7 - 4) + 9)",
      "((9 + 7) - 4) * 2",
      "2 * ((7 + 9) - 4)",
      "((2 * 4) + 9) + 7"
    ]
  },
  "2 4 7 10": {
    "cards": "2 4 7 10",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "(7 / (2 / 4)) + 10",
      "10 + ((4 - 2) * 7)",
      "(7 * (4 / 2)) + 10",
      "(4 * (10 - 7)) * 2",
      "10 + (4 * (7 / 2))",
      "((10 - 7) * 2) * 4",
      "(7 - 4) * (10 - 2)",
      "((10 - 7) * 4) * 2",
      "(10 - 2) * (7 - 4)",
      "10 + (7 / (2 / 4))",
      "((7 * 4) / 2) + 10",
      "((4 / 2) * 7) + 10",
      "10 - (7 * (2 - 4))",
      "10 + ((7 / 2) * 4)",
      "(4 * (7 / 2)) + 10",
      "(10 - 7) * (4 * 2)",
      "10 + (7 * (4 / 2))",
      "(10 - 7) * (2 * 4)",
      "10 + ((4 / 2) * 7)",
      "2 * ((10 - 7) * 4)",
      "(2 - 10) * (4 - 7)",
      "((4 * 7) / 2) + 10",
      "(4 / (2 / 7)) + 10",
      "10 + (4 / (2 / 7))",
      "4 * (2 * (10 - 7))",
      "10 + ((7 * 4) / 2)",
      "(4 - 7) * (2 - 10)",
      "(4 * 2) * (10 - 7)",
      "((4 - 2) * 7) + 10",
      "(7 * (4 - 2)) + 10",
      "4 * ((10 - 7) * 2)",
      "((7 / 2) * 4) + 10",
      "(2 * (10 - 7)) * 4",
      "(2 * 4) * (10 - 7)",
      "10 - ((2 - 4) * 7)",
      "10 + ((4 * 7) / 2)",
      "2 * (4 * (10 - 7))",
      "10 + (7 * (4 - 2))"
    ]
  },
  "2 4 7 11": {
    "cards": "2 4 7 11",
    "has_solution": "Y",
    "num_solutions": 140,
    "solutions": [
      "(4 + (11 + 2)) + 7",
      "(7 + 11) + (2 + 4)",
      "(4 + (7 + 11)) + 2",
      "4 + ((11 + 7) + 2)",
      "4 * ((11 + 2) - 7)",
      "(7 + (4 + 2)) + 11",
      "(7 + 11) + (4 + 2)",
      "(11 + (4 + 7)) + 2",
      "(2 + (11 + 4)) + 7",
      "((11 + 7) + 2) + 4",
      "((2 + 4) + 11) + 7",
      "(7 + (4 + 11)) + 2",
      "((2 + 7) + 4) + 11",
      "(2 + (4 + 7)) + 11",
      "(11 + (7 + 4)) + 2",
      "(11 + 4) + (7 + 2)",
      "((2 + 7) + 11) + 4",
      "4 * ((2 + 11) - 7)",
      "4 + (11 + (7 + 2))",
      "((7 + 4) + 2) + 11",
      "7 + (2 + (4 + 11))",
      "((11 + 2) + 7) + 4",
      "(11 - (7 - 2)) * 4",
      "((7 + 2) + 11) + 4",
      "7 + (2 + (11 + 4))",
      "2 + (11 + (7 + 4))",
      "2 + ((7 + 4) + 11)",
      "7 + (11 + (4 + 2))",
      "(7 + 2) + (4 + 11)",
      "(7 + 2) + (11 + 4)",
      "(2 + 11) + (4 + 7)",
      "(4 + 2) + (11 + 7)",
      "11 + (4 + (2 + 7))",
      "4 * (2 - (7 - 11))",
      "(2 + 4) * (11 - 7)",
      "4 + ((11 + 2) + 7)",
      "((2 + 4) + 7) + 11",
      "(4 + 11) + (2 + 7)",
      "(2 + 4) + (11 + 7)",
      "2 + (11 + (4 + 7))",
      "(2 + (7 + 4)) + 11",
      "7 + (4 + (2 + 11))",
      "(4 + 2) * (11 - 7)",
      "4 + ((7 + 11) + 2)",
      "(2 + (11 + 7)) + 4",
      "((7 + 11) + 2) + 4",
      "11 + ((7 + 2) + 4)",
      "((11 + 4) + 7) + 2",
      "2 + ((7 + 11) + 4)",
      "(11 + 2) + (4 + 7)",
      "11 + ((7 + 4) + 2)",
      "(7 + 4) + (11 + 2)",
      "(11 + 7) + (2 + 4)",
      "7 + ((2 + 4) + 11)",
      "2 + (7 + (4 + 11))",
      "(2 + (11 - 7)) * 4",
      "((11 + 2) + 4) + 7",
      "(2 + 4) + (7 + 11)",
      "4 + ((2 + 7) + 11)",
      "(2 + 11) + (7 + 4)",
      "(7 + 4) + (2 + 11)",
      "4 + ((7 + 2) + 11)",
      "((7 + 11) + 4) + 2",
      "2 + (4 + (7 + 11))",
      "(11 + (2 + 4)) + 7",
      "(11 + 4) + (2 + 7)",
      "11 + (7 + (2 + 4))",
      "7 + ((2 + 11) + 4)",
      "2 + ((11 + 4) + 7)",
      "(11 + (2 + 7)) + 4",
      "4 + (7 + (2 + 11))",
      "2 + ((11 + 7) + 4)",
      "(2 + (4 + 11)) + 7",
      "2 + ((4 + 7) + 11)",
      "4 + ((2 + 11) + 7)",
      "7 + (11 + (2 + 4))",
      "(4 + (7 + 2)) + 11",
      "(4 + 2) + (7 + 11)",
      "7 + ((11 + 2) + 4)",
      "(7 + (2 + 11)) + 4",
      "(2 + 7) + (4 + 11)",
      "11 + (7 + (4 + 2))",
      "(4 + 7) + (11 + 2)",
      "(7 + (11 + 2)) + 4",
      "((11 + 4) + 2) + 7",
      "((7 + 4) + 11) + 2",
      "((2 + 11) + 7) + 4",
      "((4 + 2) + 7) + 11",
      "(2 + 7) + (11 + 4)",
      "4 + (11 + (2 + 7))",
      "(11 + 7) + (4 + 2)",
      "11 + ((2 + 7) + 4)",
      "11 + ((2 + 4) + 7)",
      "(7 + (11 + 4)) + 2",
      "((11 + 7) + 4) + 2",
      "(11 - 7) * (4 + 2)",
      "2 + (7 + (11 + 4))",
      "11 + (2 + (4 + 7))",
      "((11 + 2) - 7) * 4",
      "(11 - 7) * (2 + 4)",
      "(4 + (11 + 7)) + 2",
      "(11 + 2) + (7 + 4)",
      "11 + (4 + (7 + 2))",
      "((4 + 7) + 2) + 11",
      "(2 - (7 - 11)) * 4",
      "2 + (4 + (11 + 7))",
      "11 + (2 + (7 + 4))",
      "((4 + 2) + 11) + 7",
      "(11 + (4 + 2)) + 7",
      "(11 + (2 - 7)) * 4",
      "(11 + (7 + 2)) + 4",
      "4 * ((11 - 7) + 2)",
      "(4 + (2 + 7)) + 11",
      "7 + ((11 + 4) + 2)",
      "((7 + 2) + 4) + 11",
      "(4 + 7) + (2 + 11)",
      "((2 - 7) + 11) * 4",
      "(7 + (2 + 4)) + 11",
      "(4 + (2 + 11)) + 7",
      "11 + ((4 + 2) + 7)",
      "((4 + 11) + 7) + 2",
      "4 + (2 + (11 + 7))",
      "2 + ((4 + 11) + 7)",
      "((2 + 11) - 7) * 4",
      "4 * (11 - (7 - 2))",
      "((2 + 11) + 4) + 7",
      "4 * (2 + (11 - 7))",
      "4 + (7 + (11 + 2))",
      "4 * ((2 - 7) + 11)",
      "7 + ((4 + 2) + 11)",
      "4 + (2 + (7 + 11))",
      "((4 + 7) + 11) + 2",
      "(4 + 11) + (7 + 2)",
      "((11 - 7) + 2) * 4",
      "11 + ((4 + 7) + 2)",
      "((4 + 11) + 2) + 7",
      "7 + (4 + (11 + 2))",
      "4 * (11 + (2 - 7))",
      "7 + ((4 + 11) + 2)",
      "(2 + (7 + 11)) + 4"
    ]
  },
  "2 4 7 12": {
    "cards": "2 4 7 12",
    "has_solution": "Y",
    "num_solutions": 5,
    "solutions": [
      "((7 + 2) * 4) - 12",
      "12 / (4 - (7 / 2))",
      "(4 * (7 + 2)) - 12",
      "((2 + 7) * 4) - 12",
      "(4 * (2 + 7)) - 12"
    ]
  },
  "2 4 7 13": {
    "cards": "2 4 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 4 8 8": {
    "cards": "2 4 8 8",
    "has_solution": "Y",
    "num_solutions": 46,
    "solutions": [
      "(8 + 8) + (4 * 2)",
      "(8 * (4 - 2)) + 8",
      "8 + ((8 * 4) / 2)",
      "(4 * (8 / 2)) + 8",
      "((8 * 4) / 2) + 8",
      "8 - ((2 - 4) * 8)",
      "(8 + 8) + (2 * 4)",
      "2 * (8 - (4 - 8))",
      "8 + ((4 - 2) * 8)",
      "(2 * 4) + (8 + 8)",
      "(4 * 2) + (8 + 8)",
      "((4 - 2) * 8) + 8",
      "(4 / (2 / 8)) + 8",
      "((4 * 8) / 2) + 8",
      "(2 - 8) * (4 - 8)",
      "((8 - 4) + 8) * 2",
      "8 + (8 * (4 - 2))",
      "8 + (4 / (2 / 8))",
      "((4 / 2) * 8) + 8",
      "2 * ((8 + 8) - 4)",
      "8 + ((2 * 4) + 8)",
      "(8 - 4) * (8 - 2)",
      "8 - (8 * (2 - 4))",
      "((8 + 8) - 4) * 2",
      "8 + (8 + (2 * 4))",
      "8 + ((8 / 2) * 4)",
      "8 + ((4 * 2) + 8)",
      "(8 * (4 / 2)) + 8",
      "8 + (8 * (4 / 2))",
      "(8 / (2 / 4)) + 8",
      "8 + (8 + (4 * 2))",
      "(8 - (4 - 8)) * 2",
      "8 + (4 * (8 / 2))",
      "((4 * 2) + 8) + 8",
      "((8 / 2) * 4) + 8",
      "2 * (8 + (8 - 4))",
      "(8 + (8 - 4)) * 2",
      "(8 + (4 * 2)) + 8",
      "2 * ((8 - 4) + 8)",
      "(8 + (2 * 4)) + 8",
      "((2 * 4) + 8) + 8",
      "8 + (8 / (2 / 4))",
      "(4 - 8) * (2 - 8)",
      "8 + ((4 / 2) * 8)",
      "8 + ((4 * 8) / 2)",
      "(8 - 2) * (8 - 4)"
    ]
  },
  "2 4 8 9": {
    "cards": "2 4 8 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(9 - (4 + 2)) * 8",
      "8 * (9 - (4 + 2))",
      "(9 - (2 + 4)) * 8",
      "8 * (9 - (2 + 4))",
      "((9 - 2) - 4) * 8",
      "8 * ((9 - 2) - 4)",
      "8 * ((9 - 4) - 2)",
      "((9 - 4) - 2) * 8"
    ]
  },
  "2 4 8 10": {
    "cards": "2 4 8 10",
    "has_solution": "Y",
    "num_solutions": 196,
    "solutions": [
      "(10 * 2) + (8 - 4)",
      "(10 + (4 + 2)) + 8",
      "8 / (2 / (10 - 4))",
      "(8 - 4) + (2 * 10)",
      "(10 + (2 + 4)) + 8",
      "(2 * 10) + (8 - 4)",
      "((2 + 10) + 8) + 4",
      "2 + (8 + (10 + 4))",
      "(10 - 4) / (2 / 8)",
      "4 + ((10 + 8) + 2)",
      "10 + (4 + (8 + 2))",
      "(4 * 8) - (10 - 2)",
      "(4 + (8 + 10)) + 2",
      "(2 + (10 + 4)) + 8",
      "((8 + 10) + 4) + 2",
      "8 * ((10 - 4) / 2)",
      "8 + ((2 + 4) + 10)",
      "4 + (2 + (10 + 8))",
      "2 + ((4 + 8) + 10)",
      "10 + ((4 + 2) + 8)",
      "(8 * (10 + 2)) / 4",
      "4 + ((2 + 10) + 8)",
      "((2 * 10) - 4) + 8",
      "((10 + 2) + 4) + 8",
      "((2 + 10) / 4) * 8",
      "(2 + 10) * (8 / 4)",
      "4 + (2 + (8 + 10))",
      "2 * (10 + (8 / 4))",
      "4 + (8 + (10 + 2))",
      "(4 * 10) - (2 * 8)",
      "(4 + 8) + (2 + 10)",
      "((8 + 4) + 10) + 2",
      "(4 * 10) - (8 * 2)",
      "(4 + (2 + 10)) + 8",
      "10 + ((8 + 4) + 2)",
      "4 + (10 + (8 + 2))",
      "8 + (2 + (10 + 4))",
      "2 + ((8 * 4) - 10)",
      "((10 - 4) * 8) / 2",
      "((10 * 4) + 8) / 2",
      "(4 + 2) + (8 + 10)",
      "(4 + 10) + (8 + 2)",
      "(10 * 4) - (8 * 2)",
      "(8 + (10 * 2)) - 4",
      "(2 * 10) - (4 - 8)",
      "((4 + 2) + 10) + 8",
      "(10 + 4) + (8 + 2)",
      "4 + (8 + (2 + 10))",
      "(10 * 2) - (4 - 8)",
      "2 + (8 + (4 + 10))",
      "((4 + 8) + 2) + 10",
      "(10 + 2) + (8 + 4)",
      "((8 / 4) + 10) * 2",
      "8 * ((2 + 10) / 4)",
      "(8 / 2) * (10 - 4)",
      "(10 - (8 / 2)) * 4",
      "((8 + 2) + 10) + 4",
      "2 - (10 - (8 * 4))",
      "2 + ((8 + 10) + 4)",
      "((10 + 4) + 2) + 8",
      "(8 + 4) + (2 + 10)",
      "(8 + 4) + (10 + 2)",
      "(8 + (10 + 2)) + 4",
      "((4 * 10) + 8) / 2",
      "10 + (4 + (2 + 8))",
      "2 + (10 + (4 + 8))",
      "8 + ((4 + 10) + 2)",
      "((8 + 10) + 2) + 4",
      "((10 + 8) + 2) + 4",
      "(2 - 10) + (4 * 8)",
      "10 + ((4 + 8) + 2)",
      "8 + ((2 * 10) - 4)",
      "((10 + 4) + 8) + 2",
      "8 + ((10 + 2) + 4)",
      "((10 - 4) / 2) * 8",
      "10 + ((2 + 8) + 4)",
      "((4 + 10) + 2) + 8",
      "4 * ((2 * 8) - 10)",
      "(8 + (2 + 4)) + 10",
      "(8 * (10 - 4)) / 2",
      "(8 * 4) + (2 - 10)",
      "(8 + (2 * 10)) - 4",
      "((2 + 4) + 8) + 10",
      "(4 + 10) + (2 + 8)",
      "(8 + 10) + (4 + 2)",
      "(8 / 4) * (2 + 10)",
      "((10 + 2) * 8) / 4",
      "(4 + 8) + (10 + 2)",
      "8 / (4 / (2 + 10))",
      "(8 + (2 + 10)) + 4",
      "(2 + 4) + (8 + 10)",
      "(10 + 2) + (4 + 8)",
      "8 + ((10 + 4) + 2)",
      "(4 + (8 + 2)) + 10",
      "((4 * 8) + 2) - 10",
      "2 + ((10 + 4) + 8)",
      "(8 + 2) + (10 + 4)",
      "(8 + (10 * 4)) / 2",
      "10 + (2 + (4 + 8))",
      "(2 + (4 + 8)) + 10",
      "((4 + 2) + 8) + 10",
      "(2 + (8 + 4)) + 10",
      "(4 * 8) + (2 - 10)",
      "(2 + 10) + (4 + 8)",
      "(4 + (10 + 2)) + 8",
      "(8 + (10 + 4)) + 2",
      "((4 * 8) - 10) + 2",
      "8 + (4 + (10 + 2))",
      "(8 + 10) + (2 + 4)",
      "2 + (10 + (8 + 4))",
      "((4 + 8) + 10) + 2",
      "((10 + 8) + 4) + 2",
      "(10 * 4) - (2 * 8)",
      "(2 + 8) + (4 + 10)",
      "(2 - 10) + (8 * 4)",
      "(10 + (8 + 4)) + 2",
      "(10 + (8 / 4)) * 2",
      "(2 + 10) + (8 + 4)",
      "(4 + 2) + (10 + 8)",
      "8 / (4 / (10 + 2))",
      "((10 * 2) - 4) + 8",
      "(8 * (2 + 10)) / 4",
      "(10 + (4 + 8)) + 2",
      "8 + (2 + (4 + 10))",
      "(2 + (10 + 8)) + 4",
      "((2 + 10) + 4) + 8",
      "((8 * 4) + 2) - 10",
      "8 + ((2 + 10) + 4)",
      "(2 + 8) + (10 + 4)",
      "8 + (4 + (2 + 10))",
      "4 + ((8 + 10) + 2)",
      "2 + ((4 + 10) + 8)",
      "((8 + 2) + 4) + 10",
      "(10 + 4) + (2 + 8)",
      "4 * (10 - (8 / 2))",
      "((8 * 4) - 10) + 2",
      "((10 + 2) + 8) + 4",
      "2 * ((8 / 4) + 10)",
      "(2 + 4) + (10 + 8)",
      "2 + (4 + (10 + 8))",
      "10 + (8 + (4 + 2))",
      "(10 + 8) + (2 + 4)",
      "(2 + 10) / (4 / 8)",
      "((2 + 10) * 8) / 4",
      "((10 + 2) / 4) * 8",
      "8 + ((10 * 2) - 4)",
      "((4 + 10) + 8) + 2",
      "8 - (4 - (10 * 2))",
      "(10 + 8) + (4 + 2)",
      "10 + (8 + (2 + 4))",
      "2 + ((4 * 8) - 10)",
      "(2 + (4 * 8)) - 10",
      "2 + (4 + (8 + 10))",
      "8 - (4 - (2 * 10))",
      "((2 + 8) + 4) + 10",
      "(4 * (10 - 2)) - 8",
      "((8 + 4) + 2) + 10",
      "(8 + 2) + (4 + 10)",
      "(10 - 4) * (8 / 2)",
      "4 + (10 + (2 + 8))",
      "(10 + (2 + 8)) + 4",
      "10 + ((2 + 4) + 8)",
      "4 * ((8 * 2) - 10)",
      "(8 * 4) - (10 - 2)",
      "(10 + 2) / (4 / 8)",
      "(8 + (4 * 10)) / 2",
      "2 - (10 - (4 * 8))",
      "(10 + (8 + 2)) + 4",
      "((10 * 2) + 8) - 4",
      "4 + ((10 + 2) + 8)",
      "((8 * 2) - 10) * 4",
      "8 + ((4 + 2) + 10)",
      "2 + ((10 + 8) + 4)",
      "(8 + (4 + 2)) + 10",
      "(4 + (2 + 8)) + 10",
      "((10 - 2) * 4) - 8",
      "10 + (2 + (8 + 4))",
      "(4 + (10 + 8)) + 2",
      "(2 + (8 * 4)) - 10",
      "((2 * 8) - 10) * 4",
      "10 + ((8 + 2) + 4)",
      "8 + (10 + (4 + 2))",
      "4 + ((2 + 8) + 10)",
      "8 * ((10 + 2) / 4)",
      "2 + ((8 + 4) + 10)",
      "((2 + 4) + 10) + 8",
      "(2 + (8 + 10)) + 4",
      "(2 + (4 + 10)) + 8",
      "((2 * 10) + 8) - 4",
      "((2 + 8) + 10) + 4",
      "(8 / 4) * (10 + 2)",
      "8 + (10 + (2 + 4))",
      "(8 + (4 + 10)) + 2",
      "(10 + 2) * (8 / 4)",
      "4 + ((8 + 2) + 10)",
      "(8 - 4) + (10 * 2)"
    ]
  },
  "2 4 8 11": {
    "cards": "2 4 8 11",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(11 * 2) + (8 / 4)",
      "((11 - 8) * 2) * 4",
      "((11 - 8) * 4) * 2",
      "(2 * (11 - 8)) * 4",
      "((8 / 4) * 11) + 2",
      "(8 * (11 / 4)) + 2",
      "(11 * (8 / 4)) + 2",
      "8 * (11 - (4 * 2))",
      "2 + ((11 / 4) * 8)",
      "2 + (11 * (8 / 4))",
      "((8 * 11) / 4) + 2",
      "(11 / (4 / 8)) + 2",
      "(8 / 4) + (11 * 2)",
      "(2 * 11) + (8 / 4)",
      "(11 - 8) * (4 * 2)",
      "2 + ((11 * 8) / 4)",
      "2 + ((8 * 11) / 4)",
      "4 * (2 * (11 - 8))",
      "(4 * (11 - 8)) * 2",
      "(8 / 4) + (2 * 11)",
      "(4 * 2) * (11 - 8)",
      "8 * (11 - (2 * 4))",
      "(11 - (4 * 2)) * 8",
      "2 + (8 / (4 / 11))",
      "(2 * 4) * (11 - 8)",
      "2 + (8 * (11 / 4))",
      "(11 - 8) * (2 * 4)",
      "2 * ((11 - 8) * 4)",
      "2 * (4 * (11 - 8))",
      "2 + (11 / (4 / 8))",
      "((11 / 4) * 8) + 2",
      "((11 * 8) / 4) + 2",
      "(11 - (2 * 4)) * 8",
      "2 + ((8 / 4) * 11)",
      "4 * ((11 - 8) * 2)",
      "(8 / (4 / 11)) + 2"
    ]
  },
  "2 4 8 12": {
    "cards": "2 4 8 12",
    "has_solution": "Y",
    "num_solutions": 62,
    "solutions": [
      "(12 - 8) * (2 + 4)",
      "12 * (8 - (2 + 4))",
      "((8 - 4) / 2) * 12",
      "(2 * 8) + (12 - 4)",
      "(12 + (2 - 8)) * 4",
      "12 * ((8 - 2) - 4)",
      "8 + ((12 - 4) * 2)",
      "(8 * 2) - (4 - 12)",
      "(2 * (12 + 4)) - 8",
      "((8 * 2) - 4) + 12",
      "4 * (12 + (2 - 8))",
      "((8 * 2) + 12) - 4",
      "((12 - 8) + 2) * 4",
      "(12 - 4) + (8 * 2)",
      "((8 - 2) - 4) * 12",
      "((2 - 8) + 12) * 4",
      "12 - (4 - (8 * 2))",
      "(8 * 2) + (12 - 4)",
      "12 * ((8 - 4) / 2)",
      "(12 + (2 * 8)) - 4",
      "4 * (2 - (8 - 12))",
      "4 * ((12 - 8) + 2)",
      "(2 + 4) * (12 - 8)",
      "8 - ((4 - 12) * 2)",
      "((2 * 8) + 12) - 4",
      "(2 + (12 - 8)) * 4",
      "((12 + 4) * 2) - 8",
      "(12 - 4) + (2 * 8)",
      "(2 - (8 - 12)) * 4",
      "(12 * (8 - 4)) / 2",
      "12 / (2 / (8 - 4))",
      "(12 - 8) * (4 + 2)",
      "(8 - 4) / (2 / 12)",
      "4 * (12 - (8 - 2))",
      "4 * (2 + (12 - 8))",
      "12 + ((8 * 2) - 4)",
      "((4 + 12) * 2) - 8",
      "8 - (2 * (4 - 12))",
      "((12 - 4) * 2) + 8",
      "(4 + 2) * (12 - 8)",
      "(8 - 4) * (12 / 2)",
      "((2 * 8) - 4) + 12",
      "12 * ((8 - 4) - 2)",
      "((12 + 2) - 8) * 4",
      "((8 - 4) - 2) * 12",
      "((8 - 4) * 12) / 2",
      "12 + ((2 * 8) - 4)",
      "(12 / 2) * (8 - 4)",
      "12 * (8 - (4 + 2))",
      "(12 - (8 - 2)) * 4",
      "(8 - (2 + 4)) * 12",
      "(8 - (4 + 2)) * 12",
      "8 + (2 * (12 - 4))",
      "(2 * (12 - 4)) + 8",
      "(2 * 8) - (4 - 12)",
      "12 - (4 - (2 * 8))",
      "(12 + (8 * 2)) - 4",
      "((2 + 12) - 8) * 4",
      "4 * ((2 + 12) - 8)",
      "4 * ((2 - 8) + 12)",
      "4 * ((12 + 2) - 8)",
      "(2 * (4 + 12)) - 8"
    ]
  },
  "2 4 8 13": {
    "cards": "2 4 8 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(2 * 13) - (8 / 4)",
      "((8 / 4) * 13) - 2",
      "((8 * 13) / 4) - 2",
      "(8 / (4 / 13)) - 2",
      "(13 * 2) - (8 / 4)",
      "(8 * (13 / 4)) - 2",
      "(13 * (8 / 4)) - 2",
      "((13 * 8) / 4) - 2",
      "((13 / 4) * 8) - 2",
      "(13 / (4 / 8)) - 2"
    ]
  },
  "2 4 9 9": {
    "cards": "2 4 9 9",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(9 + (9 + 2)) + 4",
      "9 + (4 + (9 + 2))",
      "(9 + 9) + (2 + 4)",
      "2 + ((4 + 9) + 9)",
      "(4 + (9 + 9)) + 2",
      "(2 + 4) + (9 + 9)",
      "4 + ((2 + 9) + 9)",
      "((4 + 2) + 9) + 9",
      "2 + ((9 + 9) + 4)",
      "2 + (9 + (9 + 4))",
      "(2 + (9 + 4)) + 9",
      "(9 + 9) + (4 + 2)",
      "(2 + (4 + 9)) + 9",
      "(9 + 2) + (4 + 9)",
      "(4 + (9 + 2)) + 9",
      "((2 + 9) + 4) + 9",
      "((9 + 2) + 9) + 4",
      "(4 + 9) + (9 + 2)",
      "2 + ((9 + 4) + 9)",
      "(2 + 9) + (9 + 4)",
      "2 + (9 + (4 + 9))",
      "9 + (2 + (4 + 9))",
      "((9 + 2) + 4) + 9",
      "4 + (2 + (9 + 9))",
      "9 + ((9 + 4) + 2)",
      "4 + (9 + (9 + 2))",
      "(4 + (2 + 9)) + 9",
      "((9 + 4) + 2) + 9",
      "((9 + 9) + 2) + 4",
      "9 + (4 + (2 + 9))",
      "(2 + 9) + (4 + 9)",
      "9 + ((4 + 2) + 9)",
      "(4 + 2) + (9 + 9)",
      "((9 + 4) + 9) + 2",
      "4 + ((9 + 2) + 9)",
      "(9 + (4 + 2)) + 9",
      "4 + (9 + (2 + 9))",
      "(9 + (2 + 4)) + 9",
      "9 + ((2 + 4) + 9)",
      "((2 + 4) + 9) + 9",
      "(9 + 2) + (9 + 4)",
      "(9 + (9 + 4)) + 2",
      "((4 + 9) + 9) + 2",
      "(9 + 4) + (2 + 9)",
      "2 + (4 + (9 + 9))",
      "((2 + 9) + 9) + 4",
      "9 + ((4 + 9) + 2)",
      "((4 + 9) + 2) + 9",
      "(9 + 4) + (9 + 2)",
      "((9 + 9) + 4) + 2",
      "(9 + (4 + 9)) + 2",
      "9 + ((9 + 2) + 4)",
      "9 + (9 + (4 + 2))",
      "9 + (2 + (9 + 4))",
      "9 + ((2 + 9) + 4)",
      "(9 + (2 + 9)) + 4",
      "(2 + (9 + 9)) + 4",
      "9 + (9 + (2 + 4))",
      "4 + ((9 + 9) + 2)",
      "(4 + 9) + (2 + 9)"
    ]
  },
  "2 4 9 10": {
    "cards": "2 4 9 10",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(9 * 4) - (10 + 2)",
      "((4 * 9) - 10) - 2",
      "(9 * 4) - (2 + 10)",
      "10 + ((9 * 2) - 4)",
      "(4 * 9) - (2 + 10)",
      "(10 + (2 * 9)) - 4",
      "((9 * 2) - 4) + 10",
      "(4 * 9) - (10 + 2)",
      "((2 * 9) + 10) - 4",
      "(9 * 2) + (10 - 4)",
      "(9 * 2) - (4 - 10)",
      "(10 + (9 * 2)) - 4",
      "(2 * 9) - (4 - 10)",
      "((9 * 2) + 10) - 4",
      "(10 - 4) + (9 * 2)",
      "(2 * 9) + (10 - 4)",
      "((9 * 4) - 2) - 10",
      "((9 * 4) - 10) - 2",
      "10 - (4 - (2 * 9))",
      "10 + ((2 * 9) - 4)",
      "(10 - 4) + (2 * 9)",
      "((4 * 9) - 2) - 10",
      "10 - (4 - (9 * 2))",
      "((2 * 9) - 4) + 10"
    ]
  },
  "2 4 9 11": {
    "cards": "2 4 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 4 9 12": {
    "cards": "2 4 9 12",
    "has_solution": "Y",
    "num_solutions": 25,
    "solutions": [
      "4 * (2 * (12 - 9))",
      "4 * ((12 - 9) * 2)",
      "((12 / 4) + 9) * 2",
      "((9 * 4) + 12) / 2",
      "(2 * 4) * (12 - 9)",
      "((12 - 9) * 2) * 4",
      "2 * ((12 - 9) * 4)",
      "4 * ((2 * 9) - 12)",
      "12 / ((9 / 2) - 4)",
      "(12 + (9 * 4)) / 2",
      "(2 * (12 - 9)) * 4",
      "2 * ((12 / 4) + 9)",
      "(4 * 2) * (12 - 9)",
      "((12 - 9) * 4) * 2",
      "2 * (9 + (12 / 4))",
      "(12 - 9) * (2 * 4)",
      "(12 - 9) * (4 * 2)",
      "((4 * 9) + 12) / 2",
      "((9 * 2) - 12) * 4",
      "((2 * 9) - 12) * 4",
      "2 * (4 * (12 - 9))",
      "(9 + (12 / 4)) * 2",
      "(4 * (12 - 9)) * 2",
      "4 * ((9 * 2) - 12)",
      "(12 + (4 * 9)) / 2"
    ]
  },
  "2 4 9 13": {
    "cards": "2 4 9 13",
    "has_solution": "Y",
    "num_solutions": 122,
    "solutions": [
      "(4 / 2) + (9 + 13)",
      "((4 - 2) + 13) + 9",
      "(9 + 4) + (13 - 2)",
      "((9 + 13) + 4) - 2",
      "(13 - 9) * (4 + 2)",
      "(9 - (2 - 4)) + 13",
      "4 - ((2 - 13) - 9)",
      "(4 + 9) + (13 - 2)",
      "(13 + (9 - 2)) + 4",
      "13 - (2 - (9 + 4))",
      "(4 + (13 - 2)) + 9",
      "(9 + (13 + 4)) - 2",
      "((4 - 2) + 9) + 13",
      "(13 - (2 - 9)) + 4",
      "(9 - (2 - 13)) + 4",
      "13 + ((4 / 2) + 9)",
      "((4 + 13) - 2) + 9",
      "(9 - 2) + (4 + 13)",
      "9 + (13 - (2 - 4))",
      "(4 + 13) + (9 - 2)",
      "9 + (4 + (13 - 2))",
      "4 + ((9 + 13) - 2)",
      "(9 + 13) + (4 - 2)",
      "13 + (9 - (2 - 4))",
      "((4 / 2) + 13) + 9",
      "4 * ((13 + 2) - 9)",
      "13 + (4 + (9 - 2))",
      "(4 - (2 - 9)) + 13",
      "(13 - (9 - 2)) * 4",
      "9 + ((4 - 2) + 13)",
      "(4 - 2) + (9 + 13)",
      "(9 + (13 - 2)) + 4",
      "((4 / 2) + 9) + 13",
      "(13 + 4) + (9 - 2)",
      "((13 + 9) + 4) - 2",
      "4 * (13 + (2 - 9))",
      "(9 + 13) - (2 - 4)",
      "((4 + 9) - 2) + 13",
      "4 * (2 - (9 - 13))",
      "4 + ((13 + 9) - 2)",
      "(2 + 4) * (13 - 9)",
      "((9 + 13) - 2) + 4",
      "(13 - 2) + (4 + 9)",
      "(9 - 2) + (13 + 4)",
      "(4 + 9) - (2 - 13)",
      "13 + (9 + (4 / 2))",
      "4 + ((9 - 2) + 13)",
      "(4 - (2 - 13)) + 9",
      "(13 + (4 + 9)) - 2",
      "(13 + (4 / 2)) + 9",
      "(13 - (2 - 4)) + 9",
      "(4 - 2) + (13 + 9)",
      "4 + (9 - (2 - 13))",
      "(4 + 2) * (13 - 9)",
      "((2 - 9) + 13) * 4",
      "(9 + (4 + 13)) - 2",
      "9 + ((13 - 2) + 4)",
      "((9 + 4) + 13) - 2",
      "(13 + 9) - (2 - 4)",
      "4 + (9 + (13 - 2))",
      "((13 + 9) - 2) + 4",
      "(2 - (9 - 13)) * 4",
      "9 - (2 - (13 + 4))",
      "9 + ((4 + 13) - 2)",
      "(9 + (4 / 2)) + 13",
      "(4 + 13) - (2 - 9)",
      "4 * ((13 - 9) + 2)",
      "((9 - 2) + 13) + 4",
      "9 + ((4 / 2) + 13)",
      "(13 + 4) - (2 - 9)",
      "4 + (13 - (2 - 9))",
      "13 + (4 - (2 - 9))",
      "((13 - 2) + 9) + 4",
      "13 + ((4 - 2) + 9)",
      "(4 + (9 - 2)) + 13",
      "9 + (4 - (2 - 13))",
      "13 + (9 + (4 - 2))",
      "(13 + 9) + (4 / 2)",
      "13 - ((2 - 4) - 9)",
      "((13 - 9) + 2) * 4",
      "(13 + (4 - 2)) + 9",
      "4 - ((2 - 9) - 13)",
      "9 - ((2 - 4) - 13)",
      "4 * (2 + (13 - 9))",
      "((13 + 2) - 9) * 4",
      "(13 - 9) * (2 + 4)",
      "(9 + 13) + (4 / 2)",
      "((9 - 2) + 4) + 13",
      "((13 + 4) + 9) - 2",
      "(4 + (9 + 13)) - 2",
      "(9 + (4 - 2)) + 13",
      "(4 / 2) + (13 + 9)",
      "9 - (2 - (4 + 13))",
      "4 - (2 - (13 + 9))",
      "9 + (13 + (4 / 2))",
      "(13 + (2 - 9)) * 4",
      "4 + (13 + (9 - 2))",
      "(13 - 2) + (9 + 4)",
      "((2 + 13) - 9) * 4",
      "((4 + 13) + 9) - 2",
      "13 + ((9 + 4) - 2)",
      "13 + ((4 + 9) - 2)",
      "9 - ((2 - 13) - 4)",
      "13 - ((2 - 9) - 4)",
      "9 + ((13 + 4) - 2)",
      "4 + ((13 - 2) + 9)",
      "4 - (2 - (9 + 13))",
      "(13 + 9) + (4 - 2)",
      "((4 + 9) + 13) - 2",
      "13 - (2 - (4 + 9))",
      "(2 + (13 - 9)) * 4",
      "(13 + (9 + 4)) - 2",
      "4 * ((2 + 13) - 9)",
      "4 * ((2 - 9) + 13)",
      "((13 - 2) + 4) + 9",
      "9 + (13 + (4 - 2))",
      "((9 + 4) - 2) + 13",
      "13 + ((9 - 2) + 4)",
      "((13 + 4) - 2) + 9",
      "4 * (13 - (9 - 2))",
      "(9 + 4) - (2 - 13)",
      "(4 + (13 + 9)) - 2"
    ]
  },
  "2 4 10 10": {
    "cards": "2 4 10 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "10 * (2 + (4 / 10))",
      "((4 / 10) + 2) * 10",
      "(2 + (4 / 10)) * 10",
      "10 * ((4 / 10) + 2)"
    ]
  },
  "2 4 10 11": {
    "cards": "2 4 10 11",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((11 - 4) * 2) + 10",
      "(2 * (11 - 4)) + 10",
      "(4 * 11) - (10 * 2)",
      "(11 - (10 / 2)) * 4",
      "10 + ((11 - 4) * 2)",
      "10 + (2 * (11 - 4))",
      "10 - ((4 - 11) * 2)",
      "(4 * 11) - (2 * 10)",
      "4 * (11 - (10 / 2))",
      "10 - (2 * (4 - 11))",
      "(11 * 4) - (2 * 10)",
      "(11 * 4) - (10 * 2)"
    ]
  },
  "2 4 10 12": {
    "cards": "2 4 10 12",
    "has_solution": "Y",
    "num_solutions": 121,
    "solutions": [
      "12 + (4 + (10 - 2))",
      "(10 - 2) / (4 / 12)",
      "(10 + 4) + (12 - 2)",
      "(10 - (2 - 4)) + 12",
      "((10 - 4) * 2) + 12",
      "(12 / 4) * (10 - 2)",
      "(10 + (12 + 4)) - 2",
      "(4 + (12 + 10)) - 2",
      "(10 - (2 - 12)) + 4",
      "(10 + (4 / 2)) + 12",
      "(12 + 10) + (4 / 2)",
      "(4 / 2) + (10 + 12)",
      "((12 + 10) + 4) - 2",
      "(12 + (4 - 2)) + 10",
      "(4 + (10 - 2)) + 12",
      "12 + (10 + (4 / 2))",
      "(12 + 4) + (10 - 2)",
      "(10 - (4 * 2)) * 12",
      "12 + ((10 - 2) + 4)",
      "(12 + 4) - (2 - 10)",
      "4 - (2 - (12 + 10))",
      "4 - ((2 - 12) - 10)",
      "(10 - 2) + (4 + 12)",
      "12 + ((4 / 2) + 10)",
      "((4 + 10) - 2) + 12",
      "((4 + 12) + 10) - 2",
      "10 + ((4 - 2) + 12)",
      "(10 + (12 - 2)) + 4",
      "10 + (4 + (12 - 2))",
      "((4 + 10) + 12) - 2",
      "((12 + 10) - 2) + 4",
      "((10 - 2) + 4) + 12",
      "(4 - 2) + (12 + 10)",
      "(12 + (10 + 4)) - 2",
      "12 - ((2 - 10) - 4)",
      "12 - (2 * (4 - 10))",
      "10 + (12 - (2 - 4))",
      "(10 + 12) + (4 - 2)",
      "(4 + 10) + (12 - 2)",
      "12 / ((10 / 4) - 2)",
      "((10 + 4) + 12) - 2",
      "4 + ((10 + 12) - 2)",
      "((4 / 2) + 10) + 12",
      "12 - (2 - (4 + 10))",
      "10 - (2 - (12 + 4))",
      "10 - ((2 - 12) - 4)",
      "(10 + (4 + 12)) - 2",
      "(4 / 2) + (12 + 10)",
      "((4 - 2) + 12) + 10",
      "10 + ((4 + 12) - 2)",
      "(4 + 12) + (10 - 2)",
      "12 + ((10 - 4) * 2)",
      "12 / (4 / (10 - 2))",
      "12 - ((2 - 4) - 10)",
      "(12 - (2 - 10)) + 4",
      "4 + (10 + (12 - 2))",
      "(4 + (10 + 12)) - 2",
      "(4 - (2 - 12)) + 10",
      "(12 - 2) + (10 + 4)",
      "((12 + 4) - 2) + 10",
      "(10 - (2 * 4)) * 12",
      "(10 + (4 - 2)) + 12",
      "(12 - 2) + (4 + 10)",
      "(4 + 10) - (2 - 12)",
      "(10 - 2) * (12 / 4)",
      "(4 + 12) - (2 - 10)",
      "(10 + 12) - (2 - 4)",
      "12 + ((10 + 4) - 2)",
      "10 + (12 + (4 / 2))",
      "((10 + 12) + 4) - 2",
      "(12 + 10) + (4 - 2)",
      "10 + ((4 / 2) + 12)",
      "10 - ((2 - 4) - 12)",
      "10 - (2 - (4 + 12))",
      "4 - ((2 - 10) - 12)",
      "4 + ((10 - 2) + 12)",
      "((10 - 2) * 12) / 4",
      "12 - ((4 - 10) * 2)",
      "12 * (10 - (2 * 4))",
      "10 + (12 + (4 - 2))",
      "(4 + (12 - 2)) + 10",
      "(12 + (10 - 2)) + 4",
      "(12 + (4 / 2)) + 10",
      "(4 - (2 - 10)) + 12",
      "((12 - 2) + 10) + 4",
      "((10 + 4) - 2) + 12",
      "12 - (2 - (10 + 4))",
      "10 + (4 - (2 - 12))",
      "12 * ((10 - 2) / 4)",
      "(10 - 2) + (12 + 4)",
      "(12 + 10) - (2 - 4)",
      "(10 + 4) - (2 - 12)",
      "12 + (4 - (2 - 10))",
      "((4 - 2) + 10) + 12",
      "12 + (2 * (10 - 4))",
      "4 + (12 - (2 - 10))",
      "((4 + 12) - 2) + 10",
      "4 - (2 - (10 + 12))",
      "(12 + (4 + 10)) - 2",
      "4 + ((12 + 10) - 2)",
      "12 + ((4 - 2) + 10)",
      "(12 - (2 - 4)) + 10",
      "(10 + 12) + (4 / 2)",
      "((10 - 2) + 12) + 4",
      "4 + (12 + (10 - 2))",
      "12 + (10 - (2 - 4))",
      "(12 * (10 - 2)) / 4",
      "12 + ((4 + 10) - 2)",
      "(2 * (10 - 4)) + 12",
      "12 * (10 - (4 * 2))",
      "12 + (10 + (4 - 2))",
      "((10 - 2) / 4) * 12",
      "((12 + 4) + 10) - 2",
      "((12 - 2) + 4) + 10",
      "10 + ((12 - 2) + 4)",
      "10 + ((12 + 4) - 2)",
      "4 + (10 - (2 - 12))",
      "((10 + 12) - 2) + 4",
      "4 + ((12 - 2) + 10)",
      "((4 / 2) + 12) + 10",
      "(4 - 2) + (10 + 12)"
    ]
  },
  "2 4 10 13": {
    "cards": "2 4 10 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(13 - 10) * (4 * 2)",
      "((4 + 13) * 2) - 10",
      "((13 + 4) * 2) - 10",
      "((13 - 10) * 4) * 2",
      "(2 * (13 - 10)) * 4",
      "2 * ((13 - 10) * 4)",
      "(13 - 10) * (2 * 4)",
      "2 * (4 * (13 - 10))",
      "(4 * 2) * (13 - 10)",
      "(2 * (4 + 13)) - 10",
      "(4 * (13 - 10)) * 2",
      "4 * (2 * (13 - 10))",
      "(2 * (13 + 4)) - 10",
      "4 * ((13 - 10) * 2)",
      "(2 * 4) * (13 - 10)",
      "((13 - 10) * 2) * 4"
    ]
  },
  "2 4 11 11": {
    "cards": "2 4 11 11",
    "has_solution": "Y",
    "num_solutions": 51,
    "solutions": [
      "11 + ((4 - 2) + 11)",
      "11 - ((2 - 4) - 11)",
      "(11 + (4 / 2)) + 11",
      "(11 - 2) + (11 + 4)",
      "(11 + (4 + 11)) - 2",
      "(11 + (4 - 2)) + 11",
      "((11 + 11) - 2) + 4",
      "(4 - (2 - 11)) + 11",
      "(11 - (2 - 4)) + 11",
      "4 + ((11 + 11) - 2)",
      "4 + (11 + (11 - 2))",
      "(11 + 4) + (11 - 2)",
      "((4 + 11) - 2) + 11",
      "11 - ((2 - 11) - 4)",
      "((11 - 2) + 11) + 4",
      "(11 + 4) - (2 - 11)",
      "4 - (2 - (11 + 11))",
      "(11 + 11) - (2 - 4)",
      "(11 - (2 - 11)) + 4",
      "(4 + 11) - (2 - 11)",
      "((11 + 4) - 2) + 11",
      "4 + (11 - (2 - 11))",
      "11 + (11 - (2 - 4))",
      "((11 - 2) + 4) + 11",
      "((4 / 2) + 11) + 11",
      "11 + (4 + (11 - 2))",
      "11 - (2 - (11 + 4))",
      "((11 + 11) + 4) - 2",
      "(4 / 2) + (11 + 11)",
      "((11 + 4) + 11) - 2",
      "(4 - 2) + (11 + 11)",
      "11 + (11 + (4 - 2))",
      "(11 + 11) + (4 / 2)",
      "11 + ((11 - 2) + 4)",
      "(11 - 2) + (4 + 11)",
      "11 + (11 + (4 / 2))",
      "((4 - 2) + 11) + 11",
      "11 + ((11 + 4) - 2)",
      "11 + ((4 / 2) + 11)",
      "11 + (4 - (2 - 11))",
      "4 + ((11 - 2) + 11)",
      "(4 + (11 - 2)) + 11",
      "11 + ((4 + 11) - 2)",
      "(4 + 11) + (11 - 2)",
      "(11 + (11 + 4)) - 2",
      "(4 + (11 + 11)) - 2",
      "(11 + (11 - 2)) + 4",
      "4 - ((2 - 11) - 11)",
      "11 - (2 - (4 + 11))",
      "((4 + 11) + 11) - 2",
      "(11 + 11) + (4 - 2)"
    ]
  },
  "2 4 11 12": {
    "cards": "2 4 11 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(4 * (11 - 2)) - 12",
      "((11 - 2) * 4) - 12"
    ]
  },
  "2 4 11 13": {
    "cards": "2 4 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 4 12 12": {
    "cards": "2 4 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(12 * 4) - (2 * 12)",
      "(4 * 12) - (2 * 12)",
      "12 / ((2 + 4) / 12)",
      "((12 / 2) - 4) * 12",
      "(12 * 12) / (4 + 2)",
      "4 * (12 - (12 / 2))",
      "(12 / (2 + 4)) * 12",
      "(12 * 4) - (12 * 2)",
      "(12 * 12) / (2 + 4)",
      "(4 * 12) - (12 * 2)",
      "(12 - (12 / 2)) * 4",
      "(12 / (4 + 2)) * 12",
      "12 * ((12 / 2) - 4)",
      "12 * (12 / (4 + 2))",
      "12 * (12 / (2 + 4))",
      "12 / ((4 + 2) / 12)"
    ]
  },
  "2 4 12 13": {
    "cards": "2 4 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 4 13 13": {
    "cards": "2 4 13 13",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "13 + ((13 + 2) - 4)",
      "((2 + 13) - 4) + 13",
      "(13 + (2 - 4)) + 13",
      "(2 + 13) + (13 - 4)",
      "((13 + 2) + 13) - 4",
      "((13 + 13) + 2) - 4",
      "(13 - (4 - 2)) + 13",
      "2 + ((13 + 13) - 4)",
      "13 + (13 - (4 - 2))",
      "(13 + (13 + 2)) - 4",
      "(2 + (13 - 4)) + 13",
      "13 - ((4 - 13) - 2)",
      "13 + ((2 + 13) - 4)",
      "(2 + (13 + 13)) - 4",
      "(13 + 2) - (4 - 13)",
      "(13 + (2 + 13)) - 4",
      "((13 - 4) + 13) + 2",
      "(13 + 13) - (4 - 2)",
      "2 + ((13 - 4) + 13)",
      "((13 + 13) - 4) + 2",
      "((13 - 4) + 2) + 13",
      "13 + ((13 - 4) + 2)",
      "((13 + 2) - 4) + 13",
      "(2 - (4 - 13)) + 13",
      "2 + (13 - (4 - 13))",
      "(13 - 4) + (2 + 13)",
      "(13 + 13) + (2 - 4)",
      "13 + ((2 - 4) + 13)",
      "13 + (2 + (13 - 4))",
      "2 + (13 + (13 - 4))",
      "13 + (2 - (4 - 13))",
      "2 - (4 - (13 + 13))",
      "((2 + 13) + 13) - 4",
      "(13 - (4 - 13)) + 2",
      "(13 + 13) - (4 / 2)",
      "((2 - 4) + 13) + 13",
      "(13 - (4 / 2)) + 13",
      "2 - ((4 - 13) - 13)",
      "(2 - 4) + (13 + 13)",
      "(13 - 4) + (13 + 2)",
      "13 - ((4 / 2) - 13)",
      "(13 + 2) + (13 - 4)",
      "(2 + 13) - (4 - 13)",
      "13 - ((4 - 2) - 13)",
      "13 + (13 - (4 / 2))",
      "13 - (4 - (13 + 2))",
      "13 - (4 - (2 + 13))",
      "13 + (13 + (2 - 4))",
      "(13 + (13 - 4)) + 2"
    ]
  },
  "2 5 5 5": {
    "cards": "2 5 5 5",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 5 6": {
    "cards": "2 5 5 6",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 5 7": {
    "cards": "2 5 5 7",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "5 + ((2 * 7) + 5)",
      "5 + ((7 * 2) + 5)",
      "((2 * 7) + 5) + 5",
      "(5 + 5) + (2 * 7)",
      "(5 + 5) + (7 * 2)",
      "(5 + (2 * 7)) + 5",
      "5 + (5 + (2 * 7))",
      "(7 * 2) + (5 + 5)",
      "((7 * 2) + 5) + 5",
      "(2 * 7) + (5 + 5)",
      "(5 + (7 * 2)) + 5",
      "5 + (5 + (7 * 2))"
    ]
  },
  "2 5 5 8": {
    "cards": "2 5 5 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 + (5 / 5)) * 8",
      "8 * (2 + (5 / 5))",
      "((5 / 5) + 2) * 8",
      "8 * ((5 / 5) + 2)"
    ]
  },
  "2 5 5 9": {
    "cards": "2 5 5 9",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(2 * 5) + (5 + 9)",
      "9 - ((2 - 5) * 5)",
      "(5 * 2) + (9 + 5)",
      "((5 * 2) + 9) + 5",
      "(5 + (5 * 2)) + 9",
      "5 + ((5 * 2) + 9)",
      "(9 + 5) + (5 * 2)",
      "(5 + 9) + (5 * 2)",
      "(9 + (2 * 5)) + 5",
      "((5 - 2) * 5) + 9",
      "9 + (5 * (5 - 2))",
      "9 + (5 + (5 * 2))",
      "((2 * 5) + 5) + 9",
      "((5 * 2) + 5) + 9",
      "5 + ((2 * 5) + 9)",
      "5 + (9 + (2 * 5))",
      "(5 * 2) + (5 + 9)",
      "5 + (9 + (5 * 2))",
      "9 + ((2 * 5) + 5)",
      "9 + (5 + (2 * 5))",
      "9 + ((5 * 2) + 5)",
      "(5 + (2 * 5)) + 9",
      "9 + ((5 - 2) * 5)",
      "9 - (5 * (2 - 5))",
      "(2 * 5) + (9 + 5)",
      "(5 * (5 - 2)) + 9",
      "(5 + 9) + (2 * 5)",
      "((2 * 5) + 9) + 5",
      "(9 + (5 * 2)) + 5",
      "(9 + 5) + (2 * 5)"
    ]
  },
  "2 5 5 10": {
    "cards": "2 5 5 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(5 - (2 / 10)) * 5",
      "5 * (5 - (2 / 10))"
    ]
  },
  "2 5 5 11": {
    "cards": "2 5 5 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((2 + 5) * 5) - 11",
      "(11 + (5 / 5)) * 2",
      "(5 * (5 + 2)) - 11",
      "(5 * (2 + 5)) - 11",
      "((5 / 5) + 11) * 2",
      "((5 + 2) * 5) - 11",
      "2 * ((5 / 5) + 11)",
      "2 * (11 + (5 / 5))"
    ]
  },
  "2 5 5 12": {
    "cards": "2 5 5 12",
    "has_solution": "Y",
    "num_solutions": 198,
    "solutions": [
      "5 + ((5 + 2) + 12)",
      "2 * (5 - (5 - 12))",
      "12 * (2 * (5 / 5))",
      "5 + ((2 * 12) - 5)",
      "(5 + (12 - 5)) * 2",
      "((5 * 12) / 5) * 2",
      "(2 * (12 / 5)) * 5",
      "(5 * (12 / 5)) * 2",
      "5 - (5 - (2 * 12))",
      "5 + ((2 + 12) + 5)",
      "((12 + 5) - 5) * 2",
      "(2 * (5 / 5)) * 12",
      "((5 + 12) - 5) * 2",
      "(2 + (5 - 5)) * 12",
      "(12 / (5 / 2)) * 5",
      "(12 * (2 / 5)) * 5",
      "(5 - (5 - 12)) * 2",
      "(12 + 5) + (2 + 5)",
      "(5 + 12) + (2 + 5)",
      "(5 * 2) / (5 / 12)",
      "2 * ((5 / 5) * 12)",
      "((5 + 12) + 2) + 5",
      "12 * (2 / (5 / 5))",
      "((2 + 5) + 12) + 5",
      "(12 + (5 - 5)) * 2",
      "(2 + 5) + (12 + 5)",
      "5 + (2 + (12 + 5))",
      "5 * ((2 * 12) / 5)",
      "2 * ((12 / 5) * 5)",
      "2 * (12 * (5 / 5))",
      "((5 * 2) / 5) * 12",
      "2 / ((5 / 12) / 5)",
      "(2 + (5 + 5)) + 12",
      "(5 + 2) + (12 + 5)",
      "((12 - 5) + 5) * 2",
      "2 / (5 / (12 * 5))",
      "5 * (12 / (5 / 2))",
      "((5 / 5) * 12) * 2",
      "12 + (2 + (5 + 5))",
      "(5 - 5) + (2 * 12)",
      "((2 * 5) * 12) / 5",
      "5 * (12 * (2 / 5))",
      "(2 * 5) / (5 / 12)",
      "(2 * 12) * (5 / 5)",
      "5 + (5 + (2 + 12))",
      "((12 + 2) + 5) + 5",
      "12 * (2 + (5 - 5))",
      "2 * ((12 + 5) - 5)",
      "(12 * (5 * 2)) / 5",
      "((2 * 5) / 5) * 12",
      "(2 * 5) * (12 / 5)",
      "(2 * 12) - (5 - 5)",
      "((12 * 2) * 5) / 5",
      "((2 * 12) * 5) / 5",
      "12 + ((5 + 2) + 5)",
      "5 * (2 * (12 / 5))",
      "12 + ((2 + 5) + 5)",
      "5 / ((5 / 12) / 2)",
      "5 + ((12 + 2) + 5)",
      "(5 / (5 / 2)) * 12",
      "2 + (12 + (5 + 5))",
      "((2 - 5) + 5) * 12",
      "5 / (5 / (2 * 12))",
      "((2 / 5) * 5) * 12",
      "((5 + 2) - 5) * 12",
      "2 * (12 - (5 - 5))",
      "(5 + (2 + 5)) + 12",
      "(12 * (2 * 5)) / 5",
      "((2 * 12) - 5) + 5",
      "2 * ((12 * 5) / 5)",
      "12 / ((5 / 2) / 5)",
      "(2 + 5) + (5 + 12)",
      "((12 + 5) + 2) + 5",
      "(5 + 5) + (12 + 2)",
      "2 + ((5 + 5) + 12)",
      "5 / (5 / (12 * 2))",
      "2 * (5 * (12 / 5))",
      "5 * ((12 * 2) / 5)",
      "((5 + 5) + 2) + 12",
      "12 * (2 - (5 - 5))",
      "(5 * 12) / (5 / 2)",
      "(2 + 12) + (5 + 5)",
      "((12 / 5) * 2) * 5",
      "(12 * 5) * (2 / 5)",
      "(5 + 12) + (5 + 2)",
      "12 * (5 - (5 - 2))",
      "2 + (5 + (12 + 5))",
      "(5 + (5 + 12)) + 2",
      "12 + (5 + (2 + 5))",
      "((2 * 12) + 5) - 5",
      "12 * ((2 * 5) / 5)",
      "12 * ((5 / 5) * 2)",
      "(12 * (5 / 5)) * 2",
      "((12 * 5) * 2) / 5",
      "((5 + 2) + 12) + 5",
      "(5 * 12) * (2 / 5)",
      "5 + (12 + (2 + 5))",
      "5 - (5 - (12 * 2))",
      "(12 * 2) / (5 / 5)",
      "(12 + (5 + 2)) + 5",
      "(12 + 2) + (5 + 5)",
      "(12 + (5 + 5)) + 2",
      "12 * (5 / (5 / 2))",
      "(12 - (5 - 5)) * 2",
      "((12 * 2) - 5) + 5",
      "2 * ((12 - 5) + 5)",
      "((5 - 5) + 12) * 2",
      "5 / ((5 / 2) / 12)",
      "(2 / (5 / 12)) * 5",
      "((2 + 12) + 5) + 5",
      "5 + (5 + (12 + 2))",
      "(2 * 12) + (5 - 5)",
      "((5 - 5) + 2) * 12",
      "(5 + (12 + 2)) + 5",
      "12 * (5 + (2 - 5))",
      "(5 * (2 * 12)) / 5",
      "(12 + 5) + (5 + 2)",
      "(5 + (5 + 2)) + 12",
      "12 + (5 + (5 + 2))",
      "5 + ((12 + 5) + 2)",
      "((12 / 5) * 5) * 2",
      "(5 + (12 + 5)) + 2",
      "12 * ((5 * 2) / 5)",
      "(5 - 5) + (12 * 2)",
      "12 / ((5 / 5) / 2)",
      "2 * ((5 * 12) / 5)",
      "(5 + (2 * 12)) - 5",
      "2 * (12 + (5 - 5))",
      "5 + ((2 + 5) + 12)",
      "(2 * (5 * 12)) / 5",
      "(5 + (2 + 12)) + 5",
      "12 / (5 / (5 * 2))",
      "(12 * 2) + (5 - 5)",
      "(12 / (5 / 5)) * 2",
      "12 + ((5 + 5) + 2)",
      "(2 - (5 - 5)) * 12",
      "((5 / 5) * 2) * 12",
      "(12 * 5) / (5 / 2)",
      "5 + (2 + (5 + 12))",
      "(5 / 5) * (2 * 12)",
      "(5 + (2 - 5)) * 12",
      "(12 / 5) * (5 * 2)",
      "2 / ((5 / 5) / 12)",
      "5 * ((2 / 5) * 12)",
      "((2 + 5) + 5) + 12",
      "((5 + 5) + 12) + 2",
      "(12 * 2) - (5 - 5)",
      "(2 / 5) * (12 * 5)",
      "(12 * 2) * (5 / 5)",
      "((12 + 5) + 5) + 2",
      "5 + (12 + (5 + 2))",
      "(5 * (12 * 2)) / 5",
      "(2 / (5 / 5)) * 12",
      "12 * ((5 + 2) - 5)",
      "2 + (5 + (5 + 12))",
      "((12 * 2) + 5) - 5",
      "5 + ((5 + 12) + 2)",
      "(2 + (5 + 12)) + 5",
      "((5 * 2) * 12) / 5",
      "2 * (12 / (5 / 5))",
      "((5 * 12) * 2) / 5",
      "(5 * (2 / 5)) * 12",
      "2 * ((5 - 5) + 12)",
      "(12 + (2 + 5)) + 5",
      "(5 * 2) * (12 / 5)",
      "(5 - (5 - 2)) * 12",
      "((5 + 12) + 5) + 2",
      "((5 + 2) + 5) + 12",
      "((2 / 5) * 12) * 5",
      "(2 + (12 + 5)) + 5",
      "((12 * 2) / 5) * 5",
      "(2 * (12 * 5)) / 5",
      "2 + ((5 + 12) + 5)",
      "((12 * 5) / 5) * 2",
      "12 * (5 * (2 / 5))",
      "12 * ((5 - 5) + 2)",
      "(5 + 5) + (2 + 12)",
      "2 / (5 / (5 * 12))",
      "2 * (5 / (5 / 12))",
      "12 * ((2 - 5) + 5)",
      "12 * ((2 + 5) - 5)",
      "2 * ((5 + 12) - 5)",
      "(5 / 5) * (12 * 2)",
      "12 * ((2 / 5) * 5)",
      "2 + ((12 + 5) + 5)",
      "2 * (5 + (12 - 5))",
      "(2 * 12) / (5 / 5)",
      "5 * ((12 / 5) * 2)",
      "(5 + 2) + (5 + 12)",
      "((2 * 12) / 5) * 5",
      "(5 / (5 / 12)) * 2",
      "(5 + (12 * 2)) - 5",
      "5 + ((12 * 2) - 5)",
      "((2 + 5) - 5) * 12",
      "12 / (5 / (2 * 5))",
      "5 * (2 / (5 / 12))",
      "(2 / 5) * (5 * 12)",
      "(12 / 5) * (2 * 5)"
    ]
  },
  "2 5 5 13": {
    "cards": "2 5 5 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 - 13) * (2 - 5)",
      "(13 - 5) * (5 - 2)",
      "((5 * 5) - 13) * 2",
      "(2 - 5) * (5 - 13)",
      "2 * ((5 * 5) - 13)",
      "(5 - 2) * (13 - 5)",
      "(13 - (5 / 5)) * 2",
      "2 * (13 - (5 / 5))"
    ]
  },
  "2 5 6 6": {
    "cards": "2 5 6 6",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((5 - 2) * 6) + 6",
      "6 * ((5 * 2) - 6)",
      "(6 * (5 - 2)) + 6",
      "((5 * 2) - 6) * 6",
      "6 * ((2 * 5) - 6)",
      "6 - ((2 - 5) * 6)",
      "6 + (6 * (5 - 2))",
      "6 + ((5 - 2) * 6)",
      "6 - (6 * (2 - 5))",
      "((2 * 5) - 6) * 6"
    ]
  },
  "2 5 6 7": {
    "cards": "2 5 6 7",
    "has_solution": "Y",
    "num_solutions": 52,
    "solutions": [
      "(5 + (6 * 2)) + 7",
      "5 + (7 + (2 * 6))",
      "6 * (7 + (2 - 5))",
      "(7 + (6 * 2)) + 5",
      "6 * ((2 + 7) - 5)",
      "(2 * (7 - 5)) * 6",
      "(2 * 6) + (5 + 7)",
      "((2 * 6) + 7) + 5",
      "((2 * 6) + 5) + 7",
      "((7 - 5) + 2) * 6",
      "(2 + (7 - 5)) * 6",
      "7 + ((2 * 6) + 5)",
      "5 + ((2 * 6) + 7)",
      "(6 * 2) + (5 + 7)",
      "6 * (2 - (5 - 7))",
      "6 * ((7 - 5) + 2)",
      "6 * ((7 - 5) * 2)",
      "7 + (5 + (6 * 2))",
      "(5 + (2 * 6)) + 7",
      "(7 + 5) + (2 * 6)",
      "(5 + 7) + (2 * 6)",
      "7 + ((6 * 2) + 5)",
      "((6 * 2) + 5) + 7",
      "((7 + 2) - 5) * 6",
      "6 * ((7 + 2) - 5)",
      "(6 * 2) * (7 - 5)",
      "6 * (2 + (7 - 5))",
      "5 + (7 + (6 * 2))",
      "(2 * 6) * (7 - 5)",
      "6 * (7 - (5 - 2))",
      "6 * ((2 - 5) + 7)",
      "(6 * (7 - 5)) * 2",
      "5 + ((6 * 2) + 7)",
      "(7 - (5 - 2)) * 6",
      "7 + (5 + (2 * 6))",
      "2 * ((7 - 5) * 6)",
      "((2 - 5) + 7) * 6",
      "((6 * 2) + 7) + 5",
      "((7 - 5) * 6) * 2",
      "(7 + (2 * 6)) + 5",
      "((2 + 7) - 5) * 6",
      "2 * (6 * (7 - 5))",
      "(7 + (2 - 5)) * 6",
      "(7 - 5) * (6 * 2)",
      "((7 - 5) * 2) * 6",
      "(5 + 7) + (6 * 2)",
      "6 * (2 * (7 - 5))",
      "(6 * 2) + (7 + 5)",
      "(2 * 6) + (7 + 5)",
      "(7 + 5) + (6 * 2)",
      "(7 - 5) * (2 * 6)",
      "(2 - (5 - 7)) * 6"
    ]
  },
  "2 5 6 8": {
    "cards": "2 5 6 8",
    "has_solution": "Y",
    "num_solutions": 62,
    "solutions": [
      "((5 * 2) + 6) + 8",
      "(2 - (5 - 6)) * 8",
      "(2 - 8) + (5 * 6)",
      "(6 + 2) * (8 - 5)",
      "(2 + 6) * (8 - 5)",
      "(6 + 8) + (2 * 5)",
      "(5 * 6) - (8 - 2)",
      "(6 + (5 * 2)) + 8",
      "(2 - 8) + (6 * 5)",
      "6 + ((5 * 2) + 8)",
      "((8 - 2) * 5) - 6",
      "((2 * 5) + 6) + 8",
      "((6 - 5) + 2) * 8",
      "(5 * 2) + (8 + 6)",
      "8 * ((6 - 5) + 2)",
      "(6 + 8) + (5 * 2)",
      "8 * ((2 - 5) + 6)",
      "(5 * 6) + (2 - 8)",
      "(5 * 2) + (6 + 8)",
      "(8 - 5) * (2 + 6)",
      "(8 - 5) * (6 + 2)",
      "6 + (8 + (2 * 5))",
      "8 + (6 + (2 * 5))",
      "(2 + (6 * 5)) - 8",
      "(8 + 6) + (2 * 5)",
      "(6 * 5) + (2 - 8)",
      "(2 + (6 - 5)) * 8",
      "(2 + (5 * 6)) - 8",
      "8 * (2 + (6 - 5))",
      "8 * (6 - (5 - 2))",
      "(8 + (2 * 5)) + 6",
      "((5 * 2) + 8) + 6",
      "8 + (6 + (5 * 2))",
      "((2 * 5) + 8) + 6",
      "8 * ((6 + 2) - 5)",
      "6 + ((2 * 5) + 8)",
      "2 - (8 - (6 * 5))",
      "8 + ((2 * 5) + 6)",
      "(6 + (2 - 5)) * 8",
      "(5 * (8 - 2)) - 6",
      "2 + ((5 * 6) - 8)",
      "((2 - 5) + 6) * 8",
      "((6 * 5) + 2) - 8",
      "(8 + (5 * 2)) + 6",
      "(8 + 6) + (5 * 2)",
      "(6 * 5) - (8 - 2)",
      "((5 * 6) + 2) - 8",
      "2 + ((6 * 5) - 8)",
      "(2 * 5) + (8 + 6)",
      "(2 * 5) + (6 + 8)",
      "((6 * 5) - 8) + 2",
      "((2 + 6) - 5) * 8",
      "8 * (6 + (2 - 5))",
      "8 + ((5 * 2) + 6)",
      "(6 + (2 * 5)) + 8",
      "8 * ((2 + 6) - 5)",
      "(6 - (5 - 2)) * 8",
      "((6 + 2) - 5) * 8",
      "6 + (8 + (5 * 2))",
      "2 - (8 - (5 * 6))",
      "((5 * 6) - 8) + 2",
      "8 * (2 - (5 - 6))"
    ]
  },
  "2 5 6 9": {
    "cards": "2 5 6 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(6 * (5 / 2)) + 9",
      "9 + ((6 / 2) * 5)",
      "(5 * (6 / 2)) + 9",
      "9 + (6 * (5 / 2))",
      "9 + ((5 * 6) / 2)",
      "9 + (6 / (2 / 5))",
      "((5 * 6) / 2) + 9",
      "(6 / (2 / 5)) + 9",
      "((5 / 2) * 6) + 9",
      "9 + ((6 * 5) / 2)",
      "9 + (5 * (6 / 2))",
      "(5 / (2 / 6)) + 9",
      "9 + (5 / (2 / 6))",
      "((6 * 5) / 2) + 9",
      "((6 / 2) * 5) + 9",
      "9 + ((5 / 2) * 6)"
    ]
  },
  "2 5 6 10": {
    "cards": "2 5 6 10",
    "has_solution": "Y",
    "num_solutions": 100,
    "solutions": [
      "((2 * 6) / 5) * 10",
      "(10 / 5) * (2 * 6)",
      "6 / (5 / (2 * 10))",
      "((2 * 6) * 10) / 5",
      "6 * (10 * (2 / 5))",
      "(10 / 5) * (6 * 2)",
      "(10 * (2 * 6)) / 5",
      "(6 / 5) * (2 * 10)",
      "((5 - 2) * 10) - 6",
      "((6 * 10) * 2) / 5",
      "(6 * 10) * (2 / 5)",
      "(6 * 2) * (10 / 5)",
      "(10 / (5 / 2)) * 6",
      "2 * ((6 / 5) * 10)",
      "((10 / 5) * 2) * 6",
      "(6 * 2) / (5 / 10)",
      "2 * ((10 * 6) / 5)",
      "2 * (10 / (5 / 6))",
      "((6 / 5) * 2) * 10",
      "10 * (2 / (5 / 6))",
      "10 * ((2 / 5) * 6)",
      "6 * (2 + (10 / 5))",
      "((10 * 2) / 5) * 6",
      "2 * (6 / (5 / 10))",
      "6 * ((2 / 5) * 10)",
      "((2 / 5) * 10) * 6",
      "(10 * 2) * (6 / 5)",
      "(6 * (10 * 2)) / 5",
      "(2 * (6 * 10)) / 5",
      "((6 * 10) / 5) * 2",
      "(6 / 5) * (10 * 2)",
      "(6 * (2 * 10)) / 5",
      "(2 / (5 / 6)) * 10",
      "6 * (10 / (5 / 2))",
      "(6 * 10) / (5 / 2)",
      "10 * (2 * (6 / 5))",
      "((2 * 10) / 5) * 6",
      "(2 / 5) * (10 * 6)",
      "((10 / 5) * 6) * 2",
      "(2 * 10) / (5 / 6)",
      "2 * ((6 * 10) / 5)",
      "(2 * (10 / 5)) * 6",
      "(2 * (10 * 6)) / 5",
      "10 * ((2 * 6) / 5)",
      "10 / ((5 / 6) / 2)",
      "2 / ((5 / 6) / 10)",
      "2 * (6 * (10 / 5))",
      "10 / ((5 / 2) / 6)",
      "6 * ((10 * 2) / 5)",
      "((10 / 5) + 2) * 6",
      "(10 * (6 / 5)) * 2",
      "(2 * (5 + 10)) - 6",
      "(2 * 10) * (6 / 5)",
      "(2 + (10 / 5)) * 6",
      "2 / (5 / (6 * 10))",
      "2 * ((10 / 5) * 6)",
      "(10 * (6 * 2)) / 5",
      "((10 * 2) * 6) / 5",
      "(10 / (5 / 6)) * 2",
      "2 / (5 / (10 * 6))",
      "((2 / 5) * 6) * 10",
      "6 / ((5 / 2) / 10)",
      "(2 * (10 + 5)) - 6",
      "(2 / 5) * (6 * 10)",
      "10 * ((6 / 5) * 2)",
      "10 / (5 / (2 * 6))",
      "(6 / (5 / 2)) * 10",
      "(10 * (5 - 2)) - 6",
      "6 * (2 / (5 / 10))",
      "6 * ((10 / 5) * 2)",
      "((6 / 5) * 10) * 2",
      "(10 * 6) * (2 / 5)",
      "(2 * (6 / 5)) * 10",
      "10 * (6 * (2 / 5))",
      "6 / ((5 / 10) / 2)",
      "6 / (5 / (10 * 2))",
      "((10 + 5) * 2) - 6",
      "(6 * (10 / 5)) * 2",
      "6 * (2 * (10 / 5))",
      "10 * ((6 * 2) / 5)",
      "((5 + 10) * 2) - 6",
      "6 * ((2 * 10) / 5)",
      "(2 / (5 / 10)) * 6",
      "10 * (6 / (5 / 2))",
      "2 / ((5 / 10) / 6)",
      "(2 * 6) * (10 / 5)",
      "(10 * 6) / (5 / 2)",
      "6 * ((10 / 5) + 2)",
      "((2 * 10) * 6) / 5",
      "(2 * 6) / (5 / 10)",
      "(6 * (2 / 5)) * 10",
      "((6 * 2) / 5) * 10",
      "((10 * 6) * 2) / 5",
      "2 * (10 * (6 / 5))",
      "10 / (5 / (6 * 2))",
      "((10 * 6) / 5) * 2",
      "(10 * (2 / 5)) * 6",
      "(10 * 2) / (5 / 6)",
      "((6 * 2) * 10) / 5",
      "(6 / (5 / 10)) * 2"
    ]
  },
  "2 5 6 11": {
    "cards": "2 5 6 11",
    "has_solution": "Y",
    "num_solutions": 148,
    "solutions": [
      "2 + (6 + (5 + 11))",
      "((5 + 11) + 2) + 6",
      "11 + (2 + (6 + 5))",
      "((11 - 5) + 6) * 2",
      "(11 + 6) + (2 + 5)",
      "(2 + 5) + (11 + 6)",
      "(2 + (6 + 11)) + 5",
      "(6 + 5) + (11 + 2)",
      "5 + ((6 + 11) + 2)",
      "6 * (11 - (5 + 2))",
      "2 * (11 + (6 - 5))",
      "(2 + 6) + (5 + 11)",
      "6 + ((2 + 11) + 5)",
      "(6 + (5 + 2)) + 11",
      "2 * ((6 + 11) - 5)",
      "6 + (11 + (5 + 2))",
      "2 + (11 + (6 + 5))",
      "(6 + (11 + 2)) + 5",
      "(2 + (5 + 11)) + 6",
      "2 * ((6 - 5) + 11)",
      "(11 + (5 + 6)) + 2",
      "(5 + (6 + 2)) + 11",
      "(11 + (2 + 5)) + 6",
      "(6 + 2) + (5 + 11)",
      "((6 + 11) + 2) + 5",
      "2 + ((6 + 5) + 11)",
      "(2 + 6) + (11 + 5)",
      "6 * ((11 - 2) - 5)",
      "2 * (6 - (5 - 11))",
      "11 + ((2 + 6) + 5)",
      "2 * (6 + (11 - 5))",
      "6 + (2 + (11 + 5))",
      "6 + ((5 + 11) + 2)",
      "6 + ((11 + 2) + 5)",
      "(11 + (2 + 6)) + 5",
      "6 + (5 + (2 + 11))",
      "(6 + 2) + (11 + 5)",
      "6 + ((5 + 2) + 11)",
      "(11 + (5 + 2)) + 6",
      "((6 + 11) + 5) + 2",
      "2 * (11 - (5 - 6))",
      "5 + (6 + (11 + 2))",
      "11 + (6 + (5 + 2))",
      "2 + ((5 + 6) + 11)",
      "(5 - 11) * (2 - 6)",
      "2 + ((11 + 6) + 5)",
      "((11 + 6) + 2) + 5",
      "((5 + 6) + 11) + 2",
      "11 + ((2 + 5) + 6)",
      "11 + ((5 + 6) + 2)",
      "((5 + 11) + 6) + 2",
      "2 * ((11 + 6) - 5)",
      "(11 + 5) + (2 + 6)",
      "((11 - 2) - 5) * 6",
      "6 + (11 + (2 + 5))",
      "(5 + (2 + 6)) + 11",
      "((11 - 5) - 2) * 6",
      "(11 + 2) + (6 + 5)",
      "(2 + (6 + 5)) + 11",
      "2 + ((11 + 5) + 6)",
      "((2 + 11) + 6) + 5",
      "(5 + 2) + (11 + 6)",
      "(2 - 6) * (5 - 11)",
      "(5 + (2 + 11)) + 6",
      "((5 + 6) + 2) + 11",
      "(6 + 11) + (5 + 2)",
      "(6 + (5 + 11)) + 2",
      "(6 - (5 - 11)) * 2",
      "(11 + 6) + (5 + 2)",
      "5 + ((2 + 6) + 11)",
      "5 + ((2 + 11) + 6)",
      "((6 - 5) + 11) * 2",
      "5 + (6 + (2 + 11))",
      "(6 + (11 + 5)) + 2",
      "(5 + 11) + (6 + 2)",
      "((11 + 6) - 5) * 2",
      "5 + (2 + (6 + 11))",
      "(11 + 2) + (5 + 6)",
      "11 + ((5 + 2) + 6)",
      "(6 + (2 + 11)) + 5",
      "6 * ((11 - 5) - 2)",
      "(11 + (6 + 5)) + 2",
      "2 + ((6 + 11) + 5)",
      "6 + (2 + (5 + 11))",
      "6 + ((11 + 5) + 2)",
      "5 + (11 + (6 + 2))",
      "(6 + 11) + (2 + 5)",
      "((11 + 5) + 6) + 2",
      "((6 + 11) - 5) * 2",
      "2 + (6 + (11 + 5))",
      "((2 + 6) + 11) + 5",
      "(6 - 2) * (11 - 5)",
      "(2 + (5 + 6)) + 11",
      "11 + (5 + (2 + 6))",
      "2 * ((11 - 5) + 6)",
      "5 + ((6 + 2) + 11)",
      "((6 + 2) + 11) + 5",
      "11 + (5 + (6 + 2))",
      "2 + ((5 + 11) + 6)",
      "(11 + (6 - 5)) * 2",
      "(11 + (6 + 2)) + 5",
      "((6 + 2) + 5) + 11",
      "(2 + 11) + (6 + 5)",
      "((2 + 5) + 6) + 11",
      "6 + (5 + (11 + 2))",
      "((6 + 5) + 2) + 11",
      "5 + ((11 + 2) + 6)",
      "((11 + 2) + 6) + 5",
      "(5 + 6) + (2 + 11)",
      "((2 + 11) + 5) + 6",
      "5 + ((11 + 6) + 2)",
      "6 + ((2 + 5) + 11)",
      "2 + (11 + (5 + 6))",
      "(2 + 5) + (6 + 11)",
      "(11 + 5) + (6 + 2)",
      "((5 + 2) + 11) + 6",
      "(6 + 5) + (2 + 11)",
      "(5 + 11) + (2 + 6)",
      "11 + (6 + (2 + 5))",
      "2 + (5 + (11 + 6))",
      "5 + (2 + (11 + 6))",
      "((11 + 5) + 2) + 6",
      "(11 - (5 - 6)) * 2",
      "(6 + (11 - 5)) * 2",
      "(5 + (11 + 6)) + 2",
      "((2 + 6) + 5) + 11",
      "(11 - 5) * (6 - 2)",
      "(5 + (6 + 11)) + 2",
      "(5 + 2) + (6 + 11)",
      "5 + (11 + (2 + 6))",
      "11 + (2 + (5 + 6))",
      "(5 + 6) + (11 + 2)",
      "((6 + 5) + 11) + 2",
      "((2 + 5) + 11) + 6",
      "11 + ((6 + 2) + 5)",
      "((5 + 2) + 6) + 11",
      "6 * (11 - (2 + 5))",
      "(2 + (11 + 5)) + 6",
      "(6 + (2 + 5)) + 11",
      "(11 - (2 + 5)) * 6",
      "2 + (5 + (6 + 11))",
      "(11 - (5 + 2)) * 6",
      "((11 + 2) + 5) + 6",
      "((11 + 6) + 5) + 2",
      "(5 + (11 + 2)) + 6",
      "11 + ((6 + 5) + 2)",
      "(2 + 11) + (5 + 6)",
      "(2 + (11 + 6)) + 5"
    ]
  },
  "2 5 6 12": {
    "cards": "2 5 6 12",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(6 / (5 - 2)) * 12",
      "((5 * 12) / 2) - 6",
      "(6 - 5) * (2 * 12)",
      "12 * (2 * (6 - 5))",
      "(5 / (2 / 12)) - 6",
      "(12 * 6) / (5 - 2)",
      "((6 - 5) * 12) * 2",
      "(2 * (6 - 5)) * 12",
      "((6 - 5) * 2) * 12",
      "6 / ((5 - 2) / 12)",
      "(12 * 2) / (6 - 5)",
      "(5 * 6) - (12 / 2)",
      "(12 * 2) * (6 - 5)",
      "12 * (2 / (6 - 5))",
      "((12 * 5) / 2) - 6",
      "(2 * 12) * (6 - 5)",
      "(5 * (12 / 2)) - 6",
      "(2 / (6 - 5)) * 12",
      "(6 * 5) - (12 / 2)",
      "12 / ((5 - 2) / 6)",
      "(12 / (2 / 5)) - 6",
      "2 / ((6 - 5) / 12)",
      "12 / ((6 - 5) / 2)",
      "2 * (12 * (6 - 5))",
      "12 * (5 - (6 / 2))",
      "((12 / 2) * 5) - 6",
      "(12 * (5 / 2)) - 6",
      "(12 / (5 - 2)) * 6",
      "(12 * (6 - 5)) * 2",
      "12 * (6 / (5 - 2))",
      "((5 / 2) * 12) - 6",
      "(6 * 12) / (5 - 2)",
      "6 * (12 / (5 - 2))",
      "(6 - 5) * (12 * 2)",
      "(2 * 12) / (6 - 5)",
      "2 * (12 / (6 - 5))",
      "12 * ((6 - 5) * 2)",
      "(12 / (6 - 5)) * 2",
      "(5 - (6 / 2)) * 12",
      "2 * ((6 - 5) * 12)"
    ]
  },
  "2 5 6 13": {
    "cards": "2 5 6 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(13 - (6 - 5)) * 2",
      "2 * ((13 + 5) - 6)",
      "(13 - 5) / (2 / 6)",
      "(13 + (5 - 6)) * 2",
      "((13 - 5) / 2) * 6",
      "2 * (5 - (6 - 13))",
      "2 * ((5 + 13) - 6)",
      "(13 - 5) * (6 / 2)",
      "((13 - 6) + 5) * 2",
      "2 * (5 + (13 - 6))",
      "((5 - 6) + 13) * 2",
      "6 * ((13 - 5) / 2)",
      "(5 - (6 - 13)) * 2",
      "(6 / 2) * (13 - 5)",
      "2 * (13 - (6 - 5))",
      "2 * ((5 - 6) + 13)",
      "6 / (2 / (13 - 5))",
      "((5 + 13) - 6) * 2",
      "2 * ((13 - 6) + 5)",
      "((13 + 5) - 6) * 2",
      "2 * (13 + (5 - 6))",
      "(5 + (13 - 6)) * 2",
      "(6 * (13 - 5)) / 2",
      "((13 - 5) * 6) / 2"
    ]
  },
  "2 5 7 7": {
    "cards": "2 5 7 7",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "7 + (7 + (2 * 5))",
      "(7 + 7) + (5 * 2)",
      "(5 * 2) + (7 + 7)",
      "7 + ((5 * 2) + 7)",
      "7 + (7 + (5 * 2))",
      "(7 + (2 * 5)) + 7",
      "((5 * 2) + 7) + 7",
      "(7 + 7) + (2 * 5)",
      "(7 + (5 * 2)) + 7",
      "(2 * 5) + (7 + 7)",
      "((2 * 5) + 7) + 7",
      "7 + ((2 * 5) + 7)"
    ]
  },
  "2 5 7 8": {
    "cards": "2 5 7 8",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((5 * 2) - 7) * 8",
      "((2 * 5) - 7) * 8",
      "8 * ((2 * 5) - 7)",
      "8 * ((5 * 2) - 7)"
    ]
  },
  "2 5 7 9": {
    "cards": "2 5 7 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((7 * 5) - 2) - 9",
      "((7 * 5) - 9) - 2",
      "(5 * 7) - (2 + 9)",
      "(7 * 5) - (2 + 9)",
      "((5 * 7) - 9) - 2",
      "((5 * 7) - 2) - 9",
      "(7 * 5) - (9 + 2)",
      "(5 * 7) - (9 + 2)"
    ]
  },
  "2 5 7 10": {
    "cards": "2 5 7 10",
    "has_solution": "Y",
    "num_solutions": 140,
    "solutions": [
      "5 + ((10 + 7) + 2)",
      "2 + ((10 + 5) + 7)",
      "((2 + 5) + 10) + 7",
      "2 + ((7 + 5) + 10)",
      "(10 + (7 - 5)) * 2",
      "((10 + 7) + 5) + 2",
      "(10 + 2) + (7 + 5)",
      "7 + (10 + (5 + 2))",
      "((7 + 10) + 2) + 5",
      "10 + ((7 + 2) + 5)",
      "(7 + 5) + (2 + 10)",
      "(10 + (2 + 5)) + 7",
      "10 + ((2 + 5) + 7)",
      "(10 + (5 + 2)) + 7",
      "2 + (7 + (5 + 10))",
      "(7 + (5 + 10)) + 2",
      "7 + ((5 + 2) + 10)",
      "10 + ((5 + 7) + 2)",
      "((5 + 2) + 10) + 7",
      "((10 - 5) + 7) * 2",
      "10 + ((7 + 5) + 2)",
      "(10 + 5) + (7 + 2)",
      "((10 + 2) + 5) + 7",
      "10 + (5 + (7 + 2))",
      "5 + ((2 + 10) + 7)",
      "((5 + 7) + 10) + 2",
      "(7 + (10 - 5)) * 2",
      "(2 + 10) * (7 - 5)",
      "(10 - (5 - 7)) * 2",
      "5 + (2 + (10 + 7))",
      "2 + (5 + (10 + 7))",
      "(7 + (10 + 2)) + 5",
      "2 + ((5 + 10) + 7)",
      "(5 + (2 + 10)) + 7",
      "(2 + 7) + (10 + 5)",
      "5 + (10 + (7 + 2))",
      "((2 + 10) + 7) + 5",
      "10 + (7 + (5 + 2))",
      "((7 - 5) + 10) * 2",
      "((2 + 7) + 10) + 5",
      "(5 + 10) + (2 + 7)",
      "(10 + (7 + 5)) + 2",
      "((10 + 5) + 7) + 2",
      "7 + (2 + (10 + 5))",
      "(2 + (5 + 10)) + 7",
      "5 + ((2 + 7) + 10)",
      "(7 + (5 + 2)) + 10",
      "2 + ((7 + 10) + 5)",
      "(10 + 7) + (2 + 5)",
      "(7 + 2) + (5 + 10)",
      "(2 + 7) + (5 + 10)",
      "(10 + 2) * (7 - 5)",
      "10 + (2 + (7 + 5))",
      "(5 + (10 + 2)) + 7",
      "5 + (2 + (7 + 10))",
      "2 * ((10 + 7) - 5)",
      "2 * ((7 + 10) - 5)",
      "5 + (10 + (2 + 7))",
      "5 + ((7 + 2) + 10)",
      "(7 + 2) + (10 + 5)",
      "(5 + 2) + (10 + 7)",
      "2 + (7 + (10 + 5))",
      "7 + (10 + (2 + 5))",
      "(2 + (5 + 7)) + 10",
      "((7 + 5) + 2) + 10",
      "5 + (7 + (2 + 10))",
      "2 + ((5 + 7) + 10)",
      "((7 + 2) + 10) + 5",
      "7 + ((2 + 5) + 10)",
      "((2 + 7) + 5) + 10",
      "(2 + 10) + (5 + 7)",
      "(7 - 5) * (2 + 10)",
      "(7 + 5) + (10 + 2)",
      "2 + (10 + (5 + 7))",
      "(7 + (2 + 10)) + 5",
      "7 + (5 + (10 + 2))",
      "2 * (10 - (5 - 7))",
      "(5 + 7) + (2 + 10)",
      "(5 + (2 + 7)) + 10",
      "(5 + (7 + 10)) + 2",
      "(7 + 10) + (2 + 5)",
      "10 + ((2 + 7) + 5)",
      "(10 + 5) + (2 + 7)",
      "(7 - 5) * (10 + 2)",
      "((5 + 10) + 2) + 7",
      "((10 + 5) + 2) + 7",
      "7 + (5 + (2 + 10))",
      "(10 + 2) + (5 + 7)",
      "2 * (10 + (7 - 5))",
      "(7 + (2 + 5)) + 10",
      "(2 + (7 + 5)) + 10",
      "(5 + (7 + 2)) + 10",
      "2 * (7 - (5 - 10))",
      "2 * (7 + (10 - 5))",
      "2 + (5 + (7 + 10))",
      "((7 + 10) + 5) + 2",
      "2 * ((10 - 5) + 7)",
      "((5 + 7) + 2) + 10",
      "2 + (10 + (7 + 5))",
      "2 * ((7 - 5) + 10)",
      "(7 - (5 - 10)) * 2",
      "(10 + (7 + 2)) + 5",
      "(7 + (10 + 5)) + 2",
      "(10 + 7) + (5 + 2)",
      "((7 + 5) + 10) + 2",
      "((7 + 10) - 5) * 2",
      "5 + ((7 + 10) + 2)",
      "(10 + (5 + 7)) + 2",
      "7 + ((5 + 10) + 2)",
      "5 + (7 + (10 + 2))",
      "(7 + 10) + (5 + 2)",
      "((7 + 2) + 5) + 10",
      "10 + (2 + (5 + 7))",
      "(2 + (7 + 10)) + 5",
      "(2 + 10) + (7 + 5)",
      "((10 + 7) - 5) * 2",
      "(2 + 5) + (7 + 10)",
      "(2 + (10 + 5)) + 7",
      "(5 + (10 + 7)) + 2",
      "10 + (5 + (2 + 7))",
      "(10 + (2 + 7)) + 5",
      "(2 + 5) + (10 + 7)",
      "10 + (7 + (2 + 5))",
      "7 + ((2 + 10) + 5)",
      "2 + ((10 + 7) + 5)",
      "7 + ((10 + 2) + 5)",
      "(5 + 7) + (10 + 2)",
      "7 + (2 + (5 + 10))",
      "((2 + 5) + 7) + 10",
      "((10 + 7) + 2) + 5",
      "7 + ((10 + 5) + 2)",
      "((5 + 10) + 7) + 2",
      "((10 + 2) + 7) + 5",
      "(5 + 2) + (7 + 10)",
      "(5 + 10) + (7 + 2)",
      "(2 + (10 + 7)) + 5",
      "5 + ((10 + 2) + 7)",
      "((5 + 2) + 7) + 10",
      "10 + ((5 + 2) + 7)",
      "((2 + 10) + 5) + 7"
    ]
  },
  "2 5 7 11": {
    "cards": "2 5 7 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((11 * 2) + 7) - 5",
      "(11 * (7 - 5)) + 2",
      "(7 + (2 * 11)) - 5",
      "(2 * 11) - (5 - 7)",
      "(2 * 11) + (7 - 5)",
      "7 + ((11 * 2) - 5)",
      "2 + ((7 - 5) * 11)",
      "(7 - 5) + (11 * 2)",
      "((11 * 5) - 7) / 2",
      "7 - (5 - (2 * 11))",
      "(7 - 5) + (2 * 11)",
      "(7 + (11 * 2)) - 5",
      "((5 * 11) - 7) / 2",
      "2 + (11 * (7 - 5))",
      "((11 * 2) - 5) + 7",
      "7 + ((2 * 11) - 5)",
      "(11 * 2) + (7 - 5)",
      "((7 - 5) * 11) + 2",
      "(11 * 2) - (5 - 7)",
      "2 - (11 * (5 - 7))",
      "((2 * 11) - 5) + 7",
      "2 - ((5 - 7) * 11)",
      "((2 * 11) + 7) - 5",
      "7 - (5 - (11 * 2))"
    ]
  },
  "2 5 7 12": {
    "cards": "2 5 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 7 13": {
    "cards": "2 5 7 13",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "((2 * 13) + 5) - 7",
      "((5 * 7) - 13) + 2",
      "(2 + (5 * 7)) - 13",
      "(5 + (2 * 13)) - 7",
      "(2 * 13) + (5 - 7)",
      "5 - (7 - (13 * 2))",
      "2 + ((5 * 7) - 13)",
      "(5 - 7) + (13 * 2)",
      "(5 - 7) + (2 * 13)",
      "((5 * 7) + 13) / 2",
      "((13 * 2) + 5) - 7",
      "(7 * 5) + (2 - 13)",
      "2 - (13 - (7 * 5))",
      "(5 * 7) + (2 - 13)",
      "(13 + (7 * 5)) / 2",
      "(2 - 13) + (7 * 5)",
      "5 + ((2 * 13) - 7)",
      "(13 * 2) - (7 - 5)",
      "((7 * 5) + 2) - 13",
      "5 - (7 - (2 * 13))",
      "((7 - 5) * 13) - 2",
      "5 + ((13 * 2) - 7)",
      "(13 + (5 * 7)) / 2",
      "(2 + (7 * 5)) - 13",
      "(2 - 13) + (5 * 7)",
      "((7 * 5) + 13) / 2",
      "((5 * 7) + 2) - 13",
      "2 - (13 - (5 * 7))",
      "(5 * 7) - (13 - 2)",
      "((2 * 13) - 7) + 5",
      "(5 + (13 * 2)) - 7",
      "(13 * 2) + (5 - 7)",
      "2 + ((7 * 5) - 13)",
      "(7 * 5) - (13 - 2)",
      "((13 * 2) - 7) + 5",
      "(2 * 13) - (7 - 5)",
      "(13 * (7 - 5)) - 2",
      "((7 * 5) - 13) + 2"
    ]
  },
  "2 5 8 8": {
    "cards": "2 5 8 8",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(8 * 5) - (2 * 8)",
      "((8 * 5) + 8) / 2",
      "(5 * 8) - (2 * 8)",
      "(8 * 5) - (8 * 2)",
      "(5 * 8) - (8 * 2)",
      "(8 + (8 * 5)) / 2",
      "((5 * 8) + 8) / 2",
      "(8 + (5 * 8)) / 2"
    ]
  },
  "2 5 8 9": {
    "cards": "2 5 8 9",
    "has_solution": "Y",
    "num_solutions": 148,
    "solutions": [
      "(5 + 9) + (2 + 8)",
      "9 + ((8 + 5) + 2)",
      "8 * (9 / (5 - 2))",
      "9 + ((2 + 5) + 8)",
      "8 + ((2 + 5) + 9)",
      "((5 + 2) + 9) + 8",
      "((9 + 2) + 8) + 5",
      "8 + ((2 + 9) + 5)",
      "9 + ((2 + 8) + 5)",
      "(8 + (9 + 5)) + 2",
      "(9 + (8 + 2)) + 5",
      "(9 + (5 + 2)) + 8",
      "8 + ((9 + 5) + 2)",
      "(5 + 8) + (9 + 2)",
      "(5 + (9 + 8)) + 2",
      "8 + (5 + (9 + 2))",
      "(9 + 8) + (5 + 2)",
      "9 + (8 + (2 + 5))",
      "2 * (8 - (5 - 9))",
      "5 + ((9 + 8) + 2)",
      "5 + ((2 + 9) + 8)",
      "((9 + 5) + 8) + 2",
      "8 + (5 + (2 + 9))",
      "2 + (5 + (9 + 8))",
      "8 + ((5 + 2) + 9)",
      "(9 - 5) * (8 - 2)",
      "(9 + (2 + 8)) + 5",
      "(8 + 9) + (2 + 5)",
      "(8 + (5 + 9)) + 2",
      "(2 + (5 + 8)) + 9",
      "5 + (2 + (9 + 8))",
      "(9 + 2) + (5 + 8)",
      "2 + (9 + (8 + 5))",
      "(8 + (2 + 9)) + 5",
      "(2 + (8 + 9)) + 5",
      "(2 + 9) + (8 + 5)",
      "(8 + (2 + 5)) + 9",
      "(9 + (8 + 5)) + 2",
      "(8 + 5) + (2 + 9)",
      "((8 + 9) + 5) + 2",
      "2 + ((8 + 5) + 9)",
      "8 + ((5 + 9) + 2)",
      "9 * (8 / (5 - 2))",
      "5 + ((8 + 2) + 9)",
      "8 + (2 + (5 + 9))",
      "((8 + 2) + 5) + 9",
      "(8 + (5 + 2)) + 9",
      "9 + (2 + (5 + 8))",
      "9 + ((5 + 8) + 2)",
      "(5 + (2 + 9)) + 8",
      "(5 + 8) + (2 + 9)",
      "2 + (5 + (8 + 9))",
      "5 + (8 + (9 + 2))",
      "(9 - (5 - 8)) * 2",
      "2 + (9 + (5 + 8))",
      "9 / ((5 - 2) / 8)",
      "((9 + 8) + 2) + 5",
      "((8 - 5) + 9) * 2",
      "9 + ((5 + 2) + 8)",
      "2 * ((8 - 5) + 9)",
      "(9 / (5 - 2)) * 8",
      "(2 + 5) + (8 + 9)",
      "9 + ((8 + 2) + 5)",
      "9 + (5 + (8 + 2))",
      "(2 - 8) * (5 - 9)",
      "((9 + 8) + 5) + 2",
      "2 + ((9 + 8) + 5)",
      "5 + (9 + (8 + 2))",
      "5 + ((2 + 8) + 9)",
      "(5 + (8 + 2)) + 9",
      "9 + (2 + (8 + 5))",
      "2 + (8 + (9 + 5))",
      "(8 + 2) + (5 + 9)",
      "(5 + (9 + 2)) + 8",
      "((5 + 9) + 2) + 8",
      "(2 + (5 + 9)) + 8",
      "2 + ((5 + 8) + 9)",
      "((8 + 9) - 5) * 2",
      "2 + ((9 + 5) + 8)",
      "((8 + 9) + 2) + 5",
      "8 + (9 + (2 + 5))",
      "(8 - 2) * (9 - 5)",
      "5 + (2 + (8 + 9))",
      "((2 + 5) + 8) + 9",
      "2 * (9 + (8 - 5))",
      "8 + ((9 + 2) + 5)",
      "(9 + (8 - 5)) * 2",
      "8 + (2 + (9 + 5))",
      "((2 + 8) + 9) + 5",
      "(5 + 2) + (9 + 8)",
      "((8 + 2) + 9) + 5",
      "9 + (5 + (2 + 8))",
      "(8 + 5) + (9 + 2)",
      "((8 + 5) + 2) + 9",
      "(8 + (9 + 2)) + 5",
      "((2 + 8) + 5) + 9",
      "(2 + (9 + 5)) + 8",
      "2 * (9 - (5 - 8))",
      "((5 + 9) + 8) + 2",
      "(2 + (9 + 8)) + 5",
      "((8 + 5) + 9) + 2",
      "((9 - 5) + 8) * 2",
      "((5 + 8) + 2) + 9",
      "((2 + 5) + 9) + 8",
      "(8 + 2) + (9 + 5)",
      "((2 + 9) + 8) + 5",
      "(9 + 5) + (2 + 8)",
      "2 + ((8 + 9) + 5)",
      "2 * ((9 - 5) + 8)",
      "5 + ((8 + 9) + 2)",
      "(9 + 2) + (8 + 5)",
      "((9 + 2) + 5) + 8",
      "(9 + (5 + 8)) + 2",
      "2 + (8 + (5 + 9))",
      "8 + (9 + (5 + 2))",
      "(9 + 5) + (8 + 2)",
      "((9 + 5) + 2) + 8",
      "5 + (8 + (2 + 9))",
      "(2 + 5) + (9 + 8)",
      "(8 / (5 - 2)) * 9",
      "9 + (8 + (5 + 2))",
      "(2 + (8 + 5)) + 9",
      "2 * (8 + (9 - 5))",
      "(5 + 2) + (8 + 9)",
      "((9 + 8) - 5) * 2",
      "(8 + 9) + (5 + 2)",
      "5 + (9 + (2 + 8))",
      "(9 * 8) / (5 - 2)",
      "((5 + 2) + 8) + 9",
      "(2 + 8) + (5 + 9)",
      "2 * ((9 + 8) - 5)",
      "(8 * 9) / (5 - 2)",
      "(5 - 9) * (2 - 8)",
      "((2 + 9) + 5) + 8",
      "(2 + 9) + (5 + 8)",
      "2 + ((5 + 9) + 8)",
      "(5 + (8 + 9)) + 2",
      "(9 + (2 + 5)) + 8",
      "(8 + (9 - 5)) * 2",
      "(9 + 8) + (2 + 5)",
      "(8 - (5 - 9)) * 2",
      "(2 + 8) + (9 + 5)",
      "8 / ((5 - 2) / 9)",
      "(5 + (2 + 8)) + 9",
      "((5 + 8) + 9) + 2",
      "5 + ((9 + 2) + 8)",
      "2 * ((8 + 9) - 5)",
      "(5 + 9) + (8 + 2)"
    ]
  },
  "2 5 8 10": {
    "cards": "2 5 8 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(10 - (2 + 5)) * 8",
      "(5 - 8) * (2 - 10)",
      "(2 - 10) * (5 - 8)",
      "((10 - 2) - 5) * 8",
      "8 * ((10 - 5) - 2)",
      "(10 - (5 + 2)) * 8",
      "8 * (10 - (2 + 5))",
      "8 * (10 - (5 + 2))",
      "8 * ((10 - 2) - 5)",
      "(10 - 2) * (8 - 5)",
      "((10 - 5) - 2) * 8",
      "(8 - 5) * (10 - 2)"
    ]
  },
  "2 5 8 11": {
    "cards": "2 5 8 11",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((11 + 5) * 2) - 8",
      "((11 - 5) / 2) * 8",
      "(11 - 5) * (8 / 2)",
      "(8 / 2) * (11 - 5)",
      "((5 + 11) * 2) - 8",
      "8 / (2 / (11 - 5))",
      "((11 - 5) * 8) / 2",
      "(11 - 5) / (2 / 8)",
      "(8 * (11 - 5)) / 2",
      "(2 * (5 + 11)) - 8",
      "(2 * (11 + 5)) - 8",
      "8 * ((11 - 5) / 2)"
    ]
  },
  "2 5 8 12": {
    "cards": "2 5 8 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(8 + 2) * (12 / 5)",
      "(12 * (2 + 8)) / 5",
      "12 / (5 / (8 + 2))",
      "(2 + 8) * (12 / 5)",
      "12 * ((8 + 2) / 5)",
      "(2 + 8) / (5 / 12)",
      "((5 * 2) - 8) * 12",
      "12 * ((2 * 5) - 8)",
      "((8 + 2) * 12) / 5",
      "((2 + 8) / 5) * 12",
      "12 * ((5 * 2) - 8)",
      "(12 / 5) * (8 + 2)",
      "12 * ((2 + 8) / 5)",
      "(12 * (8 + 2)) / 5",
      "12 / (5 / (2 + 8))",
      "((8 + 2) / 5) * 12",
      "((2 + 8) * 12) / 5",
      "(8 + 2) / (5 / 12)",
      "(12 / 5) * (2 + 8)",
      "((2 * 5) - 8) * 12"
    ]
  },
  "2 5 8 13": {
    "cards": "2 5 8 13",
    "has_solution": "Y",
    "num_solutions": 132,
    "solutions": [
      "(5 + 13) + (8 - 2)",
      "13 - ((2 - 5) - 8)",
      "((13 - 2) + 8) + 5",
      "(8 - 2) + (13 + 5)",
      "(13 - 5) + (2 * 8)",
      "(13 - (2 - 5)) + 8",
      "((8 + 5) + 13) - 2",
      "(13 + (8 * 2)) - 5",
      "5 - (2 - (8 + 13))",
      "(8 / 5) * (2 + 13)",
      "((8 - 2) + 13) + 5",
      "((8 + 5) - 2) + 13",
      "(2 + 13) / (5 / 8)",
      "(5 + 13) - (2 - 8)",
      "(8 + 13) - (2 - 5)",
      "13 - (5 - (8 * 2))",
      "(13 + (8 - 2)) + 5",
      "((13 + 8) + 5) - 2",
      "((5 - 2) + 8) + 13",
      "8 * ((2 + 13) / 5)",
      "((13 + 8) - 2) + 5",
      "((5 + 8) + 13) - 2",
      "((5 - 2) + 13) + 8",
      "(13 + 2) * (8 / 5)",
      "(5 + 8) + (13 - 2)",
      "(13 + 2) / (5 / 8)",
      "(5 + (8 - 2)) + 13",
      "(13 - (2 - 8)) + 5",
      "5 + (13 - (2 - 8))",
      "8 / (5 / (13 + 2))",
      "((2 * 8) + 13) - 5",
      "8 - ((5 - 13) * 2)",
      "(13 - 2) + (8 + 5)",
      "(8 + (5 + 13)) - 2",
      "8 + (13 - (2 - 5))",
      "(5 + (8 + 13)) - 2",
      "8 + ((13 - 5) * 2)",
      "(8 / 5) * (13 + 2)",
      "(13 - 5) + (8 * 2)",
      "(5 - (2 - 13)) + 8",
      "5 + (13 + (8 - 2))",
      "8 - (2 * (5 - 13))",
      "13 + ((2 * 8) - 5)",
      "8 - (2 - (13 + 5))",
      "(8 + 5) - (2 - 13)",
      "((8 + 13) - 2) + 5",
      "((5 + 13) + 8) - 2",
      "(13 + 5) + (8 - 2)",
      "8 - ((2 - 5) - 13)",
      "13 - (2 - (5 + 8))",
      "(13 + 5) - (2 - 8)",
      "5 + ((8 + 13) - 2)",
      "8 * ((13 + 2) / 5)",
      "(5 - 2) + (13 + 8)",
      "13 + ((5 + 8) - 2)",
      "(5 - 2) + (8 + 13)",
      "(8 + 13) + (5 - 2)",
      "((5 + 13) - 2) + 8",
      "(13 - 2) + (5 + 8)",
      "13 + ((8 - 2) + 5)",
      "5 + ((13 + 8) - 2)",
      "5 + ((13 - 2) + 8)",
      "((13 + 2) * 8) / 5",
      "(8 - 2) + (5 + 13)",
      "8 + ((13 - 2) + 5)",
      "(13 + (5 + 8)) - 2",
      "5 + ((8 - 2) + 13)",
      "13 + (8 + (5 - 2))",
      "((13 + 2) / 5) * 8",
      "(13 + (8 + 5)) - 2",
      "13 + (5 - (2 - 8))",
      "((13 + 5) - 2) + 8",
      "((8 + 13) + 5) - 2",
      "(13 + (5 - 2)) + 8",
      "((2 * 8) - 5) + 13",
      "(13 + (2 * 8)) - 5",
      "(8 - (2 - 13)) + 5",
      "(5 + (13 - 2)) + 8",
      "13 + (8 - (2 - 5))",
      "13 + (5 + (8 - 2))",
      "((2 + 13) * 8) / 5",
      "8 * (13 - (2 * 5))",
      "8 + ((5 + 13) - 2)",
      "((13 - 5) * 2) + 8",
      "13 + ((8 + 5) - 2)",
      "(13 - (2 * 5)) * 8",
      "(8 + 5) + (13 - 2)",
      "(2 + 13) * (8 / 5)",
      "8 + (13 + (5 - 2))",
      "8 + (2 * (13 - 5))",
      "((5 + 8) - 2) + 13",
      "(5 + (13 + 8)) - 2",
      "((8 * 2) - 5) + 13",
      "((13 + 5) + 8) - 2",
      "5 - ((2 - 8) - 13)",
      "13 - (5 - (2 * 8))",
      "(8 + (13 - 2)) + 5",
      "(13 + 8) + (5 - 2)",
      "8 + ((13 + 5) - 2)",
      "(8 - (2 - 5)) + 13",
      "(8 * (13 + 2)) / 5",
      "5 + (8 + (13 - 2))",
      "(8 * 2) - (5 - 13)",
      "8 + (5 - (2 - 13))",
      "((13 - 2) + 5) + 8",
      "13 - ((2 - 8) - 5)",
      "8 / (5 / (2 + 13))",
      "(13 - (5 * 2)) * 8",
      "(8 * (2 + 13)) / 5",
      "((8 - 2) + 5) + 13",
      "8 + ((5 - 2) + 13)",
      "8 - ((2 - 13) - 5)",
      "(8 + (13 + 5)) - 2",
      "13 + ((8 * 2) - 5)",
      "13 - (2 - (8 + 5))",
      "((8 * 2) + 13) - 5",
      "((2 + 13) / 5) * 8",
      "(2 * 8) + (13 - 5)",
      "(5 + 8) - (2 - 13)",
      "8 * (13 - (5 * 2))",
      "5 + (8 - (2 - 13))",
      "(2 * 8) - (5 - 13)",
      "5 - ((2 - 13) - 8)",
      "13 + ((5 - 2) + 8)",
      "8 + (5 + (13 - 2))",
      "(8 * 2) + (13 - 5)",
      "(13 + 8) - (2 - 5)",
      "(5 - (2 - 8)) + 13",
      "5 - (2 - (13 + 8))",
      "(8 + (5 - 2)) + 13",
      "(2 * (13 - 5)) + 8",
      "8 - (2 - (5 + 13))"
    ]
  },
  "2 5 9 9": {
    "cards": "2 5 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 9 10": {
    "cards": "2 5 9 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 + (2 * 10)) - 5",
      "((2 * 10) - 5) + 9",
      "((10 * 2) - 5) + 9",
      "(9 + (10 * 2)) - 5",
      "9 + ((10 * 2) - 5)",
      "9 - (5 - (2 * 10))",
      "(2 * 10) - (5 - 9)",
      "(9 - 5) + (10 * 2)",
      "(9 - 5) + (2 * 10)",
      "9 + ((2 * 10) - 5)",
      "((10 * 2) + 9) - 5",
      "(2 * 10) + (9 - 5)",
      "(10 * 2) - (5 - 9)",
      "(10 * 2) + (9 - 5)",
      "((2 * 10) + 9) - 5",
      "9 - (5 - (10 * 2))"
    ]
  },
  "2 5 9 11": {
    "cards": "2 5 9 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "11 - (5 - (2 * 9))",
      "11 + ((2 * 9) - 5)",
      "((9 * 2) - 5) + 11",
      "11 - (5 - (9 * 2))",
      "(11 * (5 - 2)) - 9",
      "(11 - 5) + (2 * 9)",
      "((5 - 2) * 11) - 9",
      "(9 * 2) + (11 - 5)",
      "((9 - 2) * 5) - 11",
      "(2 * 9) + (11 - 5)",
      "(11 - 5) + (9 * 2)",
      "((2 * 9) - 5) + 11",
      "(11 + (9 * 2)) - 5",
      "(9 * 2) - (5 - 11)",
      "(2 * 9) - (5 - 11)",
      "((9 * 2) + 11) - 5",
      "(5 * (9 - 2)) - 11",
      "(11 + (2 * 9)) - 5",
      "11 + ((9 * 2) - 5)",
      "((2 * 9) + 11) - 5"
    ]
  },
  "2 5 9 12": {
    "cards": "2 5 9 12",
    "has_solution": "Y",
    "num_solutions": 107,
    "solutions": [
      "12 - (2 - (9 + 5))",
      "12 + ((5 - 2) + 9)",
      "(5 + (12 + 9)) - 2",
      "9 - ((2 - 5) - 12)",
      "(9 + (12 - 2)) + 5",
      "((9 - 5) - 2) * 12",
      "(9 + (5 + 12)) - 2",
      "9 + ((5 - 2) + 12)",
      "12 / (2 / (9 - 5))",
      "((9 + 5) + 12) - 2",
      "(9 + 12) - (2 - 5)",
      "(12 + 5) - (2 - 9)",
      "12 - ((2 - 9) - 5)",
      "(5 - (2 - 9)) + 12",
      "(12 - (2 - 5)) + 9",
      "5 + (12 - (2 - 9))",
      "(9 - (2 - 12)) + 5",
      "12 - ((2 - 5) - 9)",
      "((12 + 5) - 2) + 9",
      "(9 + (5 - 2)) + 12",
      "12 + ((9 - 2) + 5)",
      "(5 + 9) + (12 - 2)",
      "((5 + 12) - 2) + 9",
      "12 / (5 - (9 / 2))",
      "(9 - 2) + (12 + 5)",
      "9 + (12 + (5 - 2))",
      "12 + ((9 + 5) - 2)",
      "12 * ((9 - 2) - 5)",
      "((12 + 5) + 9) - 2",
      "12 * ((9 - 5) - 2)",
      "5 - ((2 - 12) - 9)",
      "12 + ((5 + 9) - 2)",
      "(9 - 5) * (12 / 2)",
      "12 + (9 + (5 - 2))",
      "(12 - (2 - 9)) + 5",
      "((9 - 5) * 12) / 2",
      "(12 + 9) + (5 - 2)",
      "12 + (9 - (2 - 5))",
      "9 + (5 + (12 - 2))",
      "((5 - 2) + 9) + 12",
      "((12 - 2) + 5) + 9",
      "12 + (5 + (9 - 2))",
      "9 + ((5 + 12) - 2)",
      "5 + (9 + (12 - 2))",
      "5 + ((9 - 2) + 12)",
      "(5 - 2) + (12 + 9)",
      "(5 + (12 - 2)) + 9",
      "((9 - 2) + 12) + 5",
      "12 * (9 - (5 + 2))",
      "((9 - 5) / 2) * 12",
      "((9 + 12) + 5) - 2",
      "((12 + 9) + 5) - 2",
      "(12 + 5) + (9 - 2)",
      "(12 / 2) * (9 - 5)",
      "12 + (5 - (2 - 9))",
      "((5 - 2) + 12) + 9",
      "(5 + 12) - (2 - 9)",
      "((9 - 2) - 5) * 12",
      "9 - (2 - (5 + 12))",
      "12 * (9 - (2 + 5))",
      "(9 - (2 + 5)) * 12",
      "(12 + (5 + 9)) - 2",
      "(9 + 5) - (2 - 12)",
      "(5 + (9 - 2)) + 12",
      "5 + ((12 + 9) - 2)",
      "9 - (2 - (12 + 5))",
      "(12 - 2) + (9 + 5)",
      "((9 + 12) - 2) + 5",
      "9 + ((12 + 5) - 2)",
      "(5 + 12) + (9 - 2)",
      "5 + ((12 - 2) + 9)",
      "(5 + 9) - (2 - 12)",
      "((5 + 12) + 9) - 2",
      "12 - (2 - (5 + 9))",
      "(9 - 2) + (5 + 12)",
      "5 + ((9 + 12) - 2)",
      "5 - (2 - (9 + 12))",
      "9 + (5 - (2 - 12))",
      "((5 + 9) - 2) + 12",
      "((12 - 2) + 9) + 5",
      "(9 - (5 + 2)) * 12",
      "(9 + (12 + 5)) - 2",
      "((5 + 9) + 12) - 2",
      "(9 - (2 - 5)) + 12",
      "5 - ((2 - 9) - 12)",
      "(5 - (2 - 12)) + 9",
      "(12 + (9 + 5)) - 2",
      "9 + (12 - (2 - 5))",
      "(12 * (9 - 5)) / 2",
      "(12 + (9 - 2)) + 5",
      "5 + (9 - (2 - 12))",
      "((12 + 9) - 2) + 5",
      "(12 - 2) + (5 + 9)",
      "((9 - 2) + 5) + 12",
      "(9 - 5) / (2 / 12)",
      "(12 + (5 - 2)) + 9",
      "5 + (12 + (9 - 2))",
      "12 * ((9 - 5) / 2)",
      "(9 + 12) + (5 - 2)",
      "9 - ((2 - 12) - 5)",
      "((9 + 5) - 2) + 12",
      "(5 + (9 + 12)) - 2",
      "9 + ((12 - 2) + 5)",
      "5 - (2 - (12 + 9))",
      "(9 + 5) + (12 - 2)",
      "(5 - 2) + (9 + 12)",
      "(12 + 9) - (2 - 5)"
    ]
  },
  "2 5 9 13": {
    "cards": "2 5 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 10 10": {
    "cards": "2 5 10 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(10 * (2 + 10)) / 5",
      "((2 + 10) * 10) / 5",
      "(10 * (10 + 2)) / 5",
      "(10 + 2) * (10 / 5)",
      "10 / (5 / (10 + 2))",
      "10 / (5 / (2 + 10))",
      "10 * ((10 + 2) / 5)",
      "(10 + (10 / 5)) * 2",
      "2 * ((10 / 5) + 10)",
      "((10 + 2) / 5) * 10",
      "(10 + 2) / (5 / 10)",
      "10 * ((2 + 10) / 5)",
      "((2 + 10) / 5) * 10",
      "((10 / 5) + 10) * 2",
      "2 * (10 + (10 / 5))",
      "((10 + 2) * 10) / 5",
      "(10 / 5) * (10 + 2)",
      "(2 + 10) * (10 / 5)",
      "(10 / 5) * (2 + 10)",
      "(2 + 10) / (5 / 10)"
    ]
  },
  "2 5 10 11": {
    "cards": "2 5 10 11",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "5 + ((10 + 11) - 2)",
      "10 + ((5 - 2) + 11)",
      "(10 + (11 - 2)) + 5",
      "(5 + (10 - 2)) + 11",
      "11 + (10 - (2 - 5))",
      "(5 - 2) + (11 + 10)",
      "((10 - 2) + 11) + 5",
      "5 - (2 - (11 + 10))",
      "(11 / (5 / 10)) + 2",
      "(11 + 10) - (2 - 5)",
      "2 + ((11 * 10) / 5)",
      "((10 + 11) - 2) + 5",
      "2 + (10 * (11 / 5))",
      "(10 / (5 / 11)) + 2",
      "(10 - (2 - 5)) + 11",
      "11 + (10 + (5 - 2))",
      "10 + (11 - (2 - 5))",
      "5 + ((11 + 10) - 2)",
      "10 + ((11 - 2) + 5)",
      "11 - ((2 - 10) - 5)",
      "(5 + 10) + (11 - 2)",
      "11 + (5 - (2 - 10))",
      "10 + (11 + (5 - 2))",
      "(11 + (5 - 2)) + 10",
      "(5 + 10) - (2 - 11)",
      "((11 - 2) + 10) + 5",
      "11 + ((10 + 5) - 2)",
      "2 + ((11 / 5) * 10)",
      "10 + (5 - (2 - 11))",
      "(10 - (2 - 11)) + 5",
      "(10 + 11) - (2 - 5)",
      "5 - ((2 - 11) - 10)",
      "((10 + 11) + 5) - 2",
      "5 + (11 - (2 - 10))",
      "(5 + 11) + (10 - 2)",
      "5 + (10 - (2 - 11))",
      "(5 + 11) - (2 - 10)",
      "(5 - 2) + (10 + 11)",
      "5 + (11 + (10 - 2))",
      "11 - ((2 - 5) - 10)",
      "10 - ((2 - 11) - 5)",
      "(2 * 11) + (10 / 5)",
      "(10 + (5 - 2)) + 11",
      "((11 - 2) + 5) + 10",
      "2 + (10 / (5 / 11))",
      "2 + ((10 / 5) * 11)",
      "5 - (2 - (10 + 11))",
      "(10 + (5 + 11)) - 2",
      "((10 + 5) + 11) - 2",
      "((5 + 11) + 10) - 2",
      "(11 + 5) + (10 - 2)",
      "(11 + (10 + 5)) - 2",
      "(11 * 2) + (10 / 5)",
      "((5 + 10) - 2) + 11",
      "10 + ((11 + 5) - 2)",
      "((11 + 5) - 2) + 10",
      "(10 + 5) - (2 - 11)",
      "((10 * 11) / 5) + 2",
      "((11 * 10) / 5) + 2",
      "10 + ((5 + 11) - 2)",
      "((5 - 2) + 10) + 11",
      "5 + ((11 - 2) + 10)",
      "((11 + 5) + 10) - 2",
      "((5 + 10) + 11) - 2",
      "10 - (2 - (11 + 5))",
      "((11 / 5) * 10) + 2",
      "(11 * (10 / 5)) + 2",
      "(5 + (11 + 10)) - 2",
      "((5 - 2) + 11) + 10",
      "10 - (2 - (5 + 11))",
      "((5 + 11) - 2) + 10",
      "11 + ((5 - 2) + 10)",
      "(10 - 2) + (11 + 5)",
      "(10 + 5) + (11 - 2)",
      "(10 / 5) + (11 * 2)",
      "((11 + 10) + 5) - 2",
      "5 + (10 + (11 - 2))",
      "11 - (2 - (5 + 10))",
      "(11 - 2) + (5 + 10)",
      "10 - ((2 - 5) - 11)",
      "(11 + (5 + 10)) - 2",
      "2 + ((10 * 11) / 5)",
      "((10 - 2) + 5) + 11",
      "(11 - 2) + (10 + 5)",
      "11 - (2 - (10 + 5))",
      "(10 / 5) + (2 * 11)",
      "(5 + (11 - 2)) + 10",
      "(10 + 11) + (5 - 2)",
      "2 + (11 * (10 / 5))",
      "(11 + 10) + (5 - 2)",
      "(10 + (11 + 5)) - 2",
      "11 + (5 + (10 - 2))",
      "5 + ((10 - 2) + 11)",
      "(10 * (11 / 5)) + 2",
      "((10 / 5) * 11) + 2",
      "(11 - (2 - 10)) + 5",
      "2 + (11 / (5 / 10))",
      "11 + ((5 + 10) - 2)",
      "(10 - 2) + (5 + 11)",
      "(11 + 5) - (2 - 10)",
      "(5 - (2 - 11)) + 10",
      "5 - ((2 - 10) - 11)",
      "10 + (5 + (11 - 2))",
      "(5 - (2 - 10)) + 11",
      "(11 + (10 - 2)) + 5",
      "((11 + 10) - 2) + 5",
      "(11 - (2 - 5)) + 10",
      "((10 + 5) - 2) + 11",
      "11 + ((10 - 2) + 5)",
      "(5 + (10 + 11)) - 2"
    ]
  },
  "2 5 10 12": {
    "cards": "2 5 10 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "10 - (2 * (5 - 12))",
      "(2 * (12 + 5)) - 10",
      "(2 * (5 + 12)) - 10",
      "((12 + 5) * 2) - 10",
      "10 + ((12 - 5) * 2)",
      "((5 + 12) * 2) - 10",
      "10 - ((5 - 12) * 2)",
      "(2 * (12 - 5)) + 10",
      "((12 - 5) * 2) + 10",
      "10 + (2 * (12 - 5))"
    ]
  },
  "2 5 10 13": {
    "cards": "2 5 10 13",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(13 / (5 / 10)) - 2",
      "(13 * 2) - (10 / 5)",
      "(5 * 10) - (2 * 13)",
      "(5 * 10) - (13 * 2)",
      "(10 / (5 / 13)) - 2",
      "(10 * 5) - (2 * 13)",
      "((13 * 10) / 5) - 2",
      "(13 * (10 / 5)) - 2",
      "((10 * 13) / 5) - 2",
      "((13 / 5) * 10) - 2",
      "(10 * (13 / 5)) - 2",
      "(10 * 5) - (13 * 2)",
      "(2 * 13) - (10 / 5)",
      "((10 / 5) * 13) - 2"
    ]
  },
  "2 5 11 11": {
    "cards": "2 5 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 11 12": {
    "cards": "2 5 11 12",
    "has_solution": "Y",
    "num_solutions": 7,
    "solutions": [
      "12 + (2 * (11 - 5))",
      "12 - ((5 - 11) * 2)",
      "(2 * (11 - 5)) + 12",
      "12 - (2 * (5 - 11))",
      "12 + ((11 - 5) * 2)",
      "((11 - 5) * 2) + 12",
      "12 / ((11 / 2) - 5)"
    ]
  },
  "2 5 11 13": {
    "cards": "2 5 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 5 12 12": {
    "cards": "2 5 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * ((12 - 2) / 5)",
      "(12 * (12 - 2)) / 5",
      "(12 - 2) / (5 / 12)",
      "(12 * (5 - 2)) - 12",
      "((12 - 2) * 12) / 5",
      "12 / (5 / (12 - 2))",
      "(12 / 5) * (12 - 2)",
      "12 * (12 - (5 * 2))",
      "((12 - 2) / 5) * 12",
      "(12 - (2 * 5)) * 12",
      "(12 - 2) * (12 / 5)",
      "((12 * 5) - 12) / 2",
      "((5 - 2) * 12) - 12",
      "12 * (12 - (2 * 5))",
      "(12 - (5 * 2)) * 12",
      "((5 * 12) - 12) / 2"
    ]
  },
  "2 5 12 13": {
    "cards": "2 5 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "13 + (5 + (12 / 2))",
      "13 + ((12 / 2) + 5)",
      "5 + ((12 / 2) + 13)",
      "5 + (13 + (12 / 2))",
      "(2 * (13 + 5)) - 12",
      "((13 + 5) * 2) - 12",
      "(5 + (12 / 2)) + 13",
      "((12 / 2) + 5) + 13",
      "((12 / 2) + 13) + 5",
      "((5 + 13) * 2) - 12",
      "(2 * (5 + 13)) - 12",
      "(13 + (12 / 2)) + 5",
      "(13 + 5) + (12 / 2)",
      "(5 + 13) + (12 / 2)",
      "(12 / 2) + (5 + 13)",
      "(12 / 2) + (13 + 5)"
    ]
  },
  "2 5 13 13": {
    "cards": "2 5 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 6 6 6": {
    "cards": "2 6 6 6",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "6 + ((2 * 6) + 6)",
      "(6 * 2) + (6 + 6)",
      "(6 + (2 * 6)) + 6",
      "(6 / (2 / 6)) + 6",
      "((6 / 2) * 6) + 6",
      "((6 * 2) + 6) + 6",
      "6 + ((6 / 2) * 6)",
      "(6 + 6) + (2 * 6)",
      "6 + (6 * (6 / 2))",
      "(6 * (6 / 2)) + 6",
      "6 + (6 + (2 * 6))",
      "(6 + (6 * 2)) + 6",
      "6 + (6 + (6 * 2))",
      "((6 * 6) / 2) + 6",
      "(6 + 6) + (6 * 2)",
      "6 + (6 / (2 / 6))",
      "(6 * 6) - (2 * 6)",
      "((2 * 6) + 6) + 6",
      "(2 * 6) + (6 + 6)",
      "6 + ((6 * 6) / 2)",
      "(6 * 6) - (6 * 2)",
      "6 + ((6 * 2) + 6)"
    ]
  },
  "2 6 6 7": {
    "cards": "2 6 6 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(6 + (7 * 6)) / 2",
      "(6 + (6 * 7)) / 2",
      "((7 * 6) + 6) / 2",
      "(6 * (7 - 2)) - 6",
      "((7 - 2) * 6) - 6",
      "6 * (7 - (6 / 2))",
      "((6 * 7) + 6) / 2",
      "(7 - (6 / 2)) * 6"
    ]
  },
  "2 6 6 8": {
    "cards": "2 6 6 8",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "6 * ((8 - 6) * 2)",
      "6 * ((8 - 6) + 2)",
      "(2 + (8 - 6)) * 6",
      "6 * ((2 - 6) + 8)",
      "(8 - 6) * (2 * 6)",
      "(2 * (8 - 6)) * 6",
      "(8 + (2 - 6)) * 6",
      "(6 - (6 / 2)) * 8",
      "(2 + (6 / 6)) * 8",
      "(8 - 6) * (6 * 2)",
      "2 * (6 * (8 - 6))",
      "((2 + 8) - 6) * 6",
      "6 * (8 - (6 - 2))",
      "6 * (2 * (8 - 6))",
      "6 * ((2 + 8) - 6)",
      "6 * ((2 * 6) - 8)",
      "((8 - 6) + 2) * 6",
      "6 * (2 + (8 - 6))",
      "(6 * 2) * (8 - 6)",
      "(2 * 6) * (8 - 6)",
      "((2 * 6) - 8) * 6",
      "((2 - 6) + 8) * 6",
      "6 * (2 - (6 - 8))",
      "6 * (8 + (2 - 6))",
      "8 * (2 + (6 / 6))",
      "6 * ((6 * 2) - 8)",
      "8 * ((6 / 6) + 2)",
      "((6 * 2) - 8) * 6",
      "(6 * (8 - 6)) * 2",
      "8 * (6 - (6 / 2))",
      "2 * ((8 - 6) * 6)",
      "((8 - 6) * 6) * 2",
      "6 * ((8 + 2) - 6)",
      "((8 + 2) - 6) * 6",
      "((8 - 6) * 2) * 6",
      "((6 / 6) + 2) * 8",
      "(8 - (6 - 2)) * 6",
      "(2 - (6 - 8)) * 6"
    ]
  },
  "2 6 6 9": {
    "cards": "2 6 6 9",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((9 + 6) * 2) - 6",
      "(2 * (6 + 9)) - 6",
      "(9 - 6) * (2 + 6)",
      "(6 + 2) * (9 - 6)",
      "((6 * 9) - 6) / 2",
      "(2 + 6) * (9 - 6)",
      "(9 - 6) * (6 + 2)",
      "(2 * (9 + 6)) - 6",
      "((9 * 6) - 6) / 2",
      "((6 + 9) * 2) - 6"
    ]
  },
  "2 6 6 10": {
    "cards": "2 6 6 10",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "10 + ((6 + 6) + 2)",
      "(10 + (2 + 6)) + 6",
      "10 + ((2 + 6) + 6)",
      "(6 + 2) + (10 + 6)",
      "(6 + (2 + 10)) + 6",
      "6 + (2 + (6 + 10))",
      "((6 + 10) + 6) + 2",
      "6 + (6 + (2 + 10))",
      "2 + ((6 + 10) + 6)",
      "(6 + 10) + (2 + 6)",
      "6 + ((6 + 10) + 2)",
      "((10 + 6) + 6) + 2",
      "(2 + 6) + (6 + 10)",
      "2 + ((6 + 6) + 10)",
      "(6 + 10) + (6 + 2)",
      "(2 + (10 + 6)) + 6",
      "(6 / (2 / 10)) - 6",
      "(6 * (10 / 2)) - 6",
      "((6 / 2) * 10) - 6",
      "(6 * 6) - (2 + 10)",
      "10 + (6 + (6 + 2))",
      "((2 + 6) + 6) + 10",
      "6 + ((2 + 10) + 6)",
      "((6 * 6) - 10) - 2",
      "2 + (6 + (6 + 10))",
      "10 + (6 + (2 + 6))",
      "((10 * 6) / 2) - 6",
      "((6 + 6) + 10) + 2",
      "(6 + 6) + (2 + 10)",
      "(10 + 6) + (2 + 6)",
      "2 + ((10 + 6) + 6)",
      "6 + ((10 + 6) + 2)",
      "(2 + 6) + (10 + 6)",
      "((6 + 10) + 2) + 6",
      "6 + (10 + (6 + 2))",
      "6 + (6 + (10 + 2))",
      "6 + ((2 + 6) + 10)",
      "((6 * 10) / 2) - 6",
      "((2 + 10) + 6) + 6",
      "6 + (2 + (10 + 6))",
      "2 + (6 + (10 + 6))",
      "(2 + (6 + 6)) + 10",
      "(6 + (6 + 2)) + 10",
      "6 + ((6 + 2) + 10)",
      "10 + (2 + (6 + 6))",
      "(2 + 10) + (6 + 6)",
      "(2 + (6 + 10)) + 6",
      "((6 + 6) + 2) + 10",
      "((6 + 2) + 10) + 6",
      "(6 + (6 + 10)) + 2",
      "2 + (10 + (6 + 6))",
      "(6 + 2) + (6 + 10)",
      "((10 + 6) + 2) + 6",
      "6 + ((10 + 2) + 6)",
      "(6 + (2 + 6)) + 10",
      "((6 * 6) - 2) - 10",
      "(10 + 6) + (6 + 2)",
      "(6 + 6) + (10 + 2)",
      "6 + (10 + (2 + 6))",
      "(10 + (6 + 2)) + 6",
      "(10 / (2 / 6)) - 6",
      "((10 / 2) * 6) - 6",
      "((6 + 2) + 6) + 10",
      "((2 + 6) + 10) + 6",
      "(10 * (6 / 2)) - 6",
      "((10 + 2) + 6) + 6",
      "(10 + 2) + (6 + 6)",
      "(6 * 6) - (10 + 2)",
      "(6 + (10 + 2)) + 6",
      "10 + ((6 + 2) + 6)",
      "(6 + (10 + 6)) + 2",
      "(10 + (6 + 6)) + 2"
    ]
  },
  "2 6 6 11": {
    "cards": "2 6 6 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * (11 + (6 / 6))",
      "2 * ((6 / 6) + 11)",
      "(11 + (6 / 6)) * 2",
      "((6 / 6) + 11) * 2"
    ]
  },
  "2 6 6 12": {
    "cards": "2 6 6 12",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "(6 * 12) * (2 / 6)",
      "(2 / (6 / 12)) * 6",
      "(12 * 2) / (6 / 6)",
      "(12 * 2) + (6 - 6)",
      "(6 - 2) * (12 - 6)",
      "6 * (2 * (12 / 6))",
      "(6 * (2 * 12)) / 6",
      "((6 + 12) - 6) * 2",
      "((12 / 6) + 2) * 6",
      "2 * (6 - (6 - 12))",
      "12 / ((6 / 2) / 6)",
      "2 * ((6 * 12) / 6)",
      "(6 / 6) * (12 * 2)",
      "((6 / 6) * 12) * 2",
      "(12 - (2 + 6)) * 6",
      "((2 * 6) * 12) / 6",
      "(6 * 12) / (6 / 2)",
      "6 * ((12 / 6) * 2)",
      "(12 - (6 + 2)) * 6",
      "(6 * (12 * 2)) / 6",
      "(6 - 6) + (2 * 12)",
      "((2 * 6) / 6) * 12",
      "(6 - 12) * (2 - 6)",
      "6 * (12 - (2 + 6))",
      "((6 * 2) / 6) * 12",
      "12 * (2 / (6 / 6))",
      "2 * (12 + (6 - 6))",
      "(2 * (6 / 6)) * 12",
      "6 / (6 / (12 * 2))",
      "((2 * 12) - 6) + 6",
      "(6 - (6 - 2)) * 12",
      "12 / (6 / (6 * 2))",
      "2 * (12 / (6 / 6))",
      "(12 / 6) * (2 * 6)",
      "((12 - 6) + 6) * 2",
      "2 * ((12 + 6) - 6)",
      "((2 * 12) * 6) / 6",
      "6 + ((12 * 2) - 6)",
      "(12 - 6) * (6 - 2)",
      "((2 * 12) + 6) - 6",
      "(2 * (12 * 6)) / 6",
      "12 * (6 / (6 / 2))",
      "((6 / 6) * 2) * 12",
      "(6 * 2) / (6 / 12)",
      "(12 - (6 - 6)) * 2",
      "(6 / 6) * (2 * 12)",
      "((12 * 2) - 6) + 6",
      "12 * (6 - (6 - 2))",
      "6 / (6 / (2 * 12))",
      "12 * (2 - (6 - 6))",
      "(2 * 12) - (6 - 6)",
      "(6 + (2 * 12)) - 6",
      "(2 * 12) / (6 / 6)",
      "2 / (6 / (12 * 6))",
      "6 * ((12 - 2) - 6)",
      "(12 / (6 / 6)) * 2",
      "((6 - 6) + 2) * 12",
      "((2 + 6) - 6) * 12",
      "(2 - (6 - 6)) * 12",
      "(6 / (6 / 2)) * 12",
      "12 / ((6 / 6) / 2)",
      "2 * (12 * (6 / 6))",
      "(6 / (6 / 12)) * 2",
      "6 * (12 - (6 + 2))",
      "(12 * (2 / 6)) * 6",
      "2 * ((6 - 6) + 12)",
      "6 - (6 - (12 * 2))",
      "2 * (6 + (12 - 6))",
      "6 * ((12 * 2) / 6)",
      "12 * ((6 + 2) - 6)",
      "(2 / (6 / 6)) * 12",
      "(12 * (6 * 2)) / 6",
      "2 * (6 / (6 / 12))",
      "(2 - 6) * (6 - 12)",
      "(12 / 6) * (6 * 2)",
      "((6 + 2) - 6) * 12",
      "6 * (2 / (6 / 12))",
      "6 / ((6 / 12) / 2)",
      "2 / ((6 / 12) / 6)",
      "((2 / 6) * 6) * 12",
      "12 * ((2 + 6) - 6)",
      "2 * ((12 * 6) / 6)",
      "(12 + (6 * 6)) / 2",
      "(2 * 6) / (6 / 12)",
      "12 / (6 / (2 * 6))",
      "(12 * 2) - (6 - 6)",
      "(12 * (6 / 6)) * 2",
      "2 * ((6 + 12) - 6)",
      "12 * (6 + (2 - 6))",
      "((6 * 6) + 12) / 2",
      "((12 * 6) * 2) / 6",
      "(12 * (2 * 6)) / 6",
      "(2 * 12) * (6 / 6)",
      "((12 / 6) * 2) * 6",
      "2 / ((6 / 6) / 12)",
      "((12 * 2) + 6) - 6",
      "(6 * (12 / 6)) * 2",
      "2 * (12 - (6 - 6))",
      "2 * ((12 / 6) * 6)",
      "12 * (2 + (6 - 6))",
      "((2 / 6) * 12) * 6",
      "6 * (12 / (6 / 2))",
      "2 * ((6 / 6) * 12)",
      "(2 / 6) * (12 * 6)",
      "(2 * (6 * 12)) / 6",
      "((2 - 6) + 6) * 12",
      "(6 + (2 - 6)) * 12",
      "((12 * 2) * 6) / 6",
      "6 * (2 + (12 / 6))",
      "12 * (6 * (2 / 6))",
      "6 * ((12 / 6) + 2)",
      "(2 * (12 / 6)) * 6",
      "(12 * 6) * (2 / 6)",
      "6 * (12 * (2 / 6))",
      "12 * ((6 * 2) / 6)",
      "12 * ((2 / 6) * 6)",
      "((6 * 12) * 2) / 6",
      "12 * ((2 * 6) / 6)",
      "((12 * 6) / 6) * 2",
      "12 * ((6 / 6) * 2)",
      "((12 + 6) - 6) * 2",
      "(6 * 2) * (12 / 6)",
      "6 * ((2 / 6) * 12)",
      "(2 / 6) * (6 * 12)",
      "2 / (6 / (6 * 12))",
      "6 - (6 - (2 * 12))",
      "((2 * 12) / 6) * 6",
      "(6 + (12 - 6)) * 2",
      "2 * ((12 - 6) + 6)",
      "(2 * 12) + (6 - 6)",
      "(2 + (6 - 6)) * 12",
      "(2 + (12 / 6)) * 6",
      "6 / ((6 / 2) / 12)",
      "((12 - 2) - 6) * 6",
      "6 * ((12 - 6) - 2)",
      "(12 + (6 - 6)) * 2",
      "(12 * 6) / (6 / 2)",
      "(2 * 6) * (12 / 6)",
      "6 + ((2 * 12) - 6)",
      "(12 / (6 / 2)) * 6",
      "12 * (2 * (6 / 6))",
      "6 * ((2 * 12) / 6)",
      "(6 - (6 - 12)) * 2",
      "((12 * 2) / 6) * 6",
      "(6 - 6) + (12 * 2)",
      "(6 * (2 / 6)) * 12",
      "((12 - 6) - 2) * 6",
      "12 * ((6 - 6) + 2)",
      "((6 * 2) * 12) / 6",
      "(12 * 2) * (6 / 6)",
      "((6 - 6) + 12) * 2",
      "((12 / 6) * 6) * 2",
      "2 * (6 * (12 / 6))",
      "((6 * 12) / 6) * 2",
      "12 * ((2 - 6) + 6)",
      "(6 + (12 * 2)) - 6"
    ]
  },
  "2 6 6 13": {
    "cards": "2 6 6 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "2 * (13 - (6 / 6))",
      "(13 - (6 / 6)) * 2"
    ]
  },
  "2 6 7 7": {
    "cards": "2 6 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 6 7 8": {
    "cards": "2 6 7 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "8 * ((7 - 6) + 2)",
      "((2 - 6) + 7) * 8",
      "8 * (2 - (6 - 7))",
      "((2 + 7) - 6) * 8",
      "((8 + 7) * 2) - 6",
      "((7 + 2) - 6) * 8",
      "8 * (7 + (2 - 6))",
      "8 * ((2 - 6) + 7)",
      "((7 - 6) + 2) * 8",
      "(2 * (7 + 8)) - 6",
      "(2 + (7 - 6)) * 8",
      "(7 - (6 - 2)) * 8",
      "8 * ((7 + 2) - 6)",
      "(2 - (6 - 7)) * 8",
      "8 * (2 + (7 - 6))",
      "((7 + 8) * 2) - 6",
      "(7 + (2 - 6)) * 8",
      "8 * (7 - (6 - 2))",
      "(2 * (8 + 7)) - 6",
      "8 * ((2 + 7) - 6)"
    ]
  },
  "2 6 7 9": {
    "cards": "2 6 7 9",
    "has_solution": "Y",
    "num_solutions": 152,
    "solutions": [
      "6 * ((2 + 9) - 7)",
      "(2 + (9 + 7)) + 6",
      "7 + ((2 + 9) + 6)",
      "((2 + 9) - 7) * 6",
      "(7 * 6) - (2 * 9)",
      "7 + (9 + (6 + 2))",
      "((9 + 2) - 7) * 6",
      "(7 + 9) + (6 + 2)",
      "((9 - 7) * 6) * 2",
      "((9 + 2) + 6) + 7",
      "7 + (9 + (2 + 6))",
      "6 + ((2 + 7) + 9)",
      "((9 - 7) * 2) * 6",
      "2 + (7 + (6 + 9))",
      "9 + (6 + (2 + 7))",
      "(2 + 7) + (6 + 9)",
      "(9 + (6 + 2)) + 7",
      "2 + (6 + (7 + 9))",
      "2 + (9 + (6 + 7))",
      "((6 + 7) + 2) + 9",
      "(2 + 6) + (7 + 9)",
      "((7 + 9) + 6) + 2",
      "9 + ((6 + 2) + 7)",
      "2 + ((7 + 9) + 6)",
      "(2 + (7 + 6)) + 9",
      "((2 + 6) + 9) + 7",
      "(7 + (6 + 9)) + 2",
      "6 * ((2 - 7) + 9)",
      "(7 * 6) - (9 * 2)",
      "(7 + 2) + (6 + 9)",
      "(7 + 9) + (2 + 6)",
      "((9 + 7) + 6) + 2",
      "7 + ((6 + 9) + 2)",
      "(9 + 2) + (7 + 6)",
      "7 + (6 + (9 + 2))",
      "(6 + (2 + 7)) + 9",
      "(9 + (7 + 6)) + 2",
      "2 + ((6 + 9) + 7)",
      "(7 + 6) + (9 + 2)",
      "9 + (2 + (7 + 6))",
      "6 * (2 + (9 - 7))",
      "6 + (7 + (2 + 9))",
      "6 * (9 + (2 - 7))",
      "((2 + 7) + 6) + 9",
      "(2 - (7 - 9)) * 6",
      "6 + (9 + (2 + 7))",
      "2 + (9 + (7 + 6))",
      "((2 + 9) + 7) + 6",
      "9 + (2 + (6 + 7))",
      "(2 * 6) * (9 - 7)",
      "6 * (2 * (9 - 7))",
      "(6 + (7 + 2)) + 9",
      "2 * ((9 - 7) * 6)",
      "(7 + (6 + 2)) + 9",
      "(6 * 7) - (2 * 9)",
      "((7 + 9) + 2) + 6",
      "6 * (9 - (7 - 2))",
      "7 + ((6 + 2) + 9)",
      "((7 + 6) + 9) + 2",
      "6 + (9 + (7 + 2))",
      "(7 + 2) + (9 + 6)",
      "(9 + 7) + (2 + 6)",
      "((7 + 2) + 6) + 9",
      "(6 + (9 + 2)) + 7",
      "2 + (6 + (9 + 7))",
      "7 + (2 + (9 + 6))",
      "9 + ((7 + 2) + 6)",
      "(9 + (2 - 7)) * 6",
      "(2 + 9) + (6 + 7)",
      "((6 + 9) + 2) + 7",
      "2 + ((9 + 6) + 7)",
      "(6 + 7) + (2 + 9)",
      "(2 + (9 + 6)) + 7",
      "((6 + 2) + 9) + 7",
      "(7 + 6) + (2 + 9)",
      "2 + ((6 + 7) + 9)",
      "(2 + (6 + 7)) + 9",
      "6 + (7 + (9 + 2))",
      "7 + ((2 + 6) + 9)",
      "9 + ((2 + 7) + 6)",
      "(9 + (2 + 6)) + 7",
      "6 + ((7 + 2) + 9)",
      "((7 + 2) + 9) + 6",
      "7 + (2 + (6 + 9))",
      "(7 + (9 + 6)) + 2",
      "2 * (6 * (9 - 7))",
      "((7 + 6) + 2) + 9",
      "2 + ((7 + 6) + 9)",
      "(9 + (6 + 7)) + 2",
      "9 + ((7 + 6) + 2)",
      "(9 + 7) + (6 + 2)",
      "(6 + (7 + 9)) + 2",
      "(7 + (9 + 2)) + 6",
      "(2 + (9 - 7)) * 6",
      "(9 - 7) * (2 * 6)",
      "(6 + 7) + (9 + 2)",
      "6 + ((9 + 7) + 2)",
      "(2 + (7 + 9)) + 6",
      "(6 + 9) + (7 + 2)",
      "9 + ((6 + 7) + 2)",
      "((6 + 7) + 9) + 2",
      "(6 + 2) + (7 + 9)",
      "6 + ((2 + 9) + 7)",
      "(9 + (2 + 7)) + 6",
      "2 + ((9 + 7) + 6)",
      "(2 + 6) + (9 + 7)",
      "6 * ((9 - 7) * 2)",
      "((6 + 2) + 7) + 9",
      "(6 * 7) - (9 * 2)",
      "((2 + 6) + 7) + 9",
      "(9 - 7) * (6 * 2)",
      "(6 + (9 + 7)) + 2",
      "(2 + (6 + 9)) + 7",
      "((9 + 2) + 7) + 6",
      "((9 + 6) + 7) + 2",
      "6 + ((9 + 2) + 7)",
      "6 * ((9 - 7) + 2)",
      "((2 - 7) + 9) * 6",
      "(6 + (2 + 9)) + 7",
      "(9 + (7 + 2)) + 6",
      "2 + (7 + (9 + 6))",
      "6 * (2 - (7 - 9))",
      "7 + ((9 + 2) + 6)",
      "((6 + 9) + 7) + 2",
      "(2 * (9 - 7)) * 6",
      "(7 + (2 + 9)) + 6",
      "((9 + 6) + 2) + 7",
      "6 + (2 + (7 + 9))",
      "9 + (7 + (2 + 6))",
      "(6 + 9) + (2 + 7)",
      "(6 * 2) * (9 - 7)",
      "((9 + 7) + 2) + 6",
      "((2 + 7) + 9) + 6",
      "9 + ((2 + 6) + 7)",
      "6 + (2 + (9 + 7))",
      "(6 * (9 - 7)) * 2",
      "(2 + 9) + (7 + 6)",
      "(9 + 6) + (2 + 7)",
      "7 + ((9 + 6) + 2)",
      "9 + (7 + (6 + 2))",
      "7 + (6 + (2 + 9))",
      "(7 + (2 + 6)) + 9",
      "(9 + 6) + (7 + 2)",
      "(2 + 7) + (9 + 6)",
      "6 * ((9 + 2) - 7)",
      "6 + ((7 + 9) + 2)",
      "(9 - (7 - 2)) * 6",
      "(9 + 2) + (6 + 7)",
      "((2 + 9) + 6) + 7",
      "((9 - 7) + 2) * 6",
      "9 + (6 + (7 + 2))",
      "(6 + 2) + (9 + 7)"
    ]
  },
  "2 6 7 10": {
    "cards": "2 6 7 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "6 * ((2 * 7) - 10)",
      "((7 * 2) - 10) * 6",
      "((2 * 7) - 10) * 6",
      "(10 - 7) * (6 + 2)",
      "(10 - 7) * (2 + 6)",
      "(6 + 2) * (10 - 7)",
      "(2 + 6) * (10 - 7)",
      "6 * ((7 * 2) - 10)"
    ]
  },
  "2 6 7 11": {
    "cards": "2 6 7 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "2 * ((7 + 11) - 6)",
      "((7 + 11) - 6) * 2",
      "(7 - (6 - 11)) * 2",
      "2 * (7 - (6 - 11))",
      "(7 + (11 - 6)) * 2",
      "((11 + 7) - 6) * 2",
      "2 * ((11 - 6) + 7)",
      "2 * ((11 + 7) - 6)",
      "2 * (11 + (7 - 6))",
      "((11 - 6) + 7) * 2",
      "2 * (7 + (11 - 6))",
      "2 * ((7 - 6) + 11)",
      "((7 - 6) + 11) * 2",
      "2 * (11 - (6 - 7))",
      "(11 + (7 - 6)) * 2",
      "(11 - (6 - 7)) * 2"
    ]
  },
  "2 6 7 12": {
    "cards": "2 6 7 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(7 - 6) * (2 * 12)",
      "(12 / (7 - 6)) * 2",
      "(2 * 12) / (7 - 6)",
      "(2 / (7 - 6)) * 12",
      "12 * (2 * (7 - 6))",
      "12 * ((7 - 6) * 2)",
      "2 * (12 / (7 - 6))",
      "2 / ((7 - 6) / 12)",
      "(7 - 6) * (12 * 2)",
      "((7 - 6) * 2) * 12",
      "((7 - 6) * 12) * 2",
      "(12 * 2) * (7 - 6)",
      "(12 * (7 - 6)) * 2",
      "2 * ((7 - 6) * 12)",
      "(12 * 2) / (7 - 6)",
      "12 / ((7 - 6) / 2)",
      "2 * (12 * (7 - 6))",
      "(2 * (7 - 6)) * 12",
      "(2 * 12) * (7 - 6)",
      "12 * (2 / (7 - 6))"
    ]
  },
  "2 6 7 13": {
    "cards": "2 6 7 13",
    "has_solution": "Y",
    "num_solutions": 118,
    "solutions": [
      "6 - (2 - (13 + 7))",
      "(13 + (7 - 2)) + 6",
      "7 - (2 - (6 + 13))",
      "((6 + 7) - 2) + 13",
      "(6 + 7) + (13 - 2)",
      "7 + ((13 - 2) + 6)",
      "(13 + 6) - (2 - 7)",
      "(2 - 6) * (7 - 13)",
      "2 * (13 - (7 - 6))",
      "13 + (7 - (2 - 6))",
      "(7 - 2) + (13 + 6)",
      "(7 + 6) - (2 - 13)",
      "((13 + 6) - 2) + 7",
      "((6 + 13) + 7) - 2",
      "((7 + 13) - 2) + 6",
      "6 + (13 - (2 - 7))",
      "((13 - 2) + 6) + 7",
      "((6 - 2) + 13) + 7",
      "(6 + (13 - 7)) * 2",
      "(6 + (7 + 13)) - 2",
      "(6 + (7 - 2)) + 13",
      "6 * (13 - (2 + 7))",
      "6 + ((7 - 2) + 13)",
      "(13 - (7 + 2)) * 6",
      "((6 + 13) - 7) * 2",
      "7 + (13 + (6 - 2))",
      "((6 + 13) - 2) + 7",
      "6 - ((2 - 13) - 7)",
      "13 + (7 + (6 - 2))",
      "((6 + 7) + 13) - 2",
      "13 + ((6 + 7) - 2)",
      "6 + ((13 + 7) - 2)",
      "7 + (6 - (2 - 13))",
      "(7 - (2 - 13)) + 6",
      "(6 - 2) + (7 + 13)",
      "7 - ((2 - 6) - 13)",
      "(6 - 2) + (13 + 7)",
      "7 + (6 + (13 - 2))",
      "2 * (6 + (13 - 7))",
      "13 + ((7 - 2) + 6)",
      "(13 + 6) + (7 - 2)",
      "((13 - 2) + 7) + 6",
      "((6 - 2) + 7) + 13",
      "(6 + (13 - 2)) + 7",
      "((7 + 13) + 6) - 2",
      "7 + ((13 + 6) - 2)",
      "7 - ((2 - 13) - 6)",
      "(7 + (6 - 2)) + 13",
      "2 * ((6 + 13) - 7)",
      "(7 - 13) * (2 - 6)",
      "2 * ((6 - 7) + 13)",
      "(13 - (2 - 6)) + 7",
      "(7 + (13 + 6)) - 2",
      "((6 - 7) + 13) * 2",
      "13 + ((7 + 6) - 2)",
      "13 + (6 - (2 - 7))",
      "6 - ((2 - 7) - 13)",
      "(6 - 2) * (13 - 7)",
      "13 - ((2 - 7) - 6)",
      "((7 - 2) + 13) + 6",
      "(7 + 13) - (2 - 6)",
      "6 + ((13 - 2) + 7)",
      "2 * ((13 - 7) + 6)",
      "(6 + 13) + (7 - 2)",
      "7 + ((6 + 13) - 2)",
      "(7 - 2) + (6 + 13)",
      "(13 - (2 - 7)) + 6",
      "((13 + 6) - 7) * 2",
      "6 + ((7 + 13) - 2)",
      "(13 - 2) + (6 + 7)",
      "6 * ((13 - 2) - 7)",
      "(7 + 6) + (13 - 2)",
      "(13 - 2) + (7 + 6)",
      "6 + (7 + (13 - 2))",
      "(13 + (6 + 7)) - 2",
      "6 * ((13 - 7) - 2)",
      "2 * (13 + (6 - 7))",
      "((13 + 7) - 2) + 6",
      "(7 + (6 + 13)) - 2",
      "13 + ((6 - 2) + 7)",
      "((13 + 6) + 7) - 2",
      "(13 + (7 + 6)) - 2",
      "(7 - (2 - 6)) + 13",
      "((7 + 6) - 2) + 13",
      "6 - (2 - (7 + 13))",
      "7 + ((6 - 2) + 13)",
      "(6 + 13) - (2 - 7)",
      "((7 - 2) + 6) + 13",
      "(6 - (2 - 7)) + 13",
      "6 + (13 + (7 - 2))",
      "(13 + (6 - 2)) + 7",
      "(7 + (13 - 2)) + 6",
      "(13 - (2 + 7)) * 6",
      "13 - ((2 - 6) - 7)",
      "((13 - 2) - 7) * 6",
      "(13 + (6 - 7)) * 2",
      "(13 - (7 - 6)) * 2",
      "(13 - 7) * (6 - 2)",
      "(6 - (7 - 13)) * 2",
      "((13 - 7) - 2) * 6",
      "2 * (6 - (7 - 13))",
      "7 - (2 - (13 + 6))",
      "((7 + 6) + 13) - 2",
      "2 * ((13 + 6) - 7)",
      "((13 + 7) + 6) - 2",
      "((13 - 7) + 6) * 2",
      "7 + (13 - (2 - 6))",
      "(6 + 7) - (2 - 13)",
      "(6 + (13 + 7)) - 2",
      "13 - (2 - (7 + 6))",
      "6 * (13 - (7 + 2))",
      "(6 - (2 - 13)) + 7",
      "13 - (2 - (6 + 7))",
      "(7 + 13) + (6 - 2)",
      "13 + (6 + (7 - 2))",
      "(13 + 7) - (2 - 6)",
      "(13 + 7) + (6 - 2)",
      "6 + (7 - (2 - 13))"
    ]
  },
  "2 6 8 8": {
    "cards": "2 6 8 8",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "2 + ((8 + 6) + 8)",
      "(8 + (8 + 2)) + 6",
      "(8 + 8) + (6 + 2)",
      "2 + (8 + (6 + 8))",
      "(6 + (2 + 8)) + 8",
      "2 + (6 + (8 + 8))",
      "(2 + (8 + 6)) + 8",
      "(8 + (6 + 2)) + 8",
      "8 + ((8 + 6) + 2)",
      "8 + ((2 + 8) + 6)",
      "((8 + 8) + 6) + 2",
      "((2 + 8) + 8) + 6",
      "8 + ((6 + 8) + 2)",
      "(8 + 8) + (2 + 6)",
      "((2 + 8) + 6) + 8",
      "8 + ((6 + 2) + 8)",
      "((8 + 2) + 6) + 8",
      "6 + ((8 + 2) + 8)",
      "(8 + 2) + (6 + 8)",
      "(2 + 8) + (8 + 6)",
      "8 + (8 + (6 + 2))",
      "(8 * (6 - 2)) - 8",
      "6 + ((8 + 8) + 2)",
      "((6 + 8) + 8) + 2",
      "(8 + (6 + 8)) + 2",
      "(2 + 8) + (6 + 8)",
      "6 + (8 + (8 + 2))",
      "(2 + (8 + 8)) + 6",
      "6 * (8 - (8 / 2))",
      "8 + (6 + (2 + 8))",
      "2 + (8 + (8 + 6))",
      "(8 + 2) + (8 + 6)",
      "((2 + 6) + 8) + 8",
      "(6 + (8 + 8)) + 2",
      "((8 + 6) + 8) + 2",
      "((6 - 2) * 8) - 8",
      "((8 + 8) + 2) + 6",
      "8 + (2 + (8 + 6))",
      "(8 + 6) + (8 + 2)",
      "6 + ((2 + 8) + 8)",
      "2 + ((8 + 8) + 6)",
      "(6 + (8 + 2)) + 8",
      "(6 + 8) + (2 + 8)",
      "(2 + 6) + (8 + 8)",
      "6 + (2 + (8 + 8))",
      "(8 - (8 / 2)) * 6",
      "8 + ((2 + 6) + 8)",
      "(8 + (8 + 6)) + 2",
      "8 + ((8 + 2) + 6)",
      "8 + (2 + (6 + 8))",
      "(8 + (2 + 8)) + 6",
      "8 + (6 + (8 + 2))",
      "(6 + 8) + (8 + 2)",
      "8 + (8 + (2 + 6))",
      "((6 + 8) + 2) + 8",
      "((8 + 6) + 2) + 8",
      "(8 + 6) + (2 + 8)",
      "((6 + 2) + 8) + 8",
      "6 + (8 + (2 + 8))",
      "(8 + (2 + 6)) + 8",
      "((8 + 2) + 8) + 6",
      "2 + ((6 + 8) + 8)",
      "(2 + (6 + 8)) + 8",
      "(6 + 2) + (8 + 8)"
    ]
  },
  "2 6 8 9": {
    "cards": "2 6 8 9",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "9 * (8 / (6 / 2))",
      "(2 * 8) / (6 / 9)",
      "(9 * (8 * 2)) / 6",
      "8 * ((6 * 2) - 9)",
      "((9 / 6) * 2) * 8",
      "((8 / 6) * 2) * 9",
      "(9 * (2 / 6)) * 8",
      "((2 / 6) * 8) * 9",
      "((9 * 8) * 2) / 6",
      "((8 * 2) / 6) * 9",
      "8 * (9 * (2 / 6))",
      "(2 / (6 / 8)) * 9",
      "9 * (2 * (8 / 6))",
      "((2 * 9) * 8) / 6",
      "(8 / (6 / 9)) * 2",
      "8 * ((2 * 6) - 9)",
      "8 * ((2 / 6) * 9)",
      "8 * ((9 / 6) * 2)",
      "2 * (9 / (6 / 8))",
      "((2 * 9) / 6) * 8",
      "((6 * 2) - 9) * 8",
      "8 * ((2 * 9) / 6)",
      "9 / ((6 / 2) / 8)",
      "9 * ((8 * 2) / 6)",
      "((2 * 8) / 6) * 9",
      "9 * ((8 / 6) * 2)",
      "2 * (9 * (8 / 6))",
      "(2 / 6) * (9 * 8)",
      "2 * ((9 / 6) * 8)",
      "8 * ((9 * 2) / 6)",
      "(2 * (8 * 9)) / 6",
      "((9 * 2) * 8) / 6",
      "(9 * (2 * 8)) / 6",
      "2 * ((9 * 8) / 6)",
      "9 / ((6 / 8) / 2)",
      "(8 * (2 * 9)) / 6",
      "(2 * 9) / (6 / 8)",
      "(9 * 8) * (2 / 6)",
      "(9 * 2) / (6 / 8)",
      "8 / ((6 / 9) / 2)",
      "((2 / 6) * 9) * 8",
      "(2 * (9 / 6)) * 8",
      "(2 * 9) * (8 / 6)",
      "2 * ((8 * 9) / 6)",
      "(8 / 6) * (2 * 9)",
      "((8 / 6) * 9) * 2",
      "(8 * 2) * (9 / 6)",
      "(9 / 6) * (8 * 2)",
      "((9 * 8) / 6) * 2",
      "8 / (6 / (2 * 9))",
      "2 / ((6 / 8) / 9)",
      "(9 / (6 / 8)) * 2",
      "(9 * 8) / (6 / 2)",
      "((2 * 6) - 9) * 8",
      "8 * (9 / (6 / 2))",
      "((2 * 8) * 9) / 6",
      "((9 / 6) * 8) * 2",
      "((8 * 2) * 9) / 6",
      "(9 * 2) * (8 / 6)",
      "2 * (8 / (6 / 9))",
      "(8 * (9 / 6)) * 2",
      "(8 * 9) / (6 / 2)",
      "8 * (2 * (9 / 6))",
      "((8 * 9) * 2) / 6",
      "8 / ((6 / 2) / 9)",
      "2 * ((8 / 6) * 9)",
      "(2 * 8) * (9 / 6)",
      "8 * (2 / (6 / 9))",
      "(9 / (6 / 2)) * 8",
      "(2 / 6) * (8 * 9)",
      "(8 * 2) / (6 / 9)",
      "9 * ((2 / 6) * 8)",
      "(2 / (6 / 9)) * 8",
      "(9 * (8 / 6)) * 2",
      "2 / (6 / (9 * 8))",
      "9 / (6 / (2 * 8))",
      "(8 * (9 * 2)) / 6",
      "(2 * (9 * 8)) / 6",
      "2 / ((6 / 9) / 8)",
      "(8 / 6) * (9 * 2)",
      "2 * (8 * (9 / 6))",
      "(8 / (6 / 2)) * 9",
      "8 / (6 / (9 * 2))",
      "(2 * (8 / 6)) * 9",
      "9 * (8 * (2 / 6))",
      "(8 * 9) * (2 / 6)",
      "9 / (6 / (8 * 2))",
      "((9 * 2) / 6) * 8",
      "(9 / 6) * (2 * 8)",
      "((8 * 9) / 6) * 2",
      "(8 * (2 / 6)) * 9",
      "9 * (2 / (6 / 8))",
      "9 * ((2 * 8) / 6)",
      "2 / (6 / (8 * 9))"
    ]
  },
  "2 6 8 10": {
    "cards": "2 6 8 10",
    "has_solution": "Y",
    "num_solutions": 57,
    "solutions": [
      "6 * ((10 - 8) * 2)",
      "(10 + (2 - 8)) * 6",
      "6 * ((2 + 10) - 8)",
      "2 * (10 - (6 - 8))",
      "2 * ((8 + 10) - 6)",
      "6 * (10 - (8 - 2))",
      "(8 - (6 - 10)) * 2",
      "(10 - 8) * (6 * 2)",
      "((10 + 8) - 6) * 2",
      "6 * (2 + (10 - 8))",
      "(2 + (10 - 8)) * 6",
      "(10 - (8 - 2)) * 6",
      "(8 - 6) * (10 + 2)",
      "(8 - 6) * (2 + 10)",
      "(6 * 2) * (10 - 8)",
      "(10 - (6 - 8)) * 2",
      "2 * ((8 - 6) + 10)",
      "2 * (6 * (10 - 8))",
      "2 * ((10 - 8) * 6)",
      "(2 - (8 - 10)) * 6",
      "6 * (2 - (8 - 10))",
      "6 * ((2 - 8) + 10)",
      "((6 + 10) * 2) - 8",
      "(8 + (10 - 6)) * 2",
      "((8 - 6) + 10) * 2",
      "(10 + (8 - 6)) * 2",
      "2 * (10 + (8 - 6))",
      "2 * ((10 + 8) - 6)",
      "2 * ((10 - 6) + 8)",
      "((2 + 10) - 8) * 6",
      "((10 - 8) * 6) * 2",
      "6 * ((10 + 2) - 8)",
      "((10 - 6) + 8) * 2",
      "(2 * (10 - 8)) * 6",
      "((8 + 10) - 6) * 2",
      "6 * (2 * (10 - 8))",
      "6 * ((10 - 8) + 2)",
      "(2 * 6) * (10 - 8)",
      "(2 - 8) * (6 - 10)",
      "((10 - 8) * 2) * 6",
      "(2 * (6 + 10)) - 8",
      "8 / (2 - (10 / 6))",
      "2 * (8 - (6 - 10))",
      "(10 - 6) * (8 - 2)",
      "((10 + 6) * 2) - 8",
      "(8 - 2) * (10 - 6)",
      "((10 + 2) - 8) * 6",
      "(10 + 2) * (8 - 6)",
      "(6 - 10) * (2 - 8)",
      "((10 - 8) + 2) * 6",
      "(10 - 8) * (2 * 6)",
      "((2 - 8) + 10) * 6",
      "(2 + 10) * (8 - 6)",
      "(2 * (10 + 6)) - 8",
      "(6 * (10 - 8)) * 2",
      "2 * (8 + (10 - 6))",
      "6 * (10 + (2 - 8))"
    ]
  },
  "2 6 8 11": {
    "cards": "2 6 8 11",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(11 * 2) - (6 - 8)",
      "8 + ((11 * 2) - 6)",
      "8 - (6 - (11 * 2))",
      "(11 - (6 + 2)) * 8",
      "(8 - 6) + (11 * 2)",
      "((11 * 2) - 6) + 8",
      "(11 - (2 + 6)) * 8",
      "((11 * 2) + 8) - 6",
      "8 + ((2 * 11) - 6)",
      "(11 - 8) * (2 + 6)",
      "((11 - 6) - 2) * 8",
      "(2 * 11) + (8 - 6)",
      "2 + ((8 - 6) * 11)",
      "8 * (11 - (6 + 2))",
      "8 * ((11 - 2) - 6)",
      "(8 + (11 * 2)) - 6",
      "((11 - 2) - 6) * 8",
      "8 - (6 - (2 * 11))",
      "((2 * 11) + 8) - 6",
      "(8 - 6) + (2 * 11)",
      "(6 + 2) * (11 - 8)",
      "(11 * 2) + (8 - 6)",
      "(2 + 6) * (11 - 8)",
      "(8 + (2 * 11)) - 6",
      "(11 * (8 - 6)) + 2",
      "(11 - 8) * (6 + 2)",
      "2 - (11 * (6 - 8))",
      "8 * (11 - (2 + 6))",
      "8 * ((11 - 6) - 2)",
      "((2 * 11) - 6) + 8",
      "2 - ((6 - 8) * 11)",
      "2 + (11 * (8 - 6))",
      "(2 * 11) - (6 - 8)",
      "((8 - 6) * 11) + 2"
    ]
  },
  "2 6 8 12": {
    "cards": "2 6 8 12",
    "has_solution": "Y",
    "num_solutions": 118,
    "solutions": [
      "((8 - 2) * 6) - 12",
      "8 - (2 - (6 + 12))",
      "6 - (2 - (8 + 12))",
      "(8 + 6) - (2 - 12)",
      "8 + ((12 + 6) - 2)",
      "8 + (6 + (12 - 2))",
      "12 + (6 - (2 - 8))",
      "12 + ((6 + 8) - 2)",
      "(6 - 2) + (8 + 12)",
      "8 + ((6 + 12) - 2)",
      "(12 / (6 - 2)) * 8",
      "(12 + (6 - 2)) + 8",
      "(12 - 6) * (8 / 2)",
      "12 - (2 - (6 + 8))",
      "((6 - 2) + 8) + 12",
      "(8 + (6 + 12)) - 2",
      "(8 / 2) * (12 - 6)",
      "(8 + (6 - 2)) + 12",
      "12 + ((6 - 2) + 8)",
      "8 - ((2 - 6) - 12)",
      "8 - (2 - (12 + 6))",
      "12 * (8 / (6 - 2))",
      "((12 - 2) + 6) + 8",
      "8 * ((12 - 6) / 2)",
      "(12 - (2 - 8)) + 6",
      "8 + (12 + (6 - 2))",
      "8 / (2 / (12 - 6))",
      "12 + ((8 - 2) + 6)",
      "12 - ((2 - 8) - 6)",
      "(12 + 6) - (2 - 8)",
      "(8 * 6) - (12 * 2)",
      "(6 * 8) - (12 * 2)",
      "6 - (2 - (12 + 8))",
      "((8 + 12) - 2) + 6",
      "6 * ((2 * 8) - 12)",
      "((8 + 12) + 6) - 2",
      "(8 - (2 - 6)) + 12",
      "((12 + 6) - 2) + 8",
      "(8 + (12 - 2)) + 6",
      "((2 * 8) - 12) * 6",
      "(6 - (2 - 8)) + 12",
      "(8 - (2 - 12)) + 6",
      "8 + ((6 - 2) + 12)",
      "12 / ((6 - 2) / 8)",
      "(8 - 2) + (6 + 12)",
      "((8 - 2) + 6) + 12",
      "(12 + (8 - 2)) + 6",
      "(12 + 6) + (8 - 2)",
      "(12 - 6) / (2 / 8)",
      "12 - (2 - (8 + 6))",
      "(6 * (8 - 2)) - 12",
      "6 + ((8 + 12) - 2)",
      "(6 + (8 + 12)) - 2",
      "6 * ((8 * 2) - 12)",
      "6 + ((12 + 8) - 2)",
      "(8 + 12) - (2 - 6)",
      "6 + ((8 - 2) + 12)",
      "(6 + 8) + (12 - 2)",
      "6 + (8 + (12 - 2))",
      "6 + (12 + (8 - 2))",
      "12 * (6 - (8 / 2))",
      "(8 + (12 + 6)) - 2",
      "((12 - 2) + 8) + 6",
      "((8 * 2) - 12) * 6",
      "(12 + 8) + (6 - 2)",
      "(6 + 8) - (2 - 12)",
      "(12 + (8 + 6)) - 2",
      "(6 + 12) - (2 - 8)",
      "12 + ((8 + 6) - 2)",
      "(8 * 6) - (2 * 12)",
      "((8 + 6) - 2) + 12",
      "((12 + 6) + 8) - 2",
      "8 * (12 / (6 - 2))",
      "8 / ((6 - 2) / 12)",
      "(6 - (8 / 2)) * 12",
      "8 + ((12 - 2) + 6)",
      "6 - ((2 - 8) - 12)",
      "((8 + 6) + 12) - 2",
      "8 + (12 - (2 - 6))",
      "(8 + 12) + (6 - 2)",
      "12 + (8 - (2 - 6))",
      "(8 + 6) + (12 - 2)",
      "(12 + 8) - (2 - 6)",
      "((12 + 8) - 2) + 6",
      "(8 * 12) / (6 - 2)",
      "(12 - 2) + (6 + 8)",
      "6 + ((12 - 2) + 8)",
      "(6 * 8) - (2 * 12)",
      "(6 - (2 - 12)) + 8",
      "((12 - 6) / 2) * 8",
      "(6 + (12 - 2)) + 8",
      "6 - ((2 - 12) - 8)",
      "6 + (12 - (2 - 8))",
      "12 + (6 + (8 - 2))",
      "(12 - 2) + (8 + 6)",
      "(6 + (12 + 8)) - 2",
      "(8 / (6 - 2)) * 12",
      "(12 - (2 - 6)) + 8",
      "(12 + (6 + 8)) - 2",
      "8 - ((2 - 12) - 6)",
      "12 - ((2 - 6) - 8)",
      "((6 + 8) - 2) + 12",
      "(6 + (8 - 2)) + 12",
      "((6 + 12) - 2) + 8",
      "((6 - 2) + 12) + 8",
      "(12 * 8) / (6 - 2)",
      "((6 + 8) + 12) - 2",
      "(8 - 2) + (12 + 6)",
      "(8 * (12 - 6)) / 2",
      "(6 - 2) + (12 + 8)",
      "((6 + 12) + 8) - 2",
      "6 + (8 - (2 - 12))",
      "12 + (8 + (6 - 2))",
      "((8 - 2) + 12) + 6",
      "((12 + 8) + 6) - 2",
      "8 + (6 - (2 - 12))",
      "(6 + 12) + (8 - 2)",
      "((12 - 6) * 8) / 2"
    ]
  },
  "2 6 8 13": {
    "cards": "2 6 8 13",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "6 + ((13 * 2) - 8)",
      "((2 * 13) - 8) + 6",
      "(6 - 8) + (13 * 2)",
      "(6 / 2) + (8 + 13)",
      "(13 * (8 - 6)) - 2",
      "(8 + (6 / 2)) + 13",
      "(13 + 8) + (6 / 2)",
      "((6 / 2) + 8) + 13",
      "((13 * 2) - 8) + 6",
      "(6 - 8) + (2 * 13)",
      "(13 + (6 / 2)) + 8",
      "6 - (8 - (2 * 13))",
      "(2 * 13) - (8 - 6)",
      "13 + (8 + (6 / 2))",
      "(13 * 2) + (6 - 8)",
      "((2 * 13) + 6) - 8",
      "(6 + (13 * 2)) - 8",
      "8 + ((6 / 2) + 13)",
      "((6 / 2) + 13) + 8",
      "13 + ((6 / 2) + 8)",
      "(8 + 13) + (6 / 2)",
      "8 + (13 + (6 / 2))",
      "((13 * 2) + 6) - 8",
      "6 - (8 - (13 * 2))",
      "(2 * 13) + (6 - 8)",
      "(6 / 2) + (13 + 8)",
      "(6 + (2 * 13)) - 8",
      "6 + ((2 * 13) - 8)",
      "((8 - 6) * 13) - 2",
      "(13 * 2) - (8 - 6)"
    ]
  },
  "2 6 9 9": {
    "cards": "2 6 9 9",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((9 - 6) + 9) * 2",
      "2 * ((9 - 6) + 9)",
      "9 * (2 + (6 / 9))",
      "9 * ((6 / 9) + 2)",
      "(9 + (9 - 6)) * 2",
      "(9 - (6 - 9)) * 2",
      "((6 / 9) + 2) * 9",
      "2 * (9 - (6 - 9))",
      "((9 + 9) - 6) * 2",
      "2 * ((9 + 9) - 6)",
      "2 * (9 + (9 - 6))",
      "(2 + (6 / 9)) * 9"
    ]
  },
  "2 6 9 10": {
    "cards": "2 6 9 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(2 - 10) * (6 - 9)",
      "(9 - 6) * (10 - 2)",
      "(6 - 9) * (2 - 10)",
      "(9 - (10 / 2)) * 6",
      "6 * (9 - (10 / 2))",
      "(10 - 2) * (9 - 6)"
    ]
  },
  "2 6 9 11": {
    "cards": "2 6 9 11",
    "has_solution": "Y",
    "num_solutions": 126,
    "solutions": [
      "6 + ((9 + 11) - 2)",
      "9 + (11 + (6 - 2))",
      "(6 - 2) + (11 + 9)",
      "11 + (6 + (9 - 2))",
      "((11 / 2) * 6) - 9",
      "((9 + 6) + 11) - 2",
      "6 + ((11 - 2) + 9)",
      "6 * ((11 - 9) * 2)",
      "(6 * (11 / 2)) - 9",
      "((11 + 2) - 9) * 6",
      "11 - ((2 - 9) - 6)",
      "6 * (11 - (9 - 2))",
      "(11 - (2 - 9)) + 6",
      "(9 + (11 + 6)) - 2",
      "(2 * (11 - 9)) * 6",
      "(6 + 11) + (9 - 2)",
      "(9 + 11) - (2 - 6)",
      "(6 + 11) - (2 - 9)",
      "(6 - 2) + (9 + 11)",
      "(2 - (9 - 11)) * 6",
      "((11 - 9) * 6) * 2",
      "((9 - 2) + 11) + 6",
      "9 + ((6 + 11) - 2)",
      "(11 - 2) + (9 + 6)",
      "(6 - (2 - 11)) + 9",
      "(9 + 6) + (11 - 2)",
      "9 + (11 - (2 - 6))",
      "(11 + (9 + 6)) - 2",
      "11 + (9 - (2 - 6))",
      "6 * (2 - (9 - 11))",
      "(2 * 6) * (11 - 9)",
      "11 + ((6 - 2) + 9)",
      "((11 - 2) + 6) + 9",
      "(6 / (2 / 11)) - 9",
      "11 - ((2 - 6) - 9)",
      "2 * (6 * (11 - 9))",
      "(6 + 9) - (2 - 11)",
      "(11 - (2 - 6)) + 9",
      "(9 + (11 - 2)) + 6",
      "(6 + (9 + 11)) - 2",
      "11 + ((9 + 6) - 2)",
      "(11 + 9) - (2 - 6)",
      "((11 - 9) * 2) * 6",
      "9 + ((6 - 2) + 11)",
      "(11 * (6 / 2)) - 9",
      "6 + (9 - (2 - 11))",
      "((2 - 9) + 11) * 6",
      "(9 - (2 - 11)) + 6",
      "((6 + 9) - 2) + 11",
      "((11 - 2) + 9) + 6",
      "(11 + (2 - 9)) * 6",
      "(6 * (11 - 9)) * 2",
      "(11 - 9) * (2 * 6)",
      "((9 + 6) - 2) + 11",
      "((6 + 11) - 2) + 9",
      "(6 + (9 - 2)) + 11",
      "6 * (2 + (11 - 9))",
      "(9 - (2 - 6)) + 11",
      "11 + (9 + (6 - 2))",
      "(9 + (6 - 2)) + 11",
      "((2 + 11) - 9) * 6",
      "(9 + 11) + (6 - 2)",
      "6 + (11 + (9 - 2))",
      "6 * (2 * (11 - 9))",
      "((6 * 11) / 2) - 9",
      "9 - ((2 - 6) - 11)",
      "(6 + 9) + (11 - 2)",
      "6 * ((11 + 2) - 9)",
      "(11 - (9 - 2)) * 6",
      "((11 + 6) + 9) - 2",
      "6 - (2 - (9 + 11))",
      "(6 - (2 - 9)) + 11",
      "(6 + (11 + 9)) - 2",
      "6 + (11 - (2 - 9))",
      "((6 - 2) + 9) + 11",
      "((6 / 2) * 11) - 9",
      "((11 + 9) + 6) - 2",
      "9 - ((2 - 11) - 6)",
      "6 - ((2 - 9) - 11)",
      "11 - (2 - (6 + 9))",
      "(9 - 2) + (6 + 11)",
      "9 + (6 + (11 - 2))",
      "((6 + 11) + 9) - 2",
      "(6 + (11 - 2)) + 9",
      "(11 + 6) - (2 - 9)",
      "11 + ((9 - 2) + 6)",
      "6 * ((2 - 9) + 11)",
      "(11 + 9) + (6 - 2)",
      "6 * ((11 - 9) + 2)",
      "(11 - 2) + (6 + 9)",
      "6 + ((11 + 9) - 2)",
      "2 * ((11 - 9) * 6)",
      "(11 + (9 - 2)) + 6",
      "6 - ((2 - 11) - 9)",
      "(11 - 9) * (6 * 2)",
      "((9 + 11) + 6) - 2",
      "(9 + (6 + 11)) - 2",
      "(2 + (11 - 9)) * 6",
      "((6 - 2) + 11) + 9",
      "((11 * 6) / 2) - 9",
      "9 - (2 - (6 + 11))",
      "(11 + 6) + (9 - 2)",
      "6 + (9 + (11 - 2))",
      "6 + ((9 - 2) + 11)",
      "11 + ((6 + 9) - 2)",
      "((11 + 6) - 2) + 9",
      "(6 * 2) * (11 - 9)",
      "(9 + 6) - (2 - 11)",
      "6 * (11 + (2 - 9))",
      "(11 + (6 + 9)) - 2",
      "((11 + 9) - 2) + 6",
      "((6 + 9) + 11) - 2",
      "((9 + 11) - 2) + 6",
      "11 + (6 - (2 - 9))",
      "6 - (2 - (11 + 9))",
      "(11 + (6 - 2)) + 9",
      "(11 / (2 / 6)) - 9",
      "11 - (2 - (9 + 6))",
      "((9 - 2) + 6) + 11",
      "6 * ((2 + 11) - 9)",
      "9 + ((11 + 6) - 2)",
      "9 + ((11 - 2) + 6)",
      "(9 - 2) + (11 + 6)",
      "9 + (6 - (2 - 11))",
      "((11 - 9) + 2) * 6",
      "9 - (2 - (11 + 6))"
    ]
  },
  "2 6 9 12": {
    "cards": "2 6 9 12",
    "has_solution": "Y",
    "num_solutions": 35,
    "solutions": [
      "(9 + 12) + (6 / 2)",
      "(9 * 2) + (12 - 6)",
      "12 / (2 - (9 / 6))",
      "((2 * 9) + 12) - 6",
      "12 + (9 + (6 / 2))",
      "(9 * 2) - (6 - 12)",
      "12 + ((9 * 2) - 6)",
      "9 + (12 + (6 / 2))",
      "(12 + 9) + (6 / 2)",
      "(12 - 6) + (2 * 9)",
      "(2 * 9) - (6 - 12)",
      "(6 / 2) + (9 + 12)",
      "12 - (6 - (2 * 9))",
      "(2 + 6) * (12 - 9)",
      "9 + ((6 / 2) + 12)",
      "(6 + 2) * (12 - 9)",
      "(12 + (9 * 2)) - 6",
      "(12 - 6) + (9 * 2)",
      "(9 + (6 / 2)) + 12",
      "(9 * (6 - 2)) - 12",
      "((6 / 2) + 9) + 12",
      "((6 - 2) * 9) - 12",
      "(6 / 2) + (12 + 9)",
      "(12 - 9) * (2 + 6)",
      "(2 * 9) + (12 - 6)",
      "((6 / 2) + 12) + 9",
      "(12 - 9) * (6 + 2)",
      "(12 + (6 / 2)) + 9",
      "((9 * 2) + 12) - 6",
      "(12 + (2 * 9)) - 6",
      "((2 * 9) - 6) + 12",
      "12 + ((6 / 2) + 9)",
      "12 - (6 - (9 * 2))",
      "((9 * 2) - 6) + 12",
      "12 + ((2 * 9) - 6)"
    ]
  },
  "2 6 9 13": {
    "cards": "2 6 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 6 10 10": {
    "cards": "2 6 10 10",
    "has_solution": "Y",
    "num_solutions": 61,
    "solutions": [
      "6 + (10 - (2 - 10))",
      "(6 + 10) - (2 - 10)",
      "(10 - (2 - 10)) + 6",
      "10 - (2 - (10 + 6))",
      "(6 - 2) + (10 + 10)",
      "(6 + (10 + 10)) - 2",
      "((10 + 10) - 2) + 6",
      "(10 - 6) + (10 * 2)",
      "((10 + 10) + 6) - 2",
      "((2 * 10) - 6) + 10",
      "((6 + 10) + 10) - 2",
      "10 - (2 - (6 + 10))",
      "(10 * 2) - (6 - 10)",
      "(10 + 6) - (2 - 10)",
      "((2 * 10) + 10) - 6",
      "(6 + (10 - 2)) + 10",
      "(10 + 10) + (6 - 2)",
      "(10 + 10) - (2 - 6)",
      "(6 - (2 - 10)) + 10",
      "10 + (10 - (2 - 6))",
      "10 - ((2 - 6) - 10)",
      "6 + (10 + (10 - 2))",
      "((10 + 6) + 10) - 2",
      "10 + ((2 * 10) - 6)",
      "(10 + (2 * 10)) - 6",
      "(10 + (10 - 2)) + 6",
      "10 + (6 - (2 - 10))",
      "10 - ((2 - 10) - 6)",
      "6 - ((2 - 10) - 10)",
      "10 + ((10 * 2) - 6)",
      "(2 * 10) + (10 - 6)",
      "((10 + 6) - 2) + 10",
      "((6 + 10) - 2) + 10",
      "((10 * 2) - 6) + 10",
      "(10 - 6) + (2 * 10)",
      "(10 * 2) + (10 - 6)",
      "((6 - 2) + 10) + 10",
      "((10 * 2) + 10) - 6",
      "((10 - 2) + 10) + 6",
      "10 + ((6 - 2) + 10)",
      "(10 + (10 + 6)) - 2",
      "10 + (10 + (6 - 2))",
      "6 + ((10 + 10) - 2)",
      "6 + ((10 - 2) + 10)",
      "10 + ((6 + 10) - 2)",
      "(10 - 2) + (10 + 6)",
      "(10 - (2 - 6)) + 10",
      "(10 + 6) + (10 - 2)",
      "(2 * 10) - (6 - 10)",
      "(10 - 2) + (6 + 10)",
      "10 + ((10 + 6) - 2)",
      "(10 + (6 - 2)) + 10",
      "(6 + 10) + (10 - 2)",
      "(10 + (6 + 10)) - 2",
      "(10 + (10 * 2)) - 6",
      "10 + (6 + (10 - 2))",
      "10 - (6 - (2 * 10))",
      "6 - (2 - (10 + 10))",
      "10 - (6 - (10 * 2))",
      "10 + ((10 - 2) + 6)",
      "((10 - 2) + 6) + 10"
    ]
  },
  "2 6 10 11": {
    "cards": "2 6 10 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((6 / 2) + 11) + 10",
      "11 + ((6 / 2) + 10)",
      "(6 / 2) + (10 + 11)",
      "(10 + (6 / 2)) + 11",
      "10 + ((6 / 2) + 11)",
      "11 + (10 + (6 / 2))",
      "(6 / 2) + (11 + 10)",
      "(11 + (6 / 2)) + 10",
      "(2 * (11 + 6)) - 10",
      "(10 + 11) + (6 / 2)",
      "((11 + 6) * 2) - 10",
      "(2 * (6 + 11)) - 10",
      "(11 + 10) + (6 / 2)",
      "10 + (11 + (6 / 2))",
      "((6 + 11) * 2) - 10",
      "((6 / 2) + 10) + 11"
    ]
  },
  "2 6 10 12": {
    "cards": "2 6 10 12",
    "has_solution": "Y",
    "num_solutions": 72,
    "solutions": [
      "((2 * 6) - 10) * 12",
      "12 / (6 / (2 + 10))",
      "((10 * 6) - 12) / 2",
      "((10 + 2) * 12) / 6",
      "((10 + 2) / 6) * 12",
      "6 * ((2 - 10) + 12)",
      "(12 / 6) * (10 + 2)",
      "((10 - 6) - 2) * 12",
      "(10 - 6) * (12 / 2)",
      "(12 - 10) * (2 * 6)",
      "12 * ((2 * 6) - 10)",
      "(2 + 10) * (12 / 6)",
      "(10 - 6) / (2 / 12)",
      "(10 - (6 + 2)) * 12",
      "2 * (6 * (12 - 10))",
      "(12 - (10 - 2)) * 6",
      "((12 - 10) * 6) * 2",
      "((2 + 10) / 6) * 12",
      "6 * (2 - (10 - 12))",
      "6 * (2 * (12 - 10))",
      "12 * (10 - (2 + 6))",
      "(12 + (2 - 10)) * 6",
      "6 * (2 + (12 - 10))",
      "((2 - 10) + 12) * 6",
      "12 * ((10 - 2) - 6)",
      "6 * ((2 + 12) - 10)",
      "6 * (12 - (10 - 2))",
      "12 * ((10 - 6) / 2)",
      "(6 * (12 - 10)) * 2",
      "12 * ((10 - 6) - 2)",
      "((12 - 10) * 2) * 6",
      "12 * ((2 + 10) / 6)",
      "(12 / 2) * (10 - 6)",
      "(12 * (2 + 10)) / 6",
      "6 * (12 + (2 - 10))",
      "6 * ((12 - 10) + 2)",
      "((2 + 10) * 12) / 6",
      "((10 - 6) / 2) * 12",
      "12 * ((10 + 2) / 6)",
      "((2 + 12) - 10) * 6",
      "(2 - (10 - 12)) * 6",
      "6 * (10 - (12 / 2))",
      "(2 + 10) / (6 / 12)",
      "(12 - 10) * (6 * 2)",
      "((12 - 10) + 2) * 6",
      "((10 - 2) - 6) * 12",
      "((12 + 2) - 10) * 6",
      "((6 * 10) - 12) / 2",
      "6 * ((12 + 2) - 10)",
      "(2 + (12 - 10)) * 6",
      "(2 * (12 - 10)) * 6",
      "((10 - 6) * 12) / 2",
      "(2 * 6) * (12 - 10)",
      "12 / (6 / (10 + 2))",
      "2 * (10 + (12 / 6))",
      "(10 + 2) / (6 / 12)",
      "12 * ((6 * 2) - 10)",
      "12 / (2 / (10 - 6))",
      "(12 / 6) * (2 + 10)",
      "2 * ((12 / 6) + 10)",
      "(10 + 2) * (12 / 6)",
      "(10 - (12 / 2)) * 6",
      "(10 + (12 / 6)) * 2",
      "((6 * 2) - 10) * 12",
      "(12 * (10 + 2)) / 6",
      "6 * ((12 - 10) * 2)",
      "(12 * (10 - 6)) / 2",
      "(10 - (2 + 6)) * 12",
      "(6 * 2) * (12 - 10)",
      "12 * (10 - (6 + 2))",
      "((12 / 6) + 10) * 2",
      "2 * ((12 - 10) * 6)"
    ]
  },
  "2 6 10 13": {
    "cards": "2 6 10 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "10 - (2 * (6 - 13))",
      "6 + ((10 / 2) + 13)",
      "(13 + 6) + (10 / 2)",
      "(10 / 2) + (6 + 13)",
      "(13 - 10) * (6 + 2)",
      "((10 / 2) + 13) + 6",
      "(13 + (10 / 2)) + 6",
      "(13 - 10) * (2 + 6)",
      "6 + (13 + (10 / 2))",
      "(6 + (10 / 2)) + 13",
      "((13 - 6) * 2) + 10",
      "10 - ((6 - 13) * 2)",
      "(6 + 13) + (10 / 2)",
      "(2 * (13 - 6)) + 10",
      "(10 / 2) + (13 + 6)",
      "13 + ((10 / 2) + 6)",
      "((10 / 2) + 6) + 13",
      "(6 + 2) * (13 - 10)",
      "13 + (6 + (10 / 2))",
      "(2 + 6) * (13 - 10)",
      "10 + ((13 - 6) * 2)",
      "10 + (2 * (13 - 6))"
    ]
  },
  "2 6 11 11": {
    "cards": "2 6 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 6 11 12": {
    "cards": "2 6 11 12",
    "has_solution": "Y",
    "num_solutions": 21,
    "solutions": [
      "2 + ((12 * 11) / 6)",
      "((11 / 6) * 12) + 2",
      "((11 * 12) / 6) + 2",
      "2 + (12 / (6 / 11))",
      "(12 / 6) + (11 * 2)",
      "2 + ((12 / 6) * 11)",
      "(12 / 6) + (2 * 11)",
      "(11 * 2) + (12 / 6)",
      "(11 * (12 / 6)) + 2",
      "((12 / 6) * 11) + 2",
      "(2 * 11) + (12 / 6)",
      "(11 / (6 / 12)) + 2",
      "(12 * (11 / 6)) + 2",
      "2 + (11 / (6 / 12))",
      "2 + ((11 * 12) / 6)",
      "2 + (12 * (11 / 6))",
      "2 + (11 * (12 / 6))",
      "((12 * 11) / 6) + 2",
      "(12 / (6 / 11)) + 2",
      "2 + ((11 / 6) * 12)",
      "12 / (6 - (11 / 2))"
    ]
  },
  "2 6 11 13": {
    "cards": "2 6 11 13",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "2 * (6 * (13 - 11))",
      "6 * (13 + (2 - 11))",
      "6 * ((13 - 11) + 2)",
      "6 * (2 * (13 - 11))",
      "6 * (13 - (11 - 2))",
      "(13 + (2 - 11)) * 6",
      "(13 - 11) * (2 * 6)",
      "((13 + 2) - 11) * 6",
      "(2 * (13 - 11)) * 6",
      "((2 + 13) - 11) * 6",
      "6 * (2 - (11 - 13))",
      "2 * ((13 - 11) * 6)",
      "(2 - (11 - 13)) * 6",
      "(2 * 6) * (13 - 11)",
      "6 * ((13 - 11) * 2)",
      "((2 - 11) + 13) * 6",
      "(6 * (13 - 11)) * 2",
      "6 * ((2 + 13) - 11)",
      "6 * ((2 - 11) + 13)",
      "6 * (2 + (13 - 11))",
      "((13 - 11) * 2) * 6",
      "((13 - 11) * 6) * 2",
      "(2 + (13 - 11)) * 6",
      "(13 - 11) * (6 * 2)",
      "(6 * 2) * (13 - 11)",
      "(13 - (11 - 2)) * 6",
      "6 * ((13 + 2) - 11)",
      "((13 - 11) + 2) * 6"
    ]
  },
  "2 6 12 12": {
    "cards": "2 6 12 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "12 + ((12 / 2) + 6)",
      "(6 * (12 / 2)) - 12",
      "(12 / (2 / 6)) - 12",
      "((12 / 2) * 6) - 12",
      "((6 * 12) / 2) - 12",
      "6 + (12 + (12 / 2))",
      "((12 / 2) + 12) + 6",
      "((12 / 2) + 6) + 12",
      "12 - (2 * (6 - 12))",
      "((6 / 2) * 12) - 12",
      "((12 * 6) / 2) - 12",
      "12 - ((6 - 12) * 2)",
      "(2 * (6 + 12)) - 12",
      "12 + (6 + (12 / 2))",
      "(2 * (12 + 6)) - 12",
      "(12 / 2) + (12 + 6)",
      "(2 * (12 - 6)) + 12",
      "((12 + 6) * 2) - 12",
      "(6 / (2 / 12)) - 12",
      "((6 + 12) * 2) - 12",
      "((12 - 6) * 2) + 12",
      "(6 + (12 / 2)) + 12",
      "6 + ((12 / 2) + 12)",
      "(6 + 12) + (12 / 2)",
      "(12 + (12 / 2)) + 6",
      "12 + (2 * (12 - 6))",
      "12 + ((12 - 6) * 2)",
      "(12 * (6 / 2)) - 12",
      "(12 + 6) + (12 / 2)",
      "(12 / 2) + (6 + 12)"
    ]
  },
  "2 6 12 13": {
    "cards": "2 6 12 13",
    "has_solution": "Y",
    "num_solutions": 11,
    "solutions": [
      "(12 * (13 / 6)) - 2",
      "(13 * 2) - (12 / 6)",
      "(12 / (6 / 13)) - 2",
      "((13 / 6) * 12) - 2",
      "12 / ((13 / 2) - 6)",
      "(13 * (12 / 6)) - 2",
      "((13 * 12) / 6) - 2",
      "((12 / 6) * 13) - 2",
      "(13 / (6 / 12)) - 2",
      "((12 * 13) / 6) - 2",
      "(2 * 13) - (12 / 6)"
    ]
  },
  "2 6 13 13": {
    "cards": "2 6 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 7 7": {
    "cards": "2 7 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 7 8": {
    "cards": "2 7 7 8",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(2 + 8) + (7 + 7)",
      "2 + (8 + (7 + 7))",
      "(7 + (2 + 8)) + 7",
      "(8 + (7 + 7)) + 2",
      "((7 / 7) + 2) * 8",
      "(7 + (8 + 7)) + 2",
      "((7 + 2) + 8) + 7",
      "(7 + (8 + 2)) + 7",
      "8 + (7 + (7 + 2))",
      "7 + ((2 + 8) + 7)",
      "7 + ((8 + 2) + 7)",
      "7 + ((7 + 8) + 2)",
      "((7 + 2) + 7) + 8",
      "7 + (2 + (8 + 7))",
      "(8 + 7) + (7 + 2)",
      "7 + (2 + (7 + 8))",
      "(2 + (7 / 7)) * 8",
      "(8 + 7) + (2 + 7)",
      "(8 + 2) + (7 + 7)",
      "(7 + 2) + (7 + 8)",
      "(7 + (7 + 8)) + 2",
      "2 + ((8 + 7) + 7)",
      "((7 + 7) + 2) + 8",
      "(7 + (7 + 2)) + 8",
      "(7 + 2) + (8 + 7)",
      "(2 + (8 + 7)) + 7",
      "((8 + 2) + 7) + 7",
      "2 + (7 + (7 + 8))",
      "((7 + 7) + 8) + 2",
      "7 + (8 + (2 + 7))",
      "2 + (7 + (8 + 7))",
      "7 + (7 + (2 + 8))",
      "(2 + (7 + 8)) + 7",
      "7 + ((7 + 2) + 8)",
      "(7 + 7) + (2 + 8)",
      "8 + ((7 + 2) + 7)",
      "(7 + 7) + (8 + 2)",
      "((2 + 8) + 7) + 7",
      "(8 + (7 + 2)) + 7",
      "7 + ((8 + 7) + 2)",
      "8 * ((7 / 7) + 2)",
      "((2 + 7) + 8) + 7",
      "8 * (2 + (7 / 7))",
      "8 + ((2 + 7) + 7)",
      "((2 + 7) + 7) + 8",
      "(7 + 8) + (7 + 2)",
      "((7 + 8) + 7) + 2",
      "((8 + 7) + 7) + 2",
      "8 + ((7 + 7) + 2)",
      "8 + (7 + (2 + 7))",
      "(7 + (2 + 7)) + 8",
      "7 + (7 + (8 + 2))",
      "(7 + 8) + (2 + 7)",
      "(8 + (2 + 7)) + 7",
      "2 + ((7 + 7) + 8)",
      "8 + (2 + (7 + 7))",
      "((8 + 7) + 2) + 7",
      "7 + ((2 + 7) + 8)",
      "7 + (8 + (7 + 2))",
      "((7 + 8) + 2) + 7",
      "(2 + 7) + (7 + 8)",
      "(2 + 7) + (8 + 7)",
      "2 + ((7 + 8) + 7)",
      "(2 + (7 + 7)) + 8"
    ]
  },
  "2 7 7 9": {
    "cards": "2 7 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 7 10": {
    "cards": "2 7 7 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((10 / 7) + 2) * 7",
      "(2 + (10 / 7)) * 7",
      "7 * (2 + (10 / 7))",
      "7 * ((10 / 7) + 2)"
    ]
  },
  "2 7 7 11": {
    "cards": "2 7 7 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "2 * ((7 / 7) + 11)",
      "(7 * (7 - 2)) - 11",
      "(11 + (7 / 7)) * 2",
      "((7 - 2) * 7) - 11",
      "((7 / 7) + 11) * 2",
      "2 * (11 + (7 / 7))"
    ]
  },
  "2 7 7 12": {
    "cards": "2 7 7 12",
    "has_solution": "Y",
    "num_solutions": 183,
    "solutions": [
      "(12 + 7) + (7 - 2)",
      "(7 - (2 - 7)) + 12",
      "2 * ((7 + 12) - 7)",
      "7 * ((2 * 12) / 7)",
      "(7 + 7) - (2 - 12)",
      "((12 - 2) + 7) + 7",
      "2 * ((12 / 7) * 7)",
      "(12 * 2) + (7 - 7)",
      "((2 / 7) * 7) * 12",
      "12 * ((2 - 7) + 7)",
      "(12 * 7) * (2 / 7)",
      "7 - (2 - (7 + 12))",
      "((7 + 7) + 12) - 2",
      "7 + (12 - (2 - 7))",
      "(2 / 7) * (12 * 7)",
      "12 * ((7 - 7) + 2)",
      "((7 / 7) * 12) * 2",
      "12 + (7 - (2 - 7))",
      "12 * ((7 * 2) / 7)",
      "7 / (7 / (2 * 12))",
      "2 * ((12 + 7) - 7)",
      "(7 + (2 - 7)) * 12",
      "2 * (12 * (7 / 7))",
      "12 / (7 / (2 * 7))",
      "12 + (7 + (7 - 2))",
      "2 * ((7 * 12) / 7)",
      "(2 / (7 / 7)) * 12",
      "((7 + 7) - 2) + 12",
      "(12 * 2) - (7 - 7)",
      "12 + ((7 + 7) - 2)",
      "((12 * 7) * 2) / 7",
      "(12 * (7 * 2)) / 7",
      "((2 * 7) / 7) * 12",
      "2 * (12 + (7 - 7))",
      "7 + ((12 + 7) - 2)",
      "7 + ((12 - 2) + 7)",
      "(7 * (12 / 7)) * 2",
      "(12 * (2 / 7)) * 7",
      "7 / (7 / (12 * 2))",
      "2 * (12 / (7 / 7))",
      "(7 + (12 + 7)) - 2",
      "((12 * 2) - 7) + 7",
      "(7 - (7 - 12)) * 2",
      "(12 / (7 / 2)) * 7",
      "((2 - 7) + 7) * 12",
      "((7 - 7) + 12) * 2",
      "(7 + 7) + (12 - 2)",
      "(12 * (7 / 7)) * 2",
      "(12 / 7) * (2 * 7)",
      "(7 - (7 - 2)) * 12",
      "(7 * 12) / (7 / 2)",
      "7 / ((7 / 12) / 2)",
      "(2 / (7 / 12)) * 7",
      "(7 * (2 / 7)) * 12",
      "(2 / 7) * (7 * 12)",
      "(7 / (7 / 12)) * 2",
      "((2 + 7) - 7) * 12",
      "12 / ((7 / 2) / 7)",
      "7 / ((7 / 2) / 12)",
      "((7 + 2) - 7) * 12",
      "(7 / 7) * (12 * 2)",
      "12 * (7 + (2 - 7))",
      "12 * (2 + (7 - 7))",
      "2 / (7 / (7 * 12))",
      "((2 / 7) * 12) * 7",
      "7 * (12 * (2 / 7))",
      "(12 * 2) * (7 / 7)",
      "7 + (7 + (12 - 2))",
      "2 / ((7 / 7) / 12)",
      "((2 * 12) / 7) * 7",
      "7 + ((12 * 2) - 7)",
      "2 * (12 - (7 - 7))",
      "((7 - 7) + 2) * 12",
      "(7 / 7) * (2 * 12)",
      "((2 * 12) - 7) + 7",
      "((7 - 2) + 12) + 7",
      "(7 * (12 * 2)) / 7",
      "(2 * 12) + (7 - 7)",
      "12 * (2 - (7 - 7))",
      "(2 * 7) / (7 / 12)",
      "((12 * 7) / 7) * 2",
      "(7 * 12) * (2 / 7)",
      "12 * (7 - (7 - 2))",
      "7 + ((7 - 2) + 12)",
      "(7 / (7 / 2)) * 12",
      "7 - (2 - (12 + 7))",
      "(7 - (2 - 12)) + 7",
      "12 - (2 - (7 + 7))",
      "(2 - (7 - 7)) * 12",
      "((7 + 12) + 7) - 2",
      "2 / (7 / (12 * 7))",
      "2 * (7 - (7 - 12))",
      "((2 * 12) * 7) / 7",
      "((12 + 7) - 2) + 7",
      "7 - ((2 - 12) - 7)",
      "12 * (2 * (7 / 7))",
      "(7 + (12 * 2)) - 7",
      "2 * ((12 - 7) + 7)",
      "(12 + (7 - 2)) + 7",
      "(7 + 12) + (7 - 2)",
      "12 / (7 / (7 * 2))",
      "((2 * 7) * 12) / 7",
      "12 + ((7 - 2) + 7)",
      "7 + (7 - (2 - 12))",
      "(12 * 2) / (7 / 7)",
      "((12 + 7) + 7) - 2",
      "((7 * 2) / 7) * 12",
      "(12 + (7 - 7)) * 2",
      "12 * ((2 + 7) - 7)",
      "12 * ((2 * 7) / 7)",
      "((7 + 12) - 2) + 7",
      "2 / ((7 / 12) / 7)",
      "((12 * 2) / 7) * 7",
      "(12 * (2 * 7)) / 7",
      "(2 * (7 * 12)) / 7",
      "((12 + 7) - 7) * 2",
      "(7 + (7 + 12)) - 2",
      "7 + ((2 * 12) - 7)",
      "(12 / (7 / 7)) * 2",
      "(2 * 12) - (7 - 7)",
      "(12 * 7) / (7 / 2)",
      "(2 * 12) / (7 / 7)",
      "7 - (7 - (2 * 12))",
      "(2 * 12) * (7 / 7)",
      "((7 / 7) * 2) * 12",
      "7 + ((7 + 12) - 2)",
      "(12 - (2 - 7)) + 7",
      "(7 + 12) - (2 - 7)",
      "7 - ((2 - 7) - 12)",
      "2 * ((7 / 7) * 12)",
      "(7 + (12 - 2)) + 7",
      "2 * ((12 * 7) / 7)",
      "(7 + (2 * 12)) - 7",
      "7 * ((12 / 7) * 2)",
      "12 * ((7 + 2) - 7)",
      "(2 * (12 / 7)) * 7",
      "12 - ((2 - 7) - 7)",
      "(7 - 2) + (12 + 7)",
      "7 * (2 * (12 / 7))",
      "(2 * (7 / 7)) * 12",
      "7 * (2 / (7 / 12))",
      "2 * (7 / (7 / 12))",
      "7 * ((12 * 2) / 7)",
      "2 * (7 * (12 / 7))",
      "(2 * 7) * (12 / 7)",
      "7 * (12 / (7 / 2))",
      "((12 / 7) * 2) * 7",
      "((2 * 12) + 7) - 7",
      "(7 + (7 - 2)) + 12",
      "12 * ((7 / 7) * 2)",
      "((7 * 12) * 2) / 7",
      "2 * ((7 - 7) + 12)",
      "7 + (12 + (7 - 2))",
      "(12 - 2) + (7 + 7)",
      "(2 * (12 * 7)) / 7",
      "(7 * (2 * 12)) / 7",
      "(7 - 7) + (12 * 2)",
      "((12 * 2) + 7) - 7",
      "(7 * 2) * (12 / 7)",
      "((7 * 12) / 7) * 2",
      "12 * ((2 / 7) * 7)",
      "7 - (7 - (12 * 2))",
      "(12 + 7) - (2 - 7)",
      "(7 - 2) + (7 + 12)",
      "(12 + (7 + 7)) - 2",
      "(12 - (7 - 7)) * 2",
      "12 * (7 / (7 / 2))",
      "((7 * 2) * 12) / 7",
      "((12 / 7) * 7) * 2",
      "(7 + (12 - 7)) * 2",
      "12 * (2 / (7 / 7))",
      "(7 * 2) / (7 / 12)",
      "((12 - 7) + 7) * 2",
      "7 * ((2 / 7) * 12)",
      "(2 + (7 - 7)) * 12",
      "12 * (7 * (2 / 7))",
      "12 / ((7 / 7) / 2)",
      "2 * (7 + (12 - 7))",
      "(12 / 7) * (7 * 2)",
      "((7 + 12) - 7) * 2",
      "((12 * 2) * 7) / 7",
      "((7 - 2) + 7) + 12",
      "(7 - 7) + (2 * 12)"
    ]
  },
  "2 7 7 13": {
    "cards": "2 7 7 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "2 * (13 - (7 / 7))",
      "(13 - (7 / 7)) * 2"
    ]
  },
  "2 7 8 8": {
    "cards": "2 7 8 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "8 * (2 + (8 - 7))",
      "8 * ((8 - 7) + 2)",
      "((2 - 7) + 8) * 8",
      "(8 - (7 - 2)) * 8",
      "((8 + 2) - 7) * 8",
      "8 * (8 - (7 - 2))",
      "(8 + (2 - 7)) * 8",
      "8 * (2 - (7 - 8))",
      "8 * (8 + (2 - 7))",
      "8 * ((2 + 8) - 7)",
      "((8 * 7) - 8) / 2",
      "(2 - (7 - 8)) * 8",
      "(2 + (8 - 7)) * 8",
      "(7 - (8 / 2)) * 8",
      "((7 * 8) - 8) / 2",
      "((2 + 8) - 7) * 8",
      "8 * ((2 - 7) + 8)",
      "8 * (7 - (8 / 2))",
      "8 * ((8 + 2) - 7)",
      "((8 - 7) + 2) * 8"
    ]
  },
  "2 7 8 9": {
    "cards": "2 7 8 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(2 * (7 + 9)) - 8",
      "((7 + 9) * 2) - 8",
      "(2 * (9 + 7)) - 8",
      "((9 + 7) * 2) - 8"
    ]
  },
  "2 7 8 10": {
    "cards": "2 7 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 8 11": {
    "cards": "2 7 8 11",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "(7 + 11) + (8 - 2)",
      "(7 - (2 - 11)) + 8",
      "(7 + 8) + (11 - 2)",
      "((8 + 11) + 7) - 2",
      "(8 - (2 - 11)) + 7",
      "7 - ((2 - 11) - 8)",
      "((11 + 7) - 2) + 8",
      "7 + ((11 + 8) - 2)",
      "(11 + (8 + 7)) - 2",
      "((8 - 2) + 7) + 11",
      "(7 + (11 - 2)) + 8",
      "(8 + (7 + 11)) - 2",
      "(7 - 2) + (11 + 8)",
      "11 - ((2 - 8) - 7)",
      "8 * ((7 * 2) - 11)",
      "((11 - 7) + 8) * 2",
      "((7 + 8) - 2) + 11",
      "2 * ((11 + 8) - 7)",
      "(11 + (7 + 8)) - 2",
      "(11 + (7 - 2)) + 8",
      "8 + (11 - (2 - 7))",
      "(8 - 2) * (11 - 7)",
      "((11 - 2) + 7) + 8",
      "(7 - (2 - 8)) + 11",
      "(8 - (2 - 7)) + 11",
      "7 - (2 - (11 + 8))",
      "11 + ((8 + 7) - 2)",
      "(11 + (8 - 7)) * 2",
      "7 - (2 - (8 + 11))",
      "(8 + 11) - (2 - 7)",
      "2 * ((11 - 7) + 8)",
      "8 * ((2 * 7) - 11)",
      "((7 + 11) + 8) - 2",
      "7 + (8 + (11 - 2))",
      "((8 - 7) + 11) * 2",
      "11 + (7 + (8 - 2))",
      "11 + (8 - (2 - 7))",
      "(7 - 2) + (8 + 11)",
      "8 + ((7 + 11) - 2)",
      "((7 + 11) - 2) + 8",
      "2 * ((8 + 11) - 7)",
      "((11 + 8) + 7) - 2",
      "7 + (11 - (2 - 8))",
      "7 + ((8 - 2) + 11)",
      "((7 - 2) + 8) + 11",
      "((7 * 2) - 11) * 8",
      "8 + ((11 + 7) - 2)",
      "(11 - 2) + (7 + 8)",
      "11 + (7 - (2 - 8))",
      "(8 - 2) + (7 + 11)",
      "((7 + 8) + 11) - 2",
      "(11 - (2 - 8)) + 7",
      "8 - (2 - (7 + 11))",
      "8 + (11 + (7 - 2))",
      "8 - ((2 - 11) - 7)",
      "2 * (8 + (11 - 7))",
      "(11 + (8 - 2)) + 7",
      "11 - ((2 - 7) - 8)",
      "((7 - 2) + 11) + 8",
      "7 + (8 - (2 - 11))",
      "(11 - (7 - 8)) * 2",
      "((8 + 7) - 2) + 11",
      "(7 + 8) - (2 - 11)",
      "(11 + 7) + (8 - 2)",
      "2 * ((8 - 7) + 11)",
      "11 + ((7 + 8) - 2)",
      "8 - (2 - (11 + 7))",
      "(8 + 7) + (11 - 2)",
      "(7 + (8 - 2)) + 11",
      "8 + (7 - (2 - 11))",
      "(11 - 2) + (8 + 7)",
      "(8 - (7 - 11)) * 2",
      "7 + (11 + (8 - 2))",
      "(7 + 11) - (2 - 8)",
      "((11 + 8) - 7) * 2",
      "2 * (8 - (7 - 11))",
      "(11 + 8) - (2 - 7)",
      "11 - (2 - (7 + 8))",
      "((8 + 7) + 11) - 2",
      "((11 - 2) + 8) + 7",
      "((11 + 7) + 8) - 2",
      "((8 - 2) + 11) + 7",
      "11 - (2 - (8 + 7))",
      "(7 + (11 + 8)) - 2",
      "8 + ((7 - 2) + 11)",
      "((11 + 8) - 2) + 7",
      "(11 + 7) - (2 - 8)",
      "(8 + (11 + 7)) - 2",
      "(7 + (8 + 11)) - 2",
      "11 + ((8 - 2) + 7)",
      "7 + ((8 + 11) - 2)",
      "(7 - 11) * (2 - 8)",
      "((8 + 11) - 2) + 7",
      "(8 + 7) - (2 - 11)",
      "(8 + (11 - 7)) * 2",
      "(8 + (7 - 2)) + 11",
      "7 + ((11 - 2) + 8)",
      "((2 * 7) - 11) * 8",
      "8 + (7 + (11 - 2))",
      "(11 - 7) * (8 - 2)",
      "(8 + (11 - 2)) + 7",
      "(8 + 11) + (7 - 2)",
      "(11 - (2 - 7)) + 8",
      "2 * (11 + (8 - 7))",
      "7 - ((2 - 8) - 11)",
      "8 + ((11 - 2) + 7)",
      "2 * (11 - (7 - 8))",
      "11 + (8 + (7 - 2))",
      "(11 + 8) + (7 - 2)",
      "(2 - 8) * (7 - 11)",
      "8 - ((2 - 7) - 11)",
      "11 + ((7 - 2) + 8)",
      "((8 + 11) - 7) * 2",
      "(8 - 2) + (11 + 7)"
    ]
  },
  "2 7 8 12": {
    "cards": "2 7 8 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(12 / (8 - 7)) * 2",
      "(12 - (7 + 2)) * 8",
      "(12 * 2) * (8 - 7)",
      "(2 / (8 - 7)) * 12",
      "12 * (2 * (8 - 7))",
      "((8 - 7) * 12) * 2",
      "(8 - 7) * (12 * 2)",
      "(12 * (8 - 7)) * 2",
      "12 * (2 / (8 - 7))",
      "12 / ((8 - 7) / 2)",
      "2 * (12 / (8 - 7))",
      "2 / ((8 - 7) / 12)",
      "((8 - 7) * 2) * 12",
      "8 * ((12 - 7) - 2)",
      "(12 - (2 + 7)) * 8",
      "(2 * 12) * (8 - 7)",
      "((12 - 2) - 7) * 8",
      "((12 - 7) - 2) * 8",
      "(2 * 12) / (8 - 7)",
      "12 * ((8 - 7) * 2)",
      "(8 - 7) * (2 * 12)",
      "8 * (12 - (2 + 7))",
      "(12 * 2) / (8 - 7)",
      "(2 * (8 - 7)) * 12",
      "2 * ((8 - 7) * 12)",
      "8 * (12 - (7 + 2))",
      "8 * ((12 - 2) - 7)",
      "2 * (12 * (8 - 7))"
    ]
  },
  "2 7 8 13": {
    "cards": "2 7 8 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "((8 / 2) + 7) + 13",
      "2 * ((13 + 7) - 8)",
      "7 + (13 + (8 / 2))",
      "(13 - 7) * (8 / 2)",
      "(7 + (8 / 2)) + 13",
      "2 * (13 - (8 - 7))",
      "8 * ((13 - 7) / 2)",
      "(8 / 2) + (13 + 7)",
      "(13 - (8 - 7)) * 2",
      "13 + (7 + (8 / 2))",
      "7 + ((8 / 2) + 13)",
      "(7 - (8 - 13)) * 2",
      "2 * (7 + (13 - 8))",
      "((13 + 7) - 8) * 2",
      "2 * (13 + (7 - 8))",
      "(7 + 13) + (8 / 2)",
      "8 / (2 / (13 - 7))",
      "((7 + 13) - 8) * 2",
      "2 * (7 - (8 - 13))",
      "(13 + 7) + (8 / 2)",
      "(7 + (13 - 8)) * 2",
      "(8 / 2) + (7 + 13)",
      "(13 + (8 / 2)) + 7",
      "(8 / 2) * (13 - 7)",
      "((13 - 8) + 7) * 2",
      "((13 - 7) / 2) * 8",
      "2 * ((7 - 8) + 13)",
      "((13 - 7) * 8) / 2",
      "2 * ((13 - 8) + 7)",
      "(8 * (13 - 7)) / 2",
      "2 * ((7 + 13) - 8)",
      "13 + ((8 / 2) + 7)",
      "(13 - 7) / (2 / 8)",
      "((7 - 8) + 13) * 2",
      "(13 + (7 - 8)) * 2",
      "((8 / 2) + 13) + 7"
    ]
  },
  "2 7 9 9": {
    "cards": "2 7 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 9 10": {
    "cards": "2 7 9 10",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(9 - 2) + (10 + 7)",
      "((9 + 10) + 7) - 2",
      "((9 + 7) - 2) + 10",
      "((10 + 9) - 2) + 7",
      "(10 + (7 + 9)) - 2",
      "7 - ((2 - 10) - 9)",
      "9 - ((2 - 10) - 7)",
      "7 - (2 - (10 + 9))",
      "(10 + (9 - 2)) + 7",
      "2 * ((9 - 7) + 10)",
      "((7 - 2) + 9) + 10",
      "(10 - 2) + (7 + 9)",
      "10 - (2 - (9 + 7))",
      "(7 + (10 + 9)) - 2",
      "9 + ((10 + 7) - 2)",
      "((9 - 2) + 10) + 7",
      "(9 + (10 + 7)) - 2",
      "9 + (7 + (10 - 2))",
      "(10 + 7) - (2 - 9)",
      "7 + (10 + (9 - 2))",
      "(7 + 9) + (10 - 2)",
      "7 + (9 + (10 - 2))",
      "(7 + (10 - 2)) + 9",
      "10 - ((2 - 9) - 7)",
      "(9 + (10 - 7)) * 2",
      "((10 + 7) - 2) + 9",
      "2 * (9 + (10 - 7))",
      "((9 - 7) + 10) * 2",
      "(9 - (7 - 10)) * 2",
      "7 + (10 - (2 - 9))",
      "10 + (7 + (9 - 2))",
      "10 + (9 + (7 - 2))",
      "((10 - 7) + 9) * 2",
      "10 + (7 - (2 - 9))",
      "2 * (10 + (9 - 7))",
      "2 * (9 - (7 - 10))",
      "9 - (2 - (7 + 10))",
      "9 + (10 + (7 - 2))",
      "(7 + 10) + (9 - 2)",
      "(10 - (7 - 9)) * 2",
      "7 + ((10 + 9) - 2)",
      "(7 + (9 + 10)) - 2",
      "(7 + 9) - (2 - 10)",
      "(7 + 10) - (2 - 9)",
      "10 - ((2 - 7) - 9)",
      "(10 + 9) - (2 - 7)",
      "((7 + 9) - 2) + 10",
      "2 * ((10 - 7) + 9)",
      "9 + ((10 - 2) + 7)",
      "(9 - (2 - 7)) + 10",
      "10 - (2 - (7 + 9))",
      "((10 - 2) + 9) + 7",
      "10 + ((9 - 2) + 7)",
      "((7 + 10) - 2) + 9",
      "((10 + 9) - 7) * 2",
      "(9 - (2 - 10)) + 7",
      "9 - (2 - (10 + 7))",
      "(10 - 2) + (9 + 7)",
      "10 + ((7 + 9) - 2)",
      "(9 - 7) * (10 + 2)",
      "(7 - (2 - 9)) + 10",
      "(10 + 2) * (9 - 7)",
      "((7 + 10) + 9) - 2",
      "(9 + 10) - (2 - 7)",
      "(9 + (10 - 2)) + 7",
      "(10 - (2 - 7)) + 9",
      "10 + (9 - (2 - 7))",
      "7 + ((10 - 2) + 9)",
      "7 + ((9 + 10) - 2)",
      "((9 + 10) - 7) * 2",
      "9 + ((7 + 10) - 2)",
      "(10 - (2 - 9)) + 7",
      "(9 + 10) + (7 - 2)",
      "2 * ((9 + 10) - 7)",
      "(10 + (9 - 7)) * 2",
      "7 - (2 - (9 + 10))",
      "((9 + 7) + 10) - 2",
      "(9 - 7) * (2 + 10)",
      "9 - ((2 - 7) - 10)",
      "7 - ((2 - 9) - 10)",
      "(10 + (9 + 7)) - 2",
      "(10 + (7 - 2)) + 9",
      "9 + (7 - (2 - 10))",
      "(10 + 7) + (9 - 2)",
      "7 + ((9 - 2) + 10)",
      "10 + ((7 - 2) + 9)",
      "(7 - 2) + (10 + 9)",
      "(7 - 2) + (9 + 10)",
      "((9 + 10) - 2) + 7",
      "(9 + 7) - (2 - 10)",
      "(9 + (7 + 10)) - 2",
      "9 + ((7 - 2) + 10)",
      "(9 + 7) + (10 - 2)",
      "2 * (10 - (7 - 9))",
      "(10 + 9) + (7 - 2)",
      "((10 + 9) + 7) - 2",
      "(2 + 10) * (9 - 7)",
      "9 + (10 - (2 - 7))",
      "7 + (9 - (2 - 10))",
      "((7 - 2) + 10) + 9",
      "(9 + (7 - 2)) + 10",
      "((10 + 7) + 9) - 2",
      "((10 - 2) + 7) + 9",
      "(7 + (9 - 2)) + 10",
      "2 * ((10 + 9) - 7)",
      "(9 - 2) + (7 + 10)",
      "((7 + 9) + 10) - 2",
      "10 + ((9 + 7) - 2)",
      "(7 - (2 - 10)) + 9",
      "((9 - 2) + 7) + 10"
    ]
  },
  "2 7 9 11": {
    "cards": "2 7 9 11",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((11 * 2) - 7) + 9",
      "(11 * (9 - 7)) + 2",
      "9 - (7 - (2 * 11))",
      "9 + ((2 * 11) - 7)",
      "((9 - 7) * 11) + 2",
      "(9 + (2 * 11)) - 7",
      "(11 * 2) - (7 - 9)",
      "(9 + (11 * 2)) - 7",
      "((2 * 11) + 9) - 7",
      "2 + (11 * (9 - 7))",
      "(11 * 2) + (9 - 7)",
      "2 - ((7 - 9) * 11)",
      "((2 * 11) - 7) + 9",
      "(9 - 7) + (2 * 11)",
      "2 - (11 * (7 - 9))",
      "(2 * 11) - (7 - 9)",
      "9 + ((11 * 2) - 7)",
      "9 - (7 - (11 * 2))",
      "(9 - 7) + (11 * 2)",
      "2 + ((9 - 7) * 11)",
      "(2 * 11) + (9 - 7)",
      "((11 * 2) + 9) - 7"
    ]
  },
  "2 7 9 12": {
    "cards": "2 7 9 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 9 13": {
    "cards": "2 7 9 13",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "((2 * 13) + 7) - 9",
      "((9 * 2) - 7) + 13",
      "(2 * 9) - (7 - 13)",
      "(7 - 9) + (2 * 13)",
      "((2 * 9) + 13) - 7",
      "7 + ((2 * 13) - 9)",
      "(7 - 9) + (13 * 2)",
      "7 + ((13 * 2) - 9)",
      "7 - (9 - (2 * 13))",
      "(13 * (9 - 7)) - 2",
      "(7 + (2 * 13)) - 9",
      "(13 - 7) + (2 * 9)",
      "7 - (9 - (13 * 2))",
      "13 - (7 - (9 * 2))",
      "(2 * 13) + (7 - 9)",
      "((2 * 9) - 7) + 13",
      "(2 * 13) - (9 - 7)",
      "13 + ((9 * 2) - 7)",
      "((2 * 13) - 9) + 7",
      "(9 * 2) + (13 - 7)",
      "13 - (7 - (2 * 9))",
      "((13 * 2) - 9) + 7",
      "((9 * 2) + 13) - 7",
      "13 + ((2 * 9) - 7)",
      "(13 + (9 * 2)) - 7",
      "(7 + (13 * 2)) - 9",
      "(13 * 2) + (7 - 9)",
      "(13 + (2 * 9)) - 7",
      "(13 - 7) + (9 * 2)",
      "(9 * 2) - (7 - 13)",
      "((13 * 2) + 7) - 9",
      "((9 - 7) * 13) - 2",
      "(2 * 9) + (13 - 7)",
      "(13 * 2) - (9 - 7)"
    ]
  },
  "2 7 10 10": {
    "cards": "2 7 10 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(2 * (7 + 10)) - 10",
      "(10 - 2) * (10 - 7)",
      "(10 - 7) * (10 - 2)",
      "((7 + 10) * 2) - 10",
      "(2 - 10) * (7 - 10)",
      "(2 * (10 + 7)) - 10",
      "((10 + 7) * 2) - 10",
      "(7 - 10) * (2 - 10)"
    ]
  },
  "2 7 10 11": {
    "cards": "2 7 10 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(7 * (10 / 2)) - 11",
      "(10 * 2) - (7 - 11)",
      "((10 * 2) + 11) - 7",
      "11 - (7 - (2 * 10))",
      "((7 / 2) * 10) - 11",
      "(10 * (7 / 2)) - 11",
      "(7 / (2 / 10)) - 11",
      "((10 * 7) / 2) - 11",
      "((10 * 2) - 7) + 11",
      "(10 / (2 / 7)) - 11",
      "((2 * 10) - 7) + 11",
      "11 + ((10 * 2) - 7)",
      "(11 - 7) + (2 * 10)",
      "11 - (7 - (10 * 2))",
      "(11 - 7) + (10 * 2)",
      "(11 + (2 * 10)) - 7",
      "(2 * 10) + (11 - 7)",
      "((7 * 10) / 2) - 11",
      "(2 * 10) - (7 - 11)",
      "(11 + (10 * 2)) - 7",
      "((10 / 2) * 7) - 11",
      "(10 * 2) + (11 - 7)",
      "((2 * 10) + 11) - 7",
      "11 + ((2 * 10) - 7)"
    ]
  },
  "2 7 10 12": {
    "cards": "2 7 10 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(12 + 7) + (10 / 2)",
      "12 * (10 / (7 - 2))",
      "(12 + (10 / 2)) + 7",
      "12 + (7 + (10 / 2))",
      "(7 + 12) + (10 / 2)",
      "(10 / (7 - 2)) * 12",
      "10 / ((7 - 2) / 12)",
      "12 / ((7 - 2) / 10)",
      "(10 * 12) / (7 - 2)",
      "(10 / 2) + (7 + 12)",
      "7 + (12 + (10 / 2))",
      "((10 / 2) + 12) + 7",
      "(7 + (10 / 2)) + 12",
      "10 * (12 / (7 - 2))",
      "((10 / 2) + 7) + 12",
      "(10 / 2) + (12 + 7)",
      "(7 - (10 / 2)) * 12",
      "(12 / (7 - 2)) * 10",
      "12 + ((10 / 2) + 7)",
      "12 * (7 - (10 / 2))",
      "(12 * 10) / (7 - 2)",
      "7 + ((10 / 2) + 12)"
    ]
  },
  "2 7 10 13": {
    "cards": "2 7 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 11 11": {
    "cards": "2 7 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 11 12": {
    "cards": "2 7 11 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(12 / 2) + (11 + 7)",
      "(12 * (11 - 7)) / 2",
      "(2 * (11 + 7)) - 12",
      "(11 - 7) * (12 / 2)",
      "(2 * (7 + 11)) - 12",
      "(7 + (12 / 2)) + 11",
      "7 + ((12 / 2) + 11)",
      "(7 + 11) + (12 / 2)",
      "12 * (11 - (2 + 7))",
      "(11 + 7) + (12 / 2)",
      "(11 - (7 + 2)) * 12",
      "((12 / 2) + 11) + 7",
      "((11 - 7) - 2) * 12",
      "(12 / 2) * (11 - 7)",
      "((11 - 7) * 12) / 2",
      "12 * (11 - (7 + 2))",
      "((11 - 7) / 2) * 12",
      "(11 - 7) / (2 / 12)",
      "((11 - 2) - 7) * 12",
      "12 / (2 / (11 - 7))",
      "(11 + (12 / 2)) + 7",
      "11 + ((12 / 2) + 7)",
      "7 + (11 + (12 / 2))",
      "12 * ((11 - 7) / 2)",
      "((11 + 7) * 2) - 12",
      "(11 - (2 + 7)) * 12",
      "11 + (7 + (12 / 2))",
      "12 * ((11 - 7) - 2)",
      "((7 + 11) * 2) - 12",
      "((12 / 2) + 7) + 11",
      "12 * ((11 - 2) - 7)",
      "(12 / 2) + (7 + 11)"
    ]
  },
  "2 7 11 13": {
    "cards": "2 7 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 7 12 12": {
    "cards": "2 7 12 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "12 / (7 / (2 + 12))",
      "((12 + 2) / 7) * 12",
      "(12 + 2) * (12 / 7)",
      "12 / (7 / (12 + 2))",
      "(12 * (2 + 12)) / 7",
      "12 * ((2 + 12) / 7)",
      "((7 * 2) - 12) * 12",
      "(12 / 7) * (2 + 12)",
      "(12 * (12 + 2)) / 7",
      "((2 + 12) / 7) * 12",
      "12 * ((12 + 2) / 7)",
      "12 * ((7 * 2) - 12)",
      "12 * ((2 * 7) - 12)",
      "((12 + 2) * 12) / 7",
      "((2 + 12) * 12) / 7",
      "(12 + 2) / (7 / 12)",
      "((2 * 7) - 12) * 12",
      "(2 + 12) / (7 / 12)",
      "(12 / 7) * (12 + 2)",
      "(2 + 12) * (12 / 7)"
    ]
  },
  "2 7 12 13": {
    "cards": "2 7 12 13",
    "has_solution": "Y",
    "num_solutions": 7,
    "solutions": [
      "12 - ((7 - 13) * 2)",
      "12 - (2 * (7 - 13))",
      "12 + (2 * (13 - 7))",
      "12 + ((13 - 7) * 2)",
      "12 / (7 - (13 / 2))",
      "(2 * (13 - 7)) + 12",
      "((13 - 7) * 2) + 12"
    ]
  },
  "2 7 13 13": {
    "cards": "2 7 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 8 8 8": {
    "cards": "2 8 8 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((8 / 2) * 8) - 8",
      "((8 + 8) * 2) - 8",
      "((8 * 8) / 2) - 8",
      "((8 / 8) + 2) * 8",
      "(2 * (8 + 8)) - 8",
      "8 * ((8 / 8) + 2)",
      "(8 * (8 / 2)) - 8",
      "(8 / (2 / 8)) - 8",
      "8 * (2 + (8 / 8))",
      "(2 + (8 / 8)) * 8"
    ]
  },
  "2 8 8 9": {
    "cards": "2 8 8 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((9 + 2) - 8) * 8",
      "8 * ((2 + 9) - 8)",
      "8 * (9 + (2 - 8))",
      "8 * ((9 - 8) + 2)",
      "(2 + (9 - 8)) * 8",
      "8 * ((2 - 8) + 9)",
      "8 * (2 + (9 - 8))",
      "8 * ((9 + 2) - 8)",
      "8 * (2 - (8 - 9))",
      "8 * (9 - (8 - 2))",
      "(9 - (8 - 2)) * 8",
      "((2 - 8) + 9) * 8",
      "((2 + 9) - 8) * 8",
      "((9 - 8) + 2) * 8",
      "(2 - (8 - 9)) * 8",
      "(9 + (2 - 8)) * 8"
    ]
  },
  "2 8 8 10": {
    "cards": "2 8 8 10",
    "has_solution": "Y",
    "num_solutions": 47,
    "solutions": [
      "(8 + (8 + 10)) - 2",
      "8 + ((8 - 2) + 10)",
      "(10 - 2) + (8 + 8)",
      "8 + (10 + (8 - 2))",
      "8 + (8 - (2 - 10))",
      "(8 - 2) + (10 + 8)",
      "((10 - 2) + 8) + 8",
      "(8 + (10 - 2)) + 8",
      "((8 + 8) + 10) - 2",
      "8 + (10 - (2 - 8))",
      "((8 + 10) - 2) + 8",
      "(8 + 8) - (2 - 10)",
      "((8 + 10) + 8) - 2",
      "(10 + (8 + 8)) - 2",
      "10 + ((8 - 2) + 8)",
      "(8 + (10 + 8)) - 2",
      "10 + ((8 + 8) - 2)",
      "((8 + 8) - 2) + 10",
      "(8 - (2 - 8)) + 10",
      "8 - (2 - (8 + 10))",
      "10 - ((2 - 8) - 8)",
      "(10 + 8) + (8 - 2)",
      "(8 + 10) + (8 - 2)",
      "(8 + (8 - 2)) + 10",
      "(8 - (10 / 2)) * 8",
      "(8 + 10) - (2 - 8)",
      "8 + ((10 + 8) - 2)",
      "(8 - (2 - 10)) + 8",
      "((10 + 8) + 8) - 2",
      "8 + (8 + (10 - 2))",
      "(10 + (8 - 2)) + 8",
      "10 + (8 - (2 - 8))",
      "8 * (8 - (10 / 2))",
      "(8 - 2) + (8 + 10)",
      "((10 + 8) - 2) + 8",
      "(10 - (2 - 8)) + 8",
      "10 - (2 - (8 + 8))",
      "((8 - 2) + 8) + 10",
      "8 - (2 - (10 + 8))",
      "8 - ((2 - 10) - 8)",
      "((8 - 2) + 10) + 8",
      "8 + ((8 + 10) - 2)",
      "10 + (8 + (8 - 2))",
      "8 + ((10 - 2) + 8)",
      "(8 + 8) + (10 - 2)",
      "8 - ((2 - 8) - 10)",
      "(10 + 8) - (2 - 8)"
    ]
  },
  "2 8 8 11": {
    "cards": "2 8 8 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * ((8 / 8) + 11)",
      "2 * (11 + (8 / 8))",
      "(11 + (8 / 8)) * 2",
      "((8 / 8) + 11) * 2"
    ]
  },
  "2 8 8 12": {
    "cards": "2 8 8 12",
    "has_solution": "Y",
    "num_solutions": 154,
    "solutions": [
      "((2 * 8) / 8) * 12",
      "8 * (2 / (8 / 12))",
      "((8 / 8) * 2) * 12",
      "(2 * (8 / 8)) * 12",
      "(8 * 12) * (2 / 8)",
      "2 * ((8 / 8) * 12)",
      "(8 * 12) / (8 / 2)",
      "((12 * 2) * 8) / 8",
      "(2 * 12) + (8 - 8)",
      "(12 - 8) * (8 - 2)",
      "12 / ((8 / 2) / 8)",
      "(8 * (2 / 8)) * 12",
      "(8 / 8) * (12 * 2)",
      "((2 - 8) + 8) * 12",
      "(8 - 12) * (2 - 8)",
      "12 + ((8 / 2) + 8)",
      "12 * (2 / (8 / 8))",
      "12 * ((8 + 2) - 8)",
      "((8 * 12) / 8) * 2",
      "(8 - (8 - 2)) * 12",
      "12 * (2 + (8 - 8))",
      "12 * ((2 / 8) * 8)",
      "(12 * (2 * 8)) / 8",
      "((12 * 8) * 2) / 8",
      "(12 * 2) / (8 / 8)",
      "12 / ((8 / 8) / 2)",
      "(8 - (8 - 12)) * 2",
      "2 * ((12 * 8) / 8)",
      "2 * ((8 - 8) + 12)",
      "(2 / 8) * (8 * 12)",
      "(2 - (8 - 8)) * 12",
      "8 + ((2 * 12) - 8)",
      "(2 + (8 - 8)) * 12",
      "2 / ((8 / 8) / 12)",
      "12 * ((8 / 8) * 2)",
      "(12 * (8 * 2)) / 8",
      "12 * (8 - (8 - 2))",
      "((12 * 2) / 8) * 8",
      "8 * (12 * (2 / 8))",
      "((12 * 2) + 8) - 8",
      "(12 / (8 / 8)) * 2",
      "((8 / 2) + 12) + 8",
      "(12 * (2 / 8)) * 8",
      "(2 * 8) / (8 / 12)",
      "12 * ((2 * 8) / 8)",
      "2 * (12 * (8 / 8))",
      "((8 * 2) / 8) * 12",
      "((2 * 8) * 12) / 8",
      "(12 * 2) - (8 - 8)",
      "2 / ((8 / 12) / 8)",
      "(12 * 8) * (2 / 8)",
      "12 * ((2 - 8) + 8)",
      "8 * (2 * (12 / 8))",
      "8 / ((8 / 12) / 2)",
      "((8 / 8) * 12) * 2",
      "(2 * 12) / (8 / 8)",
      "(8 * (12 * 2)) / 8",
      "2 * ((12 + 8) - 8)",
      "((12 / 8) * 8) * 2",
      "((2 * 12) + 8) - 8",
      "(8 - 8) + (12 * 2)",
      "(2 - 8) * (8 - 12)",
      "(2 * (8 * 12)) / 8",
      "(2 * (12 / 8)) * 8",
      "(8 / 2) + (12 + 8)",
      "8 - (8 - (2 * 12))",
      "((8 / 2) + 8) + 12",
      "(12 + (8 - 8)) * 2",
      "((8 + 2) - 8) * 12",
      "2 * ((12 / 8) * 8)",
      "(8 + (2 * 12)) - 8",
      "12 * ((8 - 8) + 2)",
      "(8 * (12 / 8)) * 2",
      "8 + ((8 / 2) + 12)",
      "(8 + (12 - 8)) * 2",
      "2 * (8 / (8 / 12))",
      "8 / (8 / (2 * 12))",
      "12 * (2 * (8 / 8))",
      "8 - (8 - (12 * 2))",
      "(12 - (8 - 8)) * 2",
      "((12 + 8) - 8) * 2",
      "((2 * 12) * 8) / 8",
      "8 * ((2 / 8) * 12)",
      "12 / (8 / (2 * 8))",
      "(2 * (12 * 8)) / 8",
      "2 / (8 / (12 * 8))",
      "(2 / (8 / 8)) * 12",
      "(8 + (2 - 8)) * 12",
      "((12 - 8) + 8) * 2",
      "12 * (8 / (8 / 2))",
      "2 * (8 + (12 - 8))",
      "(8 / 2) + (8 + 12)",
      "((2 * 12) / 8) * 8",
      "((8 * 2) * 12) / 8",
      "(8 / (8 / 2)) * 12",
      "2 / (8 / (8 * 12))",
      "2 * (12 + (8 - 8))",
      "(8 * (2 * 12)) / 8",
      "((8 - 8) + 12) * 2",
      "((8 + 12) - 8) * 2",
      "8 / (8 / (12 * 2))",
      "8 * ((12 * 2) / 8)",
      "(12 * 8) / (8 / 2)",
      "((2 / 8) * 12) * 8",
      "12 * (8 + (2 - 8))",
      "2 * (8 * (12 / 8))",
      "(8 * 2) / (8 / 12)",
      "(8 + 12) + (8 / 2)",
      "(8 + (8 / 2)) + 12",
      "(12 * 2) + (8 - 8)",
      "(2 / (8 / 12)) * 8",
      "(8 - 2) * (12 - 8)",
      "(8 / 8) * (2 * 12)",
      "(12 / 8) * (8 * 2)",
      "((12 * 8) / 8) * 2",
      "12 * ((8 * 2) / 8)",
      "8 * ((2 * 12) / 8)",
      "12 * (2 - (8 - 8))",
      "8 * (12 / (8 / 2))",
      "((2 + 8) - 8) * 12",
      "((2 / 8) * 8) * 12",
      "(12 / (8 / 2)) * 8",
      "12 * ((2 + 8) - 8)",
      "2 * ((12 - 8) + 8)",
      "8 * ((12 / 8) * 2)",
      "((2 * 12) - 8) + 8",
      "((8 * 12) * 2) / 8",
      "(12 * (8 / 8)) * 2",
      "(8 / (8 / 12)) * 2",
      "(12 + (8 / 2)) + 8",
      "12 * (8 * (2 / 8))",
      "2 * ((8 * 12) / 8)",
      "(2 * 12) - (8 - 8)",
      "(12 + 8) + (8 / 2)",
      "(8 + (12 * 2)) - 8",
      "8 + ((12 * 2) - 8)",
      "(8 * 2) * (12 / 8)",
      "(12 / 8) * (2 * 8)",
      "(8 - 8) + (2 * 12)",
      "2 * (8 - (8 - 12))",
      "(2 * 12) * (8 / 8)",
      "((8 - 8) + 2) * 12",
      "((12 * 2) - 8) + 8",
      "2 * (12 - (8 - 8))",
      "12 / (8 / (8 * 2))",
      "2 * ((8 + 12) - 8)",
      "(12 * 2) * (8 / 8)",
      "(2 / 8) * (12 * 8)",
      "((12 / 8) * 2) * 8",
      "8 / ((8 / 2) / 12)",
      "12 + (8 + (8 / 2))",
      "2 * (12 / (8 / 8))",
      "8 + (12 + (8 / 2))",
      "(2 * 8) * (12 / 8)"
    ]
  },
  "2 8 8 13": {
    "cards": "2 8 8 13",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(13 - (2 + 8)) * 8",
      "((13 - 8) - 2) * 8",
      "(13 - (8 / 8)) * 2",
      "2 * (13 - (8 / 8))",
      "((8 * 2) - 13) * 8",
      "8 * ((13 - 8) - 2)",
      "8 * (13 - (8 + 2))",
      "8 * ((13 - 2) - 8)",
      "8 * ((2 * 8) - 13)",
      "(13 - (8 + 2)) * 8",
      "8 * ((8 * 2) - 13)",
      "8 * (13 - (2 + 8))",
      "((13 - 2) - 8) * 8",
      "((2 * 8) - 13) * 8"
    ]
  },
  "2 8 9 9": {
    "cards": "2 8 9 9",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "8 - (2 - (9 + 9))",
      "(9 + (9 + 8)) - 2",
      "9 + ((9 - 2) + 8)",
      "9 + ((8 + 9) - 2)",
      "8 + ((9 + 9) - 2)",
      "8 + (9 - (2 - 9))",
      "(8 + (9 - 2)) + 9",
      "(9 + 9) + (8 - 2)",
      "8 * ((9 / 9) + 2)",
      "((9 + 9) + 8) - 2",
      "(9 - 2) + (8 + 9)",
      "(9 + (8 + 9)) - 2",
      "(8 - 2) + (9 + 9)",
      "(8 + 9) - (2 - 9)",
      "9 + (9 + (8 - 2))",
      "(9 + (8 - 2)) + 9",
      "((9 - 2) + 8) + 9",
      "9 + ((8 - 2) + 9)",
      "9 + ((9 + 8) - 2)",
      "((9 + 9) - 2) + 8",
      "9 + (8 - (2 - 9))",
      "(9 - (2 - 9)) + 8",
      "(8 + (9 + 9)) - 2",
      "(9 + 8) + (9 - 2)",
      "((8 - 2) + 9) + 9",
      "(9 + (9 - 2)) + 8",
      "((9 / 9) + 2) * 8",
      "((9 + 8) + 9) - 2",
      "(9 + 8) - (2 - 9)",
      "((9 - 2) + 9) + 8",
      "9 + (8 + (9 - 2))",
      "9 + (9 - (2 - 8))",
      "((8 + 9) + 9) - 2",
      "8 - ((2 - 9) - 9)",
      "8 + (9 + (9 - 2))",
      "((8 + 9) - 2) + 9",
      "8 + ((9 - 2) + 9)",
      "((9 + 8) - 2) + 9",
      "9 - ((2 - 8) - 9)",
      "(9 + 9) - (2 - 8)",
      "(2 + (9 / 9)) * 8",
      "9 - (2 - (8 + 9))",
      "8 * (2 + (9 / 9))",
      "(9 - (2 - 8)) + 9",
      "9 - ((2 - 9) - 8)",
      "(8 - (2 - 9)) + 9",
      "9 - (2 - (9 + 8))",
      "(9 - 2) + (9 + 8)",
      "(8 + 9) + (9 - 2)"
    ]
  },
  "2 8 9 10": {
    "cards": "2 8 9 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "8 * (2 + (10 - 9))",
      "(10 + (2 - 9)) * 8",
      "(10 - (9 - 2)) * 8",
      "8 * (2 - (9 - 10))",
      "((9 + 8) * 2) - 10",
      "8 * ((10 - 9) + 2)",
      "(2 - (9 - 10)) * 8",
      "8 * ((2 - 9) + 10)",
      "((2 + 10) - 9) * 8",
      "8 * ((2 + 10) - 9)",
      "8 * (10 - (9 - 2))",
      "((8 + 9) * 2) - 10",
      "8 * (10 + (2 - 9))",
      "(2 + (10 - 9)) * 8",
      "((10 - 9) + 2) * 8",
      "(2 * (8 + 9)) - 10",
      "8 * ((10 + 2) - 9)",
      "((10 + 2) - 9) * 8",
      "((2 - 9) + 10) * 8",
      "(2 * (9 + 8)) - 10"
    ]
  },
  "2 8 9 11": {
    "cards": "2 8 9 11",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(11 + 9) + (8 / 2)",
      "2 * (11 + (9 - 8))",
      "(8 / 2) + (11 + 9)",
      "2 * ((11 - 8) + 9)",
      "2 * ((9 + 11) - 8)",
      "((9 + 11) - 8) * 2",
      "2 * ((11 + 9) - 8)",
      "2 * ((9 - 8) + 11)",
      "2 * (9 + (11 - 8))",
      "(11 + (9 - 8)) * 2",
      "((11 - 8) + 9) * 2",
      "2 * (9 - (8 - 11))",
      "9 + ((8 / 2) + 11)",
      "((8 / 2) + 11) + 9",
      "(11 + (8 / 2)) + 9",
      "((9 - 8) + 11) * 2",
      "((8 / 2) + 9) + 11",
      "11 + (9 + (8 / 2))",
      "9 + (11 + (8 / 2))",
      "(11 - (8 - 9)) * 2",
      "(9 + 11) + (8 / 2)",
      "(9 + (11 - 8)) * 2",
      "((11 + 9) - 8) * 2",
      "(9 - (8 - 11)) * 2",
      "11 + ((8 / 2) + 9)",
      "(9 + (8 / 2)) + 11",
      "2 * (11 - (8 - 9))",
      "(8 / 2) + (9 + 11)"
    ]
  },
  "2 8 9 12": {
    "cards": "2 8 9 12",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "2 * (12 * (9 - 8))",
      "(8 / (2 / 9)) - 12",
      "(9 / (2 / 8)) - 12",
      "(9 * (8 / 2)) - 12",
      "2 * ((9 - 8) * 12)",
      "((9 / 2) * 8) - 12",
      "((9 * 8) / 2) - 12",
      "(9 - 8) * (2 * 12)",
      "(12 * 2) / (9 - 8)",
      "(12 / (9 - 8)) * 2",
      "(9 - 8) * (12 * 2)",
      "((9 - 8) * 2) * 12",
      "(2 + (8 / 12)) * 9",
      "8 * (9 - (12 / 2))",
      "(2 * 12) / (9 - 8)",
      "(2 * 12) * (9 - 8)",
      "((8 / 2) * 9) - 12",
      "9 * ((8 / 12) + 2)",
      "(12 * 2) * (9 - 8)",
      "12 * ((9 - 8) * 2)",
      "12 * (2 / (9 - 8))",
      "(2 / (9 - 8)) * 12",
      "(2 * (9 - 8)) * 12",
      "((9 - 8) * 12) * 2",
      "12 / ((9 - 8) / 2)",
      "(8 * (9 / 2)) - 12",
      "(9 - (12 / 2)) * 8",
      "9 * (2 + (8 / 12))",
      "2 * (12 / (9 - 8))",
      "12 * (2 * (9 - 8))",
      "(12 * (9 - 8)) * 2",
      "2 / ((9 - 8) / 12)",
      "((8 / 12) + 2) * 9",
      "((8 * 9) / 2) - 12"
    ]
  },
  "2 8 9 13": {
    "cards": "2 8 9 13",
    "has_solution": "Y",
    "num_solutions": 21,
    "solutions": [
      "(8 - 2) * (13 - 9)",
      "((8 + 13) - 9) * 2",
      "((13 - 9) + 8) * 2",
      "2 * ((13 + 8) - 9)",
      "2 * ((8 + 13) - 9)",
      "2 * (8 - (9 - 13))",
      "(8 + (13 - 9)) * 2",
      "((13 + 8) - 9) * 2",
      "2 * ((13 - 9) + 8)",
      "2 * (8 + (13 - 9))",
      "((8 - 9) + 13) * 2",
      "(9 - 13) * (2 - 8)",
      "9 / (2 - (13 / 8))",
      "(13 + (8 - 9)) * 2",
      "(8 - (9 - 13)) * 2",
      "2 * (13 + (8 - 9))",
      "2 * ((8 - 9) + 13)",
      "(13 - 9) * (8 - 2)",
      "(13 - (9 - 8)) * 2",
      "(2 - 8) * (9 - 13)",
      "2 * (13 - (9 - 8))"
    ]
  },
  "2 8 10 10": {
    "cards": "2 8 10 10",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(10 - 8) * (2 + 10)",
      "2 * (10 - (8 - 10))",
      "8 * (2 + (10 / 10))",
      "2 * (10 + (10 - 8))",
      "(10 + 10) + (8 / 2)",
      "10 + ((8 / 2) + 10)",
      "(10 - 8) * (10 + 2)",
      "((10 - 8) + 10) * 2",
      "2 * ((10 - 8) + 10)",
      "((10 / 10) + 2) * 8",
      "8 * ((10 / 10) + 2)",
      "(10 - (8 - 10)) * 2",
      "(8 / 2) + (10 + 10)",
      "2 * ((10 + 10) - 8)",
      "10 + (10 + (8 / 2))",
      "(2 + (10 / 10)) * 8",
      "((8 / 2) + 10) + 10",
      "(2 + 10) * (10 - 8)",
      "(10 + (10 - 8)) * 2",
      "(10 + 2) * (10 - 8)",
      "(10 + (8 / 2)) + 10",
      "((10 + 10) - 8) * 2"
    ]
  },
  "2 8 10 11": {
    "cards": "2 8 10 11",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "((10 - 8) * 11) + 2",
      "(2 - 10) * (8 - 11)",
      "10 - (8 - (2 * 11))",
      "(10 / 2) + (8 + 11)",
      "2 - ((8 - 10) * 11)",
      "8 * ((11 + 2) - 10)",
      "2 + (11 * (10 - 8))",
      "(10 / 2) + (11 + 8)",
      "(10 - 8) + (11 * 2)",
      "((2 * 11) + 10) - 8",
      "(2 - (10 - 11)) * 8",
      "10 + ((11 * 2) - 8)",
      "(11 - 8) * (10 - 2)",
      "(10 + (2 * 11)) - 8",
      "8 * ((11 - 10) + 2)",
      "(11 * 2) - (8 - 10)",
      "8 * ((2 - 10) + 11)",
      "((11 - 10) + 2) * 8",
      "(2 * 11) - (8 - 10)",
      "(10 - 2) * (11 - 8)",
      "(10 + (11 * 2)) - 8",
      "10 - (8 - (11 * 2))",
      "(10 - 8) + (2 * 11)",
      "(11 * (10 - 8)) + 2",
      "(11 - (10 - 2)) * 8",
      "8 * (11 - (10 - 2))",
      "2 - (11 * (8 - 10))",
      "(11 * 2) + (10 - 8)",
      "8 * (11 + (2 - 10))",
      "(8 - 11) * (2 - 10)",
      "(11 + 8) + (10 / 2)",
      "8 * (2 - (10 - 11))",
      "((11 * 2) + 10) - 8",
      "(2 + (11 - 10)) * 8",
      "((2 - 10) + 11) * 8",
      "8 + ((10 / 2) + 11)",
      "((10 / 2) + 8) + 11",
      "2 + ((10 - 8) * 11)",
      "((11 * 2) - 8) + 10",
      "((10 / 2) + 11) + 8",
      "11 + (8 + (10 / 2))",
      "11 + ((10 / 2) + 8)",
      "(8 + (10 / 2)) + 11",
      "10 + ((2 * 11) - 8)",
      "8 * ((2 + 11) - 10)",
      "8 * (2 + (11 - 10))",
      "(2 * 11) + (10 - 8)",
      "(8 + 11) + (10 / 2)",
      "(11 + (10 / 2)) + 8",
      "(11 + (2 - 10)) * 8",
      "8 + (11 + (10 / 2))",
      "((2 + 11) - 10) * 8",
      "((11 + 2) - 10) * 8",
      "((2 * 11) - 8) + 10"
    ]
  },
  "2 8 10 12": {
    "cards": "2 8 10 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "12 + ((10 * 2) - 8)",
      "((2 * 10) - 8) + 12",
      "10 + ((12 / 2) + 8)",
      "(12 / 2) + (10 + 8)",
      "10 + (8 + (12 / 2))",
      "(8 + (12 / 2)) + 10",
      "(12 - 8) + (10 * 2)",
      "(10 * 2) - (8 - 12)",
      "((12 / 2) + 10) + 8",
      "(10 * 2) + (12 - 8)",
      "12 - (8 - (2 * 10))",
      "12 - (8 - (10 * 2))",
      "(10 + 8) + (12 / 2)",
      "((12 / 2) + 8) + 10",
      "8 + (10 + (12 / 2))",
      "((10 * 2) + 12) - 8",
      "(8 + 10) + (12 / 2)",
      "((10 + 8) * 2) - 12",
      "(2 * 10) - (8 - 12)",
      "((8 + 10) * 2) - 12",
      "(12 - 8) + (2 * 10)",
      "(2 * (10 + 8)) - 12",
      "8 + ((12 / 2) + 10)",
      "((10 * 2) - 8) + 12",
      "(2 * (8 + 10)) - 12",
      "12 + ((2 * 10) - 8)",
      "(12 + (2 * 10)) - 8",
      "(10 + (12 / 2)) + 8",
      "(2 * 10) + (12 - 8)",
      "(12 / 2) + (8 + 10)",
      "(12 + (10 * 2)) - 8",
      "((2 * 10) + 12) - 8"
    ]
  },
  "2 8 10 13": {
    "cards": "2 8 10 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(13 * (10 - 8)) - 2",
      "(13 * 2) + (8 - 10)",
      "8 - (10 - (13 * 2))",
      "(8 - 10) + (13 * 2)",
      "(8 + (2 * 13)) - 10",
      "((2 * 13) + 8) - 10",
      "8 - (10 - (2 * 13))",
      "((10 - 8) * 13) - 2",
      "((2 * 13) - 10) + 8",
      "(8 + (13 * 2)) - 10",
      "8 + ((13 * 2) - 10)",
      "(13 * 2) - (10 - 8)",
      "(2 * 13) + (8 - 10)",
      "((13 * 2) - 10) + 8",
      "(2 * 13) - (10 - 8)",
      "(8 - 10) + (2 * 13)",
      "8 + ((2 * 13) - 10)",
      "((13 * 2) + 8) - 10"
    ]
  },
  "2 8 11 11": {
    "cards": "2 8 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "8 * ((11 / 11) + 2)",
      "((11 / 11) + 2) * 8",
      "8 * (2 + (11 / 11))",
      "(2 + (11 / 11)) * 8"
    ]
  },
  "2 8 11 12": {
    "cards": "2 8 11 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(2 + (12 - 11)) * 8",
      "(12 - (11 - 2)) * 8",
      "8 * ((2 - 11) + 12)",
      "8 * (12 - (11 - 2))",
      "8 * (12 + (2 - 11))",
      "8 * (2 + (12 - 11))",
      "8 * (2 - (11 - 12))",
      "(2 - (11 - 12)) * 8",
      "((2 + 12) - 11) * 8",
      "((12 + 2) - 11) * 8",
      "8 * ((12 + 2) - 11)",
      "(12 + (2 - 11)) * 8",
      "8 * ((2 + 12) - 11)",
      "8 * ((12 - 11) + 2)",
      "((12 - 11) + 2) * 8",
      "((2 - 11) + 12) * 8"
    ]
  },
  "2 8 11 13": {
    "cards": "2 8 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 8 12 12": {
    "cards": "2 8 12 12",
    "has_solution": "Y",
    "num_solutions": 27,
    "solutions": [
      "(8 - (12 / 2)) * 12",
      "(12 - 8) * (12 / 2)",
      "12 / (2 / (12 - 8))",
      "12 * (12 - (8 + 2))",
      "12 / ((8 - 2) / 12)",
      "(12 - (2 + 8)) * 12",
      "12 / (2 - (12 / 8))",
      "((12 - 2) - 8) * 12",
      "(2 + (12 / 12)) * 8",
      "12 * (12 / (8 - 2))",
      "8 * ((12 / 12) + 2)",
      "(12 - (8 + 2)) * 12",
      "(12 / 2) * (12 - 8)",
      "12 * ((12 - 8) / 2)",
      "(12 * (12 - 8)) / 2",
      "((12 - 8) * 12) / 2",
      "12 * (8 - (12 / 2))",
      "12 * ((12 - 2) - 8)",
      "12 * (12 - (2 + 8))",
      "12 * ((12 - 8) - 2)",
      "(12 - 8) / (2 / 12)",
      "(12 / (8 - 2)) * 12",
      "((12 - 8) / 2) * 12",
      "8 * (2 + (12 / 12))",
      "(12 * 12) / (8 - 2)",
      "((12 - 8) - 2) * 12",
      "((12 / 12) + 2) * 8"
    ]
  },
  "2 8 12 13": {
    "cards": "2 8 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * (2 + (13 - 12))",
      "((13 + 2) - 12) * 8",
      "8 * ((2 + 13) - 12)",
      "((2 - 12) + 13) * 8",
      "8 * (13 - (12 - 2))",
      "8 * ((13 + 2) - 12)",
      "((2 + 13) - 12) * 8",
      "8 * ((13 - 12) + 2)",
      "8 * ((2 - 12) + 13)",
      "8 * (2 - (12 - 13))",
      "8 * (13 + (2 - 12))",
      "(13 + (2 - 12)) * 8",
      "(2 + (13 - 12)) * 8",
      "(13 - (12 - 2)) * 8",
      "((13 - 12) + 2) * 8",
      "(2 - (12 - 13)) * 8"
    ]
  },
  "2 8 13 13": {
    "cards": "2 8 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "8 * ((13 / 13) + 2)",
      "(2 + (13 / 13)) * 8",
      "((13 / 13) + 2) * 8",
      "8 * (2 + (13 / 13))"
    ]
  },
  "2 9 9 9": {
    "cards": "2 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 9 9 10": {
    "cards": "2 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 9 9 11": {
    "cards": "2 9 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(11 + (9 / 9)) * 2",
      "2 * ((9 / 9) + 11)",
      "((9 / 9) + 11) * 2",
      "2 * (11 + (9 / 9))"
    ]
  },
  "2 9 9 12": {
    "cards": "2 9 9 12",
    "has_solution": "Y",
    "num_solutions": 146,
    "solutions": [
      "((9 * 12) / 9) * 2",
      "(2 + (9 - 9)) * 12",
      "((2 + 9) - 9) * 12",
      "(12 * 2) + (9 - 9)",
      "(9 - 9) + (12 * 2)",
      "(2 - (9 - 9)) * 12",
      "2 / (9 / (9 * 12))",
      "2 * ((9 * 12) / 9)",
      "2 * (9 * (12 / 9))",
      "2 * ((9 + 12) - 9)",
      "12 / ((9 / 9) / 2)",
      "12 * ((2 / 9) * 9)",
      "(2 / 9) * (9 * 12)",
      "(9 * (2 * 12)) / 9",
      "(2 * (12 * 9)) / 9",
      "(9 / 9) * (2 * 12)",
      "(12 / (9 / 9)) * 2",
      "((9 + 2) - 9) * 12",
      "(2 * (12 / 9)) * 9",
      "(2 * 9) * (12 / 9)",
      "2 * (12 + (9 - 9))",
      "12 * (9 / (9 / 2))",
      "(9 + (12 * 2)) - 9",
      "(9 + (12 / 2)) + 9",
      "(12 * 2) / (9 / 9)",
      "(9 / (9 / 2)) * 12",
      "((9 * 2) / 9) * 12",
      "2 * (9 - (9 - 12))",
      "2 * ((9 - 9) + 12)",
      "9 + ((12 * 2) - 9)",
      "((9 + 9) * 2) - 12",
      "2 * ((12 + 9) - 9)",
      "12 / (9 / (2 * 9))",
      "(12 + (9 - 9)) * 2",
      "9 / ((9 / 2) / 12)",
      "((9 * 12) * 2) / 9",
      "(12 * (2 / 9)) * 9",
      "(2 * 12) - (9 - 9)",
      "((2 * 9) * 12) / 9",
      "(12 / (9 / 2)) * 9",
      "12 / ((9 / 2) / 9)",
      "((12 / 9) * 9) * 2",
      "(9 + (2 - 9)) * 12",
      "(9 / 9) * (12 * 2)",
      "(9 * (12 / 9)) * 2",
      "9 * (2 / (9 / 12))",
      "((9 / 9) * 12) * 2",
      "((9 + 12) - 9) * 2",
      "2 / ((9 / 9) / 12)",
      "((2 * 12) - 9) + 9",
      "((2 - 9) + 9) * 12",
      "((12 * 9) / 9) * 2",
      "((9 - 9) + 2) * 12",
      "(9 - (9 - 12)) * 2",
      "12 * (2 / (9 / 9))",
      "(12 * 2) - (9 - 9)",
      "(9 * 2) / (9 / 12)",
      "(9 + (12 - 9)) * 2",
      "((9 / 9) * 2) * 12",
      "(9 - 9) + (2 * 12)",
      "2 * ((12 / 9) * 9)",
      "((2 * 12) * 9) / 9",
      "2 * (12 * (9 / 9))",
      "((12 * 2) * 9) / 9",
      "2 * (12 / (9 / 9))",
      "12 * (9 - (9 - 2))",
      "(2 / 9) * (12 * 9)",
      "9 * ((2 / 9) * 12)",
      "12 * (2 - (9 - 9))",
      "(2 * 12) + (9 - 9)",
      "2 * (9 + (12 - 9))",
      "((2 * 9) / 9) * 12",
      "((12 * 2) / 9) * 9",
      "2 * ((9 / 9) * 12)",
      "9 * (12 / (9 / 2))",
      "12 * (9 * (2 / 9))",
      "((12 + 9) - 9) * 2",
      "9 * (2 * (12 / 9))",
      "((12 / 2) + 9) + 9",
      "((9 * 2) * 12) / 9",
      "(9 + (2 * 12)) - 9",
      "(12 / 9) * (2 * 9)",
      "9 + ((2 * 12) - 9)",
      "12 * (9 + (2 - 9))",
      "(9 * 2) * (12 / 9)",
      "(9 / (9 / 12)) * 2",
      "(12 / 2) + (9 + 9)",
      "((2 * 12) / 9) * 9",
      "2 * ((12 * 9) / 9)",
      "2 / ((9 / 12) / 9)",
      "9 * ((12 * 2) / 9)",
      "(9 * 12) * (2 / 9)",
      "((12 / 9) * 2) * 9",
      "9 - (9 - (12 * 2))",
      "2 * (12 - (9 - 9))",
      "9 / (9 / (2 * 12))",
      "(9 + 9) + (12 / 2)",
      "12 * ((2 - 9) + 9)",
      "9 / (9 / (12 * 2))",
      "9 + (9 + (12 / 2))",
      "((9 - 9) + 12) * 2",
      "(2 * 9) / (9 / 12)",
      "12 * ((9 / 9) * 2)",
      "12 * ((9 * 2) / 9)",
      "(9 - (9 - 2)) * 12",
      "(2 * 12) * (9 / 9)",
      "(12 - (9 - 9)) * 2",
      "9 - (9 - (2 * 12))",
      "12 * ((2 + 9) - 9)",
      "12 * (2 * (9 / 9))",
      "(9 * 12) / (9 / 2)",
      "12 * ((9 - 9) + 2)",
      "9 + ((12 / 2) + 9)",
      "((12 * 9) * 2) / 9",
      "(12 * (9 * 2)) / 9",
      "((2 * 12) + 9) - 9",
      "(12 / 9) * (9 * 2)",
      "12 * (2 + (9 - 9))",
      "(2 * 12) / (9 / 9)",
      "12 / (9 / (9 * 2))",
      "((12 * 2) + 9) - 9",
      "12 * ((9 + 2) - 9)",
      "(12 * (9 / 9)) * 2",
      "((12 * 2) - 9) + 9",
      "((2 / 9) * 9) * 12",
      "2 / (9 / (12 * 9))",
      "9 * ((2 * 12) / 9)",
      "(12 * 2) * (9 / 9)",
      "2 * (9 / (9 / 12))",
      "(2 * (9 * 12)) / 9",
      "2 * ((12 - 9) + 9)",
      "(2 / (9 / 9)) * 12",
      "12 * ((2 * 9) / 9)",
      "(12 * 9) / (9 / 2)",
      "(2 * (9 / 9)) * 12",
      "(9 * (2 / 9)) * 12",
      "9 * ((12 / 9) * 2)",
      "((12 - 9) + 9) * 2",
      "(9 * (12 * 2)) / 9",
      "(2 * (9 + 9)) - 12",
      "((2 / 9) * 12) * 9",
      "9 * (12 * (2 / 9))",
      "(12 * 9) * (2 / 9)",
      "(2 / (9 / 12)) * 9",
      "(12 * (2 * 9)) / 9",
      "9 / ((9 / 12) / 2)"
    ]
  },
  "2 9 9 13": {
    "cards": "2 9 9 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "2 * (13 - (9 / 9))",
      "(13 - (9 / 9)) * 2"
    ]
  },
  "2 9 10 10": {
    "cards": "2 9 10 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "9 + (10 + (10 / 2))",
      "(9 + (10 / 2)) + 10",
      "10 + ((10 / 2) + 9)",
      "9 + ((10 / 2) + 10)",
      "(10 + 9) + (10 / 2)",
      "(9 + 10) + (10 / 2)",
      "(10 + (10 / 2)) + 9",
      "(10 / 2) + (9 + 10)",
      "10 + (9 + (10 / 2))",
      "((10 / 2) + 10) + 9",
      "((10 / 2) + 9) + 10",
      "(10 / 2) + (10 + 9)"
    ]
  },
  "2 9 10 11": {
    "cards": "2 9 10 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "2 * (11 - (9 - 10))",
      "2 * (11 + (10 - 9))",
      "(2 + 10) * (11 - 9)",
      "2 * ((10 + 11) - 9)",
      "2 * (10 + (11 - 9))",
      "(11 - 9) * (2 + 10)",
      "2 * ((10 - 9) + 11)",
      "2 * (10 - (9 - 11))",
      "((11 - 9) + 10) * 2",
      "(10 + (11 - 9)) * 2",
      "(10 + 2) * (11 - 9)",
      "((10 - 9) + 11) * 2",
      "(11 + (10 - 9)) * 2",
      "(11 - 9) * (10 + 2)",
      "(11 - (9 - 10)) * 2",
      "2 * ((11 + 10) - 9)",
      "(10 - (9 - 11)) * 2",
      "((10 + 11) - 9) * 2",
      "2 * ((11 - 9) + 10)",
      "((11 + 10) - 9) * 2"
    ]
  },
  "2 9 10 12": {
    "cards": "2 9 10 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "12 * (2 * (10 - 9))",
      "2 * ((10 - 9) * 12)",
      "(12 * 2) / (10 - 9)",
      "(2 - 10) * (9 - 12)",
      "2 * (12 * (10 - 9))",
      "(9 - 12) * (2 - 10)",
      "(2 * 12) * (10 - 9)",
      "(12 * 2) * (10 - 9)",
      "(10 - 9) * (12 * 2)",
      "((10 - 9) * 2) * 12",
      "12 * ((10 - 9) * 2)",
      "2 / ((10 - 9) / 12)",
      "((10 - 9) * 12) * 2",
      "(2 / (10 - 9)) * 12",
      "12 / ((10 - 9) / 2)",
      "(10 - 2) * (12 - 9)",
      "(2 * (10 - 9)) * 12",
      "(12 / (10 - 9)) * 2",
      "2 * (12 / (10 - 9))",
      "(12 - 9) * (10 - 2)",
      "(12 * (10 - 9)) * 2",
      "12 * (2 / (10 - 9))",
      "(10 - 9) * (2 * 12)",
      "(2 * 12) / (10 - 9)"
    ]
  },
  "2 9 10 13": {
    "cards": "2 9 10 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((10 * 2) + 13) - 9",
      "2 * (9 - (10 - 13))",
      "(2 * 10) - (9 - 13)",
      "13 - (9 - (2 * 10))",
      "(13 + (2 * 10)) - 9",
      "(13 - (10 - 9)) * 2",
      "13 + ((2 * 10) - 9)",
      "2 * ((9 - 10) + 13)",
      "((2 * 10) + 13) - 9",
      "((10 * 2) - 9) + 13",
      "(9 - (10 - 13)) * 2",
      "((13 + 9) - 10) * 2",
      "2 * (13 + (9 - 10))",
      "(13 - 9) + (10 * 2)",
      "2 * ((13 + 9) - 10)",
      "2 * (13 - (10 - 9))",
      "((2 * 10) - 9) + 13",
      "((13 - 10) + 9) * 2",
      "(10 * 2) - (9 - 13)",
      "(9 + (13 - 10)) * 2",
      "2 * (9 + (13 - 10))",
      "((9 + 13) - 10) * 2",
      "(13 + (10 * 2)) - 9",
      "(2 * 10) + (13 - 9)",
      "2 * ((9 + 13) - 10)",
      "2 * ((13 - 10) + 9)",
      "(13 + (9 - 10)) * 2",
      "13 + ((10 * 2) - 9)",
      "(10 * 2) + (13 - 9)",
      "((9 - 10) + 13) * 2",
      "(13 - 9) + (2 * 10)",
      "13 - (9 - (10 * 2))"
    ]
  },
  "2 9 11 11": {
    "cards": "2 9 11 11",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "11 + ((11 * 2) - 9)",
      "(2 * 11) - (9 - 11)",
      "2 - ((9 - 11) * 11)",
      "((2 * 11) - 9) + 11",
      "((11 * 2) + 11) - 9",
      "((2 * 11) + 11) - 9",
      "2 + (11 * (11 - 9))",
      "2 - (11 * (9 - 11))",
      "(11 + (11 * 2)) - 9",
      "(11 * 2) - (9 - 11)",
      "11 + ((2 * 11) - 9)",
      "(11 - 9) + (2 * 11)",
      "(11 - 9) + (11 * 2)",
      "11 - (9 - (11 * 2))",
      "(11 + (2 * 11)) - 9",
      "(11 * 2) + (11 - 9)",
      "(11 * (11 - 9)) + 2",
      "((11 - 9) * 11) + 2",
      "((11 * 2) - 9) + 11",
      "11 - (9 - (2 * 11))",
      "(2 * 11) + (11 - 9)",
      "2 + ((11 - 9) * 11)"
    ]
  },
  "2 9 11 12": {
    "cards": "2 9 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 9 11 13": {
    "cards": "2 9 11 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "9 + ((13 * 2) - 11)",
      "((13 * 2) + 9) - 11",
      "(13 * (11 - 9)) - 2",
      "(9 + (2 * 13)) - 11",
      "(2 * 13) + (9 - 11)",
      "(2 * 13) - (11 - 9)",
      "(9 - 11) + (13 * 2)",
      "9 - (11 - (13 * 2))",
      "9 + ((2 * 13) - 11)",
      "9 - (11 - (2 * 13))",
      "((11 - 9) * 13) - 2",
      "(13 * 2) - (11 - 9)",
      "((2 * 13) - 11) + 9",
      "(9 + (13 * 2)) - 11",
      "((2 * 13) + 9) - 11",
      "(13 * 2) + (9 - 11)",
      "(9 - 11) + (2 * 13)",
      "((13 * 2) - 11) + 9"
    ]
  },
  "2 9 12 12": {
    "cards": "2 9 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 9 12 13": {
    "cards": "2 9 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * ((13 - 2) - 9)",
      "((13 - 9) - 2) * 12",
      "(13 - 9) / (2 / 12)",
      "(12 / 2) * (13 - 9)",
      "(13 - (9 + 2)) * 12",
      "12 * (13 - (9 + 2))",
      "((13 - 9) * 12) / 2",
      "((13 - 2) - 9) * 12",
      "12 * (13 - (2 + 9))",
      "12 / (2 / (13 - 9))",
      "(13 - 9) * (12 / 2)",
      "12 * ((13 - 9) - 2)",
      "(12 * (13 - 9)) / 2",
      "((13 - 9) / 2) * 12",
      "(13 - (2 + 9)) * 12",
      "12 * ((13 - 9) / 2)"
    ]
  },
  "2 9 13 13": {
    "cards": "2 9 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((13 + 9) / 2) + 13",
      "13 + ((9 + 13) / 2)",
      "13 + ((13 + 9) / 2)",
      "((9 + 13) / 2) + 13"
    ]
  },
  "2 10 10 10": {
    "cards": "2 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 10 10 11": {
    "cards": "2 10 10 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * ((10 / 10) + 11)",
      "2 * (11 + (10 / 10))",
      "(11 + (10 / 10)) * 2",
      "((10 / 10) + 11) * 2"
    ]
  },
  "2 10 10 12": {
    "cards": "2 10 10 12",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "12 * (10 + (2 - 10))",
      "(10 * 2) * (12 / 10)",
      "((2 * 12) + 10) - 10",
      "((10 * 2) * 12) / 10",
      "(2 / (10 / 10)) * 12",
      "12 * ((2 + 10) - 10)",
      "(2 * 12) / (10 / 10)",
      "((12 * 2) - 10) + 10",
      "(10 / 10) * (2 * 12)",
      "2 / ((10 / 10) / 12)",
      "(12 - (10 - 10)) * 2",
      "(2 * 12) - (10 - 10)",
      "12 * (2 / (10 / 10))",
      "(12 * 2) * (10 / 10)",
      "10 + ((2 * 12) - 10)",
      "10 / (10 / (12 * 2))",
      "2 * (12 * (10 / 10))",
      "10 * ((2 / 10) * 12)",
      "2 * ((12 * 10) / 10)",
      "(10 * (2 * 12)) / 10",
      "(12 * (10 * 2)) / 10",
      "((10 / 10) * 12) * 2",
      "(2 * 12) + (10 - 10)",
      "((10 * 12) * 2) / 10",
      "12 * (10 * (2 / 10))",
      "10 * (12 * (2 / 10))",
      "10 * ((12 / 10) * 2)",
      "10 - (10 - (12 * 2))",
      "12 * (2 + (10 - 10))",
      "((2 * 10) * 12) / 10",
      "(2 * 10) / (10 / 12)",
      "((2 + 10) - 10) * 12",
      "12 * (10 - (10 - 2))",
      "(12 * (2 * 10)) / 10",
      "12 * (2 - (10 - 10))",
      "(10 - 10) + (12 * 2)",
      "((12 * 2) + 10) - 10",
      "(12 * (2 / 10)) * 10",
      "(10 * (12 / 10)) * 2",
      "10 * ((2 * 12) / 10)",
      "((10 + 2) - 10) * 12",
      "((12 * 10) / 10) * 2",
      "(2 * (10 * 12)) / 10",
      "(2 * 10) * (12 / 10)",
      "(2 / 10) * (12 * 10)",
      "(12 / (10 / 2)) * 10",
      "(12 / 10) * (2 * 10)",
      "2 * (12 - (10 - 10))",
      "((2 * 12) - 10) + 10",
      "2 / (10 / (12 * 10))",
      "12 * (10 / (10 / 2))",
      "(12 * 2) - (10 - 10)",
      "2 / ((10 / 12) / 10)",
      "2 * (12 / (10 / 10))",
      "(10 * 12) * (2 / 10)",
      "((2 * 12) * 10) / 10",
      "10 / ((10 / 2) / 12)",
      "((10 / 10) * 2) * 12",
      "(2 - (10 - 10)) * 12",
      "(10 + (2 - 10)) * 12",
      "(2 + (10 - 10)) * 12",
      "(10 + 2) * (12 - 10)",
      "(2 * 12) * (10 / 10)",
      "2 * ((12 / 10) * 10)",
      "(10 * 2) / (10 / 12)",
      "12 / (10 / (2 * 10))",
      "2 / (10 / (10 * 12))",
      "(12 * 2) + (10 - 10)",
      "((12 * 10) * 2) / 10",
      "12 / ((10 / 10) / 2)",
      "(12 + (10 - 10)) * 2",
      "2 * ((12 + 10) - 10)",
      "10 * ((12 * 2) / 10)",
      "((2 / 10) * 10) * 12",
      "(12 / (10 / 10)) * 2",
      "((10 * 2) / 10) * 12",
      "((10 - 10) + 12) * 2",
      "(2 / 10) * (10 * 12)",
      "2 * (10 / (10 / 12))",
      "((12 * 2) / 10) * 10",
      "12 * ((2 / 10) * 10)",
      "(12 * 2) / (10 / 10)",
      "(10 / (10 / 2)) * 12",
      "(2 * (10 / 10)) * 12",
      "(12 * (10 / 10)) * 2",
      "((2 / 10) * 12) * 10",
      "(10 / (10 / 12)) * 2",
      "(2 + 10) * (12 - 10)",
      "12 * ((10 + 2) - 10)",
      "((10 + 12) - 10) * 2",
      "((2 * 10) / 10) * 12",
      "2 * ((10 - 10) + 12)",
      "2 * ((10 + 12) - 10)",
      "2 * (10 * (12 / 10))",
      "10 / (10 / (2 * 12))",
      "10 * (12 / (10 / 2))",
      "((10 * 12) / 10) * 2",
      "(10 * (12 * 2)) / 10",
      "2 * ((10 * 12) / 10)",
      "2 * (10 - (10 - 12))",
      "12 / ((10 / 2) / 10)",
      "10 / ((10 / 12) / 2)",
      "(12 * 10) / (10 / 2)",
      "(10 - (10 - 2)) * 12",
      "(10 / 10) * (12 * 2)",
      "12 * ((10 * 2) / 10)",
      "((12 * 2) * 10) / 10",
      "12 * ((2 * 10) / 10)",
      "((2 - 10) + 10) * 12",
      "(12 * 10) * (2 / 10)",
      "((12 / 10) * 2) * 10",
      "(10 - (10 - 12)) * 2",
      "(10 * (2 / 10)) * 12",
      "10 * (2 * (12 / 10))",
      "10 - (10 - (2 * 12))",
      "2 * (12 + (10 - 10))",
      "12 * ((10 / 10) * 2)",
      "(2 * (12 / 10)) * 10",
      "((12 + 10) - 10) * 2",
      "12 * (2 * (10 / 10))",
      "((12 / 10) * 10) * 2",
      "10 + ((12 * 2) - 10)",
      "2 * ((10 / 10) * 12)",
      "((12 - 10) + 10) * 2",
      "(10 + (12 - 10)) * 2",
      "12 * ((10 - 10) + 2)",
      "(2 / (10 / 12)) * 10",
      "(12 - 10) * (2 + 10)",
      "(10 - 10) + (2 * 12)",
      "((10 - 10) + 2) * 12",
      "((2 * 12) / 10) * 10",
      "12 * ((2 - 10) + 10)",
      "2 * (10 + (12 - 10))",
      "10 * (2 / (10 / 12))",
      "(12 / 10) * (10 * 2)",
      "12 / (10 / (10 * 2))",
      "(10 + (2 * 12)) - 10",
      "(10 + (12 * 2)) - 10",
      "(12 - 10) * (10 + 2)",
      "(2 * (12 * 10)) / 10",
      "2 * ((12 - 10) + 10)",
      "(10 * 12) / (10 / 2)"
    ]
  },
  "2 10 10 13": {
    "cards": "2 10 10 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(13 - 10) * (10 - 2)",
      "(10 - 13) * (2 - 10)",
      "2 * (13 - (10 / 10))",
      "(13 - (10 / 10)) * 2",
      "(10 - 2) * (13 - 10)",
      "(2 - 10) * (10 - 13)"
    ]
  },
  "2 10 11 11": {
    "cards": "2 10 11 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(11 - (10 - 11)) * 2",
      "2 * (11 - (10 - 11))",
      "2 * ((11 + 11) - 10)",
      "(11 + (11 - 10)) * 2",
      "((11 - 10) + 11) * 2",
      "2 * ((11 - 10) + 11)",
      "((11 + 11) - 10) * 2",
      "2 * (11 + (11 - 10))"
    ]
  },
  "2 10 11 12": {
    "cards": "2 10 11 12",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "2 - ((10 - 12) * 11)",
      "(12 * (11 - 10)) * 2",
      "(11 - 10) * (2 * 12)",
      "(2 * 11) - (10 - 12)",
      "12 * (2 * (11 - 10))",
      "2 * (12 * (11 - 10))",
      "(12 * 2) / (11 - 10)",
      "(2 * 12) * (11 - 10)",
      "(11 * (12 - 10)) + 2",
      "12 - (10 - (11 * 2))",
      "(2 * 11) + (12 - 10)",
      "2 - (11 * (10 - 12))",
      "((11 - 10) * 12) * 2",
      "12 * (2 / (11 - 10))",
      "((2 * 11) - 10) + 12",
      "(12 + (11 * 2)) - 10",
      "(11 * 2) + (12 - 10)",
      "12 * ((11 - 10) * 2)",
      "2 * (12 / (11 - 10))",
      "12 + ((11 * 2) - 10)",
      "(12 - 10) + (2 * 11)",
      "2 / ((11 - 10) / 12)",
      "12 + ((2 * 11) - 10)",
      "((12 - 10) * 11) + 2",
      "((2 * 11) + 12) - 10",
      "((11 * 2) + 12) - 10",
      "12 / ((11 - 10) / 2)",
      "(2 / (11 - 10)) * 12",
      "2 + ((12 - 10) * 11)",
      "(11 * 2) - (10 - 12)",
      "2 + (11 * (12 - 10))",
      "((11 * 2) - 10) + 12",
      "(12 * 2) * (11 - 10)",
      "(2 * 12) / (11 - 10)",
      "(12 / (11 - 10)) * 2",
      "(12 + (2 * 11)) - 10",
      "(2 * (11 - 10)) * 12",
      "2 * ((11 - 10) * 12)",
      "(12 - 10) + (11 * 2)",
      "12 - (10 - (2 * 11))",
      "(11 - 10) * (12 * 2)",
      "((11 - 10) * 2) * 12"
    ]
  },
  "2 10 11 13": {
    "cards": "2 10 11 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(10 + 2) * (13 - 11)",
      "2 * ((13 - 11) + 10)",
      "(13 - 11) * (2 + 10)",
      "(10 - (11 - 13)) * 2",
      "2 * ((10 + 13) - 11)",
      "2 * (10 - (11 - 13))",
      "2 * ((10 - 11) + 13)",
      "(10 + (13 - 11)) * 2",
      "((10 - 11) + 13) * 2",
      "2 * (13 - (11 - 10))",
      "2 * ((13 + 10) - 11)",
      "((13 - 11) + 10) * 2",
      "(2 + 10) * (13 - 11)",
      "(13 - 11) * (10 + 2)",
      "2 * (10 + (13 - 11))",
      "((13 + 10) - 11) * 2",
      "2 * (13 + (10 - 11))",
      "(13 - (11 - 10)) * 2",
      "((10 + 13) - 11) * 2",
      "(13 + (10 - 11)) * 2"
    ]
  },
  "2 10 12 12": {
    "cards": "2 10 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 10 12 13": {
    "cards": "2 10 12 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(2 * 13) - (12 - 10)",
      "10 + ((13 * 2) - 12)",
      "(13 * (12 - 10)) - 2",
      "(13 * 2) + (10 - 12)",
      "10 - (12 - (13 * 2))",
      "(10 + (2 * 13)) - 12",
      "(10 + (13 * 2)) - 12",
      "((2 * 13) + 10) - 12",
      "((13 * 2) - 12) + 10",
      "10 + ((2 * 13) - 12)",
      "((12 - 10) * 13) - 2",
      "(13 * 2) - (12 - 10)",
      "13 + ((10 + 12) / 2)",
      "(2 * 13) + (10 - 12)",
      "((2 * 13) - 12) + 10",
      "13 + ((12 + 10) / 2)",
      "((13 * 2) + 10) - 12",
      "(10 - 12) + (2 * 13)",
      "((10 + 12) / 2) + 13",
      "10 - (12 - (2 * 13))",
      "(10 - 12) + (13 * 2)",
      "((12 + 10) / 2) + 13"
    ]
  },
  "2 10 13 13": {
    "cards": "2 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "2 11 11 11": {
    "cards": "2 11 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "2 * ((11 / 11) + 11)",
      "((11 / 11) + 11) * 2",
      "(11 + (11 / 11)) * 2",
      "2 * (11 + (11 / 11))"
    ]
  },
  "2 11 11 12": {
    "cards": "2 11 11 12",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "11 - (11 - (12 * 2))",
      "12 * (2 / (11 / 11))",
      "2 / (11 / (11 * 12))",
      "(11 / 11) * (12 * 2)",
      "((12 + 11) - 11) * 2",
      "((2 / 11) * 12) * 11",
      "11 + ((2 * 12) - 11)",
      "((2 * 12) - 11) + 11",
      "(12 * (2 * 11)) / 11",
      "((12 - 11) + 11) * 2",
      "12 * ((2 / 11) * 11)",
      "((2 - 11) + 11) * 12",
      "12 * ((11 - 11) + 2)",
      "(11 * (2 / 11)) * 12",
      "12 * ((11 / 11) * 2)",
      "11 / (11 / (12 * 2))",
      "2 / ((11 / 11) / 12)",
      "(2 * (12 / 11)) * 11",
      "((12 * 11) / 11) * 2",
      "11 * (12 / (11 / 2))",
      "11 / (11 / (2 * 12))",
      "(2 * (11 * 12)) / 11",
      "((12 * 2) + 11) - 11",
      "(2 * (12 * 11)) / 11",
      "(12 / (11 / 11)) * 2",
      "2 * (12 + (11 - 11))",
      "2 * ((11 + 12) - 11)",
      "((12 * 2) * 11) / 11",
      "12 * ((2 * 11) / 11)",
      "(2 * 12) / (11 / 11)",
      "12 / (11 / (11 * 2))",
      "(12 * 11) * (2 / 11)",
      "12 * (11 + (2 - 11))",
      "(2 / 11) * (12 * 11)",
      "(11 * 2) * (12 / 11)",
      "11 * (2 / (11 / 12))",
      "(11 * (2 * 12)) / 11",
      "(11 + (12 * 2)) - 11",
      "(11 - 11) + (12 * 2)",
      "11 - (11 - (2 * 12))",
      "2 * (11 * (12 / 11))",
      "(11 + (12 - 11)) * 2",
      "(11 / (11 / 2)) * 12",
      "(11 * 2) / (11 / 12)",
      "(12 / 11) * (2 * 11)",
      "11 * ((12 / 11) * 2)",
      "(11 - (11 - 12)) * 2",
      "12 * (2 * (11 / 11))",
      "12 / (11 / (2 * 11))",
      "((2 * 11) / 11) * 12",
      "(2 - (11 - 11)) * 12",
      "(2 * 12) + (11 - 11)",
      "(2 * 12) * (11 / 11)",
      "(11 * 12) * (2 / 11)",
      "((11 + 12) - 11) * 2",
      "(11 / (11 / 12)) * 2",
      "(11 * (12 / 11)) * 2",
      "2 * (11 - (11 - 12))",
      "(12 * (11 / 11)) * 2",
      "12 / ((11 / 11) / 2)",
      "12 * (11 / (11 / 2))",
      "((11 + 2) - 11) * 12",
      "11 + ((12 * 2) - 11)",
      "(12 * 2) + (11 - 11)",
      "(12 * (2 / 11)) * 11",
      "(2 + (11 - 11)) * 12",
      "((2 / 11) * 11) * 12",
      "12 * (11 * (2 / 11))",
      "2 * ((12 * 11) / 11)",
      "((11 - 11) + 12) * 2",
      "12 * (11 - (11 - 2))",
      "2 * (12 / (11 / 11))",
      "(12 * 2) - (11 - 11)",
      "(12 / 11) * (11 * 2)",
      "(2 / (11 / 12)) * 11",
      "(11 + (2 - 11)) * 12",
      "(2 * 11) * (12 / 11)",
      "((11 * 2) / 11) * 12",
      "(11 + (2 * 12)) - 11",
      "11 * ((2 / 11) * 12)",
      "11 / ((11 / 2) / 12)",
      "11 * (12 * (2 / 11))",
      "2 * (12 * (11 / 11))",
      "2 * ((12 - 11) + 11)",
      "((2 * 12) + 11) - 11",
      "((12 / 11) * 11) * 2",
      "11 / ((11 / 12) / 2)",
      "((11 / 11) * 12) * 2",
      "(12 * (11 * 2)) / 11",
      "(12 / (11 / 2)) * 11",
      "2 * (11 + (12 - 11))",
      "((11 * 12) / 11) * 2",
      "12 * ((2 - 11) + 11)",
      "((2 * 12) * 11) / 11",
      "(12 * 2) / (11 / 11)",
      "(11 - (11 - 2)) * 12",
      "(12 * 2) * (11 / 11)",
      "11 * ((2 * 12) / 11)",
      "((11 - 11) + 2) * 12",
      "((12 * 11) * 2) / 11",
      "((12 * 2) - 11) + 11",
      "2 * ((12 / 11) * 11)",
      "11 * (2 * (12 / 11))",
      "((12 * 2) / 11) * 11",
      "((12 / 11) * 2) * 11",
      "((2 + 11) - 11) * 12",
      "12 / ((11 / 2) / 11)",
      "((2 * 11) * 12) / 11",
      "12 * ((2 + 11) - 11)",
      "(11 * (12 * 2)) / 11",
      "2 / ((11 / 12) / 11)",
      "2 * (12 - (11 - 11))",
      "(11 / 11) * (2 * 12)",
      "(11 - 11) + (2 * 12)",
      "(12 - (11 - 11)) * 2",
      "((11 / 11) * 2) * 12",
      "((11 * 12) * 2) / 11",
      "2 * ((11 / 11) * 12)",
      "2 / (11 / (12 * 11))",
      "2 * ((11 - 11) + 12)",
      "11 * ((12 * 2) / 11)",
      "2 * ((11 * 12) / 11)",
      "(2 * 12) - (11 - 11)",
      "((2 * 12) / 11) * 11",
      "(2 / 11) * (11 * 12)",
      "2 * ((12 + 11) - 11)",
      "(2 / (11 / 11)) * 12",
      "(12 + (11 - 11)) * 2",
      "2 * (11 / (11 / 12))",
      "12 * ((11 + 2) - 11)",
      "12 * (2 + (11 - 11))",
      "(11 * 12) / (11 / 2)",
      "12 * ((11 * 2) / 11)",
      "(2 * 11) / (11 / 12)",
      "(12 * 11) / (11 / 2)",
      "((11 * 2) * 12) / 11",
      "12 * (2 - (11 - 11))",
      "(2 * (11 / 11)) * 12"
    ]
  },
  "2 11 11 13": {
    "cards": "2 11 11 13",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((11 + 11) / 2) + 13",
      "((2 * 11) - 11) + 13",
      "2 - (11 * (11 - 13))",
      "13 + ((2 * 11) - 11)",
      "13 - (11 - (11 * 2))",
      "(13 + (11 * 2)) - 11",
      "2 * (13 - (11 / 11))",
      "(13 + (2 * 11)) - 11",
      "2 - ((11 - 13) * 11)",
      "(11 * 2) + (13 - 11)",
      "(13 - 11) + (11 * 2)",
      "(11 * 2) - (11 - 13)",
      "(2 * 11) + (13 - 11)",
      "13 + ((11 + 11) / 2)",
      "2 + ((13 - 11) * 11)",
      "(13 - 11) + (2 * 11)",
      "((13 - 11) * 11) + 2",
      "((11 * 2) - 11) + 13",
      "(2 * 11) - (11 - 13)",
      "13 + ((11 * 2) - 11)",
      "2 + (11 * (13 - 11))",
      "((11 * 2) + 13) - 11",
      "13 - (11 - (2 * 11))",
      "(11 * (13 - 11)) + 2",
      "(13 - (11 / 11)) * 2",
      "((2 * 11) + 13) - 11"
    ]
  },
  "2 11 12 12": {
    "cards": "2 11 12 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(12 * (12 - 11)) * 2",
      "(2 * (12 - 11)) * 12",
      "(2 * 12) / (12 - 11)",
      "2 * ((12 / 12) + 11)",
      "(12 * 2) / (12 - 11)",
      "2 * (12 * (12 - 11))",
      "12 * (2 * (12 - 11))",
      "((12 / 12) + 11) * 2",
      "(12 / (12 - 11)) * 2",
      "(2 / (12 - 11)) * 12",
      "12 / ((12 - 11) / 2)",
      "((12 - 11) * 12) * 2",
      "(2 * 12) * (12 - 11)",
      "2 / ((12 - 11) / 12)",
      "2 * (12 / (12 - 11))",
      "(12 - 11) * (2 * 12)",
      "12 * ((12 - 11) * 2)",
      "2 * (11 + (12 / 12))",
      "((12 - 11) * 2) * 12",
      "2 * ((12 - 11) * 12)",
      "(11 + (12 / 12)) * 2",
      "12 * (2 / (12 - 11))",
      "(12 - 11) * (12 * 2)",
      "(12 * 2) * (12 - 11)"
    ]
  },
  "2 11 12 13": {
    "cards": "2 11 12 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "2 * ((11 - 12) + 13)",
      "12 + ((13 + 11) / 2)",
      "((11 - 12) + 13) * 2",
      "(11 - (12 - 13)) * 2",
      "2 * ((13 + 11) - 12)",
      "2 * ((11 + 13) - 12)",
      "2 * (11 + (13 - 12))",
      "((11 + 13) - 12) * 2",
      "((13 + 11) / 2) + 12",
      "(13 + (11 - 12)) * 2",
      "((13 + 11) - 12) * 2",
      "12 + ((11 + 13) / 2)",
      "2 * (13 - (12 - 11))",
      "(11 + (13 - 12)) * 2",
      "2 * ((13 - 12) + 11)",
      "((11 + 13) / 2) + 12",
      "(13 - (12 - 11)) * 2",
      "((13 - 12) + 11) * 2",
      "2 * (13 + (11 - 12))",
      "2 * (11 - (12 - 13))"
    ]
  },
  "2 11 13 13": {
    "cards": "2 11 13 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(13 * (13 - 11)) - 2",
      "(2 * 13) + (11 - 13)",
      "(13 * 2) - (13 - 11)",
      "((13 * 2) - 13) + 11",
      "((13 * 2) + 11) - 13",
      "((2 * 13) + 11) - 13",
      "((13 + 13) / 2) + 11",
      "(11 - 13) + (2 * 13)",
      "2 * (11 + (13 / 13))",
      "(11 + (13 / 13)) * 2",
      "11 + ((13 * 2) - 13)",
      "((13 - 11) * 13) - 2",
      "2 * ((13 / 13) + 11)",
      "11 - (13 - (13 * 2))",
      "11 + ((13 + 13) / 2)",
      "((13 / 13) + 11) * 2",
      "(11 - 13) + (13 * 2)",
      "(11 + (13 * 2)) - 13",
      "(13 * 2) + (11 - 13)",
      "((2 * 13) - 13) + 11",
      "(11 + (2 * 13)) - 13",
      "11 + ((2 * 13) - 13)",
      "(2 * 13) - (13 - 11)",
      "11 - (13 - (2 * 13))"
    ]
  },
  "2 12 12 12": {
    "cards": "2 12 12 12",
    "has_solution": "Y",
    "num_solutions": 87,
    "solutions": [
      "(2 * (12 * 12)) / 12",
      "(12 - 12) + (12 * 2)",
      "((12 * 2) + 12) - 12",
      "(12 / (12 / 2)) * 12",
      "2 * ((12 + 12) - 12)",
      "((12 * 2) / 12) * 12",
      "(12 * 12) / (12 / 2)",
      "(12 * (12 * 2)) / 12",
      "2 * ((12 - 12) + 12)",
      "12 * ((2 - 12) + 12)",
      "(12 * (2 / 12)) * 12",
      "((12 * 2) * 12) / 12",
      "2 / (12 / (12 * 12))",
      "((12 * 2) - 12) + 12",
      "(12 + (2 - 12)) * 12",
      "(2 * 12) * (12 / 12)",
      "((2 * 12) - 12) + 12",
      "(2 + (12 - 12)) * 12",
      "((2 / 12) * 12) * 12",
      "(2 - (12 - 12)) * 12",
      "((2 - 12) + 12) * 12",
      "12 * (2 / (12 / 12))",
      "12 * ((12 - 12) + 2)",
      "12 + ((12 + 12) / 2)",
      "((12 / 12) * 2) * 12",
      "12 + ((12 * 2) - 12)",
      "12 * (12 + (2 - 12))",
      "12 * ((12 / 12) * 2)",
      "12 * (2 + (12 - 12))",
      "((12 / 12) * 12) * 2",
      "(2 * (12 / 12)) * 12",
      "12 * (12 / (12 / 2))",
      "((12 - 12) + 12) * 2",
      "12 * ((12 + 2) - 12)",
      "((12 + 2) - 12) * 12",
      "((12 * 12) / 12) * 2",
      "12 / (12 / (2 * 12))",
      "12 - (12 - (12 * 2))",
      "(2 * 12) / (12 / 12)",
      "((2 * 12) / 12) * 12",
      "((2 * 12) * 12) / 12",
      "12 * (12 * (2 / 12))",
      "(2 / 12) * (12 * 12)",
      "12 * (12 - (12 - 2))",
      "((12 + 12) - 12) * 2",
      "2 * ((12 / 12) * 12)",
      "(2 * 12) - (12 - 12)",
      "(2 * 12) + (12 - 12)",
      "2 * (12 + (12 - 12))",
      "(12 - 12) + (2 * 12)",
      "((12 + 12) / 2) + 12",
      "12 * ((2 + 12) - 12)",
      "(12 * 2) * (12 / 12)",
      "(12 / 12) * (12 * 2)",
      "(12 + (12 - 12)) * 2",
      "2 * (12 / (12 / 12))",
      "(12 * 2) - (12 - 12)",
      "(12 - (12 - 12)) * 2",
      "12 * ((2 / 12) * 12)",
      "(12 + (2 * 12)) - 12",
      "(12 * 2) + (12 - 12)",
      "2 * (12 - (12 - 12))",
      "(12 * (2 * 12)) / 12",
      "(12 * 12) * (2 / 12)",
      "12 * (2 - (12 - 12))",
      "2 * ((12 * 12) / 12)",
      "12 * ((12 * 2) / 12)",
      "((2 + 12) - 12) * 12",
      "12 * (2 * (12 / 12))",
      "12 / ((12 / 12) / 2)",
      "12 - (12 - (2 * 12))",
      "12 * ((2 * 12) / 12)",
      "2 * (12 * (12 / 12))",
      "(12 + (12 * 2)) - 12",
      "12 / ((12 / 2) / 12)",
      "((12 * 12) * 2) / 12",
      "(12 * 2) / (12 / 12)",
      "12 + ((2 * 12) - 12)",
      "2 / ((12 / 12) / 12)",
      "(2 / (12 / 12)) * 12",
      "((12 - 12) + 2) * 12",
      "(12 / (12 / 12)) * 2",
      "(12 - (12 - 2)) * 12",
      "12 / (12 / (12 * 2))",
      "((2 * 12) + 12) - 12",
      "(12 / 12) * (2 * 12)",
      "(12 * (12 / 12)) * 2"
    ]
  },
  "2 12 12 13": {
    "cards": "2 12 12 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(13 - 12) * (12 * 2)",
      "(12 / (13 - 12)) * 2",
      "2 * ((13 - 12) * 12)",
      "(13 - (12 / 12)) * 2",
      "2 * (12 * (13 - 12))",
      "(2 * 12) / (13 - 12)",
      "(2 / (13 - 12)) * 12",
      "((13 - 12) * 12) * 2",
      "2 / ((13 - 12) / 12)",
      "(12 * (13 - 12)) * 2",
      "2 * (13 - (12 / 12))",
      "2 * (12 / (13 - 12))",
      "12 / ((13 - 12) / 2)",
      "(2 * 12) * (13 - 12)",
      "12 * (2 / (13 - 12))",
      "12 * (2 * (13 - 12))",
      "(2 * (13 - 12)) * 12",
      "((13 - 12) * 2) * 12",
      "(13 - 12) * (2 * 12)",
      "12 * ((13 - 12) * 2)",
      "(12 * 2) / (13 - 12)",
      "(12 * 2) * (13 - 12)"
    ]
  },
  "2 12 13 13": {
    "cards": "2 12 13 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "2 * ((12 - 13) + 13)",
      "(12 * (2 * 13)) / 13",
      "(13 * (12 / 13)) * 2",
      "2 * (13 - (13 - 12))",
      "2 * ((13 - 13) + 12)",
      "12 * (13 / (13 / 2))",
      "(2 * (12 / 13)) * 13",
      "2 * ((12 + 13) - 13)",
      "(2 / (13 / 13)) * 12",
      "2 / (13 / (13 * 12))",
      "12 * (2 * (13 / 13))",
      "12 * (13 * (2 / 13))",
      "(2 * 12) / (13 / 13)",
      "2 * ((13 * 12) / 13)",
      "((2 + 13) - 13) * 12",
      "(2 / 13) * (12 * 13)",
      "(12 * 2) / (13 / 13)",
      "12 * (2 / (13 / 13))",
      "13 - (13 - (2 * 12))",
      "13 * (2 / (13 / 12))",
      "((2 * 12) + 13) - 13",
      "13 / (13 / (12 * 2))",
      "(13 - 13) + (12 * 2)",
      "((12 + 13) - 13) * 2",
      "13 * (2 * (12 / 13))",
      "(13 + (12 - 13)) * 2",
      "2 / ((13 / 12) / 13)",
      "12 * ((2 - 13) + 13)",
      "(13 - (13 - 2)) * 12",
      "2 * (12 / (13 / 13))",
      "((2 * 12) - 13) + 13",
      "(12 / (13 / 13)) * 2",
      "((12 * 2) - 13) + 13",
      "((2 - 13) + 13) * 12",
      "13 * ((2 * 12) / 13)",
      "(12 * 2) + (13 - 13)",
      "(13 / 13) * (12 * 2)",
      "((12 * 2) / 13) * 13",
      "2 * ((13 / 13) * 12)",
      "12 * ((13 / 13) * 2)",
      "(13 / (13 / 2)) * 12",
      "(12 * (13 * 2)) / 13",
      "((2 * 12) / 13) * 13",
      "12 / ((13 / 2) / 13)",
      "((13 * 12) / 13) * 2",
      "((2 * 13) / 13) * 12",
      "(2 * 12) * (13 / 13)",
      "((2 / 13) * 13) * 12",
      "((13 + 12) - 13) * 2",
      "((2 / 13) * 12) * 13",
      "13 - (13 - (12 * 2))",
      "(12 - (13 - 13)) * 2",
      "(13 / 13) * (2 * 12)",
      "12 / ((13 / 13) / 2)",
      "(12 / (13 / 2)) * 13",
      "12 / (13 / (13 * 2))",
      "2 * (12 - (13 - 13))",
      "12 * ((13 - 13) + 2)",
      "(13 - 13) + (2 * 12)",
      "((13 / 13) * 2) * 12",
      "(2 / 13) * (13 * 12)",
      "2 * (13 / (13 / 12))",
      "(12 + (13 - 13)) * 2",
      "(13 + (2 * 12)) - 13",
      "(13 * 12) * (2 / 13)",
      "(2 * (13 / 13)) * 12",
      "(12 * 13) / (13 / 2)",
      "((2 * 12) * 13) / 13",
      "((13 + 2) - 13) * 12",
      "2 * ((12 * 13) / 13)",
      "((13 - 13) + 12) * 2",
      "13 * ((12 * 2) / 13)",
      "(13 * (2 / 13)) * 12",
      "2 * (13 + (12 - 13))",
      "13 / ((13 / 12) / 2)",
      "((13 * 12) * 2) / 13",
      "(2 * 12) + (13 - 13)",
      "(13 * 2) / (13 / 12)",
      "(2 - (13 - 13)) * 12",
      "12 * ((2 + 13) - 13)",
      "12 * ((13 + 2) - 13)",
      "((13 / 13) * 12) * 2",
      "(12 / 13) * (13 * 2)",
      "(13 - (13 - 12)) * 2",
      "2 * ((12 / 13) * 13)",
      "(2 / (13 / 12)) * 13",
      "13 + ((2 * 12) - 13)",
      "13 / ((13 / 2) / 12)",
      "13 * ((12 / 13) * 2)",
      "13 * (12 * (2 / 13))",
      "12 * (2 - (13 - 13))",
      "(13 * (2 * 12)) / 13",
      "((12 - 13) + 13) * 2",
      "12 / (13 / (2 * 13))",
      "(13 + (12 * 2)) - 13",
      "(13 + (2 - 13)) * 12",
      "2 * (12 * (13 / 13))",
      "(2 * 13) * (12 / 13)",
      "13 * ((2 / 13) * 12)",
      "(2 * (12 * 13)) / 13",
      "12 * ((2 * 13) / 13)",
      "13 + ((12 * 2) - 13)",
      "((12 * 13) * 2) / 13",
      "2 * ((13 + 12) - 13)",
      "(13 * 2) * (12 / 13)",
      "2 / (13 / (12 * 13))",
      "((12 * 2) + 13) - 13",
      "((12 / 13) * 2) * 13",
      "(12 * (2 / 13)) * 13",
      "12 * (13 - (13 - 2))",
      "(12 * 2) - (13 - 13)",
      "2 * (13 * (12 / 13))",
      "2 * (12 + (13 - 13))",
      "(2 + (13 - 13)) * 12",
      "((12 / 13) * 13) * 2",
      "(13 * 12) / (13 / 2)",
      "12 * (2 + (13 - 13))",
      "((13 * 2) * 12) / 13",
      "(2 * 12) - (13 - 13)",
      "2 / ((13 / 13) / 12)",
      "(12 * 2) * (13 / 13)",
      "(2 * 13) / (13 / 12)",
      "((12 * 13) / 13) * 2",
      "((13 * 2) / 13) * 12",
      "((13 - 13) + 2) * 12",
      "13 * (12 / (13 / 2))",
      "(13 / (13 / 12)) * 2",
      "13 / (13 / (2 * 12))",
      "(12 * 13) * (2 / 13)",
      "(12 / 13) * (2 * 13)",
      "(13 * (12 * 2)) / 13",
      "12 * ((13 * 2) / 13)",
      "(12 * (13 / 13)) * 2",
      "((12 * 2) * 13) / 13",
      "(2 * (13 * 12)) / 13",
      "((2 * 13) * 12) / 13",
      "12 * ((2 / 13) * 13)",
      "12 * (13 + (2 - 13))"
    ]
  },
  "2 13 13 13": {
    "cards": "2 13 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(13 - (13 / 13)) * 2",
      "2 * (13 - (13 / 13))"
    ]
  },
  "3 3 3 3": {
    "cards": "3 3 3 3",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((3 * 3) * 3) - 3",
      "(3 * (3 * 3)) - 3"
    ]
  },
  "3 3 3 4": {
    "cards": "3 3 3 4",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "3 + (3 * (3 + 4))",
      "3 + ((4 + 3) * 3)",
      "4 * ((3 * 3) - 3)",
      "((3 + 4) * 3) + 3",
      "((4 + 3) * 3) + 3",
      "(3 * (3 + 4)) + 3",
      "3 + ((3 + 4) * 3)",
      "((3 * 3) - 3) * 4",
      "3 + (3 * (4 + 3))",
      "(3 * (4 + 3)) + 3"
    ]
  },
  "3 3 3 5": {
    "cards": "3 3 3 5",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(3 * 3) + (3 * 5)",
      "(3 * 3) + (5 * 3)",
      "(3 * 5) + (3 * 3)",
      "(5 * 3) + (3 * 3)"
    ]
  },
  "3 3 3 6": {
    "cards": "3 3 3 6",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(3 * (3 + 6)) - 3",
      "3 + (3 + (6 * 3))",
      "6 * (3 + (3 / 3))",
      "6 + ((3 + 3) * 3)",
      "3 + ((3 * 6) + 3)",
      "((3 / 3) + 3) * 6",
      "6 * ((3 / 3) + 3)",
      "((3 * 6) + 3) + 3",
      "(6 * 3) + (3 + 3)",
      "((3 + 6) * 3) - 3",
      "(3 + (6 * 3)) + 3",
      "(3 * 6) + (3 + 3)",
      "(3 + (3 / 3)) * 6",
      "((3 + 3) * 3) + 6",
      "((6 * 3) + 3) + 3",
      "(3 * (6 + 3)) - 3",
      "(3 * (3 + 3)) + 6",
      "((6 + 3) * 3) - 3",
      "3 + ((6 * 3) + 3)",
      "6 + (3 * (3 + 3))",
      "(3 + 3) + (6 * 3)",
      "(3 + 3) + (3 * 6)",
      "(3 + (3 * 6)) + 3",
      "3 + (3 + (3 * 6))"
    ]
  },
  "3 3 3 7": {
    "cards": "3 3 3 7",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(7 + (3 / 3)) * 3",
      "((3 / 3) + 7) * 3",
      "(3 + 3) * (7 - 3)",
      "3 * (7 + (3 / 3))",
      "3 * ((3 / 3) + 7)",
      "(7 - 3) * (3 + 3)"
    ]
  },
  "3 3 3 8": {
    "cards": "3 3 3 8",
    "has_solution": "Y",
    "num_solutions": 85,
    "solutions": [
      "3 + ((3 * 8) - 3)",
      "((8 * 3) - 3) + 3",
      "8 * ((3 * 3) / 3)",
      "((3 * 3) * 8) / 3",
      "((3 * 3) / 3) * 8",
      "(3 / (3 / 8)) * 3",
      "(8 * (3 * 3)) / 3",
      "((3 * 8) - 3) + 3",
      "3 / (3 / (8 * 3))",
      "(8 + (3 - 3)) * 3",
      "3 * (3 / (3 / 8))",
      "((3 + 3) - 3) * 8",
      "8 / ((3 / 3) / 3)",
      "(3 * (8 / 3)) * 3",
      "(8 * 3) - (3 - 3)",
      "(3 / (3 / 3)) * 8",
      "3 / (3 / (3 * 8))",
      "3 * ((8 / 3) * 3)",
      "(3 + (8 - 3)) * 3",
      "((8 / 3) * 3) * 3",
      "(8 / (3 / 3)) * 3",
      "(8 / 3) * (3 * 3)",
      "((8 * 3) + 3) - 3",
      "3 * (3 + (8 - 3))",
      "8 * ((3 + 3) - 3)",
      "3 * (8 / (3 / 3))",
      "3 * (3 * (8 / 3))",
      "3 * ((3 + 8) - 3)",
      "((3 * 8) + 3) - 3",
      "((3 - 3) + 3) * 8",
      "(8 * (3 / 3)) * 3",
      "3 * ((3 * 8) / 3)",
      "8 * (3 * (3 / 3))",
      "((3 * 8) / 3) * 3",
      "(3 - 3) + (3 * 8)",
      "8 / (3 / (3 * 3))",
      "(3 - 3) + (8 * 3)",
      "(8 * 3) + (3 - 3)",
      "3 * ((3 / 3) * 8)",
      "((3 * 8) * 3) / 3",
      "((3 / 3) * 8) * 3",
      "((8 * 3) / 3) * 3",
      "(3 * 8) / (3 / 3)",
      "3 * (8 * (3 / 3))",
      "(3 * 3) * (8 / 3)",
      "((8 - 3) + 3) * 3",
      "(3 * (3 * 8)) / 3",
      "(8 * 3) / (3 / 3)",
      "3 * ((8 - 3) + 3)",
      "((3 + 8) - 3) * 3",
      "3 * (3 - (3 - 8))",
      "8 * ((3 - 3) + 3)",
      "(3 * 3) / (3 / 8)",
      "3 / ((3 / 8) / 3)",
      "((8 + 3) - 3) * 3",
      "(3 * (3 / 3)) * 8",
      "3 * ((3 - 3) + 8)",
      "3 * ((8 * 3) / 3)",
      "(3 - (3 - 8)) * 3",
      "(3 + (3 - 3)) * 8",
      "8 * ((3 / 3) * 3)",
      "3 * (8 - (3 - 3))",
      "3 + ((8 * 3) - 3)",
      "8 * (3 - (3 - 3))",
      "(3 * 8) * (3 / 3)",
      "((3 / 3) * 3) * 8",
      "(3 * 8) + (3 - 3)",
      "8 * (3 / (3 / 3))",
      "3 / ((3 / 3) / 8)",
      "3 * ((8 + 3) - 3)",
      "(3 / 3) * (3 * 8)",
      "3 - (3 - (3 * 8))",
      "(3 / 3) * (8 * 3)",
      "(3 * (8 * 3)) / 3",
      "3 * (8 + (3 - 3))",
      "(3 + (3 * 8)) - 3",
      "(3 * 8) - (3 - 3)",
      "(8 - (3 - 3)) * 3",
      "(3 + (8 * 3)) - 3",
      "(8 * 3) * (3 / 3)",
      "3 - (3 - (8 * 3))",
      "8 * (3 + (3 - 3))",
      "((3 - 3) + 8) * 3",
      "(3 - (3 - 3)) * 8",
      "((8 * 3) * 3) / 3"
    ]
  },
  "3 3 3 9": {
    "cards": "3 3 3 9",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "3 * (9 - (3 / 3))",
      "(9 - (3 / 3)) * 3"
    ]
  },
  "3 3 3 10": {
    "cards": "3 3 3 10",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "3 - (3 * (3 - 10))",
      "((10 * 3) - 3) - 3",
      "(3 * (10 - 3)) + 3",
      "3 + ((10 - 3) * 3)",
      "((3 * 10) - 3) - 3",
      "3 + (3 * (10 - 3))",
      "(3 * 10) - (3 + 3)",
      "3 - ((3 - 10) * 3)",
      "((10 - 3) * 3) + 3",
      "(10 * 3) - (3 + 3)"
    ]
  },
  "3 3 3 11": {
    "cards": "3 3 3 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(3 * 11) - (3 * 3)",
      "(11 * 3) - (3 * 3)"
    ]
  },
  "3 3 3 12": {
    "cards": "3 3 3 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(3 * 3) + (12 + 3)",
      "(12 + (3 * 3)) + 3",
      "12 + ((3 * 3) + 3)",
      "12 + (3 + (3 * 3))",
      "((3 * 3) + 12) + 3",
      "(12 + 3) + (3 * 3)",
      "((3 + 3) / 3) * 12",
      "(12 * (3 + 3)) / 3",
      "12 / (3 / (3 + 3))",
      "(3 * 3) + (3 + 12)",
      "(12 / 3) * (3 + 3)",
      "3 + (12 + (3 * 3))",
      "((3 * 3) + 3) + 12",
      "(3 + 12) + (3 * 3)",
      "(3 + (3 * 3)) + 12",
      "(3 + 3) * (12 / 3)",
      "12 * ((3 + 3) / 3)",
      "3 + ((3 * 3) + 12)",
      "((3 + 3) * 12) / 3",
      "((12 - 3) * 3) - 3",
      "(3 - (3 / 3)) * 12",
      "(3 + 3) / (3 / 12)",
      "(3 * (12 - 3)) - 3",
      "12 * (3 - (3 / 3))"
    ]
  },
  "3 3 3 13": {
    "cards": "3 3 3 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 4 4": {
    "cards": "3 3 4 4",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(4 * 3) + (3 * 4)",
      "((4 * 3) - 4) * 3",
      "3 * ((4 * 3) - 4)",
      "(3 * 4) + (4 * 3)",
      "(3 * 4) + (3 * 4)",
      "((3 * 4) - 4) * 3",
      "3 * ((3 * 4) - 4)",
      "(4 * 3) + (4 * 3)"
    ]
  },
  "3 3 4 5": {
    "cards": "3 3 4 5",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(3 * (5 - 3)) * 4",
      "(3 * (5 + 4)) - 3",
      "((4 + 5) * 3) - 3",
      "(4 * 3) * (5 - 3)",
      "4 * (3 * (5 - 3))",
      "3 * (4 * (5 - 3))",
      "4 * (5 + (3 / 3))",
      "((5 + 4) * 3) - 3",
      "(5 - 3) * (4 * 3)",
      "(3 * (4 + 5)) - 3",
      "((5 - 3) * 3) * 4",
      "(3 * 4) * (5 - 3)",
      "(5 + (3 / 3)) * 4",
      "(5 - 3) * (3 * 4)",
      "((5 - 3) * 4) * 3",
      "4 * ((5 - 3) * 3)",
      "((3 / 3) + 5) * 4",
      "3 * ((5 - 3) * 4)",
      "4 * ((3 / 3) + 5)",
      "(4 * (5 - 3)) * 3"
    ]
  },
  "3 3 4 6": {
    "cards": "3 3 4 6",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "(4 / (3 / 6)) * 3",
      "4 * (6 + (3 - 3))",
      "4 * (3 * (6 / 3))",
      "4 * ((3 * 6) / 3)",
      "(6 / (3 / 4)) * 3",
      "((4 / 3) * 6) * 3",
      "((4 * 3) / 3) * 6",
      "(4 * (3 / 3)) * 6",
      "(3 * (6 * 4)) / 3",
      "6 * ((4 + 3) - 3)",
      "3 / (3 / (6 * 4))",
      "6 * ((4 - 3) + 3)",
      "((6 * 4) / 3) * 3",
      "(3 * (4 / 3)) * 6",
      "(4 * 6) / (3 / 3)",
      "((3 - 3) + 6) * 4",
      "4 * ((3 + 6) - 3)",
      "((4 + 3) - 3) * 6",
      "6 * (4 * (3 / 3))",
      "3 / ((3 / 6) / 4)",
      "(4 * 3) * (6 / 3)",
      "((3 / 3) * 4) * 6",
      "3 * ((4 / 3) * 6)",
      "(4 * 6) + (3 - 3)",
      "((6 / 3) * 4) * 3",
      "(6 * 4) - (3 - 3)",
      "6 * (3 * (4 / 3))",
      "(4 / 3) * (3 * 6)",
      "(3 + (4 * 6)) - 3",
      "((6 * 3) / 3) * 4",
      "4 * ((6 - 3) + 3)",
      "4 * (3 + (6 - 3))",
      "((6 * 3) * 4) / 3",
      "6 * ((3 - 3) + 4)",
      "((4 * 6) - 3) + 3",
      "((6 + 3) - 3) * 4",
      "((4 * 6) * 3) / 3",
      "6 * ((3 * 4) / 3)",
      "6 * (4 / (3 / 3))",
      "6 * (3 + (4 - 3))",
      "(3 * 4) / (3 / 6)",
      "6 * (3 - (3 - 4))",
      "6 * (3 / (3 / 4))",
      "4 / ((3 / 6) / 3)",
      "6 * ((4 * 3) / 3)",
      "(3 / 3) * (6 * 4)",
      "(4 * (6 * 3)) / 3",
      "3 - (3 - (6 * 4))",
      "4 / (3 / (6 * 3))",
      "((4 * 3) * 6) / 3",
      "(4 / (3 / 3)) * 6",
      "6 * ((3 + 4) - 3)",
      "(3 * 4) * (6 / 3)",
      "4 * ((6 * 3) / 3)",
      "(6 * 3) / (3 / 4)",
      "4 / (3 / (3 * 6))",
      "4 * (6 / (3 / 3))",
      "3 + ((6 * 4) - 3)",
      "6 / ((3 / 3) / 4)",
      "(4 * (3 * 6)) / 3",
      "((6 * 4) - 3) + 3",
      "(3 + (6 - 3)) * 4",
      "4 * (6 * (3 / 3))",
      "(4 * 3) / (3 / 6)",
      "6 / (3 / (4 * 3))",
      "(3 * (4 * 6)) / 3",
      "(4 * 6) - (3 - 3)",
      "6 * (4 + (3 - 3))",
      "3 * ((6 / 3) * 4)",
      "(3 * 6) / (3 / 4)",
      "((6 - 3) + 3) * 4",
      "((4 / 3) * 3) * 6",
      "((3 + 6) - 3) * 4",
      "((3 + 4) - 3) * 6",
      "(4 / 3) * (6 * 3)",
      "(6 - (3 - 3)) * 4",
      "((3 * 4) * 6) / 3",
      "((4 * 6) / 3) * 3",
      "3 * (6 / (3 / 4))",
      "6 * ((3 / 3) * 4)",
      "(3 * 6) * (4 / 3)",
      "(3 / (3 / 4)) * 6",
      "4 * (3 - (3 - 6))",
      "(6 * 4) / (3 / 3)",
      "(3 - (3 - 6)) * 4",
      "6 * (4 - (3 - 3))",
      "((3 * 4) / 3) * 6",
      "(4 * 6) * (3 / 3)",
      "(6 * 3) * (4 / 3)",
      "((6 * 4) * 3) / 3",
      "6 * ((4 / 3) * 3)",
      "4 * (6 - (3 - 3))",
      "(3 - (3 - 4)) * 6",
      "((4 - 3) + 3) * 6",
      "3 * (4 / (3 / 6))",
      "(6 * 4) * (3 / 3)",
      "(6 / 3) * (3 * 4)",
      "6 / ((3 / 4) / 3)",
      "4 * ((3 / 3) * 6)",
      "4 * ((3 - 3) + 6)",
      "(6 / (3 / 3)) * 4",
      "(3 + (4 - 3)) * 6",
      "3 * (4 * (6 / 3))",
      "4 * ((6 / 3) * 3)",
      "4 * ((6 + 3) - 3)",
      "(6 * 4) + (3 - 3)",
      "(6 * (3 / 3)) * 4",
      "(3 / (3 / 6)) * 4",
      "(4 - (3 - 3)) * 6",
      "((3 / 3) * 6) * 4",
      "4 * (3 / (3 / 6))",
      "((6 / 3) * 3) * 4",
      "(3 - 3) + (6 * 4)",
      "(4 * (6 / 3)) * 3",
      "(6 / 3) * (4 * 3)",
      "(6 * (4 * 3)) / 3",
      "(6 * (3 * 4)) / 3",
      "3 + ((4 * 6) - 3)",
      "((4 * 6) + 3) - 3",
      "3 / ((3 / 4) / 6)",
      "3 / (3 / (4 * 6))",
      "(3 - 3) + (4 * 6)",
      "3 * (6 * (4 / 3))",
      "((6 * 4) + 3) - 3",
      "(6 + (3 - 3)) * 4",
      "((3 - 3) + 4) * 6",
      "(6 * (4 / 3)) * 3",
      "(4 + (3 - 3)) * 6",
      "4 / ((3 / 3) / 6)",
      "(3 + (6 * 4)) - 3",
      "3 - (3 - (4 * 6))",
      "(3 * (6 / 3)) * 4",
      "3 * ((4 * 6) / 3)",
      "(3 / 3) * (4 * 6)",
      "6 / (3 / (3 * 4))",
      "((3 * 6) / 3) * 4",
      "3 * ((6 * 4) / 3)",
      "((3 * 6) * 4) / 3"
    ]
  },
  "3 3 4 7": {
    "cards": "3 3 4 7",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((4 - 3) + 7) * 3",
      "3 * ((4 - 3) + 7)",
      "3 * (4 + (7 - 3))",
      "(4 + (7 - 3)) * 3",
      "3 * (7 + (4 - 3))",
      "3 * (4 - (3 - 7))",
      "(4 - (3 - 7)) * 3",
      "(7 - (3 - 4)) * 3",
      "3 * (7 - (3 - 4))",
      "((7 + 4) - 3) * 3",
      "3 * ((4 + 7) - 3)",
      "(7 - (3 / 3)) * 4",
      "((4 + 7) - 3) * 3",
      "3 * ((7 - 3) + 4)",
      "3 * ((7 + 4) - 3)",
      "4 * (7 - (3 / 3))",
      "(7 + (4 - 3)) * 3",
      "((7 - 3) + 4) * 3"
    ]
  },
  "3 3 4 8": {
    "cards": "3 3 4 8",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(8 * (4 - 3)) * 3",
      "8 * (3 / (4 - 3))",
      "(4 - 3) * (8 * 3)",
      "(3 * (4 - 3)) * 8",
      "(8 - 4) * (3 + 3)",
      "(3 * 8) / (4 - 3)",
      "3 / ((4 - 3) / 8)",
      "3 * ((4 - 3) * 8)",
      "8 / ((4 - 3) / 3)",
      "(3 + 3) * (8 - 4)",
      "8 * (4 - (3 / 3))",
      "((4 - 3) * 3) * 8",
      "(8 / (4 - 3)) * 3",
      "((4 - 3) * 8) * 3",
      "3 * (8 * (4 - 3))",
      "(4 - (3 / 3)) * 8",
      "8 * (3 * (4 - 3))",
      "3 * (8 / (4 - 3))",
      "(8 * 3) * (4 - 3)",
      "(3 * 8) * (4 - 3)",
      "(8 * 3) / (4 - 3)",
      "8 * ((4 - 3) * 3)",
      "(3 / (4 - 3)) * 8",
      "(4 - 3) * (3 * 8)"
    ]
  },
  "3 3 4 9": {
    "cards": "3 3 4 9",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "3 + (9 + (4 * 3))",
      "9 + (3 + (3 * 4))",
      "9 + (3 + (4 * 3))",
      "(9 + (3 - 4)) * 3",
      "((9 - 4) + 3) * 3",
      "((3 + 9) - 4) * 3",
      "(4 * 3) + (9 + 3)",
      "9 + ((4 * 3) + 3)",
      "((9 / 3) + 3) * 4",
      "(3 * 4) + (3 + 9)",
      "9 + ((3 * 4) + 3)",
      "3 + ((3 * 4) + 9)",
      "3 + ((4 * 3) + 9)",
      "(9 - (4 - 3)) * 3",
      "(9 + 3) + (3 * 4)",
      "((4 * 3) + 9) + 3",
      "3 * (3 + (9 - 4))",
      "3 * (3 - (4 - 9))",
      "4 * (3 + (9 / 3))",
      "3 * (9 - (4 - 3))",
      "3 * ((9 + 3) - 4)",
      "3 + (9 + (3 * 4))",
      "(3 + (3 * 4)) + 9",
      "(3 + (9 / 3)) * 4",
      "((3 - 4) + 9) * 3",
      "(3 * 4) + (9 + 3)",
      "(4 * 3) + (3 + 9)",
      "(3 + 9) + (3 * 4)",
      "(9 + 3) + (4 * 3)",
      "3 * ((3 - 4) + 9)",
      "(9 + (3 * 4)) + 3",
      "4 * ((9 / 3) + 3)",
      "((3 * 4) + 9) + 3",
      "(3 - (4 - 9)) * 3",
      "3 * ((3 + 9) - 4)",
      "((3 * 4) + 3) + 9",
      "((9 + 3) - 4) * 3",
      "(3 + (4 * 3)) + 9",
      "3 * ((9 - 4) + 3)",
      "(3 + 9) + (4 * 3)",
      "3 * (9 + (3 - 4))",
      "(9 + (4 * 3)) + 3",
      "((4 * 3) + 3) + 9",
      "(3 + (9 - 4)) * 3"
    ]
  },
  "3 3 4 10": {
    "cards": "3 3 4 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 4 11": {
    "cards": "3 3 4 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(4 + 11) + (3 * 3)",
      "3 - ((4 - 11) * 3)",
      "(3 * 3) + (4 + 11)",
      "(3 * (11 - 4)) + 3",
      "(11 + (3 * 3)) + 4",
      "((3 * 3) + 11) + 4",
      "4 + ((3 * 3) + 11)",
      "((3 * 3) + 4) + 11",
      "4 + (11 + (3 * 3))",
      "3 + (3 * (11 - 4))",
      "(4 + (3 * 3)) + 11",
      "11 + ((3 * 3) + 4)",
      "3 + ((11 - 4) * 3)",
      "3 - (3 * (4 - 11))",
      "(11 + 4) + (3 * 3)",
      "(3 * 3) + (11 + 4)",
      "((11 - 4) * 3) + 3",
      "11 + (4 + (3 * 3))"
    ]
  },
  "3 3 4 12": {
    "cards": "3 3 4 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(3 * 12) - (3 * 4)",
      "4 * (12 - (3 + 3))",
      "3 * (4 + (12 / 3))",
      "(3 + (3 - 4)) * 12",
      "((3 * 3) * 4) - 12",
      "12 * (3 - (4 - 3))",
      "3 * ((12 / 3) + 4)",
      "((4 * 3) * 3) - 12",
      "((12 - 3) - 3) * 4",
      "(12 * 3) - (3 * 4)",
      "12 * ((3 + 3) - 4)",
      "((3 + 3) - 4) * 12",
      "(4 * (3 * 3)) - 12",
      "((3 * 4) * 3) - 12",
      "(3 * 12) - (4 * 3)",
      "(3 * (3 * 4)) - 12",
      "((12 / 3) + 4) * 3",
      "(3 - (4 - 3)) * 12",
      "(12 * 3) - (4 * 3)",
      "((3 - 4) + 3) * 12",
      "(4 + (12 / 3)) * 3",
      "4 * ((12 - 3) - 3)",
      "12 * ((3 - 4) + 3)",
      "(3 * (4 * 3)) - 12",
      "(12 - (3 + 3)) * 4",
      "12 * (3 + (3 - 4))"
    ]
  },
  "3 3 4 13": {
    "cards": "3 3 4 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((13 - 4) * 3) - 3",
      "(3 * (13 - 4)) - 3"
    ]
  },
  "3 3 5 5": {
    "cards": "3 3 5 5",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (3 / 3)"
    ]
  },
  "3 3 5 6": {
    "cards": "3 3 5 6",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "((6 * 5) - 3) - 3",
      "6 + (3 + (3 * 5))",
      "(3 * 5) + (6 + 3)",
      "(6 + (5 - 3)) * 3",
      "(5 * (3 + 3)) - 6",
      "3 * (5 + (6 - 3))",
      "((5 - 3) + 6) * 3",
      "3 * (6 - (3 - 5))",
      "3 * ((6 - 3) + 5)",
      "(5 * 6) - (3 + 3)",
      "((5 + 6) - 3) * 3",
      "(6 + (5 * 3)) + 3",
      "(3 + 6) + (3 * 5)",
      "3 * (6 + (5 - 3))",
      "(6 + 3) + (3 * 5)",
      "6 + ((5 * 3) + 3)",
      "6 * ((3 * 3) - 5)",
      "(6 - 3) * (5 + 3)",
      "3 + ((3 * 5) + 6)",
      "(5 - (3 - 6)) * 3",
      "3 * ((5 + 6) - 3)",
      "3 * ((6 + 5) - 3)",
      "3 * (5 - (3 - 6))",
      "((3 * 3) - 5) * 6",
      "3 + (6 + (5 * 3))",
      "(6 + 3) + (5 * 3)",
      "6 + (3 + (5 * 3))",
      "3 + ((5 * 3) + 6)",
      "(3 * 5) + (3 + 6)",
      "6 + ((3 * 5) + 3)",
      "((5 * 3) + 3) + 6",
      "((3 + 3) * 5) - 6",
      "(3 + 5) * (6 - 3)",
      "((3 * 5) + 6) + 3",
      "(6 - (3 - 5)) * 3",
      "(3 + (5 * 3)) + 6",
      "((5 * 3) + 6) + 3",
      "((5 * 6) - 3) - 3",
      "(5 * 3) + (6 + 3)",
      "(6 * 5) - (3 + 3)",
      "(3 + 6) + (5 * 3)",
      "((6 + 5) - 3) * 3",
      "(6 + (3 * 5)) + 3",
      "((6 - 3) + 5) * 3",
      "(6 - 3) * (3 + 5)",
      "6 * (5 - (3 / 3))",
      "(5 - (3 / 3)) * 6",
      "(5 * 3) + (3 + 6)",
      "(3 + (3 * 5)) + 6",
      "(5 + 3) * (6 - 3)",
      "3 * ((5 - 3) + 6)",
      "((3 * 5) + 3) + 6",
      "3 + (6 + (3 * 5))",
      "(5 + (6 - 3)) * 3"
    ]
  },
  "3 3 5 7": {
    "cards": "3 3 5 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "3 * ((5 * 3) - 7)",
      "((5 * 3) - 7) * 3",
      "((3 * 5) - 7) * 3",
      "3 * ((3 * 5) - 7)"
    ]
  },
  "3 3 5 8": {
    "cards": "3 3 5 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 5 9": {
    "cards": "3 3 5 9",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(3 + 9) * (5 - 3)",
      "(5 + 3) * (9 / 3)",
      "(9 / 3) * (3 + 5)",
      "(3 + 3) * (9 - 5)",
      "(9 * (5 + 3)) / 3",
      "(9 - 5) * (3 + 3)",
      "9 / (3 / (3 + 5))",
      "(9 / 3) * (5 + 3)",
      "(9 * (3 + 5)) / 3",
      "(5 + 3) / (3 / 9)",
      "((9 / 3) + 5) * 3",
      "(9 + 3) * (5 - 3)",
      "3 * (5 + (9 / 3))",
      "((5 + 3) * 9) / 3",
      "(5 - 3) * (3 + 9)",
      "9 / (3 / (5 + 3))",
      "(3 + 5) / (3 / 9)",
      "((3 + 5) / 3) * 9",
      "((5 + 3) / 3) * 9",
      "((3 + 5) * 9) / 3",
      "(3 + 5) * (9 / 3)",
      "(5 - 3) * (9 + 3)",
      "9 * ((5 + 3) / 3)",
      "3 * ((9 / 3) + 5)",
      "9 * ((3 + 5) / 3)",
      "(5 + (9 / 3)) * 3"
    ]
  },
  "3 3 5 10": {
    "cards": "3 3 5 10",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "3 * ((10 - 5) + 3)",
      "5 + ((3 * 3) + 10)",
      "((3 * 3) + 10) + 5",
      "(5 + 10) + (3 * 3)",
      "10 * (3 - (3 / 5))",
      "(3 + (10 - 5)) * 3",
      "((10 - 5) + 3) * 3",
      "10 + ((3 * 3) + 5)",
      "(10 - (5 - 3)) * 3",
      "((10 + 3) - 5) * 3",
      "(5 + (3 * 3)) + 10",
      "3 * ((3 + 10) - 5)",
      "((3 - 5) + 10) * 3",
      "(3 * 3) + (10 + 5)",
      "(10 + 5) + (3 * 3)",
      "3 * (3 - (5 - 10))",
      "5 + (10 + (3 * 3))",
      "3 * ((3 - 5) + 10)",
      "(10 + (3 - 5)) * 3",
      "3 * ((10 + 3) - 5)",
      "3 * (3 + (10 - 5))",
      "10 + (5 + (3 * 3))",
      "3 * (10 - (5 - 3))",
      "(10 + (3 * 3)) + 5",
      "((3 * 3) + 5) + 10",
      "((3 + 10) - 5) * 3",
      "(3 * 3) + (5 + 10)",
      "(3 - (3 / 5)) * 10",
      "(3 - (5 - 10)) * 3",
      "3 * (10 + (3 - 5))"
    ]
  },
  "3 3 5 11": {
    "cards": "3 3 5 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 5 12": {
    "cards": "3 3 5 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "12 - (3 - (5 * 3))",
      "3 - (3 * (5 - 12))",
      "((12 - 5) * 3) + 3",
      "(12 + (5 * 3)) - 3",
      "(12 - 3) + (5 * 3)",
      "(12 + (3 * 5)) - 3",
      "12 + ((5 * 3) - 3)",
      "(3 * (12 - 5)) + 3",
      "((5 * 3) + 12) - 3",
      "3 - ((5 - 12) * 3)",
      "(3 * 5) + (12 - 3)",
      "12 + ((3 * 5) - 3)",
      "12 - (3 - (3 * 5))",
      "((3 * 5) - 3) + 12",
      "((5 * 3) - 3) + 12",
      "(5 * 3) + (12 - 3)",
      "(12 - 3) + (3 * 5)",
      "3 + ((12 - 5) * 3)",
      "(5 * 3) - (3 - 12)",
      "(3 * 5) - (3 - 12)",
      "3 + (3 * (12 - 5))",
      "((3 * 5) + 12) - 3"
    ]
  },
  "3 3 5 13": {
    "cards": "3 3 5 13",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(13 + 3) + (3 + 5)",
      "((3 + 13) + 5) + 3",
      "5 + (3 + (13 + 3))",
      "(3 + (3 + 5)) + 13",
      "(13 + 5) + (3 + 3)",
      "(3 + (13 + 3)) + 5",
      "(3 + (5 + 3)) + 13",
      "(5 + 3) + (13 + 3)",
      "3 + ((5 + 3) + 13)",
      "(13 * 3) - (5 * 3)",
      "(13 + (5 + 3)) + 3",
      "3 + (5 + (13 + 3))",
      "3 + (3 + (5 + 13))",
      "5 + ((3 + 13) + 3)",
      "((13 + 5) + 3) + 3",
      "(5 + (3 + 13)) + 3",
      "(13 + (3 + 5)) + 3",
      "3 + (3 + (13 + 5))",
      "(3 + 5) + (3 + 13)",
      "13 + (5 + (3 + 3))",
      "5 + (13 + (3 + 3))",
      "((5 + 3) + 3) + 13",
      "(13 + (3 + 3)) + 5",
      "((3 + 5) + 3) + 13",
      "13 + ((3 + 5) + 3)",
      "3 + ((3 + 5) + 13)",
      "((3 + 3) + 5) + 13",
      "((13 + 3) + 5) + 3",
      "(13 + 3) + (5 + 3)",
      "13 + ((3 + 3) + 5)",
      "(5 + (3 + 3)) + 13",
      "13 + (3 + (3 + 5))",
      "((3 + 3) + 13) + 5",
      "3 + (13 + (3 + 5))",
      "(3 * 13) - (3 * 5)",
      "(5 + 3) + (3 + 13)",
      "(5 + (13 + 3)) + 3",
      "((13 + 3) + 3) + 5",
      "(13 * 3) - (3 * 5)",
      "3 + ((13 + 5) + 3)",
      "13 + ((5 + 3) + 3)",
      "(3 + 3) + (5 + 13)",
      "13 + (3 + (5 + 3))",
      "5 + ((3 + 3) + 13)",
      "(3 + 13) + (3 + 5)",
      "(3 + (5 + 13)) + 3",
      "(3 + 5) + (13 + 3)",
      "((3 + 13) + 3) + 5",
      "(5 + 13) + (3 + 3)",
      "3 + ((5 + 13) + 3)",
      "(3 + (13 + 5)) + 3",
      "3 + (5 + (3 + 13))",
      "3 + ((3 + 13) + 5)",
      "(3 + 3) + (13 + 5)",
      "3 + (13 + (5 + 3))",
      "3 + ((13 + 3) + 5)",
      "((3 + 5) + 13) + 3",
      "((5 + 3) + 13) + 3",
      "(3 * 13) - (5 * 3)",
      "5 + (3 + (3 + 13))",
      "(3 + (3 + 13)) + 5",
      "5 + ((13 + 3) + 3)",
      "(3 + 13) + (5 + 3)",
      "((5 + 13) + 3) + 3"
    ]
  },
  "3 3 6 6": {
    "cards": "3 3 6 6",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((6 / 3) + 6) * 3",
      "3 * ((6 / 3) + 6)",
      "(6 + (6 / 3)) * 3",
      "3 * (6 + (6 / 3))"
    ]
  },
  "3 3 6 7": {
    "cards": "3 3 6 7",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(6 - 3) + (7 * 3)",
      "(6 - 3) + (3 * 7)",
      "((6 - 3) * 7) + 3",
      "6 - (3 - (3 * 7))",
      "(3 * 7) - (3 - 6)",
      "3 + (7 * (6 - 3))",
      "3 - ((3 - 6) * 7)",
      "6 - (3 - (7 * 3))",
      "(3 * 7) + (6 - 3)",
      "((3 * 7) - 3) + 6",
      "((3 + 7) * 3) - 6",
      "6 + ((7 * 3) - 3)",
      "(3 * (7 + 3)) - 6",
      "3 + ((6 - 3) * 7)",
      "(7 * 3) + (6 - 3)",
      "(6 + (7 * 3)) - 3",
      "(7 * 3) - (3 - 6)",
      "(6 + (3 * 7)) - 3",
      "(3 * (3 + 7)) - 6",
      "((7 * 3) - 3) + 6",
      "((7 * 3) + 6) - 3",
      "3 - (7 * (3 - 6))",
      "((3 * 7) + 6) - 3",
      "(7 * (6 - 3)) + 3",
      "6 + ((3 * 7) - 3)",
      "((7 + 3) * 3) - 6"
    ]
  },
  "3 3 6 8": {
    "cards": "3 3 6 8",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((6 + 3) * 8) / 3",
      "((3 + 6) / 3) * 8",
      "(6 + 3) * (8 / 3)",
      "(6 + 3) / (3 / 8)",
      "(8 * (3 + 6)) / 3",
      "(8 / 3) * (3 + 6)",
      "(8 / 3) * (6 + 3)",
      "8 / (3 / (6 + 3))",
      "(3 + 6) / (3 / 8)",
      "8 * ((3 + 6) / 3)",
      "8 * ((6 + 3) / 3)",
      "8 * ((3 * 3) - 6)",
      "(3 + 6) * (8 / 3)",
      "(8 * (6 + 3)) / 3",
      "8 / (3 / (3 + 6))",
      "((3 * 3) - 6) * 8",
      "((3 + 6) * 8) / 3",
      "((6 + 3) / 3) * 8"
    ]
  },
  "3 3 6 9": {
    "cards": "3 3 6 9",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "(3 - 6) + (9 * 3)",
      "(9 * (6 - 3)) - 3",
      "((3 * 9) - 6) + 3",
      "6 / (3 / (9 + 3))",
      "6 - (3 * (3 - 9))",
      "((6 - 3) * 9) - 3",
      "(3 + 9) * (6 / 3)",
      "(9 - 3) + (6 * 3)",
      "3 + ((3 * 9) - 6)",
      "((9 - 3) * 3) + 6",
      "(6 / 3) * (9 + 3)",
      "(9 + (6 * 3)) - 3",
      "((3 * 6) - 3) + 9",
      "((3 * 6) + 9) - 3",
      "6 - ((3 - 9) * 3)",
      "(3 * 3) + (6 + 9)",
      "6 + ((9 - 3) * 3)",
      "((9 * 3) - 6) + 3",
      "((6 * 3) + 9) - 3",
      "(6 / 3) * (3 + 9)",
      "(6 * (9 + 3)) / 3",
      "6 * ((9 + 3) / 3)",
      "9 - (3 - (6 * 3))",
      "(9 * 3) + (3 - 6)",
      "6 + (3 * (9 - 3))",
      "((9 + 3) / 3) * 6",
      "9 + ((3 * 3) + 6)",
      "((3 * 3) + 9) + 6",
      "(3 * 9) + (3 - 6)",
      "((3 + 9) / 3) * 6",
      "((3 + 9) * 6) / 3",
      "9 + ((3 * 6) - 3)",
      "6 * ((3 + 9) / 3)",
      "6 / (3 / (3 + 9))",
      "(3 * (9 - 3)) + 6",
      "6 + ((3 * 3) + 9)",
      "3 - (6 - (3 * 9))",
      "(3 - 6) + (3 * 9)",
      "(3 * 3) + (9 + 6)",
      "9 + (6 + (3 * 3))",
      "3 - (6 - (9 * 3))",
      "((9 * 3) + 3) - 6",
      "(9 - 3) + (3 * 6)",
      "(6 + 9) + (3 * 3)",
      "6 + (9 + (3 * 3))",
      "((9 + 3) * 6) / 3",
      "(3 + (9 * 3)) - 6",
      "(3 + 9) / (3 / 6)",
      "9 - (3 - (3 * 6))",
      "3 + ((9 * 3) - 6)",
      "((6 * 3) - 3) + 9",
      "(9 + 3) / (3 / 6)",
      "(9 + (3 * 6)) - 3",
      "9 + ((6 * 3) - 3)",
      "(3 + (3 * 9)) - 6",
      "((3 * 9) + 3) - 6",
      "(3 * 6) + (9 - 3)",
      "(9 * 3) - (6 - 3)",
      "(9 + 3) * (6 / 3)",
      "((3 * 3) + 6) + 9",
      "(6 + (3 * 3)) + 9",
      "(3 * 9) - (6 - 3)",
      "(3 * 6) - (3 - 9)",
      "(9 + (3 * 3)) + 6",
      "(6 * 3) - (3 - 9)",
      "(6 * (3 + 9)) / 3",
      "(6 * 3) + (9 - 3)",
      "(9 + 6) + (3 * 3)"
    ]
  },
  "3 3 6 10": {
    "cards": "3 3 6 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "3 * ((6 * 3) - 10)",
      "((6 * 3) - 10) * 3",
      "6 * (10 - (3 + 3))",
      "((3 * 6) - 10) * 3",
      "(10 - 6) * (3 + 3)",
      "((10 - 3) - 3) * 6",
      "3 * (10 - (6 / 3))",
      "3 * ((3 * 6) - 10)",
      "(10 - (3 + 3)) * 6",
      "6 * ((10 - 3) - 3)",
      "(3 + 3) * (10 - 6)",
      "(10 - (6 / 3)) * 3"
    ]
  },
  "3 3 6 11": {
    "cards": "3 3 6 11",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(3 - 6) * (3 - 11)",
      "((11 * 3) - 6) - 3",
      "3 * (11 - (6 - 3))",
      "((11 * 3) - 3) - 6",
      "(11 + (3 - 6)) * 3",
      "((3 + 11) - 6) * 3",
      "3 * (3 + (11 - 6))",
      "((11 - 6) + 3) * 3",
      "(11 * 3) - (3 + 6)",
      "(11 * 3) - (6 + 3)",
      "(3 * 11) - (6 + 3)",
      "(3 - 11) * (3 - 6)",
      "3 * ((3 - 6) + 11)",
      "3 * (11 + (3 - 6))",
      "3 * ((11 + 3) - 6)",
      "3 * ((11 - 6) + 3)",
      "3 * ((3 + 11) - 6)",
      "((3 * 11) - 3) - 6",
      "(11 - (6 - 3)) * 3",
      "((11 + 3) - 6) * 3",
      "((3 * 11) - 6) - 3",
      "(3 * 11) - (3 + 6)",
      "(11 - 3) * (6 - 3)",
      "(3 + (11 - 6)) * 3",
      "(6 - 3) * (11 - 3)",
      "(3 - (6 - 11)) * 3",
      "((3 - 6) + 11) * 3",
      "3 * (3 - (6 - 11))"
    ]
  },
  "3 3 6 12": {
    "cards": "3 3 6 12",
    "has_solution": "Y",
    "num_solutions": 62,
    "solutions": [
      "12 + ((3 + 6) + 3)",
      "3 + ((3 + 12) + 6)",
      "6 + (12 + (3 + 3))",
      "(3 + 6) + (3 + 12)",
      "3 + ((6 + 12) + 3)",
      "(3 + 3) + (6 + 12)",
      "(3 + (12 + 3)) + 6",
      "12 + (3 + (3 + 6))",
      "((3 + 12) + 6) + 3",
      "12 + (6 + (3 + 3))",
      "((3 + 6) + 12) + 3",
      "(3 + (3 + 6)) + 12",
      "(6 + (3 + 3)) + 12",
      "3 + (6 + (3 + 12))",
      "3 + (3 + (12 + 6))",
      "(3 + (6 + 3)) + 12",
      "(6 + (3 + 12)) + 3",
      "(6 + (12 + 3)) + 3",
      "3 + (6 + (12 + 3))",
      "((3 + 3) * 6) - 12",
      "(3 + (12 + 6)) + 3",
      "(12 + (6 + 3)) + 3",
      "((3 + 12) + 3) + 6",
      "((6 + 3) + 3) + 12",
      "(12 + 3) + (3 + 6)",
      "(12 + 6) + (3 + 3)",
      "(3 + (3 + 12)) + 6",
      "((6 + 12) + 3) + 3",
      "6 + (3 + (12 + 3))",
      "6 + ((3 + 3) + 12)",
      "((6 + 3) + 12) + 3",
      "(12 + 3) + (6 + 3)",
      "((12 + 6) + 3) + 3",
      "(6 + 3) + (12 + 3)",
      "6 + (3 + (3 + 12))",
      "3 + (3 + (6 + 12))",
      "(3 + 12) + (6 + 3)",
      "((12 + 3) + 6) + 3",
      "((3 + 6) + 3) + 12",
      "3 + ((3 + 6) + 12)",
      "(6 + 3) + (3 + 12)",
      "12 + (3 + (6 + 3))",
      "(6 * (3 + 3)) - 12",
      "6 + ((12 + 3) + 3)",
      "3 + ((12 + 6) + 3)",
      "12 + ((6 + 3) + 3)",
      "(6 + 12) + (3 + 3)",
      "(12 + (3 + 3)) + 6",
      "3 + ((6 + 3) + 12)",
      "3 + (12 + (3 + 6))",
      "((3 + 3) + 6) + 12",
      "3 + (12 + (6 + 3))",
      "(3 + 12) + (3 + 6)",
      "(3 + 3) + (12 + 6)",
      "12 + ((3 + 3) + 6)",
      "(3 + (6 + 12)) + 3",
      "(3 + 6) + (12 + 3)",
      "((12 + 3) + 3) + 6",
      "3 + ((12 + 3) + 6)",
      "((3 + 3) + 12) + 6",
      "6 + ((3 + 12) + 3)",
      "(12 + (3 + 6)) + 3"
    ]
  },
  "3 3 6 13": {
    "cards": "3 3 6 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "3 - ((6 - 13) * 3)",
      "3 - (3 * (6 - 13))",
      "3 + ((13 - 6) * 3)",
      "((13 - 3) * 3) - 6",
      "(3 * (13 - 6)) + 3",
      "(3 * (13 - 3)) - 6",
      "(13 - (3 * 3)) * 6",
      "3 + (3 * (13 - 6))",
      "6 * (13 - (3 * 3))",
      "((13 - 6) * 3) + 3"
    ]
  },
  "3 3 7 7": {
    "cards": "3 3 7 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((3 / 7) + 3) * 7",
      "(3 + (3 / 7)) * 7",
      "7 * ((3 / 7) + 3)",
      "7 * (3 + (3 / 7))"
    ]
  },
  "3 3 7 8": {
    "cards": "3 3 7 8",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "7 + ((3 * 3) + 8)",
      "(7 + 8) + (3 * 3)",
      "((3 * 3) + 7) + 8",
      "(8 + 7) + (3 * 3)",
      "(3 * 3) + (8 + 7)",
      "7 + (8 + (3 * 3))",
      "8 + ((3 * 3) + 7)",
      "8 + (7 + (3 * 3))",
      "(3 * 3) + (7 + 8)",
      "(8 + (3 * 3)) + 7",
      "(7 + (3 * 3)) + 8",
      "((3 * 3) + 8) + 7"
    ]
  },
  "3 3 7 9": {
    "cards": "3 3 7 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(9 * (7 / 3)) + 3",
      "3 + (7 * (9 / 3))",
      "(9 / 3) + (3 * 7)",
      "(7 / (3 / 9)) + 3",
      "((9 / 3) * 7) + 3",
      "3 + ((9 * 7) / 3)",
      "((9 * 7) / 3) + 3",
      "((7 / 3) * 9) + 3",
      "(7 * (9 / 3)) + 3",
      "(9 / 3) + (7 * 3)",
      "(9 - 3) * (7 - 3)",
      "(3 - 7) * (3 - 9)",
      "3 + ((9 / 3) * 7)",
      "((7 * 9) / 3) + 3",
      "3 + (9 / (3 / 7))",
      "3 + ((7 * 9) / 3)",
      "(7 * 3) + (9 / 3)",
      "(7 - 3) * (9 - 3)",
      "3 + ((7 / 3) * 9)",
      "(9 / (3 / 7)) + 3",
      "3 + (9 * (7 / 3))",
      "(3 * 7) + (9 / 3)",
      "3 + (7 / (3 / 9))",
      "(3 - 9) * (3 - 7)"
    ]
  },
  "3 3 7 10": {
    "cards": "3 3 7 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 7 11": {
    "cards": "3 3 7 11",
    "has_solution": "Y",
    "num_solutions": 62,
    "solutions": [
      "11 + ((3 + 3) + 7)",
      "((3 + 11) + 3) + 7",
      "(3 + 7) + (11 + 3)",
      "((3 + 3) + 7) + 11",
      "3 + ((7 + 3) + 11)",
      "3 + ((7 + 11) + 3)",
      "((3 + 7) + 11) + 3",
      "(11 + 3) + (3 + 7)",
      "(3 + 11) + (3 + 7)",
      "(7 + (3 + 11)) + 3",
      "11 + (7 + (3 + 3))",
      "(3 + (11 + 7)) + 3",
      "11 + ((7 + 3) + 3)",
      "11 + (3 + (3 + 7))",
      "7 + (3 + (11 + 3))",
      "((11 + 3) + 7) + 3",
      "(3 + 3) * (11 - 7)",
      "(3 + (7 + 11)) + 3",
      "(3 + (3 + 11)) + 7",
      "7 + ((11 + 3) + 3)",
      "((3 + 11) + 7) + 3",
      "7 + ((3 + 11) + 3)",
      "3 + (7 + (3 + 11))",
      "(11 + 7) + (3 + 3)",
      "(11 + (3 + 3)) + 7",
      "(11 - 7) * (3 + 3)",
      "(7 + 11) + (3 + 3)",
      "3 + (11 + (7 + 3))",
      "(7 + (11 + 3)) + 3",
      "((7 + 3) + 3) + 11",
      "((3 + 7) + 3) + 11",
      "7 + (3 + (3 + 11))",
      "(3 + (7 + 3)) + 11",
      "(3 + 3) + (11 + 7)",
      "(11 + (3 + 7)) + 3",
      "((3 + 3) + 11) + 7",
      "(3 + (3 + 7)) + 11",
      "3 + ((3 + 7) + 11)",
      "(7 + 3) + (11 + 3)",
      "7 + (11 + (3 + 3))",
      "3 + ((11 + 7) + 3)",
      "3 + ((3 + 11) + 7)",
      "11 + (3 + (7 + 3))",
      "(3 + 3) + (7 + 11)",
      "(7 + 3) + (3 + 11)",
      "((11 + 3) + 3) + 7",
      "3 + (7 + (11 + 3))",
      "((11 + 7) + 3) + 3",
      "((7 + 11) + 3) + 3",
      "(11 + 3) + (7 + 3)",
      "(7 + (3 + 3)) + 11",
      "(3 + 11) + (7 + 3)",
      "((7 + 3) + 11) + 3",
      "(11 + (7 + 3)) + 3",
      "3 + (3 + (7 + 11))",
      "(3 + 7) + (3 + 11)",
      "(3 + (11 + 3)) + 7",
      "3 + (3 + (11 + 7))",
      "3 + ((11 + 3) + 7)",
      "11 + ((3 + 7) + 3)",
      "7 + ((3 + 3) + 11)",
      "3 + (11 + (3 + 7))"
    ]
  },
  "3 3 7 12": {
    "cards": "3 3 7 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((3 + 12) - 7) * 3",
      "(12 - (7 - 3)) * 3",
      "(3 - (7 - 12)) * 3",
      "12 + ((7 - 3) * 3)",
      "(12 + (3 - 7)) * 3",
      "((7 - 3) * 3) + 12",
      "3 * (12 - (7 - 3))",
      "3 * (3 + (12 - 7))",
      "(3 * (7 - 3)) + 12",
      "3 * ((3 + 12) - 7)",
      "((3 - 7) + 12) * 3",
      "(3 + (12 - 7)) * 3",
      "3 * ((12 + 3) - 7)",
      "((3 * 3) - 7) * 12",
      "12 * ((3 * 3) - 7)",
      "3 * ((12 - 7) + 3)",
      "((12 - 7) + 3) * 3",
      "((12 + 3) - 7) * 3",
      "12 - (3 * (3 - 7))",
      "3 * (3 - (7 - 12))",
      "12 - ((3 - 7) * 3)",
      "12 + (3 * (7 - 3))",
      "3 * ((3 - 7) + 12)",
      "3 * (12 + (3 - 7))"
    ]
  },
  "3 3 7 13": {
    "cards": "3 3 7 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((7 * 3) - 13) * 3",
      "3 * ((3 * 7) - 13)",
      "((3 * 7) - 13) * 3",
      "3 * ((7 * 3) - 13)"
    ]
  },
  "3 3 8 8": {
    "cards": "3 3 8 8",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "8 / (3 - (8 / 3))"
    ]
  },
  "3 3 8 9": {
    "cards": "3 3 8 9",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(3 * (8 + 3)) - 9",
      "9 - ((3 - 8) * 3)",
      "(9 - (3 + 3)) * 8",
      "(3 * (8 - 3)) + 9",
      "((8 + 3) * 3) - 9",
      "9 - (3 * (3 - 8))",
      "9 + ((8 - 3) * 3)",
      "((3 + 8) * 3) - 9",
      "(3 * (3 + 8)) - 9",
      "((9 - 3) - 3) * 8",
      "8 * ((9 - 3) - 3)",
      "((8 - 3) * 3) + 9",
      "9 + (3 * (8 - 3))",
      "8 * (9 - (3 + 3))"
    ]
  },
  "3 3 8 10": {
    "cards": "3 3 8 10",
    "has_solution": "Y",
    "num_solutions": 61,
    "solutions": [
      "10 + (3 + (3 + 8))",
      "3 + (8 + (10 + 3))",
      "3 + (10 + (8 + 3))",
      "(3 + (8 + 3)) + 10",
      "((3 + 10) + 8) + 3",
      "(10 + (3 + 3)) + 8",
      "(10 + 3) + (3 + 8)",
      "8 + ((3 + 3) + 10)",
      "(8 + 3) + (10 + 3)",
      "8 + (10 + (3 + 3))",
      "(8 + (3 + 10)) + 3",
      "(8 + (10 + 3)) + 3",
      "3 + (3 + (10 + 8))",
      "(10 + 3) + (8 + 3)",
      "(8 + 3) + (3 + 10)",
      "10 + (8 + (3 + 3))",
      "8 + ((10 + 3) + 3)",
      "(3 + (10 + 8)) + 3",
      "((10 + 8) + 3) + 3",
      "(3 + 8) + (3 + 10)",
      "(8 + (3 + 3)) + 10",
      "((3 + 3) + 8) + 10",
      "(3 + 10) + (3 + 8)",
      "((10 + 3) + 3) + 8",
      "(3 + (8 + 10)) + 3",
      "(8 + 10) + (3 + 3)",
      "(3 + 3) + (10 + 8)",
      "3 + ((10 + 8) + 3)",
      "10 + ((8 + 3) + 3)",
      "(3 + (10 + 3)) + 8",
      "3 + ((3 + 8) + 10)",
      "10 + ((3 + 3) + 8)",
      "8 + ((3 + 10) + 3)",
      "((8 + 3) + 10) + 3",
      "3 + ((10 + 3) + 8)",
      "(3 + 8) + (10 + 3)",
      "((10 + 3) + 8) + 3",
      "((3 + 10) + 3) + 8",
      "((8 + 10) + 3) + 3",
      "(10 + (3 + 8)) + 3",
      "3 + ((8 + 10) + 3)",
      "3 + (3 + (8 + 10))",
      "(3 + (3 + 8)) + 10",
      "10 + (3 + (8 + 3))",
      "((3 + 8) + 10) + 3",
      "((3 + 3) + 10) + 8",
      "(3 + (3 + 10)) + 8",
      "3 + (8 + (3 + 10))",
      "((8 + 3) + 3) + 10",
      "10 + ((3 + 8) + 3)",
      "8 / ((10 / 3) - 3)",
      "3 + (10 + (3 + 8))",
      "8 + (3 + (10 + 3))",
      "3 + ((3 + 10) + 8)",
      "(3 + 3) + (8 + 10)",
      "(3 + 10) + (8 + 3)",
      "(10 + (8 + 3)) + 3",
      "3 + ((8 + 3) + 10)",
      "8 + (3 + (3 + 10))",
      "((3 + 8) + 3) + 10",
      "(10 + 8) + (3 + 3)"
    ]
  },
  "3 3 8 11": {
    "cards": "3 3 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 8 12": {
    "cards": "3 3 8 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(12 - 8) * (3 + 3)",
      "((8 - 3) - 3) * 12",
      "12 * ((8 - 3) - 3)",
      "((12 - 3) / 3) * 8",
      "(3 + 3) * (12 - 8)",
      "12 * (8 - (3 + 3))",
      "(12 - 3) * (8 / 3)",
      "8 / (3 / (12 - 3))",
      "(12 - 3) / (3 / 8)",
      "(8 / 3) * (12 - 3)",
      "8 * ((12 - 3) / 3)",
      "(8 * (12 - 3)) / 3",
      "((12 - 3) * 8) / 3",
      "(8 - (3 + 3)) * 12",
      "8 * (12 - (3 * 3))",
      "(12 - (3 * 3)) * 8"
    ]
  },
  "3 3 8 13": {
    "cards": "3 3 8 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(3 + (13 - 8)) * 3",
      "3 * ((3 + 13) - 8)",
      "((3 + 13) - 8) * 3",
      "3 * ((13 + 3) - 8)",
      "(3 - (8 - 13)) * 3",
      "3 * (13 - (8 - 3))",
      "((13 + 3) - 8) * 3",
      "(13 + (3 - 8)) * 3",
      "3 * ((13 - 8) + 3)",
      "3 * (3 + (13 - 8))",
      "((3 - 8) + 13) * 3",
      "(13 - (8 - 3)) * 3",
      "((13 - 8) + 3) * 3",
      "3 * (13 + (3 - 8))",
      "3 * (3 - (8 - 13))",
      "3 * ((3 - 8) + 13)"
    ]
  },
  "3 3 9 9": {
    "cards": "3 3 9 9",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "(9 + (9 + 3)) + 3",
      "(9 * 3) - (9 / 3)",
      "3 + (3 + (9 + 9))",
      "((3 + 9) + 3) + 9",
      "3 + ((9 + 9) + 3)",
      "((9 / 3) * 9) - 3",
      "(3 + 3) + (9 + 9)",
      "(3 + 9) + (3 + 9)",
      "3 + (9 + (3 + 9))",
      "(9 + 9) + (3 + 3)",
      "(9 + 3) + (3 + 9)",
      "3 + ((3 + 9) + 9)",
      "(3 + (9 + 3)) + 9",
      "(3 * 9) - (9 / 3)",
      "(3 + 9) + (9 + 3)",
      "3 + (9 + (9 + 3))",
      "((9 + 3) + 3) + 9",
      "9 + ((3 + 9) + 3)",
      "9 * (3 - (3 / 9))",
      "9 + (3 + (9 + 3))",
      "3 + ((9 + 3) + 9)",
      "(3 + (3 + 9)) + 9",
      "(9 * (9 / 3)) - 3",
      "9 + (9 + (3 + 3))",
      "((9 * 9) / 3) - 3",
      "(3 - (3 / 9)) * 9",
      "9 + (3 + (3 + 9))",
      "9 + ((9 + 3) + 3)",
      "(9 + 3) + (9 + 3)",
      "((3 + 9) + 9) + 3",
      "((9 + 9) + 3) + 3",
      "(3 + (9 + 9)) + 3",
      "(9 + (3 + 9)) + 3",
      "(9 / (3 / 9)) - 3",
      "((3 + 3) + 9) + 9",
      "(9 + (3 + 3)) + 9",
      "9 + ((3 + 3) + 9)",
      "((9 + 3) + 9) + 3"
    ]
  },
  "3 3 9 10": {
    "cards": "3 3 9 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((3 * 10) - 9) + 3",
      "3 - (9 - (3 * 10))",
      "((3 * 10) + 3) - 9",
      "(10 * 3) - (9 - 3)",
      "(3 * 10) - (9 - 3)",
      "(3 + (10 * 3)) - 9",
      "(3 - 9) + (3 * 10)",
      "((10 * 3) + 3) - 9",
      "(3 + (3 * 10)) - 9",
      "(10 * 3) + (3 - 9)",
      "(3 - 9) + (10 * 3)",
      "((10 * 3) - 9) + 3",
      "3 + ((10 * 3) - 9)",
      "3 + ((3 * 10) - 9)",
      "(3 * 10) + (3 - 9)",
      "3 - (9 - (10 * 3))"
    ]
  },
  "3 3 9 11": {
    "cards": "3 3 9 11",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "9 / (3 / (11 - 3))",
      "(9 / 3) * (11 - 3)",
      "(11 - 3) / (3 / 9)",
      "3 * (11 - (9 / 3))",
      "(9 * (11 - 3)) / 3",
      "(11 - (9 / 3)) * 3",
      "((11 - 3) * 9) / 3",
      "9 * ((11 - 3) / 3)",
      "(11 - 3) * (9 / 3)",
      "((11 - 3) / 3) * 9"
    ]
  },
  "3 3 9 12": {
    "cards": "3 3 9 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((9 - 3) * 12) / 3",
      "(3 * (9 + 3)) - 12",
      "(3 * 12) - (9 + 3)",
      "((9 + 3) * 3) - 12",
      "(9 - 3) / (3 / 12)",
      "((3 + 9) * 3) - 12",
      "((3 * 12) - 3) - 9",
      "(12 / 3) * (9 - 3)",
      "12 / (3 / (9 - 3))",
      "(9 - 3) * (12 / 3)",
      "((3 * 12) - 9) - 3",
      "(3 * (3 + 9)) - 12",
      "((12 * 3) - 3) - 9",
      "(12 * (9 - 3)) / 3",
      "(12 * 3) - (3 + 9)",
      "((12 * 3) - 9) - 3",
      "(3 * 12) - (3 + 9)",
      "12 * ((9 - 3) / 3)",
      "(12 * 3) - (9 + 3)",
      "((9 - 3) / 3) * 12"
    ]
  },
  "3 3 9 13": {
    "cards": "3 3 9 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(13 - 9) * (3 + 3)",
      "(3 + 3) * (13 - 9)"
    ]
  },
  "3 3 10 10": {
    "cards": "3 3 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 10 11": {
    "cards": "3 3 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 10 12": {
    "cards": "3 3 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 10 13": {
    "cards": "3 3 10 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "10 + ((3 / 3) + 13)",
      "13 + ((3 / 3) + 10)",
      "(3 / 3) + (13 + 10)",
      "(10 + (3 / 3)) + 13",
      "10 + (13 + (3 / 3))",
      "((3 / 3) + 10) + 13",
      "(13 + 10) + (3 / 3)",
      "(13 + (3 / 3)) + 10",
      "13 + (10 + (3 / 3))",
      "((3 / 3) + 13) + 10",
      "(3 / 3) + (10 + 13)",
      "(10 + 13) + (3 / 3)"
    ]
  },
  "3 3 11 11": {
    "cards": "3 3 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 3 11 12": {
    "cards": "3 3 11 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "((3 * 11) - 12) + 3",
      "12 * (11 - (3 * 3))",
      "((11 * 3) + 3) - 12",
      "(3 - 12) + (11 * 3)",
      "(11 + (3 / 3)) + 12",
      "11 + ((3 / 3) + 12)",
      "(12 + 11) + (3 / 3)",
      "3 - (12 - (11 * 3))",
      "(11 + 12) + (3 / 3)",
      "12 + (11 + (3 / 3))",
      "(3 / 3) + (11 + 12)",
      "3 + ((11 * 3) - 12)",
      "((3 / 3) + 11) + 12",
      "(3 / 3) + (12 + 11)",
      "(3 * 11) + (3 - 12)",
      "11 + (12 + (3 / 3))",
      "((3 / 3) + 12) + 11",
      "(12 + (3 / 3)) + 11",
      "3 - (12 - (3 * 11))",
      "((11 * 3) - 12) + 3",
      "(11 * 3) - (12 - 3)",
      "(3 - 12) + (3 * 11)",
      "(11 - (3 * 3)) * 12",
      "12 + ((3 / 3) + 11)",
      "((3 * 11) + 3) - 12",
      "3 + ((3 * 11) - 12)",
      "(3 * 11) - (12 - 3)",
      "(3 + (3 * 11)) - 12",
      "(11 * 3) + (3 - 12)",
      "(3 + (11 * 3)) - 12"
    ]
  },
  "3 3 11 13": {
    "cards": "3 3 11 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "13 + ((11 - 3) + 3)",
      "13 + (11 - (3 - 3))",
      "11 + (13 * (3 / 3))",
      "(13 + 3) - (3 - 11)",
      "(11 + 13) - (3 - 3)",
      "3 + (11 - (3 - 13))",
      "11 - (3 - (3 + 13))",
      "3 - (3 - (13 + 11))",
      "13 + (3 + (11 - 3))",
      "(13 - (3 - 11)) + 3",
      "(11 - 3) + (13 + 3)",
      "3 * ((11 + 13) / 3)",
      "(3 + 11) - (3 - 13)",
      "3 / (3 / (11 + 13))",
      "((13 + 11) + 3) - 3",
      "13 - ((3 - 3) - 11)",
      "((11 / 3) * 3) + 13",
      "(3 / 3) * (11 + 13)",
      "(3 / 3) * (13 + 11)",
      "((3 + 11) - 3) + 13",
      "(13 / (3 / 3)) + 11",
      "(11 + 13) / (3 / 3)",
      "(13 + 11) - (3 - 3)",
      "(3 + (13 + 11)) - 3",
      "((3 * 13) / 3) + 11",
      "(3 * (13 / 3)) + 11",
      "(13 - 3) + (11 + 3)",
      "13 + ((3 - 3) + 11)",
      "11 + ((3 * 13) / 3)",
      "13 + ((3 * 11) / 3)",
      "11 + ((13 * 3) / 3)",
      "(3 / (3 / 11)) + 13",
      "11 + ((3 / 3) * 13)",
      "(3 + 13) + (11 - 3)",
      "(11 + 13) * (3 / 3)",
      "13 + (3 * (11 / 3))",
      "(13 + 11) * (3 / 3)",
      "((13 * 3) / 3) + 11",
      "(11 + 3) + (13 - 3)",
      "3 + ((11 - 3) + 13)",
      "((3 + 13) + 11) - 3",
      "3 + ((13 + 11) - 3)",
      "(3 - (3 - 13)) + 11",
      "11 + (13 / (3 / 3))",
      "((11 - 3) + 3) + 13",
      "11 + (3 * (13 / 3))",
      "11 + ((13 + 3) - 3)",
      "((3 / 3) * 13) + 11",
      "((3 + 13) - 3) + 11",
      "13 + ((11 + 3) - 3)",
      "13 + (3 / (3 / 11))",
      "((11 + 13) / 3) * 3",
      "11 - ((3 - 3) - 13)",
      "3 - ((3 - 11) - 13)",
      "((3 * 11) / 3) + 13",
      "11 + ((13 / 3) * 3)",
      "11 - ((3 - 13) - 3)",
      "3 - ((3 - 13) - 11)",
      "13 - (3 - (11 + 3))",
      "(13 * (3 / 3)) + 11",
      "13 + (11 * (3 / 3))",
      "11 + (13 - (3 - 3))",
      "((11 + 13) - 3) + 3",
      "3 + (11 + (13 - 3))",
      "((13 + 11) * 3) / 3",
      "(11 - 3) + (3 + 13)",
      "13 + ((3 / 3) * 11)",
      "13 + ((3 + 11) - 3)",
      "((11 + 13) * 3) / 3",
      "(13 + 11) / (3 / 3)",
      "(11 + (3 - 3)) + 13",
      "(13 + (11 + 3)) - 3",
      "3 / (3 / (13 + 11))",
      "3 * ((13 + 11) / 3)",
      "((13 + 3) + 11) - 3",
      "13 - ((3 - 11) - 3)",
      "((13 + 11) / 3) * 3",
      "((11 + 3) + 13) - 3",
      "13 + ((11 * 3) / 3)",
      "(3 + (13 - 3)) + 11",
      "((13 + 3) - 3) + 11",
      "(11 + (13 + 3)) - 3",
      "(3 * (11 / 3)) + 13",
      "(3 + 11) + (13 - 3)",
      "(3 / (3 / 13)) + 11",
      "13 + (11 + (3 - 3))",
      "((3 / 3) * 11) + 13",
      "11 + ((3 - 3) + 13)",
      "11 + (3 - (3 - 13))",
      "(3 + (11 + 13)) - 3",
      "(3 + 13) - (3 - 11)",
      "13 + (11 / (3 / 3))",
      "(3 * (13 + 11)) / 3",
      "3 - (3 - (11 + 13))",
      "3 + ((13 - 3) + 11)",
      "3 + ((11 + 13) - 3)",
      "(11 * (3 / 3)) + 13",
      "3 + (13 - (3 - 11))",
      "(13 - (3 - 3)) + 11",
      "3 + (13 + (11 - 3))",
      "(3 * (11 + 13)) / 3",
      "(11 + 3) - (3 - 13)",
      "((3 - 3) + 11) + 13",
      "(13 + 11) + (3 - 3)",
      "((13 - 3) + 3) + 11",
      "11 + ((3 + 13) - 3)",
      "13 + (3 - (3 - 11))",
      "(13 + (3 + 11)) - 3",
      "11 + (3 / (3 / 13))",
      "(11 - (3 - 13)) + 3",
      "(13 - 3) + (3 + 11)",
      "(11 / (3 / 3)) + 13",
      "(3 + (11 - 3)) + 13",
      "(13 + 3) + (11 - 3)",
      "((11 + 3) - 3) + 13",
      "(3 - 3) + (13 + 11)",
      "11 + (3 + (13 - 3))",
      "((13 - 3) + 11) + 3",
      "((3 + 11) + 13) - 3",
      "((11 - 3) + 13) + 3",
      "11 + ((13 - 3) + 3)",
      "(11 + (13 - 3)) + 3",
      "11 + (13 + (3 - 3))",
      "(3 - (3 - 11)) + 13",
      "(11 - (3 - 3)) + 13",
      "((11 * 3) / 3) + 13",
      "13 - (3 - (3 + 11))",
      "(13 + (3 - 3)) + 11",
      "(13 + (11 - 3)) + 3",
      "(3 - 3) + (11 + 13)",
      "11 - (3 - (13 + 3))",
      "((11 + 13) + 3) - 3",
      "((3 - 3) + 13) + 11",
      "(11 + (3 + 13)) - 3",
      "13 + ((11 / 3) * 3)",
      "(11 + 13) + (3 - 3)",
      "((13 / 3) * 3) + 11",
      "((13 + 11) - 3) + 3"
    ]
  },
  "3 3 12 12": {
    "cards": "3 3 12 12",
    "has_solution": "Y",
    "num_solutions": 75,
    "solutions": [
      "(3 * (12 / 3)) + 12",
      "12 + (12 + (3 - 3))",
      "(12 * 12) / (3 + 3)",
      "(12 / (3 + 3)) * 12",
      "(12 + 12) - (3 - 3)",
      "12 + ((12 - 3) + 3)",
      "(12 + 12) / (3 / 3)",
      "12 + (12 * (3 / 3))",
      "12 / ((3 + 3) / 12)",
      "12 + ((3 + 12) - 3)",
      "(12 - 3) + (3 + 12)",
      "12 + (3 / (3 / 12))",
      "(3 + (12 - 3)) + 12",
      "12 + ((12 * 3) / 3)",
      "(3 - (3 - 12)) + 12",
      "12 + ((12 / 3) * 3)",
      "3 * (12 - (12 / 3))",
      "(12 - (12 / 3)) * 3",
      "12 + (3 - (3 - 12))",
      "(12 + (3 + 12)) - 3",
      "((12 + 12) * 3) / 3",
      "(3 + 12) + (12 - 3)",
      "((3 * 12) / 3) + 12",
      "12 * (12 / (3 + 3))",
      "(3 * (12 + 12)) / 3",
      "((12 + 3) - 3) + 12",
      "(12 - (3 - 12)) + 3",
      "((12 + 3) + 12) - 3",
      "(12 + 12) + (3 - 3)",
      "((12 + 12) + 3) - 3",
      "12 - (3 - (12 + 3))",
      "(12 / (3 / 3)) + 12",
      "(12 - 3) + (12 + 3)",
      "12 - (3 - (3 + 12))",
      "(3 + (12 + 12)) - 3",
      "(12 + 3) - (3 - 12)",
      "(12 + 3) + (12 - 3)",
      "(12 + 12) * (3 / 3)",
      "12 + ((3 * 12) / 3)",
      "3 * ((12 + 12) / 3)",
      "(12 - (3 - 3)) + 12",
      "3 + (12 + (12 - 3))",
      "(3 / (3 / 12)) + 12",
      "((3 + 12) + 12) - 3",
      "(3 / 3) * (12 + 12)",
      "((12 - 3) + 3) + 12",
      "12 + (12 / (3 / 3))",
      "(3 - 3) + (12 + 12)",
      "3 + ((12 + 12) - 3)",
      "(3 + 12) - (3 - 12)",
      "((12 + 12) - 3) + 3",
      "12 - ((3 - 12) - 3)",
      "12 + ((12 + 3) - 3)",
      "((3 + 12) - 3) + 12",
      "12 + ((3 - 3) + 12)",
      "3 - ((3 - 12) - 12)",
      "(12 + (3 - 3)) + 12",
      "3 + (12 - (3 - 12))",
      "3 + ((12 - 3) + 12)",
      "(12 + (12 - 3)) + 3",
      "12 - ((3 - 3) - 12)",
      "((12 * 3) / 3) + 12",
      "((12 - 3) + 12) + 3",
      "((3 / 3) * 12) + 12",
      "3 / (3 / (12 + 12))",
      "12 + (3 * (12 / 3))",
      "(12 + (12 + 3)) - 3",
      "12 + ((3 / 3) * 12)",
      "12 + (12 - (3 - 3))",
      "((12 / 3) * 3) + 12",
      "(12 * (3 / 3)) + 12",
      "3 - (3 - (12 + 12))",
      "((12 + 12) / 3) * 3",
      "12 + (3 + (12 - 3))",
      "((3 - 3) + 12) + 12"
    ]
  },
  "3 3 12 13": {
    "cards": "3 3 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 + (13 - (3 / 3))",
      "((3 * 13) - 3) - 12",
      "(12 - (3 / 3)) + 13",
      "(13 + 12) - (3 / 3)",
      "(3 * 13) - (12 + 3)",
      "12 - ((3 / 3) - 13)",
      "(13 - (3 / 3)) + 12",
      "((13 * 3) - 3) - 12",
      "(12 + 13) - (3 / 3)",
      "((3 * 13) - 12) - 3",
      "(13 * 3) - (3 + 12)",
      "(13 * 3) - (12 + 3)",
      "13 - ((3 / 3) - 12)",
      "13 + (12 - (3 / 3))",
      "(3 * 13) - (3 + 12)",
      "((13 * 3) - 12) - 3"
    ]
  },
  "3 3 13 13": {
    "cards": "3 3 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 4 4": {
    "cards": "3 4 4 4",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((3 + 4) * 4) - 4",
      "((4 + 3) * 4) - 4",
      "(4 * (3 + 4)) - 4",
      "(4 * (4 + 3)) - 4"
    ]
  },
  "3 4 4 5": {
    "cards": "3 4 4 5",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((4 * 4) + 5) + 3",
      "3 + ((4 * 4) + 5)",
      "5 + ((4 * 4) + 3)",
      "4 * ((4 + 5) - 3)",
      "(4 + (5 - 3)) * 4",
      "(5 + (4 * 4)) + 3",
      "4 * (5 - (3 - 4))",
      "(3 + 5) + (4 * 4)",
      "4 * ((4 - 3) + 5)",
      "3 + (5 + (4 * 4))",
      "((5 - 3) + 4) * 4",
      "5 + (3 + (4 * 4))",
      "(5 + (4 - 3)) * 4",
      "((4 - 3) + 5) * 4",
      "4 * ((5 - 3) + 4)",
      "((4 * 4) + 3) + 5",
      "((5 + 4) - 3) * 4",
      "(4 - (3 - 5)) * 4",
      "(3 + (4 * 4)) + 5",
      "4 * (4 + (5 - 3))",
      "(5 + 3) + (4 * 4)",
      "(5 - (3 - 4)) * 4",
      "4 * ((5 + 4) - 3)",
      "(4 * 4) + (3 + 5)",
      "((4 + 5) - 3) * 4",
      "4 * (4 - (3 - 5))",
      "4 * (5 + (4 - 3))",
      "(4 * 4) + (5 + 3)"
    ]
  },
  "3 4 4 6": {
    "cards": "3 4 4 6",
    "has_solution": "Y",
    "num_solutions": 46,
    "solutions": [
      "4 * ((3 * 4) - 6)",
      "(4 - 3) * (4 * 6)",
      "((3 * 4) - 6) * 4",
      "(6 * 4) * (4 - 3)",
      "((6 - 4) * 4) * 3",
      "(4 * 6) * (4 - 3)",
      "(4 / (4 - 3)) * 6",
      "(3 * 4) * (6 - 4)",
      "(4 + 4) * (6 - 3)",
      "6 / ((4 - 3) / 4)",
      "(6 / (4 - 3)) * 4",
      "(4 * 6) / (4 - 3)",
      "4 * ((4 - 3) * 6)",
      "((6 - 4) * 3) * 4",
      "(6 * (4 - 3)) * 4",
      "(6 - 4) * (4 * 3)",
      "3 * ((6 - 4) * 4)",
      "((6 / 3) + 4) * 4",
      "((4 - 3) * 4) * 6",
      "6 * ((4 / 4) + 3)",
      "(6 * 4) / (4 - 3)",
      "4 * (4 + (6 / 3))",
      "4 * (6 * (4 - 3))",
      "(4 - 3) * (6 * 4)",
      "(4 * (6 - 4)) * 3",
      "4 * (6 / (4 - 3))",
      "6 * ((4 - 3) * 4)",
      "4 * ((4 * 3) - 6)",
      "6 * (4 / (4 - 3))",
      "4 * ((6 - 4) * 3)",
      "3 * (4 * (6 - 4))",
      "4 * (3 * (6 - 4))",
      "(3 + (4 / 4)) * 6",
      "(4 * 3) * (6 - 4)",
      "((4 * 3) - 6) * 4",
      "(6 - 4) * (3 * 4)",
      "(3 * (6 - 4)) * 4",
      "((4 / 4) + 3) * 6",
      "6 * (4 * (4 - 3))",
      "4 * ((6 / 3) + 4)",
      "(4 * (4 - 3)) * 6",
      "(6 - 3) * (4 + 4)",
      "6 * (3 + (4 / 4))",
      "(4 + (6 / 3)) * 4",
      "4 / ((4 - 3) / 6)",
      "((4 - 3) * 6) * 4"
    ]
  },
  "3 4 4 7": {
    "cards": "3 4 4 7",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "4 * ((3 - 4) + 7)",
      "(7 - (4 - 3)) * 4",
      "4 * (3 + (7 - 4))",
      "(3 - (4 - 7)) * 4",
      "4 * (7 - (4 - 3))",
      "(7 + (4 / 4)) * 3",
      "4 * ((7 + 3) - 4)",
      "4 * (3 - (4 - 7))",
      "((3 - 4) + 7) * 4",
      "3 * ((4 / 4) + 7)",
      "4 * ((3 + 7) - 4)",
      "4 * ((7 - 4) + 3)",
      "(7 + (3 - 4)) * 4",
      "3 * (7 + (4 / 4))",
      "((7 - 4) + 3) * 4",
      "((7 + 3) - 4) * 4",
      "4 * (7 + (3 - 4))",
      "((3 + 7) - 4) * 4",
      "(3 + (7 - 4)) * 4",
      "((4 / 4) + 7) * 3"
    ]
  },
  "3 4 4 8": {
    "cards": "3 4 4 8",
    "has_solution": "Y",
    "num_solutions": 170,
    "solutions": [
      "(4 + 8) + (4 * 3)",
      "((8 - 4) + 4) * 3",
      "4 - (4 - (8 * 3))",
      "4 + ((3 * 8) - 4)",
      "8 * ((3 - 4) + 4)",
      "8 + (4 + (3 * 4))",
      "(3 * (8 * 4)) / 4",
      "(8 - (4 - 4)) * 3",
      "4 + (4 * (8 - 3))",
      "(8 * (4 / 4)) * 3",
      "3 * (8 * (4 / 4))",
      "(8 * 3) - (4 - 4)",
      "((8 * 3) - 4) + 4",
      "4 + (8 + (4 * 3))",
      "(8 * 3) / (4 / 4)",
      "3 * (4 / (4 / 8))",
      "8 * (4 - (4 - 3))",
      "3 / ((4 / 4) / 8)",
      "(4 + 8) + (3 * 4)",
      "((4 - 4) + 3) * 8",
      "(8 / 4) * (4 * 3)",
      "((8 * 4) / 4) * 3",
      "8 / ((4 / 3) / 4)",
      "3 * (4 - (4 - 8))",
      "(8 + 4) + (3 * 4)",
      "(3 - (4 - 4)) * 8",
      "((3 * 4) / 4) * 8",
      "(8 / (4 / 4)) * 3",
      "3 * (4 * (8 / 4))",
      "8 / (4 / (4 * 3))",
      "3 * ((4 - 4) + 8)",
      "4 + ((8 - 3) * 4)",
      "3 * (8 / (4 / 4))",
      "(4 + (4 * 3)) + 8",
      "((3 / 4) * 4) * 8",
      "4 + ((8 * 3) - 4)",
      "(3 * 8) + (4 - 4)",
      "4 * (3 / (4 / 8))",
      "(4 * 8) * (3 / 4)",
      "3 / (4 / (8 * 4))",
      "4 / (4 / (8 * 3))",
      "((3 * 8) / 4) * 4",
      "(8 / (4 / 3)) * 4",
      "((8 * 3) / 4) * 4",
      "(8 / 4) * (3 * 4)",
      "((4 * 4) - 8) * 3",
      "8 * ((4 * 3) / 4)",
      "4 / ((4 / 3) / 8)",
      "8 + (4 + (4 * 3))",
      "3 * (4 + (8 - 4))",
      "(4 + (3 * 4)) + 8",
      "4 + (8 + (3 * 4))",
      "((4 + 3) - 4) * 8",
      "(3 + (4 - 4)) * 8",
      "((4 / 4) * 3) * 8",
      "((4 + 8) - 4) * 3",
      "4 - (4 - (3 * 8))",
      "(3 * (8 / 4)) * 4",
      "4 / ((4 / 8) / 3)",
      "(4 * (3 * 8)) / 4",
      "4 + ((4 * 3) + 8)",
      "((4 * 3) / 4) * 8",
      "8 * ((4 - 4) + 3)",
      "(4 + (3 * 8)) - 4",
      "(4 + (3 - 4)) * 8",
      "(8 * (4 * 3)) / 4",
      "((4 - 4) + 8) * 3",
      "(3 * 4) / (4 / 8)",
      "(4 / (4 / 8)) * 3",
      "3 * ((8 / 4) * 4)",
      "(4 + (8 * 3)) - 4",
      "8 * (4 / (4 / 3))",
      "8 * (3 / (4 / 4))",
      "8 * (4 * (3 / 4))",
      "((4 * 3) * 8) / 4",
      "8 * (3 - (4 - 4))",
      "((3 * 8) + 4) - 4",
      "3 * ((4 * 8) / 4)",
      "((3 - 4) + 4) * 8",
      "(3 / (4 / 4)) * 8",
      "((4 * 8) * 3) / 4",
      "(8 * (3 / 4)) * 4",
      "(8 * 4) / (4 / 3)",
      "(8 * 4) * (3 / 4)",
      "(4 - (4 - 8)) * 3",
      "(3 * 4) + (4 + 8)",
      "8 * ((3 / 4) * 4)",
      "(3 * 8) / (4 / 4)",
      "(3 * (4 / 4)) * 8",
      "(4 / 4) * (3 * 8)",
      "3 * ((8 * 4) / 4)",
      "(3 / 4) * (8 * 4)",
      "(8 + (3 * 4)) + 4",
      "8 + ((4 * 3) + 4)",
      "4 / (4 / (3 * 8))",
      "(4 + (8 - 4)) * 3",
      "8 / (4 / (3 * 4))",
      "4 * (8 * (3 / 4))",
      "((8 / 4) * 4) * 3",
      "(4 * (8 / 4)) * 3",
      "4 - ((3 - 8) * 4)",
      "(4 * 3) / (4 / 8)",
      "((8 - 3) * 4) + 4",
      "8 * (4 + (3 - 4))",
      "(4 / (4 / 3)) * 8",
      "3 * (8 + (4 - 4))",
      "(4 - (4 - 3)) * 8",
      "((8 * 3) * 4) / 4",
      "(3 / 4) * (4 * 8)",
      "((8 / 4) * 3) * 4",
      "((3 * 8) * 4) / 4",
      "((4 / 4) * 8) * 3",
      "4 * (3 * (8 / 4))",
      "4 * ((3 * 8) / 4)",
      "4 * (8 / (4 / 3))",
      "3 / (4 / (4 * 8))",
      "(4 / 4) * (8 * 3)",
      "3 * ((4 * 4) - 8)",
      "4 * ((8 * 3) / 4)",
      "((3 / 4) * 8) * 4",
      "8 * ((3 * 4) / 4)",
      "(4 * 3) + (8 + 4)",
      "((4 * 3) + 8) + 4",
      "((4 * 3) + 4) + 8",
      "4 + ((3 * 4) + 8)",
      "((4 * 8) / 4) * 3",
      "(4 * (8 - 3)) + 4",
      "(4 * (8 * 3)) / 4",
      "((8 * 4) * 3) / 4",
      "((3 + 4) - 4) * 8",
      "((3 * 4) * 8) / 4",
      "(4 * (3 / 4)) * 8",
      "4 * ((8 / 4) * 3)",
      "3 / ((4 / 8) / 4)",
      "8 * ((4 + 3) - 4)",
      "3 * (8 - (4 - 4))",
      "(8 * 3) * (4 / 4)",
      "8 + ((3 * 4) + 4)",
      "3 * ((8 + 4) - 4)",
      "(4 * 8) / (4 / 3)",
      "((3 * 8) - 4) + 4",
      "((3 * 4) + 4) + 8",
      "8 * ((4 / 4) * 3)",
      "(3 / (4 / 8)) * 4",
      "((8 * 3) + 4) - 4",
      "(8 + (4 - 4)) * 3",
      "(8 * 3) + (4 - 4)",
      "8 * (3 + (4 - 4))",
      "(3 * 4) + (8 + 4)",
      "(3 * 8) * (4 / 4)",
      "((8 + 4) - 4) * 3",
      "(4 * 3) + (4 + 8)",
      "(3 * (4 * 8)) / 4",
      "3 * ((8 - 4) + 4)",
      "4 * ((3 / 4) * 8)",
      "8 / ((4 / 4) / 3)",
      "(4 - 4) + (3 * 8)",
      "(8 * (3 * 4)) / 4",
      "8 * ((3 + 4) - 4)",
      "8 * (3 * (4 / 4))",
      "4 - (4 * (3 - 8))",
      "3 * ((4 + 8) - 4)",
      "(4 * 3) * (8 / 4)",
      "(3 * 4) * (8 / 4)",
      "3 * ((4 / 4) * 8)",
      "(4 - 4) + (8 * 3)",
      "((3 * 4) + 8) + 4",
      "(8 + (4 * 3)) + 4",
      "(3 * 8) - (4 - 4)",
      "(8 + 4) + (4 * 3)"
    ]
  },
  "3 4 4 9": {
    "cards": "3 4 4 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 * 4) - (4 * 3)",
      "(9 * (4 + 4)) / 3",
      "9 * (4 - (4 / 3))",
      "(9 - (4 / 4)) * 3",
      "(9 * 4) - (3 * 4)",
      "9 / (3 / (4 + 4))",
      "((4 + 4) / 3) * 9",
      "9 * ((4 + 4) / 3)",
      "(4 + 4) / (3 / 9)",
      "(4 * 9) - (3 * 4)",
      "(4 - (4 / 3)) * 9",
      "(9 / 3) * (4 + 4)",
      "3 * (9 - (4 / 4))",
      "((4 + 4) * 9) / 3",
      "(4 + 4) * (9 / 3)",
      "(4 * 9) - (4 * 3)"
    ]
  },
  "3 4 4 10": {
    "cards": "3 4 4 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((10 - 3) * 4) - 4",
      "(4 * (10 - 3)) - 4"
    ]
  },
  "3 4 4 11": {
    "cards": "3 4 4 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(11 + (4 * 4)) - 3",
      "((4 * 4) + 11) - 3",
      "(4 * 4) - (3 - 11)",
      "11 - (3 - (4 * 4))",
      "11 + ((4 * 4) - 3)",
      "(4 * 4) + (11 - 3)",
      "(11 - 3) + (4 * 4)",
      "((4 * 4) - 3) + 11"
    ]
  },
  "3 4 4 12": {
    "cards": "3 4 4 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "12 * (3 - (4 / 4))",
      "4 * (3 + (12 / 4))",
      "((12 / 4) + 3) * 4",
      "(3 - (4 / 4)) * 12",
      "4 * ((12 / 4) + 3)",
      "(3 + (12 / 4)) * 4"
    ]
  },
  "3 4 4 13": {
    "cards": "3 4 4 13",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "(3 + (13 + 4)) + 4",
      "(4 + (4 + 13)) + 3",
      "3 + (4 + (4 + 13))",
      "(13 + (4 + 4)) + 3",
      "(4 + 3) + (4 + 13)",
      "4 * ((13 - 4) - 3)",
      "4 * (13 - (4 + 3))",
      "((13 + 3) + 4) + 4",
      "4 + ((3 + 13) + 4)",
      "3 + ((4 + 4) + 13)",
      "((4 + 3) + 4) + 13",
      "3 + (13 + (4 + 4))",
      "((4 + 13) + 3) + 4",
      "(13 + 4) + (4 + 3)",
      "13 + (4 + (4 + 3))",
      "(4 + 13) + (4 + 3)",
      "4 + ((4 + 13) + 3)",
      "4 + (3 + (4 + 13))",
      "(4 + (3 + 4)) + 13",
      "4 + (4 + (13 + 3))",
      "((4 + 13) + 4) + 3",
      "(4 + (13 + 3)) + 4",
      "(3 + 4) + (13 + 4)",
      "(13 + (4 + 3)) + 4",
      "(3 + 13) + (4 + 4)",
      "3 + ((4 + 13) + 4)",
      "(13 + (3 + 4)) + 4",
      "13 + ((4 + 4) + 3)",
      "4 * (13 - (3 + 4))",
      "3 + (4 + (13 + 4))",
      "13 + (4 + (3 + 4))",
      "(3 + (4 + 13)) + 4",
      "(3 + (4 + 4)) + 13",
      "(13 - (3 + 4)) * 4",
      "((13 - 4) - 3) * 4",
      "((4 + 4) + 3) + 13",
      "4 + (3 + (13 + 4))",
      "((3 + 4) + 13) + 4",
      "13 + (3 + (4 + 4))",
      "((13 + 4) + 3) + 4",
      "(4 + (3 + 13)) + 4",
      "3 + ((13 + 4) + 4)",
      "(4 + 4) + (3 + 13)",
      "((4 + 3) + 13) + 4",
      "((3 + 4) + 4) + 13",
      "4 * ((13 - 3) - 4)",
      "(13 + 3) + (4 + 4)",
      "(3 + 4) + (4 + 13)",
      "((13 + 4) + 4) + 3",
      "((3 + 13) + 4) + 4",
      "13 + ((4 + 3) + 4)",
      "4 + ((13 + 3) + 4)",
      "4 + ((13 + 4) + 3)",
      "13 + ((3 + 4) + 4)",
      "(4 + 13) + (3 + 4)",
      "((13 - 3) - 4) * 4",
      "((4 + 4) + 13) + 3",
      "(4 + (13 + 4)) + 3",
      "(13 + 4) + (3 + 4)",
      "4 + ((3 + 4) + 13)",
      "(4 + (4 + 3)) + 13",
      "4 + ((4 + 3) + 13)",
      "4 + (13 + (4 + 3))",
      "4 + (4 + (3 + 13))",
      "(4 + 3) + (13 + 4)",
      "(4 + 4) + (13 + 3)",
      "4 + (13 + (3 + 4))",
      "(13 - (4 + 3)) * 4"
    ]
  },
  "3 4 5 5": {
    "cards": "3 4 5 5",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(5 * 3) + (5 + 4)",
      "3 - (4 - (5 * 5))",
      "((5 * 5) + 3) - 4",
      "4 + (5 + (5 * 3))",
      "((3 * 5) + 4) + 5",
      "(3 - 4) + (5 * 5)",
      "(3 * 5) + (4 + 5)",
      "(5 * 5) + (3 - 4)",
      "4 + ((3 * 5) + 5)",
      "4 + (5 + (3 * 5))",
      "(5 * 3) + (4 + 5)",
      "(5 * 5) - (4 - 3)",
      "(4 + (3 * 5)) + 5",
      "(4 + 5) + (5 * 3)",
      "(3 * 5) + (5 + 4)",
      "(4 + 5) + (3 * 5)",
      "((3 * 5) + 5) + 4",
      "(5 + 4) + (5 * 3)",
      "(5 + (3 * 5)) + 4",
      "5 + (4 + (5 * 3))",
      "(3 + (5 * 5)) - 4",
      "3 + ((5 * 5) - 4)",
      "(5 + (5 * 3)) + 4",
      "((5 * 3) + 5) + 4",
      "((5 * 5) - 4) + 3",
      "4 + ((5 * 3) + 5)",
      "((5 * 3) + 4) + 5",
      "5 + ((3 * 5) + 4)",
      "5 + (4 + (3 * 5))",
      "5 + ((5 * 3) + 4)",
      "(5 + 4) + (3 * 5)",
      "(4 + (5 * 3)) + 5"
    ]
  },
  "3 4 5 6": {
    "cards": "3 4 5 6",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((3 + 5) - 4) * 6",
      "6 * ((5 + 3) - 4)",
      "(3 - (4 - 5)) * 6",
      "(3 + (5 - 4)) * 6",
      "(5 - (4 - 3)) * 6",
      "6 * ((5 - 4) + 3)",
      "((5 - 4) + 3) * 6",
      "((5 + 3) - 4) * 6",
      "6 * (3 + (5 - 4))",
      "6 * ((3 - 4) + 5)",
      "6 * (3 - (4 - 5))",
      "6 * (5 - (4 - 3))",
      "((3 - 4) + 5) * 6",
      "(5 + (3 - 4)) * 6",
      "6 * (5 + (3 - 4))",
      "6 * ((3 + 5) - 4)"
    ]
  },
  "3 4 5 7": {
    "cards": "3 4 5 7",
    "has_solution": "Y",
    "num_solutions": 78,
    "solutions": [
      "(7 + 5) + (3 * 4)",
      "((4 * 3) + 7) + 5",
      "3 * ((7 + 5) - 4)",
      "5 + (7 + (3 * 4))",
      "3 * (5 - (4 - 7))",
      "((7 - 4) + 5) * 3",
      "5 + ((3 * 4) + 7)",
      "(5 + (4 * 3)) + 7",
      "((7 - 3) * 5) + 4",
      "(7 - 3) + (5 * 4)",
      "(4 * 3) + (5 + 7)",
      "7 + (5 + (4 * 3))",
      "3 * ((5 - 4) + 7)",
      "(7 + (3 * 4)) + 5",
      "(3 * 4) + (7 + 5)",
      "7 + ((4 * 3) + 5)",
      "(5 + 3) * (7 - 4)",
      "4 + (5 * (7 - 3))",
      "7 - (3 - (5 * 4))",
      "(7 + (4 * 3)) + 5",
      "4 * (3 * (7 - 5))",
      "((4 * 5) + 7) - 3",
      "(5 + 7) + (4 * 3)",
      "(3 + 5) * (7 - 4)",
      "(7 - 5) * (3 * 4)",
      "4 * ((7 - 5) * 3)",
      "(4 * 3) + (7 + 5)",
      "(7 + 5) + (4 * 3)",
      "(5 + 7) + (3 * 4)",
      "(7 - 4) * (3 + 5)",
      "((4 * 5) - 3) + 7",
      "7 + ((5 * 4) - 3)",
      "((3 * 4) + 5) + 7",
      "((3 * 4) + 7) + 5",
      "(4 * 5) - (3 - 7)",
      "(7 + (5 * 4)) - 3",
      "(3 * 4) + (5 + 7)",
      "7 + (5 + (3 * 4))",
      "(5 * 4) + (7 - 3)",
      "((7 - 5) * 3) * 4",
      "4 - (5 * (3 - 7))",
      "(7 - 3) + (4 * 5)",
      "((5 - 4) + 7) * 3",
      "3 * ((7 - 4) + 5)",
      "(5 - (4 - 7)) * 3",
      "3 * ((7 - 5) * 4)",
      "(7 - 5) * (4 * 3)",
      "7 - (3 - (4 * 5))",
      "(4 * (7 - 5)) * 3",
      "(5 + (3 * 4)) + 7",
      "(7 - 4) * (5 + 3)",
      "4 + ((7 - 3) * 5)",
      "((7 + 5) - 4) * 3",
      "(3 * 4) * (7 - 5)",
      "(5 * (7 - 3)) + 4",
      "7 + ((3 * 4) + 5)",
      "(5 * 4) - (3 - 7)",
      "((4 * 3) + 5) + 7",
      "4 - ((3 - 7) * 5)",
      "(7 + (4 * 5)) - 3",
      "5 + ((4 * 3) + 7)",
      "7 + ((4 * 5) - 3)",
      "(4 * 3) * (7 - 5)",
      "(7 - (4 - 5)) * 3",
      "((5 * 4) + 7) - 3",
      "((7 - 5) * 4) * 3",
      "3 * (7 - (4 - 5))",
      "5 + (7 + (4 * 3))",
      "((5 + 7) - 4) * 3",
      "(5 + (7 - 4)) * 3",
      "(4 * 5) + (7 - 3)",
      "3 * (4 * (7 - 5))",
      "3 * ((5 + 7) - 4)",
      "(3 * (7 - 5)) * 4",
      "((5 * 4) - 3) + 7",
      "3 * (5 + (7 - 4))",
      "3 * (7 + (5 - 4))",
      "(7 + (5 - 4)) * 3"
    ]
  },
  "3 4 5 8": {
    "cards": "3 4 5 8",
    "has_solution": "Y",
    "num_solutions": 68,
    "solutions": [
      "((5 + 4) / 3) * 8",
      "(5 - 3) * (4 + 8)",
      "((5 - 4) * 8) * 3",
      "(5 - 3) * (8 + 4)",
      "(8 + (3 - 5)) * 4",
      "8 * (3 / (5 - 4))",
      "(4 + 5) / (3 / 8)",
      "(5 - 4) * (3 * 8)",
      "((8 * 4) - 3) - 5",
      "((4 * 8) - 3) - 5",
      "3 * ((5 - 4) * 8)",
      "(3 + (8 - 5)) * 4",
      "4 * ((3 - 5) + 8)",
      "((5 + 3) * 4) - 8",
      "(8 * (5 + 4)) / 3",
      "(8 / 3) * (4 + 5)",
      "(5 + 4) / (3 / 8)",
      "8 * ((5 - 4) * 3)",
      "(8 * 4) - (5 + 3)",
      "((8 * 4) - 5) - 3",
      "8 * (3 * (5 - 4))",
      "3 / ((5 - 4) / 8)",
      "(8 * (5 - 4)) * 3",
      "(3 / (5 - 4)) * 8",
      "4 * ((3 + 8) - 5)",
      "(8 / (5 - 4)) * 3",
      "4 * (8 - (5 - 3))",
      "3 * (8 / (5 - 4))",
      "(8 + 4) * (5 - 3)",
      "((3 - 5) + 8) * 4",
      "4 * ((8 + 3) - 5)",
      "(4 * 8) - (5 + 3)",
      "((4 + 5) * 8) / 3",
      "4 * (3 - (5 - 8))",
      "(4 + 8) * (5 - 3)",
      "(4 * 8) - (3 + 5)",
      "((8 - 5) + 3) * 4",
      "((3 + 5) * 4) - 8",
      "((4 + 5) / 3) * 8",
      "4 * (3 + (8 - 5))",
      "(3 * 8) * (5 - 4)",
      "8 / (3 / (4 + 5))",
      "((5 - 4) * 3) * 8",
      "(8 * 4) - (3 + 5)",
      "8 / ((5 - 4) / 3)",
      "8 / (3 / (5 + 4))",
      "(5 + 4) * (8 / 3)",
      "(4 * (5 + 3)) - 8",
      "8 * ((5 + 4) / 3)",
      "4 * ((8 - 5) + 3)",
      "((5 + 4) * 8) / 3",
      "(4 * (3 + 5)) - 8",
      "(4 + 5) * (8 / 3)",
      "((3 + 8) - 5) * 4",
      "((8 + 3) - 5) * 4",
      "4 * (8 + (3 - 5))",
      "(8 * (4 + 5)) / 3",
      "(3 * (5 - 4)) * 8",
      "(8 / 3) * (5 + 4)",
      "(3 - (5 - 8)) * 4",
      "(8 - (5 - 3)) * 4",
      "3 * (8 * (5 - 4))",
      "(3 * 8) / (5 - 4)",
      "(8 * 3) / (5 - 4)",
      "(8 * 3) * (5 - 4)",
      "(5 - 4) * (8 * 3)",
      "8 * ((4 + 5) / 3)",
      "((4 * 8) - 5) - 3"
    ]
  },
  "3 4 5 9": {
    "cards": "3 4 5 9",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(4 + (9 - 5)) * 3",
      "4 * ((3 * 5) - 9)",
      "3 * (4 - (5 - 9))",
      "(9 + (4 - 5)) * 3",
      "3 * (9 - (5 - 4))",
      "((9 - 5) + 4) * 3",
      "3 * ((4 - 5) + 9)",
      "((4 + 9) - 5) * 3",
      "((9 + 4) - 5) * 3",
      "3 * (9 + (4 - 5))",
      "3 * ((9 - 5) + 4)",
      "((3 * 5) - 9) * 4",
      "3 * ((4 + 9) - 5)",
      "4 * ((5 * 3) - 9)",
      "((5 * 3) - 9) * 4",
      "((4 - 5) + 9) * 3",
      "(9 - (5 - 4)) * 3",
      "(4 - (5 - 9)) * 3",
      "3 * ((9 + 4) - 5)",
      "3 * (4 + (9 - 5))"
    ]
  },
  "3 4 5 10": {
    "cards": "3 4 5 10",
    "has_solution": "Y",
    "num_solutions": 96,
    "solutions": [
      "3 * ((4 / 5) * 10)",
      "(10 * 4) / (5 / 3)",
      "((10 / 5) * 3) * 4",
      "4 / (5 / (3 * 10))",
      "((3 * 10) / 5) * 4",
      "4 + (10 * (5 - 3))",
      "(10 / 5) * (3 * 4)",
      "(4 * (3 * 10)) / 5",
      "4 * ((3 * 10) / 5)",
      "3 * (4 / (5 / 10))",
      "(10 / (5 / 4)) * 3",
      "(3 * (10 / 5)) * 4",
      "((5 - 3) * 10) + 4",
      "4 / ((5 / 3) / 10)",
      "10 / (5 / (3 * 4))",
      "((3 * 10) * 4) / 5",
      "3 * ((10 / 5) * 4)",
      "(3 / (5 / 4)) * 10",
      "10 * ((3 * 4) / 5)",
      "(4 * (10 * 3)) / 5",
      "(3 / 5) * (4 * 10)",
      "10 / ((5 / 4) / 3)",
      "3 * ((10 * 4) / 5)",
      "((3 * 4) * 10) / 5",
      "10 * (4 * (3 / 5))",
      "(10 * 4) * (3 / 5)",
      "3 / ((5 / 10) / 4)",
      "(10 / 5) * (4 * 3)",
      "4 * (3 * (10 / 5))",
      "10 / (5 / (4 * 3))",
      "3 / ((5 / 4) / 10)",
      "10 * ((4 * 3) / 5)",
      "4 * ((3 / 5) * 10)",
      "((4 * 10) / 5) * 3",
      "((10 * 4) * 3) / 5",
      "(3 * (4 * 10)) / 5",
      "((10 / 5) * 4) * 3",
      "10 * ((4 / 5) * 3)",
      "10 * (4 / (5 / 3))",
      "(10 * 3) * (4 / 5)",
      "((4 * 10) * 3) / 5",
      "4 * (10 / (5 / 3))",
      "3 * (10 * (4 / 5))",
      "(10 * (3 / 5)) * 4",
      "((4 / 5) * 10) * 3",
      "(3 / (5 / 10)) * 4",
      "3 * ((4 * 10) / 5)",
      "(3 * 4) / (5 / 10)",
      "4 - (10 * (3 - 5))",
      "(10 * 3) / (5 / 4)",
      "(4 * 10) * (3 / 5)",
      "(4 / 5) * (3 * 10)",
      "(10 / (5 / 3)) * 4",
      "(3 * (4 / 5)) * 10",
      "(4 * (10 / 5)) * 3",
      "(10 * (4 * 3)) / 5",
      "10 * (3 * (4 / 5))",
      "((4 / 5) * 3) * 10",
      "4 / (5 / (10 * 3))",
      "((10 * 3) / 5) * 4",
      "4 - ((3 - 5) * 10)",
      "((10 * 4) / 5) * 3",
      "10 / ((5 / 3) / 4)",
      "4 + ((5 - 3) * 10)",
      "10 * ((3 / 5) * 4)",
      "(4 / (5 / 3)) * 10",
      "3 * (4 * (10 / 5))",
      "(4 / (5 / 10)) * 3",
      "4 * ((10 * 3) / 5)",
      "((10 * 3) * 4) / 5",
      "(4 * 3) / (5 / 10)",
      "((4 * 3) / 5) * 10",
      "(10 * (3 * 4)) / 5",
      "10 * (3 / (5 / 4))",
      "((4 * 3) * 10) / 5",
      "4 * ((10 / 5) * 3)",
      "(10 * (5 - 3)) + 4",
      "(4 * 3) * (10 / 5)",
      "(3 / 5) * (10 * 4)",
      "4 / ((5 / 10) / 3)",
      "3 / (5 / (10 * 4))",
      "3 / (5 / (4 * 10))",
      "((3 / 5) * 10) * 4",
      "(10 * (4 / 5)) * 3",
      "(3 * 10) / (5 / 4)",
      "(3 * 4) * (10 / 5)",
      "4 * (3 / (5 / 10))",
      "(3 * 10) * (4 / 5)",
      "(3 * (10 * 4)) / 5",
      "3 * (10 / (5 / 4))",
      "((3 / 5) * 4) * 10",
      "(4 * (3 / 5)) * 10",
      "(4 * 10) / (5 / 3)",
      "((3 * 4) / 5) * 10",
      "4 * (10 * (3 / 5))",
      "(4 / 5) * (10 * 3)"
    ]
  },
  "3 4 5 11": {
    "cards": "3 4 5 11",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((11 * 3) - 4) - 5",
      "(5 * (4 + 3)) - 11",
      "((3 + 4) * 5) - 11",
      "((3 * 11) - 5) - 4",
      "((11 * 3) - 5) - 4",
      "(11 * 3) - (5 + 4)",
      "((3 * 11) - 4) - 5",
      "(5 * (3 + 4)) - 11",
      "((4 + 3) * 5) - 11",
      "(3 * 11) - (4 + 5)",
      "(3 * 11) - (5 + 4)",
      "(11 * 3) - (4 + 5)"
    ]
  },
  "3 4 5 12": {
    "cards": "3 4 5 12",
    "has_solution": "Y",
    "num_solutions": 188,
    "solutions": [
      "((5 + 12) + 4) + 3",
      "3 + ((5 + 12) + 4)",
      "(12 + (4 + 5)) + 3",
      "(5 + (12 + 4)) + 3",
      "(5 + (4 + 12)) + 3",
      "(5 * (12 / 3)) + 4",
      "((12 + 3) + 4) + 5",
      "4 + ((12 / 3) * 5)",
      "((4 + 3) + 5) + 12",
      "4 + (12 * (5 / 3))",
      "((12 + 4) + 5) + 3",
      "((4 + 3) + 12) + 5",
      "12 * ((4 - 5) + 3)",
      "((3 + 5) + 4) + 12",
      "3 + (4 + (12 + 5))",
      "(4 + (12 + 5)) + 3",
      "(5 / (3 / 12)) + 4",
      "(12 / 4) * (3 + 5)",
      "3 + ((5 + 4) + 12)",
      "(3 - (5 - 4)) * 12",
      "4 + (5 + (3 + 12))",
      "((3 + 12) + 5) + 4",
      "12 + (3 + (4 + 5))",
      "4 + (5 / (3 / 12))",
      "(3 + (4 - 5)) * 12",
      "12 + (5 + (4 + 3))",
      "(12 / 4) * (5 + 3)",
      "((5 + 4) + 3) + 12",
      "(12 + (4 + 3)) + 5",
      "(4 + 12) + (3 + 5)",
      "(3 + (12 + 4)) + 5",
      "12 / (4 / (3 + 5))",
      "3 + (12 + (4 + 5))",
      "((5 / 3) * 12) + 4",
      "4 + (3 + (5 + 12))",
      "(3 + 5) / (4 / 12)",
      "5 + ((3 + 12) + 4)",
      "12 * ((3 - 5) + 4)",
      "(4 + 12) + (5 + 3)",
      "(5 + (4 + 3)) + 12",
      "((5 + 3) / 4) * 12",
      "(3 + (5 + 4)) + 12",
      "5 + (3 + (4 + 12))",
      "5 + (12 + (3 + 4))",
      "(5 + 12) + (4 + 3)",
      "(12 * (5 + 3)) / 4",
      "(12 / (5 - 3)) * 4",
      "(12 + 3) + (5 + 4)",
      "(5 + 3) + (12 + 4)",
      "12 + (4 + (5 + 3))",
      "3 * ((4 * 5) - 12)",
      "(12 + (3 + 4)) + 5",
      "(4 + (5 + 12)) + 3",
      "(4 + (3 + 12)) + 5",
      "4 + ((12 + 5) + 3)",
      "((3 - 5) + 4) * 12",
      "12 + (5 + (3 + 4))",
      "3 + ((4 + 12) + 5)",
      "(12 + 4) + (3 + 5)",
      "(12 + (5 + 4)) + 3",
      "(12 * 4) / (5 - 3)",
      "(3 + 12) + (4 + 5)",
      "(5 + 3) / (4 / 12)",
      "(5 + 4) + (3 + 12)",
      "12 / ((5 - 3) / 4)",
      "12 + ((5 + 3) + 4)",
      "((12 + 5) + 3) + 4",
      "3 * ((5 * 4) - 12)",
      "12 * ((3 + 4) - 5)",
      "(5 + (12 + 3)) + 4",
      "(12 / 3) + (5 * 4)",
      "12 * (4 + (3 - 5))",
      "(12 / (3 / 5)) + 4",
      "(3 + 4) + (12 + 5)",
      "12 + ((3 + 5) + 4)",
      "3 + (5 + (4 + 12))",
      "(12 * (3 + 5)) / 4",
      "3 + ((12 + 4) + 5)",
      "4 + ((5 + 3) + 12)",
      "(5 + 3) * (12 / 4)",
      "(12 + 5) + (3 + 4)",
      "(5 * 4) + (12 / 3)",
      "(12 / 3) + (4 * 5)",
      "5 + ((4 + 12) + 3)",
      "(5 + (3 + 12)) + 4",
      "((12 + 5) + 4) + 3",
      "((5 + 3) * 12) / 4",
      "4 + ((3 + 5) + 12)",
      "5 + (12 + (4 + 3))",
      "(4 * 12) / (5 - 3)",
      "((12 / 3) * 5) + 4",
      "((3 + 5) * 12) / 4",
      "((12 + 3) + 5) + 4",
      "((4 + 12) + 5) + 3",
      "(3 + (4 + 12)) + 5",
      "3 + (4 + (5 + 12))",
      "(5 + (12 / 4)) * 3",
      "((5 + 4) + 12) + 3",
      "5 + (4 + (3 + 12))",
      "3 * ((12 / 4) + 5)",
      "4 + (5 * (12 / 3))",
      "4 + ((12 + 3) + 5)",
      "4 + ((5 + 12) + 3)",
      "4 * (12 / (5 - 3))",
      "((3 + 5) / 4) * 12",
      "((12 * 5) / 3) + 4",
      "(3 + (4 + 5)) + 12",
      "4 + ((3 + 12) + 5)",
      "(3 + 12) + (5 + 4)",
      "5 + ((12 + 3) + 4)",
      "((4 + 5) + 12) + 3",
      "12 * ((3 + 5) / 4)",
      "(5 + 3) + (4 + 12)",
      "4 + ((12 * 5) / 3)",
      "12 + (3 + (5 + 4))",
      "(4 + 5) + (12 + 3)",
      "12 + (4 + (3 + 5))",
      "((12 + 4) + 3) + 5",
      "(4 + (12 + 3)) + 5",
      "12 + ((5 + 4) + 3)",
      "((5 + 3) + 12) + 4",
      "12 * ((5 + 3) / 4)",
      "((4 + 12) + 3) + 5",
      "((3 + 4) - 5) * 12",
      "12 * ((4 + 3) - 5)",
      "(12 + (3 + 5)) + 4",
      "(12 + 5) + (4 + 3)",
      "(12 * (5 / 3)) + 4",
      "((4 * 5) - 12) * 3",
      "3 + (5 + (12 + 4))",
      "3 * (5 + (12 / 4))",
      "(4 + 5) + (3 + 12)",
      "((12 / 4) + 5) * 3",
      "((5 + 12) + 3) + 4",
      "(4 * 5) + (12 / 3)",
      "12 * (3 + (4 - 5))",
      "((3 + 4) + 5) + 12",
      "((3 + 5) + 12) + 4",
      "((3 + 4) + 12) + 5",
      "(4 + (3 + 5)) + 12",
      "12 + ((4 + 5) + 3)",
      "3 + ((12 + 5) + 4)",
      "(5 + 12) + (3 + 4)",
      "(3 + 5) * (12 / 4)",
      "4 + (12 / (3 / 5))",
      "(4 + 3) + (5 + 12)",
      "12 + ((4 + 3) + 5)",
      "4 + (12 + (3 + 5))",
      "3 + (12 + (5 + 4))",
      "((4 + 5) + 3) + 12",
      "3 + ((4 + 5) + 12)",
      "12 * (3 - (5 - 4))",
      "((5 + 3) + 4) + 12",
      "(3 + (12 + 5)) + 4",
      "(4 / (5 - 3)) * 12",
      "4 + ((5 / 3) * 12)",
      "12 * (4 - (5 - 3))",
      "4 + (3 + (12 + 5))",
      "4 + (12 + (5 + 3))",
      "(12 + 4) + (5 + 3)",
      "(5 + (3 + 4)) + 12",
      "(4 + (5 + 3)) + 12",
      "(12 + (5 + 3)) + 4",
      "5 + ((12 + 4) + 3)",
      "((5 * 12) / 3) + 4",
      "4 + ((5 * 12) / 3)",
      "5 + (3 + (12 + 4))",
      "12 + ((3 + 4) + 5)",
      "((4 + 3) - 5) * 12",
      "(4 + 3) + (12 + 5)",
      "(3 + 4) + (5 + 12)",
      "12 * (4 / (5 - 3))",
      "5 + ((4 + 3) + 12)",
      "(4 + (3 - 5)) * 12",
      "4 + (5 + (12 + 3))",
      "(3 + (5 + 12)) + 4",
      "((3 + 12) + 4) + 5",
      "4 / ((5 - 3) / 12)",
      "5 + ((3 + 4) + 12)",
      "12 / (4 / (5 + 3))",
      "(4 - (5 - 3)) * 12",
      "(5 + 4) + (12 + 3)",
      "(3 + 5) + (4 + 12)",
      "((4 - 5) + 3) * 12",
      "((5 * 4) - 12) * 3",
      "5 + (4 + (12 + 3))",
      "(3 + 5) + (12 + 4)",
      "(12 + 3) + (4 + 5)"
    ]
  },
  "3 4 5 13": {
    "cards": "3 4 5 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "4 / (3 / (13 + 5))",
      "(4 * (13 + 5)) / 3",
      "((5 + 13) / 3) * 4",
      "((13 + 5) * 4) / 3",
      "((5 + 13) * 4) / 3",
      "13 - (4 - (5 * 3))",
      "4 / (3 / (5 + 13))",
      "(13 + 5) / (3 / 4)",
      "((5 * 3) + 13) - 4",
      "(3 * 5) - (4 - 13)",
      "(3 * 5) + (13 - 4)",
      "(13 + (5 * 3)) - 4",
      "((13 + 5) / 3) * 4",
      "(4 / 3) * (13 + 5)",
      "4 * ((13 + 5) / 3)",
      "13 + ((3 * 5) - 4)",
      "((3 * 5) + 13) - 4",
      "(4 * (5 + 13)) / 3",
      "(5 * 3) - (4 - 13)",
      "(5 + 13) * (4 / 3)",
      "13 - (4 - (3 * 5))",
      "(13 - 4) + (5 * 3)",
      "4 * ((5 + 13) / 3)",
      "(4 / 3) * (5 + 13)",
      "((5 * 3) - 4) + 13",
      "((3 * 5) - 4) + 13",
      "(5 * 3) + (13 - 4)",
      "(13 + (3 * 5)) - 4",
      "(13 - 4) + (3 * 5)",
      "(5 + 13) / (3 / 4)",
      "13 + ((5 * 3) - 4)",
      "(13 + 5) * (4 / 3)"
    ]
  },
  "3 4 6 6": {
    "cards": "3 4 6 6",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(3 * (6 + 4)) - 6",
      "((6 + 4) * 3) - 6",
      "((4 * 3) + 6) + 6",
      "((6 + 6) - 4) * 3",
      "3 * (6 + (6 - 4))",
      "6 + ((3 * 4) + 6)",
      "6 + (6 + (4 * 3))",
      "(6 + (4 * 3)) + 6",
      "(6 + 6) + (4 * 3)",
      "3 * (6 - (4 - 6))",
      "((3 * 4) + 6) + 6",
      "(4 * 3) + (6 + 6)",
      "3 * ((6 - 4) + 6)",
      "((6 - 4) + 6) * 3",
      "6 + (6 + (3 * 4))",
      "(6 + 6) + (3 * 4)",
      "(6 * 6) - (3 * 4)",
      "(6 * 6) - (4 * 3)",
      "3 * ((6 + 6) - 4)",
      "(6 + (6 - 4)) * 3",
      "(3 * 4) + (6 + 6)",
      "(3 * (4 + 6)) - 6",
      "((4 + 6) * 3) - 6",
      "(6 - (4 - 6)) * 3",
      "(6 + (3 * 4)) + 6",
      "6 + ((4 * 3) + 6)"
    ]
  },
  "3 4 6 7": {
    "cards": "3 4 6 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 6 8": {
    "cards": "3 4 6 8",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "6 / (3 / (4 + 8))",
      "((8 - 6) * 3) * 4",
      "(6 / 3) * (4 + 8)",
      "(8 - 6) * (4 * 3)",
      "4 * (3 * (8 - 6))",
      "(8 - (6 / 3)) * 4",
      "(4 + 8) / (3 / 6)",
      "((8 + 4) / 3) * 6",
      "6 * ((4 * 3) - 8)",
      "6 * ((8 + 4) / 3)",
      "(3 * 4) * (8 - 6)",
      "(8 + 4) / (3 / 6)",
      "((4 + 8) / 3) * 6",
      "(4 * 3) * (8 - 6)",
      "3 * ((8 / 4) + 6)",
      "4 * ((8 - 6) * 3)",
      "(4 * (8 - 6)) * 3",
      "(6 + (8 / 4)) * 3",
      "(8 - 6) * (3 * 4)",
      "(6 / 3) * (8 + 4)",
      "((4 * 3) - 8) * 6",
      "((4 + 8) * 6) / 3",
      "((8 + 4) * 6) / 3",
      "(6 * (8 + 4)) / 3",
      "(8 + 4) * (6 / 3)",
      "3 * (6 + (8 / 4))",
      "(3 * (8 - 6)) * 4",
      "((3 * 4) - 8) * 6",
      "6 * ((4 + 8) / 3)",
      "6 * ((3 * 4) - 8)",
      "(6 * (4 + 8)) / 3",
      "4 * (8 - (6 / 3))",
      "((8 / 4) + 6) * 3",
      "3 * ((8 - 6) * 4)",
      "((8 - 6) * 4) * 3",
      "(4 + 8) * (6 / 3)",
      "3 * (4 * (8 - 6))",
      "6 / (3 / (8 + 4))"
    ]
  },
  "3 4 6 9": {
    "cards": "3 4 6 9",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(3 - (6 - 9)) * 4",
      "(6 - 4) * (3 + 9)",
      "(9 - (6 - 3)) * 4",
      "((9 - 6) + 3) * 4",
      "4 * (9 - (6 - 3))",
      "(3 + (9 - 6)) * 4",
      "4 * (3 - (6 - 9))",
      "(3 + 9) * (6 - 4)",
      "4 * ((9 - 6) + 3)",
      "4 * ((3 + 9) - 6)",
      "(9 + 3) * (6 - 4)",
      "4 * (3 + (9 - 6))",
      "4 * ((9 + 3) - 6)",
      "4 * ((3 - 6) + 9)",
      "((3 + 9) - 6) * 4",
      "((9 + 3) - 6) * 4",
      "(6 - 4) * (9 + 3)",
      "(9 + (3 - 6)) * 4",
      "((3 - 6) + 9) * 4",
      "4 * (9 + (3 - 6))"
    ]
  },
  "3 4 6 10": {
    "cards": "3 4 6 10",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "(10 / (3 / 6)) + 4",
      "((10 + 4) - 6) * 3",
      "(10 * (6 / 3)) + 4",
      "4 + ((6 * 10) / 3)",
      "((3 * 6) - 4) + 10",
      "(4 + (10 - 6)) * 3",
      "(6 * (10 / 3)) + 4",
      "3 * (10 + (4 - 6))",
      "6 + (3 * (10 - 4))",
      "3 * ((10 - 6) + 4)",
      "((10 - 4) * 3) + 6",
      "(3 * 6) - (4 - 10)",
      "6 - ((4 - 10) * 3)",
      "3 * ((10 + 4) - 6)",
      "4 + ((10 / 3) * 6)",
      "4 + (10 / (3 / 6))",
      "10 + ((3 * 6) - 4)",
      "10 - (4 - (3 * 6))",
      "((4 - 6) + 10) * 3",
      "4 + ((6 / 3) * 10)",
      "((10 * 6) / 3) + 4",
      "6 + ((10 - 4) * 3)",
      "3 * (10 - (6 - 4))",
      "((6 * 10) / 3) + 4",
      "3 * ((4 + 10) - 6)",
      "((10 / 3) * 6) + 4",
      "(6 * 3) + (10 - 4)",
      "(6 * 3) - (4 - 10)",
      "3 * (4 + (10 - 6))",
      "4 + ((10 * 6) / 3)",
      "(10 - 4) + (3 * 6)",
      "(10 + (4 - 6)) * 3",
      "(10 - 4) + (6 * 3)",
      "(4 - (6 - 10)) * 3",
      "((3 * 6) + 10) - 4",
      "((10 - 6) + 4) * 3",
      "(10 - (6 - 4)) * 3",
      "4 + (10 * (6 / 3))",
      "(3 * 6) + (10 - 4)",
      "((4 + 10) - 6) * 3",
      "((6 * 3) - 4) + 10",
      "4 + (6 / (3 / 10))",
      "(10 + (6 * 3)) - 4",
      "(3 * (10 - 4)) + 6",
      "3 * (4 - (6 - 10))",
      "((6 * 3) + 10) - 4",
      "3 * ((4 - 6) + 10)",
      "(10 + (3 * 6)) - 4",
      "10 + ((6 * 3) - 4)",
      "((6 / 3) * 10) + 4",
      "4 + (6 * (10 / 3))",
      "6 - (3 * (4 - 10))",
      "10 - (4 - (6 * 3))",
      "(6 / (3 / 10)) + 4"
    ]
  },
  "3 4 6 11": {
    "cards": "3 4 6 11",
    "has_solution": "Y",
    "num_solutions": 129,
    "solutions": [
      "(6 + 3) + (4 + 11)",
      "((11 + 4) + 3) + 6",
      "((6 + 11) + 3) + 4",
      "(11 + 4) + (6 + 3)",
      "4 + ((11 + 3) + 6)",
      "((11 + 6) + 3) + 4",
      "((4 + 11) + 6) + 3",
      "(11 + 3) + (4 + 6)",
      "(6 + (4 + 3)) + 11",
      "6 + ((11 + 3) + 4)",
      "(3 + 6) + (11 + 4)",
      "6 + (3 + (4 + 11))",
      "6 * ((11 - 4) - 3)",
      "3 + ((4 + 11) + 6)",
      "(11 - (3 + 4)) * 6",
      "(4 + (3 + 11)) + 6",
      "3 + (11 + (6 + 4))",
      "(3 + 11) + (6 + 4)",
      "11 + (6 + (3 + 4))",
      "(6 + (3 + 4)) + 11",
      "11 + ((3 + 4) + 6)",
      "((11 + 6) + 4) + 3",
      "((4 + 6) + 11) + 3",
      "((4 + 6) + 3) + 11",
      "4 + (3 + (11 + 6))",
      "((6 + 4) + 3) + 11",
      "(3 + (6 + 11)) + 4",
      "6 + ((4 + 11) + 3)",
      "(6 + (11 + 4)) + 3",
      "(3 + 11) + (4 + 6)",
      "4 + (3 + (6 + 11))",
      "(4 + 3) + (6 + 11)",
      "3 + ((11 + 6) + 4)",
      "((4 + 11) + 3) + 6",
      "11 + ((4 + 6) + 3)",
      "4 + (6 + (3 + 11))",
      "6 + (11 + (3 + 4))",
      "((3 + 6) + 11) + 4",
      "4 + ((3 + 11) + 6)",
      "(11 - (4 + 3)) * 6",
      "(4 + 11) + (6 + 3)",
      "11 + (4 + (6 + 3))",
      "(4 + 3) + (11 + 6)",
      "(4 + (6 + 3)) + 11",
      "6 + (4 + (11 + 3))",
      "6 * ((11 - 3) - 4)",
      "6 + ((3 + 11) + 4)",
      "(6 + 11) + (3 + 4)",
      "(4 + 11) + (3 + 6)",
      "(4 + (3 + 6)) + 11",
      "(6 + (11 + 3)) + 4",
      "3 + (4 + (6 + 11))",
      "((3 + 11) + 6) + 4",
      "3 + (6 + (4 + 11))",
      "((3 + 4) + 11) + 6",
      "(3 + (11 + 6)) + 4",
      "(6 + 4) + (11 + 3)",
      "(11 + (6 + 4)) + 3",
      "(6 + 4) + (3 + 11)",
      "(11 + (4 + 3)) + 6",
      "6 / (3 - (11 / 4))",
      "(6 + 3) + (11 + 4)",
      "((11 + 4) + 6) + 3",
      "(11 + (6 + 3)) + 4",
      "(6 + (3 + 11)) + 4",
      "(3 + (11 + 4)) + 6",
      "4 + (6 + (11 + 3))",
      "(4 + 6) + (3 + 11)",
      "(6 + (4 + 11)) + 3",
      "11 + ((4 + 3) + 6)",
      "(11 + (3 + 4)) + 6",
      "((6 + 4) + 11) + 3",
      "11 + ((6 + 3) + 4)",
      "(11 + 6) + (4 + 3)",
      "6 + ((4 + 3) + 11)",
      "((6 + 3) + 11) + 4",
      "6 * (11 - (3 + 4))",
      "6 + (3 + (11 + 4))",
      "(6 + 11) + (4 + 3)",
      "4 + ((3 + 6) + 11)",
      "3 + (11 + (4 + 6))",
      "4 + ((11 + 6) + 3)",
      "(11 + 6) + (3 + 4)",
      "(3 + (6 + 4)) + 11",
      "(4 + (11 + 3)) + 6",
      "((6 + 11) + 4) + 3",
      "4 + (11 + (6 + 3))",
      "3 + (6 + (11 + 4))",
      "(3 + 4) + (11 + 6)",
      "11 + (6 + (4 + 3))",
      "((4 + 3) + 6) + 11",
      "((3 + 4) + 6) + 11",
      "(4 + 6) + (11 + 3)",
      "(3 + 4) + (6 + 11)",
      "4 + (11 + (3 + 6))",
      "11 + ((6 + 4) + 3)",
      "6 + ((3 + 4) + 11)",
      "((11 - 4) - 3) * 6",
      "3 + ((6 + 4) + 11)",
      "4 + ((6 + 3) + 11)",
      "11 + ((3 + 6) + 4)",
      "((11 - 3) - 4) * 6",
      "3 + ((11 + 4) + 6)",
      "(11 + 4) + (3 + 6)",
      "3 + ((4 + 6) + 11)",
      "6 + (4 + (3 + 11))",
      "(4 + (6 + 11)) + 3",
      "(3 + 6) + (4 + 11)",
      "4 + ((6 + 11) + 3)",
      "(3 + (4 + 6)) + 11",
      "((4 + 3) + 11) + 6",
      "6 + ((11 + 4) + 3)",
      "(4 + (11 + 6)) + 3",
      "((6 + 3) + 4) + 11",
      "3 + (4 + (11 + 6))",
      "(11 + (4 + 6)) + 3",
      "((11 + 3) + 6) + 4",
      "11 + (3 + (6 + 4))",
      "11 + (3 + (4 + 6))",
      "((3 + 11) + 4) + 6",
      "(3 + (4 + 11)) + 6",
      "(11 + (3 + 6)) + 4",
      "3 + ((6 + 11) + 4)",
      "6 * (11 - (4 + 3))",
      "((3 + 6) + 4) + 11",
      "(11 + 3) + (6 + 4)",
      "6 + (11 + (4 + 3))",
      "((11 + 3) + 4) + 6",
      "11 + (4 + (3 + 6))"
    ]
  },
  "3 4 6 12": {
    "cards": "3 4 6 12",
    "has_solution": "Y",
    "num_solutions": 126,
    "solutions": [
      "((3 * 12) * 4) / 6",
      "((6 + 12) * 4) / 3",
      "12 * ((3 * 4) / 6)",
      "(4 * (6 - 3)) + 12",
      "12 / (6 / (3 * 4))",
      "(4 * 12) / (6 / 3)",
      "(6 + 12) / (3 / 4)",
      "(3 - 6) * (4 - 12)",
      "(3 * (4 / 6)) * 12",
      "(4 * (12 * 3)) / 6",
      "4 / (3 / (6 + 12))",
      "(3 / (6 / 4)) * 12",
      "(4 * (12 / 6)) * 3",
      "(4 * 3) * (12 / 6)",
      "4 * (12 / (6 / 3))",
      "((6 * 3) - 12) * 4",
      "(4 * (3 / 6)) * 12",
      "(4 / (6 / 3)) * 12",
      "((4 * 12) * 3) / 6",
      "(4 * (3 + 6)) - 12",
      "((3 / 6) * 4) * 12",
      "12 * (3 / (6 / 4))",
      "(4 / 3) * (12 + 6)",
      "(12 * 3) * (4 / 6)",
      "(4 / 6) * (3 * 12)",
      "(4 / 3) * (6 + 12)",
      "((12 * 3) * 4) / 6",
      "((12 * 4) / 6) * 3",
      "3 * (12 / (6 / 4))",
      "4 * (3 / (6 / 12))",
      "12 / ((6 / 4) / 3)",
      "4 * ((3 * 12) / 6)",
      "((12 + 6) / 3) * 4",
      "(12 * (3 * 4)) / 6",
      "(3 * 12) / (6 / 4)",
      "(4 / (6 / 12)) * 3",
      "(4 * (6 + 3)) - 12",
      "3 / ((6 / 12) / 4)",
      "12 / (6 / (4 * 3))",
      "12 * ((3 / 6) * 4)",
      "3 / ((6 / 4) / 12)",
      "12 * ((4 * 3) / 6)",
      "(12 * (3 / 6)) * 4",
      "(4 - 12) * (3 - 6)",
      "4 * ((6 * 3) - 12)",
      "(12 / 6) * (4 * 3)",
      "(6 + 12) * (4 / 3)",
      "4 / ((6 / 12) / 3)",
      "((3 * 12) / 6) * 4",
      "(3 * 4) / (6 / 12)",
      "((12 * 4) * 3) / 6",
      "(12 + 6) / (3 / 4)",
      "4 / ((6 / 3) / 12)",
      "(4 / 6) * (12 * 3)",
      "(6 - 3) * (12 - 4)",
      "((3 * 4) * 12) / 6",
      "(3 * 4) * (12 / 6)",
      "(12 * 3) / (6 / 4)",
      "(12 * 4) / (6 / 3)",
      "12 - ((3 - 6) * 4)",
      "3 * ((4 * 12) / 6)",
      "((3 + 6) * 4) - 12",
      "(4 * (3 * 12)) / 6",
      "4 * (12 * (3 / 6))",
      "4 * ((3 / 6) * 12)",
      "(12 - 4) * (6 - 3)",
      "((12 / 6) * 3) * 4",
      "(3 * 12) * (4 / 6)",
      "12 * (4 - (6 / 3))",
      "12 * (4 / (6 / 3))",
      "(4 * 12) * (3 / 6)",
      "(3 / 6) * (4 * 12)",
      "(3 * (12 / 6)) * 4",
      "((6 - 3) * 4) + 12",
      "4 * ((3 * 6) - 12)",
      "4 / (3 / (12 + 6))",
      "((4 / 6) * 12) * 3",
      "(4 * (12 + 6)) / 3",
      "3 * (12 * (4 / 6))",
      "(3 * (12 * 4)) / 6",
      "3 / (6 / (12 * 4))",
      "((12 / 6) * 4) * 3",
      "((12 * 3) / 6) * 4",
      "4 * (3 * (12 / 6))",
      "4 * ((12 / 6) * 3)",
      "(12 / 6) * (3 * 4)",
      "3 * ((12 / 6) * 4)",
      "12 - (4 * (3 - 6))",
      "((6 + 12) / 3) * 4",
      "3 * (4 * (12 / 6))",
      "4 * ((12 * 3) / 6)",
      "(12 * 4) * (3 / 6)",
      "((4 * 12) / 6) * 3",
      "(12 / (6 / 4)) * 3",
      "(12 + 6) * (4 / 3)",
      "12 + ((6 - 3) * 4)",
      "4 * ((6 + 12) / 3)",
      "(4 - (6 / 3)) * 12",
      "12 * (3 * (4 / 6))",
      "(12 * (4 * 3)) / 6",
      "3 * ((12 * 4) / 6)",
      "(12 * (4 / 6)) * 3",
      "(4 * 3) / (6 / 12)",
      "(3 / (6 / 12)) * 4",
      "(3 * (4 * 12)) / 6",
      "4 / (6 / (3 * 12))",
      "3 / (6 / (4 * 12))",
      "(4 * (6 + 12)) / 3",
      "12 * (4 * (3 / 6))",
      "((4 / 6) * 3) * 12",
      "((6 + 3) * 4) - 12",
      "((3 / 6) * 12) * 4",
      "4 * ((12 + 6) / 3)",
      "12 / ((6 / 3) / 4)",
      "3 * (4 / (6 / 12))",
      "4 / (6 / (12 * 3))",
      "((12 + 6) * 4) / 3",
      "3 * ((4 / 6) * 12)",
      "((4 * 3) / 6) * 12",
      "12 * ((4 / 6) * 3)",
      "12 + (4 * (6 - 3))",
      "(12 / (6 / 3)) * 4",
      "((4 * 3) * 12) / 6",
      "((3 * 6) - 12) * 4",
      "(3 / 6) * (12 * 4)",
      "((3 * 4) / 6) * 12"
    ]
  },
  "3 4 6 13": {
    "cards": "3 4 6 13",
    "has_solution": "Y",
    "num_solutions": 17,
    "solutions": [
      "(6 / 4) * (3 + 13)",
      "((13 + 3) / 4) * 6",
      "(6 * (3 + 13)) / 4",
      "(6 / 4) * (13 + 3)",
      "6 * ((3 + 13) / 4)",
      "6 / ((13 / 4) - 3)",
      "(3 + 13) * (6 / 4)",
      "6 * ((13 + 3) / 4)",
      "6 / (4 / (3 + 13))",
      "((3 + 13) * 6) / 4",
      "6 / (4 / (13 + 3))",
      "(6 * (13 + 3)) / 4",
      "(13 + 3) / (4 / 6)",
      "((3 + 13) / 4) * 6",
      "((13 + 3) * 6) / 4",
      "(13 + 3) * (6 / 4)",
      "(3 + 13) / (4 / 6)"
    ]
  },
  "3 4 7 7": {
    "cards": "3 4 7 7",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(7 * (7 - 4)) + 3",
      "(7 - 4) + (7 * 3)",
      "((3 * 7) - 4) + 7",
      "7 + ((3 * 7) - 4)",
      "((3 * 7) + 7) - 4",
      "3 + ((4 * 7) - 7)",
      "(3 * 7) - (4 - 7)",
      "(7 * (7 - 3)) - 4",
      "7 - (4 - (3 * 7))",
      "((7 - 3) * 7) - 4",
      "((7 * 4) - 7) + 3",
      "3 + ((7 - 4) * 7)",
      "3 - (7 * (4 - 7))",
      "(7 + (7 * 3)) - 4",
      "3 - (7 - (4 * 7))",
      "(3 - 7) + (7 * 4)",
      "(4 * 7) - (7 - 3)",
      "((4 * 7) - 7) + 3",
      "(3 * 7) + (7 - 4)",
      "(7 + (3 * 7)) - 4",
      "(7 * 4) - (7 - 3)",
      "(7 * 3) + (7 - 4)",
      "(4 * 7) + (3 - 7)",
      "((7 - 4) * 7) + 3",
      "((7 * 4) + 3) - 7",
      "(3 - 7) + (4 * 7)",
      "3 - ((4 - 7) * 7)",
      "((4 * 7) + 3) - 7",
      "3 + ((7 * 4) - 7)",
      "((7 * 3) + 7) - 4",
      "(7 * 4) + (3 - 7)",
      "7 - (4 - (7 * 3))",
      "(7 - 4) + (3 * 7)",
      "3 + (7 * (7 - 4))",
      "(3 + (4 * 7)) - 7",
      "7 + ((7 * 3) - 4)",
      "(7 * 3) - (4 - 7)",
      "3 - (7 - (7 * 4))",
      "((7 * 3) - 4) + 7",
      "(3 + (7 * 4)) - 7"
    ]
  },
  "3 4 7 8": {
    "cards": "3 4 7 8",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "8 - ((3 - 7) * 4)",
      "(4 * (7 - 3)) + 8",
      "8 + (4 * (7 - 3))",
      "8 - (4 * (3 - 7))",
      "((7 - 3) * 4) + 8",
      "8 + ((7 - 3) * 4)"
    ]
  },
  "3 4 7 9": {
    "cards": "3 4 7 9",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(3 * (9 - 7)) * 4",
      "(3 * (7 + 4)) - 9",
      "4 - (7 - (9 * 3))",
      "4 + ((3 * 9) - 7)",
      "4 + ((9 * 3) - 7)",
      "((9 * 3) + 4) - 7",
      "((3 * 9) + 4) - 7",
      "4 * (3 * (9 - 7))",
      "(4 * (9 - 7)) * 3",
      "(4 * 3) * (9 - 7)",
      "4 * ((9 - 7) * 3)",
      "(9 * (7 - 4)) - 3",
      "((3 * 9) - 7) + 4",
      "(3 * 9) + (4 - 7)",
      "4 - (7 - (3 * 9))",
      "((9 - 7) * 3) * 4",
      "(3 * 9) - (7 - 4)",
      "(9 * 3) + (4 - 7)",
      "((7 - 4) * 9) - 3",
      "(4 - 7) + (3 * 9)",
      "(3 * (4 + 7)) - 9",
      "(9 * 3) - (7 - 4)",
      "(4 + (9 * 3)) - 7",
      "((4 + 7) * 3) - 9",
      "3 * ((9 - 7) * 4)",
      "(4 + (3 * 9)) - 7",
      "((7 + 4) * 3) - 9",
      "3 * (4 * (9 - 7))",
      "((9 * 3) - 7) + 4",
      "(4 - 7) + (9 * 3)",
      "(3 * 4) * (9 - 7)",
      "((9 - 7) * 4) * 3",
      "(9 - 7) * (4 * 3)",
      "(9 - 7) * (3 * 4)"
    ]
  },
  "3 4 7 10": {
    "cards": "3 4 7 10",
    "has_solution": "Y",
    "num_solutions": 140,
    "solutions": [
      "(3 + (7 + 10)) + 4",
      "3 + ((7 + 4) + 10)",
      "(10 + 4) + (7 + 3)",
      "((3 + 10) - 7) * 4",
      "3 + (7 + (4 + 10))",
      "(4 + 3) + (10 + 7)",
      "4 * ((3 - 7) + 10)",
      "7 + (10 + (3 + 4))",
      "10 + ((4 + 7) + 3)",
      "3 + ((4 + 7) + 10)",
      "(4 + (7 + 3)) + 10",
      "(10 + 4) + (3 + 7)",
      "(4 + (3 + 7)) + 10",
      "((10 + 4) + 3) + 7",
      "4 * (3 + (10 - 7))",
      "4 + ((10 + 7) + 3)",
      "7 + (3 + (10 + 4))",
      "(3 + (10 - 7)) * 4",
      "4 * ((10 + 3) - 7)",
      "3 + (10 + (4 + 7))",
      "(10 + (3 - 7)) * 4",
      "(7 + 3) + (4 + 10)",
      "3 + ((4 + 10) + 7)",
      "4 + (3 + (7 + 10))",
      "((3 + 4) + 7) + 10",
      "4 + ((3 + 10) + 7)",
      "(10 + (3 + 4)) + 7",
      "(4 + (10 + 3)) + 7",
      "7 + (10 + (4 + 3))",
      "(3 + 7) + (10 + 4)",
      "(3 + (4 + 7)) + 10",
      "7 + ((10 + 4) + 3)",
      "10 + ((7 + 3) + 4)",
      "(10 - (7 - 3)) * 4",
      "((7 + 3) + 4) + 10",
      "4 + ((3 + 7) + 10)",
      "3 + ((10 + 7) + 4)",
      "7 + ((10 + 3) + 4)",
      "(3 + 4) + (7 + 10)",
      "((10 + 7) + 3) + 4",
      "((3 + 7) + 4) + 10",
      "(3 + (4 + 10)) + 7",
      "(3 + (10 + 4)) + 7",
      "4 + ((7 + 10) + 3)",
      "4 + (7 + (10 + 3))",
      "(7 + 3) + (10 + 4)",
      "4 + ((10 + 3) + 7)",
      "4 * ((3 + 10) - 7)",
      "4 + (3 + (10 + 7))",
      "(10 + (4 + 3)) + 7",
      "10 + ((3 + 4) + 7)",
      "4 + (7 + (3 + 10))",
      "3 + (10 + (7 + 4))",
      "((4 + 10) + 3) + 7",
      "(7 + 10) + (3 + 4)",
      "(4 + 3) + (7 + 10)",
      "(3 + 10) + (4 + 7)",
      "10 + (3 + (7 + 4))",
      "7 + ((3 + 10) + 4)",
      "4 + (10 + (3 + 7))",
      "4 * (10 - (7 - 3))",
      "(3 - 7) * (4 - 10)",
      "((10 + 3) + 7) + 4",
      "10 + (7 + (3 + 4))",
      "(4 - 10) * (3 - 7)",
      "7 + (4 + (3 + 10))",
      "(3 + 10) + (7 + 4)",
      "10 + (4 + (3 + 7))",
      "(7 + 4) + (3 + 10)",
      "((10 + 4) + 7) + 3",
      "(10 + 7) + (3 + 4)",
      "(10 + 3) + (4 + 7)",
      "4 + ((7 + 3) + 10)",
      "4 * (3 - (7 - 10))",
      "(3 - (7 - 10)) * 4",
      "10 + ((3 + 7) + 4)",
      "7 + (3 + (4 + 10))",
      "3 + ((7 + 10) + 4)",
      "((7 + 10) + 4) + 3",
      "(4 + (7 + 10)) + 3",
      "7 + (4 + (10 + 3))",
      "4 * ((10 - 7) + 3)",
      "((10 + 3) - 7) * 4",
      "(10 + (4 + 7)) + 3",
      "10 + (7 + (4 + 3))",
      "(7 + 10) + (4 + 3)",
      "((4 + 7) + 3) + 10",
      "((7 + 4) + 10) + 3",
      "10 + ((7 + 4) + 3)",
      "(4 + 7) + (10 + 3)",
      "(3 + (10 + 7)) + 4",
      "4 * (10 + (3 - 7))",
      "(7 + 4) + (10 + 3)",
      "((3 + 10) + 4) + 7",
      "7 + ((4 + 3) + 10)",
      "3 + (4 + (7 + 10))",
      "7 + ((4 + 10) + 3)",
      "(10 - 4) * (7 - 3)",
      "((3 + 4) + 10) + 7",
      "((4 + 3) + 10) + 7",
      "(10 + (7 + 3)) + 4",
      "((7 + 10) + 3) + 4",
      "((4 + 3) + 7) + 10",
      "((7 + 4) + 3) + 10",
      "10 + (4 + (7 + 3))",
      "(7 + (3 + 4)) + 10",
      "(10 + (3 + 7)) + 4",
      "((3 + 7) + 10) + 4",
      "((7 + 3) + 10) + 4",
      "7 + ((3 + 4) + 10)",
      "((10 + 3) + 4) + 7",
      "((3 + 10) + 7) + 4",
      "((4 + 7) + 10) + 3",
      "(3 + 7) + (4 + 10)",
      "3 + (4 + (10 + 7))",
      "((10 + 7) + 4) + 3",
      "(7 + (4 + 3)) + 10",
      "10 + (3 + (4 + 7))",
      "(7 + (10 + 3)) + 4",
      "(3 + (7 + 4)) + 10",
      "3 + (7 + (10 + 4))",
      "4 + (10 + (7 + 3))",
      "((4 + 10) + 7) + 3",
      "(10 + 3) + (7 + 4)",
      "(4 + (10 + 7)) + 3",
      "(4 + 7) + (3 + 10)",
      "(7 - 3) * (10 - 4)",
      "(4 + 10) + (3 + 7)",
      "(7 + (10 + 4)) + 3",
      "((3 - 7) + 10) * 4",
      "3 + ((10 + 4) + 7)",
      "10 + ((4 + 3) + 7)",
      "(10 + 7) + (4 + 3)",
      "((10 - 7) + 3) * 4",
      "(10 + (7 + 4)) + 3",
      "(3 + 4) + (10 + 7)",
      "(4 + (3 + 10)) + 7",
      "(7 + (3 + 10)) + 4",
      "(7 + (4 + 10)) + 3",
      "(4 + 10) + (7 + 3)"
    ]
  },
  "3 4 7 11": {
    "cards": "3 4 7 11",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(4 / 3) * (11 + 7)",
      "(4 * (11 + 7)) / 3",
      "4 / (3 / (7 + 11))",
      "4 * ((7 + 11) / 3)",
      "((7 + 11) / 3) * 4",
      "(4 * (7 + 11)) / 3",
      "3 * ((4 + 11) - 7)",
      "3 * ((11 - 7) + 4)",
      "(4 + (11 - 7)) * 3",
      "3 * (4 - (7 - 11))",
      "4 / (3 / (11 + 7))",
      "(11 + (4 - 7)) * 3",
      "((11 - 7) + 4) * 3",
      "((4 + 11) - 7) * 3",
      "3 * (11 - (7 - 4))",
      "3 * (11 + (4 - 7))",
      "3 * (4 + (11 - 7))",
      "(4 - 7) * (3 - 11)",
      "((11 + 4) - 7) * 3",
      "(4 / 3) * (7 + 11)",
      "3 * ((4 - 7) + 11)",
      "(4 - (7 - 11)) * 3",
      "((11 + 7) * 4) / 3",
      "((11 + 7) / 3) * 4",
      "4 * ((11 + 7) / 3)",
      "(7 - 4) * (11 - 3)",
      "(7 + 11) / (3 / 4)",
      "(11 - (7 - 4)) * 3",
      "((4 - 7) + 11) * 3",
      "3 * ((11 + 4) - 7)",
      "((7 + 11) * 4) / 3",
      "(11 + 7) * (4 / 3)",
      "(11 - 3) * (7 - 4)",
      "(7 + 11) * (4 / 3)",
      "(11 + 7) / (3 / 4)",
      "(3 - 11) * (4 - 7)"
    ]
  },
  "3 4 7 12": {
    "cards": "3 4 7 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "3 + (12 * (7 / 4))",
      "((7 * 12) / 3) - 4",
      "(7 * (12 / 3)) - 4",
      "(4 * 7) - (12 / 3)",
      "(12 / (3 / 7)) - 4",
      "((12 / 4) * 7) + 3",
      "(7 * 4) - (12 / 3)",
      "(7 * (12 / 4)) + 3",
      "3 + (7 / (4 / 12))",
      "(3 * 7) + (12 / 4)",
      "(7 * 3) + (12 / 4)",
      "(12 * (7 / 3)) - 4",
      "3 + ((7 * 12) / 4)",
      "3 + ((12 / 4) * 7)",
      "((12 * 7) / 4) + 3",
      "(12 / 4) + (7 * 3)",
      "((7 / 4) * 12) + 3",
      "(12 * (7 / 4)) + 3",
      "((12 * 7) / 3) - 4",
      "((7 / 3) * 12) - 4",
      "3 + (12 / (4 / 7))",
      "((12 / 3) * 7) - 4",
      "(7 / (4 / 12)) + 3",
      "(12 / 4) + (3 * 7)",
      "3 + (7 * (12 / 4))",
      "((7 * 12) / 4) + 3",
      "(12 / (4 / 7)) + 3",
      "3 + ((7 / 4) * 12)",
      "(7 / (3 / 12)) - 4",
      "3 + ((12 * 7) / 4)"
    ]
  },
  "3 4 7 13": {
    "cards": "3 4 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 8 8": {
    "cards": "3 4 8 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 8 9": {
    "cards": "3 4 8 9",
    "has_solution": "Y",
    "num_solutions": 144,
    "solutions": [
      "((9 + 8) + 4) + 3",
      "((3 * 4) - 9) * 8",
      "(8 + (9 + 3)) + 4",
      "((8 + 9) + 3) + 4",
      "(4 + (8 + 9)) + 3",
      "(8 * (9 + 3)) / 4",
      "(4 + 8) + (3 + 9)",
      "(4 + 8) + (9 + 3)",
      "(9 + 8) + (4 + 3)",
      "(9 + (8 + 4)) + 3",
      "4 + (8 + (3 + 9))",
      "((8 + 3) + 9) + 4",
      "(3 + 8) + (9 + 4)",
      "8 / (4 / (9 + 3))",
      "((9 + 3) + 8) + 4",
      "(9 + (3 + 4)) + 8",
      "(3 + 9) * (8 / 4)",
      "8 + ((9 + 4) + 3)",
      "(4 + (3 + 8)) + 9",
      "9 + (3 + (8 + 4))",
      "3 + ((8 + 4) + 9)",
      "(8 - 4) * (9 - 3)",
      "(8 + 3) + (9 + 4)",
      "3 + (8 + (9 + 4))",
      "4 + (3 + (9 + 8))",
      "3 + (9 + (4 + 8))",
      "3 + ((9 + 4) + 8)",
      "((9 + 3) / 4) * 8",
      "8 / (4 / (3 + 9))",
      "((3 + 9) + 8) + 4",
      "(3 + 9) + (8 + 4)",
      "(4 - 8) * (3 - 9)",
      "(4 + (3 + 9)) + 8",
      "(4 + (9 + 3)) + 8",
      "3 + ((4 + 9) + 8)",
      "((3 + 9) / 4) * 8",
      "9 + ((8 + 3) + 4)",
      "9 + (3 + (4 + 8))",
      "((3 + 8) + 4) + 9",
      "(4 + (8 + 3)) + 9",
      "9 + ((3 + 8) + 4)",
      "9 + (8 + (4 + 3))",
      "(3 + (4 + 8)) + 9",
      "((8 + 9) + 4) + 3",
      "(8 + (4 + 9)) + 3",
      "(4 + 9) + (8 + 3)",
      "8 * ((9 + 3) / 4)",
      "4 + ((9 + 3) + 8)",
      "((9 + 8) + 3) + 4",
      "8 * ((4 * 3) - 9)",
      "(9 + 3) + (8 + 4)",
      "9 + (4 + (8 + 3))",
      "4 + ((9 + 8) + 3)",
      "(3 + 9) + (4 + 8)",
      "3 + (4 + (9 + 8))",
      "9 + ((8 + 4) + 3)",
      "(3 + (4 + 9)) + 8",
      "(9 + (8 + 3)) + 4",
      "((4 + 3) + 9) + 8",
      "9 + (4 + (3 + 8))",
      "(3 - 9) * (4 - 8)",
      "(8 + (4 + 3)) + 9",
      "(3 + (9 + 8)) + 4",
      "(8 + (3 + 4)) + 9",
      "(4 + (9 + 8)) + 3",
      "(9 + (4 + 8)) + 3",
      "((9 + 4) + 8) + 3",
      "8 + (4 + (3 + 9))",
      "8 + ((4 + 3) + 9)",
      "8 + ((3 + 9) + 4)",
      "(3 + 4) + (9 + 8)",
      "4 + ((8 + 9) + 3)",
      "9 + ((4 + 8) + 3)",
      "(9 + 3) * (8 / 4)",
      "(8 + 9) + (4 + 3)",
      "(9 + 4) + (8 + 3)",
      "8 + ((3 + 4) + 9)",
      "8 + ((9 + 3) + 4)",
      "((4 + 9) + 3) + 8",
      "(3 + 8) + (4 + 9)",
      "((9 + 4) + 3) + 8",
      "8 * ((3 * 4) - 9)",
      "4 + ((3 + 9) + 8)",
      "8 + (4 + (9 + 3))",
      "8 + ((4 + 9) + 3)",
      "9 + ((3 + 4) + 8)",
      "4 + (9 + (8 + 3))",
      "8 + (9 + (4 + 3))",
      "(3 + (8 + 9)) + 4",
      "4 + ((8 + 3) + 9)",
      "9 + (8 + (3 + 4))",
      "4 + (3 + (8 + 9))",
      "(9 + 4) + (3 + 8)",
      "(4 + 3) + (9 + 8)",
      "4 + ((3 + 8) + 9)",
      "((8 + 3) + 4) + 9",
      "((4 + 3) + 8) + 9",
      "4 + (8 + (9 + 3))",
      "((3 + 8) + 9) + 4",
      "(9 + 3) / (4 / 8)",
      "((4 * 3) - 9) * 8",
      "(8 + 9) + (3 + 4)",
      "((8 + 4) + 3) + 9",
      "(9 - 3) * (8 - 4)",
      "(8 + (3 + 9)) + 4",
      "(9 + (4 + 3)) + 8",
      "((3 + 4) + 9) + 8",
      "(8 + 4) + (9 + 3)",
      "((3 + 9) * 8) / 4",
      "4 + (9 + (3 + 8))",
      "3 + (9 + (8 + 4))",
      "(8 * (3 + 9)) / 4",
      "(8 + 3) + (4 + 9)",
      "3 + (8 + (4 + 9))",
      "(8 / 4) * (3 + 9)",
      "8 + (3 + (4 + 9))",
      "((9 + 3) + 4) + 8",
      "(8 + 4) + (3 + 9)",
      "3 + (4 + (8 + 9))",
      "((3 + 9) + 4) + 8",
      "((9 + 3) * 8) / 4",
      "8 + (3 + (9 + 4))",
      "(3 + 9) / (4 / 8)",
      "((3 + 4) + 8) + 9",
      "((4 + 8) + 9) + 3",
      "(8 / 4) * (9 + 3)",
      "(3 + (9 + 4)) + 8",
      "3 + ((8 + 9) + 4)",
      "(8 + (9 + 4)) + 3",
      "(9 + 8) + (3 + 4)",
      "(3 + 4) + (8 + 9)",
      "3 + ((4 + 8) + 9)",
      "(4 + 9) + (3 + 8)",
      "8 + (9 + (3 + 4))",
      "(9 + 3) + (4 + 8)",
      "(9 + (3 + 8)) + 4",
      "9 + ((4 + 3) + 8)",
      "((8 + 4) + 9) + 3",
      "((4 + 9) + 8) + 3",
      "(4 + 3) + (8 + 9)",
      "8 * ((3 + 9) / 4)",
      "((4 + 8) + 3) + 9",
      "(3 + (8 + 4)) + 9",
      "3 + ((9 + 8) + 4)"
    ]
  },
  "3 4 8 10": {
    "cards": "3 4 8 10",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "((10 - 8) * 3) * 4",
      "4 / (3 / (8 + 10))",
      "(4 * 3) * (10 - 8)",
      "8 * ((10 - 3) - 4)",
      "((10 + 8) / 3) * 4",
      "(10 - 8) * (3 * 4)",
      "(3 * 4) * (10 - 8)",
      "(4 * (8 + 10)) / 3",
      "(10 - (3 + 4)) * 8",
      "(4 / 3) * (8 + 10)",
      "8 * (10 - (3 + 4))",
      "3 * (4 * (10 - 8))",
      "4 * ((8 + 10) / 3)",
      "(10 + 8) / (3 / 4)",
      "(3 * (10 - 8)) * 4",
      "(10 - 8) * (4 * 3)",
      "8 * ((10 - 4) - 3)",
      "3 * ((10 - 8) * 4)",
      "((10 - 4) - 3) * 8",
      "8 * (10 - (4 + 3))",
      "((10 - 8) * 4) * 3",
      "((8 + 10) * 4) / 3",
      "((8 + 10) / 3) * 4",
      "(10 - (4 + 3)) * 8",
      "(8 + 10) / (3 / 4)",
      "((10 + 8) * 4) / 3",
      "(4 * (10 + 8)) / 3",
      "4 * ((10 + 8) / 3)",
      "(10 - (8 / 4)) * 3",
      "3 * (10 - (8 / 4))",
      "(10 + 8) * (4 / 3)",
      "(4 / 3) * (10 + 8)",
      "((10 - 3) - 4) * 8",
      "4 * ((10 - 8) * 3)",
      "4 * (3 * (10 - 8))",
      "4 / (3 / (10 + 8))",
      "(8 + 10) * (4 / 3)",
      "(4 * (10 - 8)) * 3"
    ]
  },
  "3 4 8 11": {
    "cards": "3 4 8 11",
    "has_solution": "Y",
    "num_solutions": 35,
    "solutions": [
      "4 * (11 + (3 - 8))",
      "4 * (3 + (11 - 8))",
      "(3 + (11 - 8)) * 4",
      "4 * (11 - (8 - 3))",
      "(11 - (8 - 3)) * 4",
      "4 * ((3 + 11) - 8)",
      "8 / (4 - (11 / 3))",
      "4 * (3 - (8 - 11))",
      "3 - (11 - (4 * 8))",
      "4 * ((3 - 8) + 11)",
      "3 - (11 - (8 * 4))",
      "4 * ((11 - 8) + 3)",
      "(3 - 11) + (8 * 4)",
      "((8 * 4) + 3) - 11",
      "(3 - (8 - 11)) * 4",
      "((8 * 4) - 11) + 3",
      "((11 - 8) + 3) * 4",
      "(4 * 8) - (11 - 3)",
      "((11 - 3) * 4) - 8",
      "(4 * 8) + (3 - 11)",
      "(8 * 4) + (3 - 11)",
      "((4 * 8) - 11) + 3",
      "((4 * 8) + 3) - 11",
      "3 + ((8 * 4) - 11)",
      "((11 + 3) - 8) * 4",
      "(4 * (11 - 3)) - 8",
      "((3 + 11) - 8) * 4",
      "(3 + (8 * 4)) - 11",
      "(3 - 11) + (4 * 8)",
      "(8 * 4) - (11 - 3)",
      "4 * ((11 + 3) - 8)",
      "(3 + (4 * 8)) - 11",
      "((3 - 8) + 11) * 4",
      "3 + ((4 * 8) - 11)",
      "(11 + (3 - 8)) * 4"
    ]
  },
  "3 4 8 12": {
    "cards": "3 4 8 12",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "((3 * 12) - 4) - 8",
      "(4 * 12) - (3 * 8)",
      "8 + ((12 / 3) * 4)",
      "((12 * 3) - 4) - 8",
      "3 * (4 - (8 - 12))",
      "(3 * (4 + 8)) - 12",
      "12 + ((8 - 4) * 3)",
      "(3 * (8 - 4)) + 12",
      "3 * ((12 - 8) + 4)",
      "(4 * 12) - (8 * 3)",
      "8 + (12 * (4 / 3))",
      "(12 * 4) - (8 * 3)",
      "((12 * 3) - 8) - 4",
      "8 + (12 / (3 / 4))",
      "((4 / 3) * 12) + 8",
      "(12 + (4 - 8)) * 3",
      "((8 - 4) * 3) + 12",
      "8 + (4 / (3 / 12))",
      "((8 + 4) * 3) - 12",
      "(12 * 3) - (4 + 8)",
      "3 * (12 + (4 - 8))",
      "(12 * 4) - (3 * 8)",
      "12 + (3 * (8 - 4))",
      "((4 - 8) + 12) * 3",
      "(12 / (3 / 4)) + 8",
      "((3 * 12) - 8) - 4",
      "((4 + 8) * 3) - 12",
      "((4 * 12) / 3) + 8",
      "3 * ((12 + 4) - 8)",
      "(4 * (12 / 3)) + 8",
      "(12 * 3) - (8 + 4)",
      "((12 * 4) / 3) + 8",
      "(4 + (12 - 8)) * 3",
      "8 + ((4 * 12) / 3)",
      "8 + ((4 / 3) * 12)",
      "(4 / (3 / 12)) + 8",
      "3 * ((4 + 12) - 8)",
      "8 + (4 * (12 / 3))",
      "(4 - (8 - 12)) * 3",
      "3 * (12 - (8 - 4))",
      "((4 + 12) - 8) * 3",
      "8 + ((12 * 4) / 3)",
      "(12 - (8 - 4)) * 3",
      "((12 + 4) - 8) * 3",
      "12 - ((4 - 8) * 3)",
      "(3 * 12) - (4 + 8)",
      "3 * ((4 - 8) + 12)",
      "(3 * (8 + 4)) - 12",
      "((12 / 3) * 4) + 8",
      "12 - (3 * (4 - 8))",
      "(12 * (4 / 3)) + 8",
      "((12 - 8) + 4) * 3",
      "(3 * 12) - (8 + 4)",
      "3 * (4 + (12 - 8))"
    ]
  },
  "3 4 8 13": {
    "cards": "3 4 8 13",
    "has_solution": "Y",
    "num_solutions": 9,
    "solutions": [
      "(8 * (13 - 4)) / 3",
      "(8 / 3) * (13 - 4)",
      "((13 - 4) * 8) / 3",
      "8 * ((13 - 4) / 3)",
      "(13 - 4) / (3 / 8)",
      "8 / ((13 / 3) - 4)",
      "8 / (3 / (13 - 4))",
      "(13 - 4) * (8 / 3)",
      "((13 - 4) / 3) * 8"
    ]
  },
  "3 4 9 9": {
    "cards": "3 4 9 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(9 - (9 / 3)) * 4",
      "((9 - 4) * 3) + 9",
      "(4 * 9) - (9 + 3)",
      "((9 * 4) - 3) - 9",
      "(3 * (9 - 4)) + 9",
      "4 * (9 - (9 / 3))",
      "((4 * 9) - 3) - 9",
      "(4 * (9 + 9)) / 3",
      "((4 * 9) - 9) - 3",
      "(9 * 4) - (9 + 3)",
      "((9 + 9) * 4) / 3",
      "(9 + 9) * (4 / 3)",
      "(9 * 4) - (3 + 9)",
      "(9 + 9) / (3 / 4)",
      "9 - ((4 - 9) * 3)",
      "9 + ((9 - 4) * 3)",
      "(4 * 9) - (3 + 9)",
      "((9 + 9) / 3) * 4",
      "9 - (3 * (4 - 9))",
      "(4 / 3) * (9 + 9)",
      "9 + (3 * (9 - 4))",
      "((9 * 4) - 9) - 3",
      "4 * ((9 + 9) / 3)",
      "4 / (3 / (9 + 9))"
    ]
  },
  "3 4 9 10": {
    "cards": "3 4 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 9 11": {
    "cards": "3 4 9 11",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(3 * (11 - 9)) * 4",
      "3 * (4 * (11 - 9))",
      "3 * ((11 - 9) * 4)",
      "(11 - 9) * (3 * 4)",
      "(3 * 4) * (11 - 9)",
      "((11 * 9) - 3) / 4",
      "((11 - 9) * 3) * 4",
      "4 * ((11 - 9) * 3)",
      "(4 * (11 - 9)) * 3",
      "((11 - 9) * 4) * 3",
      "(4 * 3) * (11 - 9)",
      "4 * (3 * (11 - 9))",
      "(11 - 9) * (4 * 3)",
      "((9 * 11) - 3) / 4"
    ]
  },
  "3 4 9 12": {
    "cards": "3 4 9 12",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(9 / (4 / 12)) - 3",
      "(12 * (9 / 4)) - 3",
      "((3 - 9) + 12) * 4",
      "(12 - 4) * (9 / 3)",
      "(3 - (9 - 12)) * 4",
      "12 + (4 / (3 / 9))",
      "4 * (12 - (9 - 3))",
      "(12 - (9 - 3)) * 4",
      "12 + (9 * (4 / 3))",
      "((12 - 4) / 3) * 9",
      "(9 - (4 + 3)) * 12",
      "12 * (9 - (3 + 4))",
      "((4 * 9) / 3) + 12",
      "(9 / (3 / 4)) + 12",
      "12 + ((9 / 3) * 4)",
      "((9 - 3) - 4) * 12",
      "(9 * (12 - 4)) / 3",
      "((9 * 4) / 3) + 12",
      "(3 * 9) - (12 / 4)",
      "4 * ((3 - 9) + 12)",
      "((9 / 4) * 12) - 3",
      "(9 * (12 / 4)) - 3",
      "(3 - (4 / 12)) * 9",
      "9 / (3 / (12 - 4))",
      "12 + ((9 * 4) / 3)",
      "((9 / 3) * 4) + 12",
      "12 + (9 / (3 / 4))",
      "4 * (3 + (12 - 9))",
      "12 * ((9 - 4) - 3)",
      "((12 - 4) * 9) / 3",
      "12 + (4 * (9 / 3))",
      "((9 - 4) - 3) * 12",
      "((12 - 9) + 3) * 4",
      "((12 + 3) - 9) * 4",
      "(9 - (3 + 4)) * 12",
      "((4 / 3) * 9) + 12",
      "(3 + (12 - 9)) * 4",
      "4 * ((3 + 12) - 9)",
      "(9 * (4 / 3)) + 12",
      "9 * ((12 - 4) / 3)",
      "4 * ((12 + 3) - 9)",
      "(9 / 3) * (12 - 4)",
      "(12 + (3 - 9)) * 4",
      "(9 * 3) - (12 / 4)",
      "12 * (9 - (4 + 3))",
      "(12 / (4 / 9)) - 3",
      "4 * (12 + (3 - 9))",
      "12 + ((4 * 9) / 3)",
      "12 + ((4 / 3) * 9)",
      "12 * ((9 - 3) - 4)",
      "9 * (3 - (4 / 12))",
      "(4 / (3 / 9)) + 12",
      "((12 * 9) / 4) - 3",
      "4 * (3 - (9 - 12))",
      "4 * ((12 - 9) + 3)",
      "(4 * (9 / 3)) + 12",
      "((3 + 12) - 9) * 4",
      "(12 - 4) / (3 / 9)",
      "((9 * 12) / 4) - 3",
      "((12 / 4) * 9) - 3"
    ]
  },
  "3 4 9 13": {
    "cards": "3 4 9 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "3 * ((4 + 13) - 9)",
      "3 * ((13 + 4) - 9)",
      "((13 + 4) - 9) * 3",
      "((4 + 13) - 9) * 3",
      "(13 - (9 - 4)) * 3",
      "((13 - 9) + 4) * 3",
      "3 * (4 + (13 - 9))",
      "3 * (13 + (4 - 9))",
      "3 * (13 - (9 - 4))",
      "(4 + (13 - 9)) * 3",
      "((4 - 9) + 13) * 3",
      "(13 + (4 - 9)) * 3",
      "3 * ((4 - 9) + 13)",
      "3 * (4 - (9 - 13))",
      "(4 - (9 - 13)) * 3",
      "3 * ((13 - 9) + 4)"
    ]
  },
  "3 4 10 10": {
    "cards": "3 4 10 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(4 - 10) + (3 * 10)",
      "4 + ((3 * 10) - 10)",
      "(3 * 10) - (10 - 4)",
      "((3 * 10) + 4) - 10",
      "((3 * 10) - 10) + 4",
      "4 - (10 - (3 * 10))",
      "4 + ((10 * 3) - 10)",
      "((10 * 3) - 10) + 4",
      "(4 - 10) + (10 * 3)",
      "(3 * 10) + (4 - 10)",
      "((10 * 3) + 4) - 10",
      "4 - (10 - (10 * 3))",
      "(4 + (3 * 10)) - 10",
      "(10 * 3) + (4 - 10)",
      "(10 * 3) - (10 - 4)",
      "(4 + (10 * 3)) - 10"
    ]
  },
  "3 4 10 11": {
    "cards": "3 4 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 10 12": {
    "cards": "3 4 10 12",
    "has_solution": "Y",
    "num_solutions": 27,
    "solutions": [
      "((10 - 4) * 12) / 3",
      "(12 - 10) * (3 * 4)",
      "3 * (4 * (12 - 10))",
      "(3 * 4) * (12 - 10)",
      "12 / (3 - (10 / 4))",
      "((4 * 3) - 10) * 12",
      "4 * (3 * (12 - 10))",
      "(12 / 3) * (10 - 4)",
      "(3 * (12 - 10)) * 4",
      "(10 - 4) / (3 / 12)",
      "4 * (10 - (12 / 3))",
      "((12 - 10) * 4) * 3",
      "(12 * (10 - 4)) / 3",
      "((12 - 10) * 3) * 4",
      "12 / (3 / (10 - 4))",
      "12 * ((4 * 3) - 10)",
      "(4 * (12 - 10)) * 3",
      "12 * ((10 - 4) / 3)",
      "((3 * 4) - 10) * 12",
      "(10 - (12 / 3)) * 4",
      "(4 * 3) * (12 - 10)",
      "(12 - 10) * (4 * 3)",
      "12 * ((3 * 4) - 10)",
      "3 * ((12 - 10) * 4)",
      "((10 - 4) / 3) * 12",
      "(10 - 4) * (12 / 3)",
      "4 * ((12 - 10) * 3)"
    ]
  },
  "3 4 10 13": {
    "cards": "3 4 10 13",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "13 - ((3 - 10) - 4)",
      "10 - ((3 - 13) - 4)",
      "4 - ((3 - 10) - 13)",
      "(10 + 4) - (3 - 13)",
      "((13 + 10) + 4) - 3",
      "((10 * 4) - 13) - 3",
      "(13 + (4 - 3)) + 10",
      "(13 - 3) + (10 + 4)",
      "(4 - (3 - 13)) + 10",
      "((4 * 10) - 3) - 13",
      "10 + ((4 - 3) + 13)",
      "(4 + 13) + (10 - 3)",
      "((13 + 3) - 10) * 4",
      "(10 + 4) + (13 - 3)",
      "((13 + 4) - 3) + 10",
      "((4 + 13) - 3) + 10",
      "13 - (3 - (10 + 4))",
      "(4 + 13) - (3 - 10)",
      "((13 - 3) + 4) + 10",
      "(3 - (10 - 13)) * 4",
      "10 + (13 - (3 - 4))",
      "(10 + (4 + 13)) - 3",
      "(4 + (13 - 3)) + 10",
      "4 + ((13 + 10) - 3)",
      "10 - (3 - (13 + 4))",
      "(4 - 3) + (10 + 13)",
      "(13 + 4) + (10 - 3)",
      "10 + (13 + (4 - 3))",
      "13 + (4 - (3 - 10))",
      "4 + (10 + (13 - 3))",
      "10 + (4 + (13 - 3))",
      "4 + ((13 - 3) + 10)",
      "4 * ((3 - 10) + 13)",
      "4 + (13 + (10 - 3))",
      "(10 - (3 - 13)) + 4",
      "4 * (3 + (13 - 10))",
      "(4 + 10) - (3 - 13)",
      "((4 - 3) + 10) + 13",
      "((10 - 3) + 13) + 4",
      "((10 * 4) - 3) - 13",
      "((10 + 4) - 3) + 13",
      "(3 + (13 - 10)) * 4",
      "(10 * 4) - (13 + 3)",
      "(10 + 13) + (4 - 3)",
      "10 + ((13 - 3) + 4)",
      "13 - ((3 - 4) - 10)",
      "((4 + 10) - 3) + 13",
      "((13 + 10) - 3) + 4",
      "(4 - 3) + (13 + 10)",
      "(10 + 13) - (3 - 4)",
      "((4 + 13) + 10) - 3",
      "(13 - (3 - 10)) + 4",
      "10 - ((3 - 4) - 13)",
      "10 + ((4 + 13) - 3)",
      "13 + ((10 - 3) + 4)",
      "13 + (10 - (3 - 4))",
      "(10 + (4 - 3)) + 13",
      "13 + ((10 + 4) - 3)",
      "((13 - 3) + 10) + 4",
      "(13 - (10 - 3)) * 4",
      "4 * ((13 + 3) - 10)",
      "4 * ((3 + 13) - 10)",
      "(13 + 10) + (4 - 3)",
      "4 * (3 - (10 - 13))",
      "13 + (10 + (4 - 3))",
      "((13 - 10) + 3) * 4",
      "((4 + 10) + 13) - 3",
      "(13 + (10 - 3)) + 4",
      "(4 * 10) - (13 + 3)",
      "((3 - 10) + 13) * 4",
      "((10 + 13) - 3) + 4",
      "(13 - 3) + (4 + 10)",
      "4 - (3 - (13 + 10))",
      "((10 + 4) + 13) - 3",
      "(10 - 3) + (4 + 13)",
      "10 - (3 - (4 + 13))",
      "((4 * 10) - 13) - 3",
      "13 + ((4 + 10) - 3)",
      "(4 + 10) + (13 - 3)",
      "(4 + (10 - 3)) + 13",
      "(10 + (13 - 3)) + 4",
      "(10 - (3 - 4)) + 13",
      "((3 + 13) - 10) * 4",
      "(4 * 10) - (3 + 13)",
      "(13 - (3 - 4)) + 10",
      "4 + ((10 - 3) + 13)",
      "((4 - 3) + 13) + 10",
      "(13 + (3 - 10)) * 4",
      "(13 + 4) - (3 - 10)",
      "13 + (4 + (10 - 3))",
      "(13 + (4 + 10)) - 3",
      "((10 + 13) + 4) - 3",
      "(10 * 4) - (3 + 13)",
      "(4 + (13 + 10)) - 3",
      "(13 + (10 + 4)) - 3",
      "13 - (3 - (4 + 10))",
      "4 + ((10 + 13) - 3)",
      "4 * ((13 - 10) + 3)",
      "13 + ((4 - 3) + 10)",
      "10 + (4 - (3 - 13))",
      "4 - (3 - (10 + 13))",
      "4 * (13 + (3 - 10))",
      "((13 + 4) + 10) - 3",
      "4 + (13 - (3 - 10))",
      "4 * (13 - (10 - 3))",
      "(10 + (13 + 4)) - 3",
      "(10 - 3) + (13 + 4)",
      "(4 + (10 + 13)) - 3",
      "4 - ((3 - 13) - 10)",
      "10 + ((13 + 4) - 3)",
      "(13 + 10) - (3 - 4)",
      "(4 - (3 - 10)) + 13",
      "4 + (10 - (3 - 13))",
      "((10 - 3) + 4) + 13"
    ]
  },
  "3 4 11 11": {
    "cards": "3 4 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 4 11 12": {
    "cards": "3 4 11 12",
    "has_solution": "Y",
    "num_solutions": 100,
    "solutions": [
      "4 + ((11 - 3) + 12)",
      "(12 + 4) - (3 - 11)",
      "((11 + 12) - 3) + 4",
      "((11 + 12) + 4) - 3",
      "(11 + (12 - 3)) + 4",
      "(4 + (11 - 3)) + 12",
      "11 + (12 - (3 - 4))",
      "4 - ((3 - 11) - 12)",
      "((12 + 11) - 3) + 4",
      "(4 + (11 + 12)) - 3",
      "(4 + 12) - (3 - 11)",
      "(12 + (11 - 3)) + 4",
      "((12 + 11) + 4) - 3",
      "4 + (12 - (3 - 11))",
      "11 + (4 - (3 - 12))",
      "(11 - (12 / 4)) * 3",
      "((12 + 4) - 3) + 11",
      "(12 / 4) * (11 - 3)",
      "11 - ((3 - 12) - 4)",
      "(4 + 11) + (12 - 3)",
      "4 - (3 - (12 + 11))",
      "(11 + (4 - 3)) + 12",
      "((12 - 3) + 11) + 4",
      "11 + ((12 + 4) - 3)",
      "12 - ((3 - 4) - 11)",
      "((12 + 4) + 11) - 3",
      "(11 - 3) / (4 / 12)",
      "(12 - (3 - 11)) + 4",
      "(4 + (12 - 3)) + 11",
      "((12 - 3) + 4) + 11",
      "4 + (11 + (12 - 3))",
      "(4 - 3) + (12 + 11)",
      "((11 - 3) + 4) + 12",
      "((11 - 3) / 4) * 12",
      "((4 + 11) - 3) + 12",
      "(12 + (4 + 11)) - 3",
      "12 - (3 - (4 + 11))",
      "((11 - 3) + 12) + 4",
      "(4 + 11) - (3 - 12)",
      "((4 - 3) + 11) + 12",
      "3 * (11 - (12 / 4))",
      "11 + ((4 + 12) - 3)",
      "11 - ((3 - 4) - 12)",
      "(11 - 3) + (12 + 4)",
      "(11 - (3 - 4)) + 12",
      "4 + ((12 - 3) + 11)",
      "11 - (3 - (12 + 4))",
      "(4 - (3 - 11)) + 12",
      "4 - ((3 - 12) - 11)",
      "(11 + 4) - (3 - 12)",
      "(12 + 11) - (3 - 4)",
      "12 + ((4 + 11) - 3)",
      "(12 + (4 - 3)) + 11",
      "(11 + (4 + 12)) - 3",
      "11 - (3 - (4 + 12))",
      "(12 - 3) + (11 + 4)",
      "(11 - (3 - 12)) + 4",
      "4 + ((12 + 11) - 3)",
      "4 + ((11 + 12) - 3)",
      "(12 + 4) + (11 - 3)",
      "11 + ((4 - 3) + 12)",
      "((4 + 12) + 11) - 3",
      "((4 + 11) + 12) - 3",
      "11 + (4 + (12 - 3))",
      "((11 + 4) + 12) - 3",
      "12 / (4 / (11 - 3))",
      "(12 * (11 - 3)) / 4",
      "(4 - (3 - 12)) + 11",
      "12 + (4 + (11 - 3))",
      "12 + (11 + (4 - 3))",
      "4 + (11 - (3 - 12))",
      "(11 + 12) + (4 - 3)",
      "(11 - 3) + (4 + 12)",
      "12 + (4 - (3 - 11))",
      "12 - (3 - (11 + 4))",
      "12 + ((4 - 3) + 11)",
      "12 + (11 - (3 - 4))",
      "(12 + (11 + 4)) - 3",
      "((4 - 3) + 12) + 11",
      "((11 - 3) * 12) / 4",
      "11 + (12 + (4 - 3))",
      "(11 + 12) - (3 - 4)",
      "4 + (12 + (11 - 3))",
      "((11 + 4) - 3) + 12",
      "11 + ((12 - 3) + 4)",
      "(12 + 11) + (4 - 3)",
      "(12 - (3 - 4)) + 11",
      "(4 - 3) + (11 + 12)",
      "(4 + 12) + (11 - 3)",
      "(4 + (12 + 11)) - 3",
      "4 - (3 - (11 + 12))",
      "12 + ((11 + 4) - 3)",
      "12 - ((3 - 11) - 4)",
      "12 + ((11 - 3) + 4)",
      "((4 + 12) - 3) + 11",
      "(12 - 3) + (4 + 11)",
      "(11 - 3) * (12 / 4)",
      "(11 + 4) + (12 - 3)",
      "(11 + (12 + 4)) - 3",
      "12 * ((11 - 3) / 4)"
    ]
  },
  "3 4 11 13": {
    "cards": "3 4 11 13",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(13 * 3) - (4 + 11)",
      "(4 - 3) * (13 + 11)",
      "4 + ((11 * 3) - 13)",
      "13 - ((3 - 4) * 11)",
      "(13 * (4 - 3)) + 11",
      "(11 + 13) / (4 - 3)",
      "(11 / (4 - 3)) + 13",
      "13 + ((4 - 3) * 11)",
      "11 - ((3 - 4) * 13)",
      "11 - (13 / (3 - 4))",
      "4 - (13 - (11 * 3))",
      "((4 - 3) * 13) + 11",
      "(3 * 11) - (13 - 4)",
      "(3 * 11) + (4 - 13)",
      "13 + (11 / (4 - 3))",
      "(13 - 11) * (4 * 3)",
      "4 * ((13 - 11) * 3)",
      "(13 - 11) * (3 * 4)",
      "((11 * 3) + 4) - 13",
      "(13 / (4 - 3)) + 11",
      "((13 * 3) - 4) - 11",
      "((11 * 3) - 13) + 4",
      "(3 * 13) - (11 + 4)",
      "((13 * 3) - 11) - 4",
      "((3 * 11) + 4) - 13",
      "(4 * 3) * (13 - 11)",
      "13 - (11 * (3 - 4))",
      "(4 + (11 * 3)) - 13",
      "(11 * 3) - (13 - 4)",
      "(11 + 13) * (4 - 3)",
      "(4 * (13 - 11)) * 3",
      "((3 * 11) - 13) + 4",
      "(3 * 4) * (13 - 11)",
      "((4 - 3) * 11) + 13",
      "4 + ((3 * 11) - 13)",
      "(4 - 13) + (11 * 3)",
      "(13 * 3) - (11 + 4)",
      "11 + ((4 - 3) * 13)",
      "(13 + 11) / (4 - 3)",
      "(4 - 3) * (11 + 13)",
      "11 + (13 / (4 - 3))",
      "11 - (13 * (3 - 4))",
      "((13 - 11) * 4) * 3",
      "((3 * 13) - 4) - 11",
      "(11 * (4 - 3)) + 13",
      "13 + (11 * (4 - 3))",
      "(13 + 11) * (4 - 3)",
      "4 - (13 - (3 * 11))",
      "11 + (13 * (4 - 3))",
      "3 * (4 * (13 - 11))",
      "((13 - 11) * 3) * 4",
      "(11 * 3) + (4 - 13)",
      "(3 * (13 - 11)) * 4",
      "((3 * 13) - 11) - 4",
      "3 * ((13 - 11) * 4)",
      "(4 + (3 * 11)) - 13",
      "(3 * 13) - (4 + 11)",
      "13 - (11 / (3 - 4))",
      "(4 - 13) + (3 * 11)",
      "4 * (3 * (13 - 11))"
    ]
  },
  "3 4 12 12": {
    "cards": "3 4 12 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(12 * (4 - 3)) + 12",
      "12 + (12 / (4 - 3))",
      "(4 - 3) * (12 + 12)",
      "12 + ((4 - 3) * 12)",
      "12 - (12 / (3 - 4))",
      "12 - (12 * (3 - 4))",
      "(12 + 12) / (4 - 3)",
      "((12 - 3) * 4) - 12",
      "12 - ((3 - 4) * 12)",
      "12 + (12 * (4 - 3))",
      "(12 + 12) * (4 - 3)",
      "(4 * (12 - 3)) - 12",
      "((4 - 3) * 12) + 12",
      "(12 / (4 - 3)) + 12"
    ]
  },
  "3 4 12 13": {
    "cards": "3 4 12 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "((12 + 3) - 4) + 13",
      "13 + ((12 + 3) - 4)",
      "3 + ((12 + 13) - 4)",
      "12 + (13 + (3 - 4))",
      "(12 + (13 - 4)) + 3",
      "((3 + 13) - 4) + 12",
      "12 + ((3 + 13) - 4)",
      "(12 + 3) - (4 - 13)",
      "13 - (4 - (3 + 12))",
      "((3 - 4) + 13) + 12",
      "3 + (13 + (12 - 4))",
      "((12 + 13) + 3) - 4",
      "(12 + (3 - 4)) + 13",
      "((12 - 4) + 3) + 13",
      "(3 + (12 + 13)) - 4",
      "(13 - 4) + (3 + 12)",
      "12 - ((4 - 13) - 3)",
      "12 + (3 - (4 - 13))",
      "((12 - 4) + 13) + 3",
      "(13 + 12) + (3 - 4)",
      "(13 + (3 - 4)) + 12",
      "3 + ((13 - 4) + 12)",
      "((12 + 13) - 4) + 3",
      "((13 - 4) + 12) + 3",
      "(3 + 13) - (4 - 12)",
      "(3 + 12) - (4 - 13)",
      "((3 - 4) + 12) + 13",
      "(13 + (12 - 4)) + 3",
      "3 + (12 - (4 - 13))",
      "12 - ((4 - 3) - 13)",
      "(3 - (4 - 12)) + 13",
      "(3 + (13 - 4)) + 12",
      "12 + ((13 - 4) + 3)",
      "13 + (12 - (4 - 3))",
      "12 + ((3 - 4) + 13)",
      "13 + (3 + (12 - 4))",
      "(3 + 12) + (13 - 4)",
      "12 + ((13 + 3) - 4)",
      "(12 - 4) + (13 + 3)",
      "(12 + 13) + (3 - 4)",
      "((3 + 12) + 13) - 4",
      "3 + ((12 - 4) + 13)",
      "(12 - (4 - 13)) + 3",
      "(12 + (3 + 13)) - 4",
      "(3 + (13 + 12)) - 4",
      "13 + ((3 - 4) + 12)",
      "13 + (12 + (3 - 4))",
      "((13 + 12) - 4) + 3",
      "(13 + 3) + (12 - 4)",
      "13 - ((4 - 12) - 3)",
      "((12 + 3) + 13) - 4",
      "12 - (4 - (13 + 3))",
      "12 - (4 - (3 + 13))",
      "13 + ((3 + 12) - 4)",
      "(13 + 3) - (4 - 12)",
      "((13 - 4) + 3) + 12",
      "(12 + 13) - (4 - 3)",
      "(3 + 13) + (12 - 4)",
      "13 - ((4 - 3) - 12)",
      "(13 - (4 - 12)) + 3",
      "12 + (13 - (4 - 3))",
      "(13 + 12) - (4 - 3)",
      "((3 + 12) - 4) + 13",
      "13 + (3 - (4 - 12))",
      "(3 - (4 - 13)) + 12",
      "((13 + 3) + 12) - 4",
      "12 + (3 + (13 - 4))",
      "(13 - (4 - 3)) + 12",
      "(13 + (12 + 3)) - 4",
      "((13 + 12) + 3) - 4",
      "3 - (4 - (13 + 12))",
      "(13 + (3 + 12)) - 4",
      "((13 + 3) - 4) + 12",
      "13 + ((12 - 4) + 3)",
      "3 + (13 - (4 - 12))",
      "3 - ((4 - 13) - 12)",
      "(3 + (12 - 4)) + 13",
      "3 - ((4 - 12) - 13)",
      "(12 + (13 + 3)) - 4",
      "(12 - 4) + (3 + 13)",
      "13 - (4 - (12 + 3))",
      "(3 - 4) + (12 + 13)",
      "(3 - 4) + (13 + 12)",
      "(12 + 3) + (13 - 4)",
      "3 + (12 + (13 - 4))",
      "((3 + 13) + 12) - 4",
      "(13 - 4) + (12 + 3)",
      "3 + ((13 + 12) - 4)",
      "(12 - (4 - 3)) + 13",
      "3 - (4 - (12 + 13))"
    ]
  },
  "3 4 13 13": {
    "cards": "3 4 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 5 5": {
    "cards": "3 5 5 5",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 5 6": {
    "cards": "3 5 5 6",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(3 * (5 + 5)) - 6",
      "((5 / 5) + 3) * 6",
      "6 * ((5 / 5) + 3)",
      "(3 + (5 / 5)) * 6",
      "((5 + 5) * 3) - 6",
      "6 * (3 + (5 / 5))"
    ]
  },
  "3 5 5 7": {
    "cards": "3 5 5 7",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 + 5) * (5 - 3)",
      "(5 - 3) * (5 + 7)",
      "3 * (7 + (5 / 5))",
      "(5 + 7) * (5 - 3)",
      "(7 + (5 / 5)) * 3",
      "((5 / 5) + 7) * 3",
      "(5 - 3) * (7 + 5)",
      "3 * ((5 / 5) + 7)"
    ]
  },
  "3 5 5 8": {
    "cards": "3 5 5 8",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "8 * (3 * (5 / 5))",
      "3 * ((8 / 5) * 5)",
      "(3 * 8) / (5 / 5)",
      "(5 / 5) * (8 * 3)",
      "3 / ((5 / 8) / 5)",
      "(3 - (5 - 5)) * 8",
      "((5 / 5) * 3) * 8",
      "5 * ((8 / 5) * 3)",
      "5 + ((3 * 8) - 5)",
      "8 / (5 / (5 * 3))",
      "3 * (5 / (5 / 8))",
      "(3 * (5 / 5)) * 8",
      "(8 + (5 - 5)) * 3",
      "3 * (8 - (5 - 5))",
      "((8 - 5) + 5) * 3",
      "3 / (5 / (8 * 5))",
      "5 * ((3 * 8) / 5)",
      "5 / (5 / (3 * 8))",
      "(8 * 5) * (3 / 5)",
      "((5 * 8) * 3) / 5",
      "((8 / 5) * 5) * 3",
      "8 * ((5 - 5) + 3)",
      "5 / (5 / (8 * 3))",
      "3 * ((8 + 5) - 5)",
      "(5 * 3) / (5 / 8)",
      "(3 / (5 / 5)) * 8",
      "5 * (8 / (5 / 3))",
      "(5 + (8 - 5)) * 3",
      "8 / ((5 / 5) / 3)",
      "((3 / 5) * 8) * 5",
      "5 / ((5 / 8) / 3)",
      "(3 * 8) - (5 - 5)",
      "8 * (5 + (3 - 5))",
      "((8 + 5) - 5) * 3",
      "(8 / (5 / 3)) * 5",
      "((5 * 8) / 5) * 3",
      "((8 * 5) * 3) / 5",
      "(8 * 3) * (5 / 5)",
      "(5 / (5 / 3)) * 8",
      "8 * (5 - (5 - 3))",
      "(8 * (5 * 3)) / 5",
      "(5 + (3 - 5)) * 8",
      "(5 * (3 / 5)) * 8",
      "((3 * 5) * 8) / 5",
      "8 * ((3 - 5) + 5)",
      "8 / ((5 / 3) / 5)",
      "5 * (3 * (8 / 5))",
      "(8 / 5) * (5 * 3)",
      "(3 * 8) * (5 / 5)",
      "3 * (5 + (8 - 5))",
      "((8 * 3) + 5) - 5",
      "(8 - 5) * (3 + 5)",
      "8 * (3 + (5 - 5))",
      "((5 - 5) + 3) * 8",
      "(3 * (5 * 8)) / 5",
      "8 * (3 / (5 / 5))",
      "(5 - (5 - 8)) * 3",
      "5 * ((3 / 5) * 8)",
      "(5 * 3) * (8 / 5)",
      "((5 * 3) * 8) / 5",
      "3 / (5 / (5 * 8))",
      "3 * ((8 - 5) + 5)",
      "(5 - 5) + (8 * 3)",
      "(3 + 5) * (8 - 5)",
      "(5 - 5) + (3 * 8)",
      "(8 / 5) * (3 * 5)",
      "((3 + 5) - 5) * 8",
      "(3 * 5) * (8 / 5)",
      "(8 * (3 / 5)) * 5",
      "5 * (8 * (3 / 5))",
      "(5 / 5) * (3 * 8)",
      "((3 * 8) - 5) + 5",
      "(5 + (8 * 3)) - 5",
      "(8 - 5) * (5 + 3)",
      "3 * (5 * (8 / 5))",
      "5 - (5 - (3 * 8))",
      "8 / (5 / (3 * 5))",
      "((3 * 5) / 5) * 8",
      "((8 / 5) * 3) * 5",
      "(3 / (5 / 8)) * 5",
      "(3 * (8 * 5)) / 5",
      "(3 * 8) + (5 - 5)",
      "((5 * 3) / 5) * 8",
      "8 * ((3 / 5) * 5)",
      "((3 * 8) + 5) - 5",
      "3 * (8 * (5 / 5))",
      "(8 * (3 * 5)) / 5",
      "(5 - (5 - 3)) * 8",
      "(5 * 8) * (3 / 5)",
      "(3 + (5 - 5)) * 8",
      "(8 - (5 - 5)) * 3",
      "8 * ((3 + 5) - 5)",
      "3 * ((5 + 8) - 5)",
      "(8 / (5 / 5)) * 3",
      "5 * ((8 * 3) / 5)",
      "((3 / 5) * 5) * 8",
      "3 * (8 + (5 - 5))",
      "5 / ((5 / 3) / 8)",
      "3 * (8 / (5 / 5))",
      "3 * ((5 / 5) * 8)",
      "3 * (5 - (5 - 8))",
      "((5 - 5) + 8) * 3",
      "5 * (3 / (5 / 8))",
      "8 * (5 * (3 / 5))",
      "8 * (3 - (5 - 5))",
      "8 * (5 / (5 / 3))",
      "(5 * (8 * 3)) / 5",
      "((8 * 3) * 5) / 5",
      "(3 / 5) * (5 * 8)",
      "3 * ((5 - 5) + 8)",
      "8 * ((5 + 3) - 5)",
      "((8 * 5) / 5) * 3",
      "3 / ((5 / 5) / 8)",
      "(8 * (5 / 5)) * 3",
      "((5 + 8) - 5) * 3",
      "(5 * (8 / 5)) * 3",
      "((8 * 3) / 5) * 5",
      "((8 * 3) - 5) + 5",
      "8 * ((5 / 5) * 3)",
      "(3 * 5) / (5 / 8)",
      "(5 + 3) * (8 - 5)",
      "((5 / 5) * 8) * 3",
      "(8 * 3) + (5 - 5)",
      "((3 * 8) / 5) * 5",
      "8 * ((5 * 3) / 5)",
      "5 + ((8 * 3) - 5)",
      "((3 - 5) + 5) * 8",
      "(5 / (5 / 8)) * 3",
      "3 * ((5 * 8) / 5)",
      "(5 * 8) / (5 / 3)",
      "(3 * (8 / 5)) * 5",
      "((5 + 3) - 5) * 8",
      "(5 + (3 * 8)) - 5",
      "(8 * 5) / (5 / 3)",
      "(5 * (3 * 8)) / 5",
      "8 * ((3 * 5) / 5)",
      "(8 * 3) - (5 - 5)",
      "5 - (5 - (8 * 3))",
      "(8 * 3) / (5 / 5)",
      "(3 / 5) * (8 * 5)",
      "((3 * 8) * 5) / 5",
      "3 * ((8 * 5) / 5)"
    ]
  },
  "3 5 5 9": {
    "cards": "3 5 5 9",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "5 * (3 + (9 / 5))",
      "(9 - (5 / 5)) * 3",
      "3 * (9 - (5 / 5))",
      "((9 / 5) + 3) * 5",
      "5 * ((9 / 5) + 3)",
      "(3 + (9 / 5)) * 5"
    ]
  },
  "3 5 5 10": {
    "cards": "3 5 5 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 5 11": {
    "cards": "3 5 5 11",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "5 + ((11 + 5) + 3)",
      "(3 + 11) + (5 + 5)",
      "5 + (11 + (5 + 3))",
      "((11 + 3) + 5) + 5",
      "3 + (5 + (5 + 11))",
      "((5 + 11) + 5) + 3",
      "(3 + (11 + 5)) + 5",
      "((5 + 11) + 3) + 5",
      "5 + ((11 + 3) + 5)",
      "(11 + 5) + (3 + 5)",
      "(5 + (5 + 3)) + 11",
      "(3 + 5) + (11 + 5)",
      "3 + (11 + (5 + 5))",
      "3 + ((11 + 5) + 5)",
      "((11 + 5) + 3) + 5",
      "(3 + 5) + (5 + 11)",
      "((5 + 3) + 5) + 11",
      "(5 + 3) + (5 + 11)",
      "(5 + 3) + (11 + 5)",
      "((5 + 5) + 3) + 11",
      "(5 + (3 + 11)) + 5",
      "5 + ((5 + 11) + 3)",
      "(11 + 3) + (5 + 5)",
      "((5 + 5) + 11) + 3",
      "((3 + 5) + 11) + 5",
      "(3 + (5 + 11)) + 5",
      "(5 + (3 + 5)) + 11",
      "((11 + 5) + 5) + 3",
      "5 + (5 + (11 + 3))",
      "(5 + 11) + (5 + 3)",
      "((3 + 5) + 5) + 11",
      "(5 + (5 + 11)) + 3",
      "3 + ((5 + 11) + 5)",
      "11 + ((5 + 5) + 3)",
      "((5 + 3) + 11) + 5",
      "5 + (3 + (5 + 11))",
      "5 + (5 + (3 + 11))",
      "(11 + (5 + 5)) + 3",
      "(5 + 5) + (3 + 11)",
      "5 + ((5 + 3) + 11)",
      "(11 + (5 + 3)) + 5",
      "3 + (5 + (11 + 5))",
      "(11 + (3 + 5)) + 5",
      "5 + (3 + (11 + 5))",
      "((3 + 11) + 5) + 5",
      "(11 + 5) + (5 + 3)",
      "5 + ((3 + 11) + 5)",
      "(5 + (11 + 5)) + 3",
      "11 + (3 + (5 + 5))",
      "5 + (11 + (3 + 5))",
      "11 + ((3 + 5) + 5)",
      "(5 + 5) + (11 + 3)",
      "11 + (5 + (5 + 3))",
      "11 + ((5 + 3) + 5)",
      "(5 + 11) + (3 + 5)",
      "(5 + (11 + 3)) + 5",
      "11 + (5 + (3 + 5))",
      "5 + ((3 + 5) + 11)",
      "(3 + (5 + 5)) + 11",
      "3 + ((5 + 5) + 11)"
    ]
  },
  "3 5 5 12": {
    "cards": "3 5 5 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(3 - (5 / 5)) * 12",
      "12 * (3 - (5 / 5))"
    ]
  },
  "3 5 5 13": {
    "cards": "3 5 5 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 6 6": {
    "cards": "3 5 6 6",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((3 - 5) + 6) * 6",
      "((6 - 5) + 3) * 6",
      "6 * ((3 - 5) + 6)",
      "(6 - (5 - 3)) * 6",
      "(3 - (5 - 6)) * 6",
      "6 * (6 + (3 - 5))",
      "(5 - 3) * (6 + 6)",
      "((6 + 3) - 5) * 6",
      "6 * (3 + (6 - 5))",
      "(6 + 6) * (5 - 3)",
      "6 * (6 - (5 - 3))",
      "6 * ((6 + 3) - 5)",
      "(6 + (3 - 5)) * 6",
      "6 * (3 - (5 - 6))",
      "6 * ((3 + 6) - 5)",
      "((3 + 6) - 5) * 6",
      "6 * ((6 - 5) + 3)",
      "(3 + (6 - 5)) * 6"
    ]
  },
  "3 5 6 7": {
    "cards": "3 5 6 7",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "6 / (3 / (7 + 5))",
      "(5 + 7) * (6 / 3)",
      "3 * (7 - (5 - 6))",
      "(5 + 7) / (3 / 6)",
      "((7 + 5) / 3) * 6",
      "((7 + 6) - 5) * 3",
      "6 * ((5 + 7) / 3)",
      "(7 + 5) / (3 / 6)",
      "3 * ((6 + 7) - 5)",
      "3 * ((7 + 6) - 5)",
      "(7 + (6 - 5)) * 3",
      "((5 + 7) * 6) / 3",
      "3 * (6 + (7 - 5))",
      "(6 - (5 - 7)) * 3",
      "((6 + 7) - 5) * 3",
      "6 / (3 / (5 + 7))",
      "((7 + 5) * 6) / 3",
      "((6 - 5) + 7) * 3",
      "(6 * (5 + 7)) / 3",
      "3 * (7 + (6 - 5))",
      "(7 + 5) * (6 / 3)",
      "(6 / 3) * (5 + 7)",
      "3 * ((7 - 5) + 6)",
      "((7 - 5) + 6) * 3",
      "(7 - (5 - 6)) * 3",
      "3 * (6 - (5 - 7))",
      "(6 / 3) * (7 + 5)",
      "(6 * (7 + 5)) / 3",
      "3 * ((6 - 5) + 7)",
      "(6 + (7 - 5)) * 3",
      "6 * ((7 + 5) / 3)",
      "((5 + 7) / 3) * 6"
    ]
  },
  "3 5 6 8": {
    "cards": "3 5 6 8",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(3 * (6 - 5)) * 8",
      "8 * (5 - (6 / 3))",
      "(8 * 6) / (5 - 3)",
      "(8 / (5 - 3)) * 6",
      "(6 * 8) / (5 - 3)",
      "(8 * 3) * (6 - 5)",
      "((6 - 5) * 3) * 8",
      "8 / ((6 - 5) / 3)",
      "(6 - 5) * (8 * 3)",
      "(5 - (6 / 3)) * 8",
      "3 / ((6 - 5) / 8)",
      "((6 - 5) * 8) * 3",
      "3 * (8 / (6 - 5))",
      "(6 - 5) * (3 * 8)",
      "3 * ((6 - 5) * 8)",
      "(3 / (6 - 5)) * 8",
      "(3 * 8) * (6 - 5)",
      "(8 * (6 - 5)) * 3",
      "(3 * 8) / (6 - 5)",
      "8 * ((6 - 5) * 3)",
      "8 * (6 / (5 - 3))",
      "(8 / (6 - 5)) * 3",
      "6 / ((5 - 3) / 8)",
      "(6 / (5 - 3)) * 8",
      "8 * (3 * (6 - 5))",
      "(8 * 3) / (6 - 5)",
      "3 * (8 * (6 - 5))",
      "8 * (3 / (6 - 5))",
      "6 * (8 / (5 - 3))",
      "8 / ((5 - 3) / 6)"
    ]
  },
  "3 5 6 9": {
    "cards": "3 5 6 9",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "(3 + (6 * 5)) - 9",
      "3 - (9 - (6 * 5))",
      "((5 + 6) * 3) - 9",
      "6 + ((5 - 3) * 9)",
      "3 * (5 + (9 - 6))",
      "(9 + (5 - 6)) * 3",
      "(9 - 6) * (5 + 3)",
      "9 + (5 * (6 - 3))",
      "((5 + 9) - 6) * 3",
      "6 + (9 * (5 - 3))",
      "(3 * (5 + 6)) - 9",
      "3 - (9 - (5 * 6))",
      "((6 * 5) + 3) - 9",
      "(5 + (9 - 6)) * 3",
      "3 * (9 + (5 - 6))",
      "9 + ((6 - 3) * 5)",
      "6 - ((3 - 5) * 9)",
      "(3 * (6 + 5)) - 9",
      "(9 * (5 - 3)) + 6",
      "(5 + 3) * (9 - 6)",
      "((6 - 3) * 5) + 9",
      "6 - (9 * (3 - 5))",
      "3 * ((5 - 6) + 9)",
      "(5 * (9 - 3)) - 6",
      "((9 - 6) + 5) * 3",
      "3 * ((9 - 6) + 5)",
      "(5 * (6 - 3)) + 9",
      "9 - ((3 - 6) * 5)",
      "(3 + 5) * (9 - 6)",
      "(3 - 9) + (6 * 5)",
      "(6 * 5) - (9 - 3)",
      "(3 + (5 * 6)) - 9",
      "(9 - 6) * (3 + 5)",
      "3 + ((6 * 5) - 9)",
      "3 * (9 - (6 - 5))",
      "(9 - (6 - 5)) * 3",
      "((6 + 5) * 3) - 9",
      "(5 - (6 - 9)) * 3",
      "3 + ((5 * 6) - 9)",
      "((5 - 6) + 9) * 3",
      "(6 * 5) + (3 - 9)",
      "9 - (5 * (3 - 6))",
      "((6 * 5) - 9) + 3",
      "(5 * 6) + (3 - 9)",
      "((9 - 3) * 5) - 6",
      "(5 * 6) - (9 - 3)",
      "((5 - 3) * 9) + 6",
      "((5 * 6) - 9) + 3",
      "((5 * 6) + 3) - 9",
      "(3 - 9) + (5 * 6)",
      "((9 + 5) - 6) * 3",
      "3 * ((5 + 9) - 6)",
      "3 * (5 - (6 - 9))",
      "3 * ((9 + 5) - 6)"
    ]
  },
  "3 5 6 10": {
    "cards": "3 5 6 10",
    "has_solution": "Y",
    "num_solutions": 124,
    "solutions": [
      "((5 + 3) + 10) + 6",
      "(6 + 3) + (10 + 5)",
      "3 + ((10 + 6) + 5)",
      "(10 + 5) + (6 + 3)",
      "(3 + (5 + 6)) + 10",
      "6 + (5 + (3 + 10))",
      "(6 + (3 + 10)) + 5",
      "(5 + (10 + 6)) + 3",
      "3 + ((6 + 10) + 5)",
      "10 + (3 + (6 + 5))",
      "3 + (5 + (10 + 6))",
      "(10 + (6 + 3)) + 5",
      "3 + (6 + (10 + 5))",
      "(10 + (5 + 6)) + 3",
      "(6 + (5 + 10)) + 3",
      "6 + (10 + (3 + 5))",
      "(10 + 6) + (3 + 5)",
      "((6 + 3) + 5) + 10",
      "10 + ((3 + 6) + 5)",
      "10 + ((6 + 3) + 5)",
      "((10 + 6) + 3) + 5",
      "6 + (5 + (10 + 3))",
      "((10 + 3) + 6) + 5",
      "5 + ((3 + 6) + 10)",
      "((3 + 6) + 10) + 5",
      "3 * (6 + (10 / 5))",
      "(3 + (5 + 10)) + 6",
      "(6 + 10) + (5 + 3)",
      "((10 / 5) + 6) * 3",
      "6 + (10 + (5 + 3))",
      "((10 + 5) + 6) + 3",
      "(6 + 3) + (5 + 10)",
      "(6 + (5 + 3)) + 10",
      "3 + (10 + (5 + 6))",
      "(10 + (6 + 5)) + 3",
      "((3 + 5) + 6) + 10",
      "10 + (5 + (3 + 6))",
      "3 + ((5 + 10) + 6)",
      "3 + (5 + (6 + 10))",
      "((10 + 6) + 5) + 3",
      "((6 + 10) + 5) + 3",
      "(5 + 3) + (10 + 6)",
      "(6 + (10 + 3)) + 5",
      "3 + (10 + (6 + 5))",
      "(10 + 5) + (3 + 6)",
      "10 + (3 + (5 + 6))",
      "10 + (6 + (5 + 3))",
      "(10 + (3 + 6)) + 5",
      "((3 + 6) + 5) + 10",
      "((6 + 3) + 10) + 5",
      "((10 + 5) + 3) + 6",
      "(10 + (5 + 3)) + 6",
      "6 + ((3 + 10) + 5)",
      "((3 + 5) + 10) + 6",
      "10 + ((5 + 6) + 3)",
      "10 + (5 + (6 + 3))",
      "(5 + (6 + 10)) + 3",
      "(5 + 10) + (3 + 6)",
      "(3 + 10) + (6 + 5)",
      "3 * ((10 / 5) + 6)",
      "(3 + 5) + (6 + 10)",
      "5 + (3 + (10 + 6))",
      "(3 + 6) + (5 + 10)",
      "(3 + 10) + (5 + 6)",
      "((5 + 3) + 6) + 10",
      "((5 + 10) + 3) + 6",
      "5 + (10 + (6 + 3))",
      "(10 + 3) + (6 + 5)",
      "(5 + 10) + (6 + 3)",
      "(5 + (10 + 3)) + 6",
      "10 + ((5 + 3) + 6)",
      "(3 + (10 + 6)) + 5",
      "(6 + (3 + 5)) + 10",
      "6 + ((5 + 3) + 10)",
      "(5 + 3) + (6 + 10)",
      "((5 + 6) + 10) + 3",
      "6 + (3 + (10 + 5))",
      "(10 + 3) + (5 + 6)",
      "(3 + (6 + 10)) + 5",
      "3 + (6 + (5 + 10))",
      "5 + (3 + (6 + 10))",
      "6 + (3 + (5 + 10))",
      "((3 + 10) + 6) + 5",
      "6 + ((10 + 3) + 5)",
      "5 + ((3 + 10) + 6)",
      "6 + ((10 + 5) + 3)",
      "3 + ((10 + 5) + 6)",
      "(5 + 6) + (3 + 10)",
      "5 + (10 + (3 + 6))",
      "(6 + 5) + (3 + 10)",
      "((3 + 10) + 5) + 6",
      "3 + ((5 + 6) + 10)",
      "5 + ((6 + 3) + 10)",
      "((6 + 10) + 3) + 5",
      "(6 + 10) + (3 + 5)",
      "5 + (6 + (10 + 3))",
      "(6 + (10 + 5)) + 3",
      "(6 + (10 / 5)) * 3",
      "5 + ((6 + 10) + 3)",
      "10 + (6 + (3 + 5))",
      "((5 + 10) + 6) + 3",
      "((6 + 5) + 10) + 3",
      "(5 + (3 + 10)) + 6",
      "5 + ((10 + 3) + 6)",
      "((10 + 3) + 5) + 6",
      "3 + ((6 + 5) + 10)",
      "(3 + 5) + (10 + 6)",
      "(6 + 5) + (10 + 3)",
      "(5 + 6) + (10 + 3)",
      "((5 + 6) + 3) + 10",
      "10 + ((3 + 5) + 6)",
      "10 + ((6 + 5) + 3)",
      "(3 + (6 + 5)) + 10",
      "(10 + (3 + 5)) + 6",
      "6 + ((5 + 10) + 3)",
      "(3 + 6) + (10 + 5)",
      "(5 + (6 + 3)) + 10",
      "6 + ((3 + 5) + 10)",
      "(3 + (10 + 5)) + 6",
      "((6 + 5) + 3) + 10",
      "5 + (6 + (3 + 10))",
      "(5 + (3 + 6)) + 10",
      "5 + ((10 + 6) + 3)",
      "(10 + 6) + (5 + 3)"
    ]
  },
  "3 5 6 11": {
    "cards": "3 5 6 11",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "6 * ((3 * 5) - 11)",
      "(11 + (6 * 3)) - 5",
      "6 - ((5 - 11) * 3)",
      "(11 + (3 * 6)) - 5",
      "11 - (5 - (3 * 6))",
      "11 + ((3 * 6) - 5)",
      "6 * ((5 * 3) - 11)",
      "((3 * 6) - 5) + 11",
      "6 - (3 * (5 - 11))",
      "((3 * 5) - 11) * 6",
      "11 + ((6 * 3) - 5)",
      "((6 * 3) - 5) + 11",
      "6 + ((11 - 5) * 3)",
      "((11 - 5) * 3) + 6",
      "(11 - 5) + (6 * 3)",
      "(6 * 3) - (5 - 11)",
      "(11 - 5) + (3 * 6)",
      "6 + (3 * (11 - 5))",
      "((3 * 6) + 11) - 5",
      "(6 * 3) + (11 - 5)",
      "(3 * (11 - 5)) + 6",
      "11 - (5 - (6 * 3))",
      "((5 * 3) - 11) * 6",
      "(3 * 6) + (11 - 5)",
      "(3 * 6) - (5 - 11)",
      "((6 * 3) + 11) - 5"
    ]
  },
  "3 5 6 12": {
    "cards": "3 5 6 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "((12 - 3) - 5) * 6",
      "(5 - (6 - 3)) * 12",
      "6 * (12 - (3 + 5))",
      "12 * (3 - (6 - 5))",
      "(3 + (5 - 6)) * 12",
      "12 * ((5 - 6) + 3)",
      "(5 + (3 - 6)) * 12",
      "(12 - (3 + 5)) * 6",
      "((12 - 5) - 3) * 6",
      "(6 * (5 - 3)) + 12",
      "6 * (12 - (5 + 3))",
      "12 * ((5 + 3) - 6)",
      "((5 + 3) - 6) * 12",
      "12 * (3 + (5 - 6))",
      "(12 - (5 + 3)) * 6",
      "12 * (5 + (3 - 6))",
      "12 * (5 - (6 - 3))",
      "12 - ((3 - 5) * 6)",
      "((3 + 5) - 6) * 12",
      "((5 - 3) * 6) + 12",
      "((3 - 6) + 5) * 12",
      "12 + (6 * (5 - 3))",
      "6 * ((12 - 5) - 3)",
      "((5 - 6) + 3) * 12",
      "12 + ((5 - 3) * 6)",
      "12 * ((3 + 5) - 6)",
      "12 - (6 * (3 - 5))",
      "(3 - (6 - 5)) * 12",
      "6 * ((12 - 3) - 5)",
      "12 * ((3 - 6) + 5)"
    ]
  },
  "3 5 6 13": {
    "cards": "3 5 6 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 5) * (6 - 3)",
      "(6 - 3) * (13 - 5)",
      "(3 - 6) * (5 - 13)",
      "(5 - 13) * (3 - 6)"
    ]
  },
  "3 5 7 7": {
    "cards": "3 5 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 7 8": {
    "cards": "3 5 7 8",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(7 * 5) - (3 + 8)",
      "((8 - 5) * 7) + 3",
      "(8 + (3 * 7)) - 5",
      "(3 * 7) - (5 - 8)",
      "(5 * 7) - (8 + 3)",
      "(3 * 7) + (8 - 5)",
      "8 + ((7 * 3) - 5)",
      "(7 * 5) - (8 + 3)",
      "(7 * (8 - 5)) + 3",
      "(7 * 3) - (5 - 8)",
      "8 + ((3 * 7) - 5)",
      "(7 * 3) + (8 - 5)",
      "((5 * 7) - 3) - 8",
      "((5 * 7) - 8) - 3",
      "(8 - 5) + (3 * 7)",
      "((7 * 3) + 8) - 5",
      "((7 * 5) - 8) - 3",
      "(5 * 7) - (3 + 8)",
      "((7 * 3) - 5) + 8",
      "3 - (7 * (5 - 8))",
      "((3 * 7) + 8) - 5",
      "(8 - 5) + (7 * 3)",
      "3 + ((8 - 5) * 7)",
      "((7 * 5) - 3) - 8",
      "((3 * 7) - 5) + 8",
      "8 - (5 - (3 * 7))",
      "8 - (5 - (7 * 3))",
      "3 - ((5 - 8) * 7)",
      "(8 + (7 * 3)) - 5",
      "3 + (7 * (8 - 5))"
    ]
  },
  "3 5 7 9": {
    "cards": "3 5 7 9",
    "has_solution": "Y",
    "num_solutions": 130,
    "solutions": [
      "(3 + (5 + 7)) + 9",
      "9 + (5 + (7 + 3))",
      "9 + (7 + (5 + 3))",
      "(7 + 3) + (5 + 9)",
      "9 + (5 + (3 + 7))",
      "(7 + (3 + 5)) + 9",
      "(7 + 9) + (3 + 5)",
      "(7 + (9 + 3)) + 5",
      "((5 + 9) + 7) + 3",
      "((9 + 5) + 7) + 3",
      "(9 + 5) + (7 + 3)",
      "(7 + 5) + (9 + 3)",
      "(7 + (5 + 9)) + 3",
      "9 + ((7 + 5) + 3)",
      "(3 + 5) + (7 + 9)",
      "3 + ((9 + 7) + 5)",
      "3 + ((5 + 9) + 7)",
      "(5 + (3 + 7)) + 9",
      "5 + (7 + (9 + 3))",
      "(5 * 9) - (7 * 3)",
      "(9 + 3) + (5 + 7)",
      "7 + ((9 + 3) + 5)",
      "3 + (5 + (9 + 7))",
      "((9 + 7) + 5) + 3",
      "(3 + 9) + (7 + 5)",
      "7 + ((9 + 5) + 3)",
      "7 + (5 + (9 + 3))",
      "(3 + (5 + 9)) + 7",
      "(3 + 7) + (5 + 9)",
      "(3 + 7) + (9 + 5)",
      "((5 + 7) + 3) + 9",
      "(7 + (5 + 3)) + 9",
      "(7 + (9 + 5)) + 3",
      "9 + ((5 + 7) + 3)",
      "((3 + 7) + 5) + 9",
      "(9 + 3) + (7 + 5)",
      "(7 + 5) + (3 + 9)",
      "5 + (3 + (7 + 9))",
      "(3 + (7 + 9)) + 5",
      "7 + (9 + (5 + 3))",
      "7 + ((5 + 9) + 3)",
      "(5 + (7 + 3)) + 9",
      "(5 + (9 + 7)) + 3",
      "(9 + (5 + 3)) + 7",
      "((7 + 3) + 9) + 5",
      "5 + (9 + (3 + 7))",
      "((9 + 5) + 3) + 7",
      "((5 + 3) + 7) + 9",
      "(5 + 9) + (7 + 3)",
      "(5 * 9) - (3 * 7)",
      "(5 + (9 + 3)) + 7",
      "9 + (3 + (7 + 5))",
      "5 + ((7 + 3) + 9)",
      "((3 + 5) + 9) + 7",
      "((7 + 9) + 5) + 3",
      "((7 + 3) + 5) + 9",
      "(7 - 5) * (9 + 3)",
      "9 * (5 - (7 / 3))",
      "((3 + 9) + 7) + 5",
      "(7 - 5) * (3 + 9)",
      "3 + (5 + (7 + 9))",
      "(3 + (9 + 7)) + 5",
      "(3 + (7 + 5)) + 9",
      "(7 + 9) + (5 + 3)",
      "(5 + 7) + (3 + 9)",
      "((5 + 7) + 9) + 3",
      "5 + (7 + (3 + 9))",
      "(9 + (3 + 5)) + 7",
      "((9 + 7) + 3) + 5",
      "3 + ((7 + 5) + 9)",
      "9 + ((5 + 3) + 7)",
      "((7 + 5) + 3) + 9",
      "(3 + 9) * (7 - 5)",
      "((9 + 3) + 5) + 7",
      "(9 * 5) - (7 * 3)",
      "((5 + 9) + 3) + 7",
      "(3 + 5) + (9 + 7)",
      "(9 + 5) + (3 + 7)",
      "7 + (3 + (5 + 9))",
      "3 + ((5 + 7) + 9)",
      "7 + ((5 + 3) + 9)",
      "((7 + 5) + 9) + 3",
      "(9 + 7) + (5 + 3)",
      "(5 + 3) + (9 + 7)",
      "7 + (9 + (3 + 5))",
      "(9 + (7 + 3)) + 5",
      "((3 + 9) + 5) + 7",
      "(7 + 3) + (9 + 5)",
      "7 + ((3 + 9) + 5)",
      "5 + ((3 + 9) + 7)",
      "(9 + (7 + 5)) + 3",
      "(5 + 9) + (3 + 7)",
      "(9 + 7) + (3 + 5)",
      "9 + ((3 + 5) + 7)",
      "(7 + (3 + 9)) + 5",
      "5 + ((3 + 7) + 9)",
      "((5 + 3) + 9) + 7",
      "(5 + 7) + (9 + 3)",
      "3 + ((9 + 5) + 7)",
      "9 + (7 + (3 + 5))",
      "(3 + 9) + (5 + 7)",
      "5 + (3 + (9 + 7))",
      "(5 + 3) + (7 + 9)",
      "3 + (9 + (7 + 5))",
      "((3 + 7) + 9) + 5",
      "3 + ((7 + 9) + 5)",
      "((7 + 9) + 3) + 5",
      "3 + (7 + (5 + 9))",
      "(9 + 3) * (7 - 5)",
      "7 + (5 + (3 + 9))",
      "(9 + (3 + 7)) + 5",
      "5 + ((9 + 3) + 7)",
      "3 + (9 + (5 + 7))",
      "7 + ((3 + 5) + 9)",
      "9 + ((7 + 3) + 5)",
      "5 + ((9 + 7) + 3)",
      "(5 - (7 / 3)) * 9",
      "(3 + (9 + 5)) + 7",
      "9 + (3 + (5 + 7))",
      "5 + (9 + (7 + 3))",
      "(9 + (5 + 7)) + 3",
      "((3 + 5) + 7) + 9",
      "((9 + 3) + 7) + 5",
      "5 + ((7 + 9) + 3)",
      "(9 * 5) - (3 * 7)",
      "7 + (3 + (9 + 5))",
      "9 + ((3 + 7) + 5)",
      "(5 + (3 + 9)) + 7",
      "3 + (7 + (9 + 5))",
      "(5 + (7 + 9)) + 3"
    ]
  },
  "3 5 7 10": {
    "cards": "3 5 7 10",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((5 - 3) * 7) + 10",
      "(3 + 5) * (10 - 7)",
      "(10 - 7) * (3 + 5)",
      "(7 * (5 - 3)) + 10",
      "3 * ((10 + 5) - 7)",
      "3 * (5 + (10 - 7))",
      "((10 + 5) - 7) * 3",
      "(5 + 3) * (10 - 7)",
      "3 * ((5 - 7) + 10)",
      "3 * (10 - (7 - 5))",
      "3 * (10 + (5 - 7))",
      "(10 + (5 - 7)) * 3",
      "10 - (7 * (3 - 5))",
      "10 + (7 * (5 - 3))",
      "(10 - 7) * (5 + 3)",
      "10 + ((5 - 3) * 7)",
      "3 * ((5 + 10) - 7)",
      "(5 - (7 - 10)) * 3",
      "(10 - (7 - 5)) * 3",
      "3 * ((10 - 7) + 5)",
      "3 * (5 - (7 - 10))",
      "(5 + (10 - 7)) * 3",
      "((5 - 7) + 10) * 3",
      "((5 + 10) - 7) * 3",
      "10 - ((3 - 5) * 7)",
      "((10 - 7) + 5) * 3"
    ]
  },
  "3 5 7 11": {
    "cards": "3 5 7 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(11 - 5) * (7 - 3)",
      "((11 * 7) - 5) / 3",
      "(3 - 7) * (5 - 11)",
      "(7 - 3) * (11 - 5)",
      "((7 * 11) - 5) / 3",
      "(5 - 11) * (3 - 7)"
    ]
  },
  "3 5 7 12": {
    "cards": "3 5 7 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((7 + 3) * 12) / 5",
      "(3 * 12) - (5 + 7)",
      "(7 + 3) / (5 / 12)",
      "((12 * 3) - 5) - 7",
      "12 / (5 / (3 + 7))",
      "12 * ((7 + 3) / 5)",
      "(12 * 3) - (7 + 5)",
      "(12 * (3 + 7)) / 5",
      "12 * ((3 + 7) / 5)",
      "((7 + 5) * 3) - 12",
      "(3 + 7) / (5 / 12)",
      "(12 / 5) * (3 + 7)",
      "(12 / 5) * (7 + 3)",
      "(12 * 3) - (5 + 7)",
      "(3 + 7) * (12 / 5)",
      "((3 * 12) - 5) - 7",
      "((3 * 12) - 7) - 5",
      "((12 * 3) - 7) - 5",
      "(3 * (5 + 7)) - 12",
      "(3 * (7 + 5)) - 12",
      "((3 + 7) * 12) / 5",
      "(3 * 12) - (7 + 5)",
      "(12 * (7 + 3)) / 5",
      "((3 + 7) / 5) * 12",
      "((7 + 3) / 5) * 12",
      "12 / (5 / (7 + 3))",
      "((5 + 7) * 3) - 12",
      "(7 + 3) * (12 / 5)"
    ]
  },
  "3 5 7 13": {
    "cards": "3 5 7 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 + (5 * 13)) / 3",
      "((5 * 13) + 7) / 3",
      "((13 * 5) + 7) / 3",
      "(7 + (13 * 5)) / 3"
    ]
  },
  "3 5 8 8": {
    "cards": "3 5 8 8",
    "has_solution": "Y",
    "num_solutions": 66,
    "solutions": [
      "3 + ((8 + 8) + 5)",
      "(3 + (5 + 8)) + 8",
      "(5 + 3) + (8 + 8)",
      "(5 + 8) + (8 + 3)",
      "8 + (8 * (5 - 3))",
      "(8 + 3) + (8 + 5)",
      "(8 + 8) + (5 + 3)",
      "(8 + (8 + 3)) + 5",
      "8 + ((3 + 8) + 5)",
      "(8 + (5 + 8)) + 3",
      "((8 + 8) + 5) + 3",
      "((3 + 5) + 8) + 8",
      "(5 + 8) + (3 + 8)",
      "((8 + 3) + 5) + 8",
      "5 + ((8 + 3) + 8)",
      "8 + ((8 + 5) + 3)",
      "8 + (8 + (5 + 3))",
      "((8 + 3) + 8) + 5",
      "8 + (5 + (3 + 8))",
      "5 + (8 + (3 + 8))",
      "(8 + (5 + 3)) + 8",
      "(8 + 5) + (8 + 3)",
      "5 + ((3 + 8) + 8)",
      "(3 + 5) + (8 + 8)",
      "(5 + (8 + 8)) + 3",
      "((8 + 8) + 3) + 5",
      "8 + (3 + (8 + 5))",
      "((5 + 8) + 8) + 3",
      "((8 + 5) + 8) + 3",
      "8 - ((3 - 5) * 8)",
      "((5 + 8) + 3) + 8",
      "(8 + (8 + 5)) + 3",
      "3 + (8 + (5 + 8))",
      "(3 + (8 + 8)) + 5",
      "(3 + 8) + (5 + 8)",
      "(3 + (8 + 5)) + 8",
      "8 + ((3 + 5) + 8)",
      "(5 + (8 + 3)) + 8",
      "3 + ((5 + 8) + 8)",
      "(8 + 5) + (3 + 8)",
      "3 + (8 + (8 + 5))",
      "8 + ((8 + 3) + 5)",
      "5 + (8 + (8 + 3))",
      "(8 + (3 + 5)) + 8",
      "8 + (5 + (8 + 3))",
      "(5 + (3 + 8)) + 8",
      "((8 + 5) + 3) + 8",
      "8 + ((5 - 3) * 8)",
      "8 - (8 * (3 - 5))",
      "((5 + 3) + 8) + 8",
      "(8 + (3 + 8)) + 5",
      "8 + ((5 + 8) + 3)",
      "((5 - 3) * 8) + 8",
      "5 + ((8 + 8) + 3)",
      "8 + ((5 + 3) + 8)",
      "8 + (8 + (3 + 5))",
      "3 + (5 + (8 + 8))",
      "(8 * (5 - 3)) + 8",
      "((3 + 8) + 5) + 8",
      "5 + (3 + (8 + 8))",
      "((3 + 8) + 8) + 5",
      "(8 + 8) + (3 + 5)",
      "8 + (3 + (5 + 8))",
      "3 + ((8 + 5) + 8)",
      "(3 + 8) + (8 + 5)",
      "(8 + 3) + (5 + 8)"
    ]
  },
  "3 5 8 9": {
    "cards": "3 5 8 9",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(5 + (9 * 3)) - 8",
      "(5 - 8) + (9 * 3)",
      "(5 + (3 * 9)) - 8",
      "((3 * 9) + 5) - 8",
      "5 - (8 - (9 * 3))",
      "((9 * 3) - 8) + 5",
      "((9 * 3) + 5) - 8",
      "5 + ((3 * 9) - 8)",
      "(9 * (8 - 5)) - 3",
      "((8 - 5) * 9) - 3",
      "(5 - 8) + (3 * 9)",
      "5 + ((9 * 3) - 8)",
      "((3 * 9) - 8) + 5",
      "(9 * 3) + (5 - 8)",
      "(3 * 9) + (5 - 8)",
      "5 - (8 - (3 * 9))",
      "(3 * 9) - (8 - 5)",
      "(9 * 3) - (8 - 5)"
    ]
  },
  "3 5 8 10": {
    "cards": "3 5 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 8 11": {
    "cards": "3 5 8 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(5 - (8 - 11)) * 3",
      "8 * (11 - (5 + 3))",
      "((11 + 5) - 8) * 3",
      "(8 - 5) * (11 - 3)",
      "(5 - 8) * (3 - 11)",
      "3 * ((11 - 8) + 5)",
      "(11 + (5 - 8)) * 3",
      "3 * (11 + (5 - 8))",
      "3 * ((11 + 5) - 8)",
      "3 * ((5 + 11) - 8)",
      "((5 - 8) + 11) * 3",
      "(3 + 5) * (11 - 8)",
      "((11 - 5) - 3) * 8",
      "(11 - 3) * (8 - 5)",
      "((5 + 11) - 8) * 3",
      "((11 - 8) + 5) * 3",
      "(3 - 11) * (5 - 8)",
      "3 * (5 + (11 - 8))",
      "8 * (11 - (3 + 5))",
      "(11 - 8) * (3 + 5)",
      "((11 - 3) - 5) * 8",
      "3 * (11 - (8 - 5))",
      "(11 - (5 + 3)) * 8",
      "8 * ((11 - 5) - 3)",
      "3 * (5 - (8 - 11))",
      "(5 + (11 - 8)) * 3",
      "3 * ((5 - 8) + 11)",
      "(11 - (3 + 5)) * 8",
      "8 * ((11 - 3) - 5)",
      "(11 - 8) * (5 + 3)",
      "(11 - (8 - 5)) * 3",
      "(5 + 3) * (11 - 8)"
    ]
  },
  "3 5 8 12": {
    "cards": "3 5 8 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((3 + 12) * 8) / 5",
      "8 * ((3 * 5) - 12)",
      "((12 + 3) * 8) / 5",
      "(8 / 5) * (3 + 12)",
      "(3 + 12) / (5 / 8)",
      "(3 + 12) * (8 / 5)",
      "8 * ((3 + 12) / 5)",
      "(8 * (3 + 12)) / 5",
      "(8 * (12 + 3)) / 5",
      "8 / (5 / (3 + 12))",
      "((3 + 12) / 5) * 8",
      "(12 + 3) / (5 / 8)",
      "8 / (5 / (12 + 3))",
      "(12 + 3) * (8 / 5)",
      "8 * ((5 * 3) - 12)",
      "((5 * 3) - 12) * 8",
      "8 * ((12 + 3) / 5)",
      "((3 * 5) - 12) * 8",
      "((12 + 3) / 5) * 8",
      "(8 / 5) * (12 + 3)"
    ]
  },
  "3 5 8 13": {
    "cards": "3 5 8 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((8 * 5) - 13) - 3",
      "(5 * 8) - (3 + 13)",
      "(5 * 8) - (13 + 3)",
      "(8 * 5) - (13 + 3)",
      "(8 * 5) - (3 + 13)",
      "((8 * 5) - 3) - 13",
      "((5 * 8) - 3) - 13",
      "((5 * 8) - 13) - 3"
    ]
  },
  "3 5 9 9": {
    "cards": "3 5 9 9",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((9 / 3) * 5) + 9",
      "(5 - 9) * (3 - 9)",
      "(9 * (5 / 3)) + 9",
      "(5 * (9 / 3)) + 9",
      "9 + (9 / (3 / 5))",
      "(3 - 9) * (5 - 9)",
      "9 + ((5 / 3) * 9)",
      "9 + ((9 / 3) * 5)",
      "(9 / (3 / 5)) + 9",
      "9 + (5 / (3 / 9))",
      "(9 - 5) * (9 - 3)",
      "(9 - 3) * (9 - 5)",
      "9 + ((5 * 9) / 3)",
      "((9 * 5) / 3) + 9",
      "(5 / (3 / 9)) + 9",
      "((5 * 9) / 3) + 9",
      "9 + (5 * (9 / 3))",
      "9 + (9 * (5 / 3))",
      "9 + ((9 * 5) / 3)",
      "((5 / 3) * 9) + 9"
    ]
  },
  "3 5 9 10": {
    "cards": "3 5 9 10",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "9 + ((10 - 5) * 3)",
      "((9 + 3) / 5) * 10",
      "(3 + 9) * (10 / 5)",
      "9 - (3 * (5 - 10))",
      "((9 + 3) * 10) / 5",
      "(10 / 5) * (9 + 3)",
      "(10 * (3 + 9)) / 5",
      "10 * ((3 + 9) / 5)",
      "(3 * (10 - 5)) + 9",
      "(3 + 9) / (5 / 10)",
      "(10 * (9 + 3)) / 5",
      "9 + (3 * (10 - 5))",
      "9 - ((5 - 10) * 3)",
      "(9 + 3) * (10 / 5)",
      "10 * ((9 + 3) / 5)",
      "((3 + 9) * 10) / 5",
      "(10 / 5) * (3 + 9)",
      "10 / (5 / (3 + 9))",
      "((10 - 5) * 3) + 9",
      "10 / (5 / (9 + 3))",
      "((3 + 9) / 5) * 10",
      "(9 + 3) / (5 / 10)"
    ]
  },
  "3 5 9 11": {
    "cards": "3 5 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 9 12": {
    "cards": "3 5 9 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "3 * (12 + (5 - 9))",
      "3 * (5 + (12 - 9))",
      "(3 + 5) * (12 - 9)",
      "(12 + (5 - 9)) * 3",
      "12 - ((5 - 9) * 3)",
      "3 * ((12 - 9) + 5)",
      "(5 + 3) * (12 - 9)",
      "((9 - 5) * 3) + 12",
      "((5 - 9) + 12) * 3",
      "(12 - 9) * (3 + 5)",
      "((5 + 12) - 9) * 3",
      "((12 + 5) - 9) * 3",
      "(5 - (9 / 3)) * 12",
      "3 * (12 - (9 - 5))",
      "12 - (3 * (5 - 9))",
      "(5 + (12 - 9)) * 3",
      "3 * (5 - (9 - 12))",
      "12 * (5 - (9 / 3))",
      "(3 * (9 - 5)) + 12",
      "3 * ((12 + 5) - 9)",
      "12 + ((9 - 5) * 3)",
      "(12 - 9) * (5 + 3)",
      "3 * ((5 - 9) + 12)",
      "((12 - 9) + 5) * 3",
      "12 + (3 * (9 - 5))",
      "(5 - (9 - 12)) * 3",
      "(12 - (9 - 5)) * 3",
      "3 * ((5 + 12) - 9)"
    ]
  },
  "3 5 9 13": {
    "cards": "3 5 9 13",
    "has_solution": "Y",
    "num_solutions": 102,
    "solutions": [
      "((9 - 3) + 5) + 13",
      "5 + (9 - (3 - 13))",
      "(5 + (13 + 9)) - 3",
      "(13 - 5) / (3 / 9)",
      "5 + ((9 - 3) + 13)",
      "(13 + 5) - (3 - 9)",
      "((13 - 3) + 5) + 9",
      "(5 - 3) + (13 + 9)",
      "(5 - 3) + (9 + 13)",
      "(9 - 3) + (5 + 13)",
      "(13 + (5 + 9)) - 3",
      "(9 + 13) - (3 - 5)",
      "9 + (13 + (5 - 3))",
      "13 + (5 + (9 - 3))",
      "5 - (3 - (9 + 13))",
      "(3 + (9 * 13)) / 5",
      "(5 + 13) - (3 - 9)",
      "13 - (3 - (5 + 9))",
      "((13 - 5) / 3) * 9",
      "(5 - (3 - 13)) + 9",
      "((9 + 5) + 13) - 3",
      "9 + (13 - (3 - 5))",
      "(9 * (13 - 5)) / 3",
      "(13 + (9 + 5)) - 3",
      "5 + ((9 + 13) - 3)",
      "(13 - 5) * (9 / 3)",
      "(5 + (9 - 3)) + 13",
      "(13 - 3) + (5 + 9)",
      "((9 + 13) - 3) + 5",
      "13 + ((9 + 5) - 3)",
      "(13 - 3) + (9 + 5)",
      "(13 + 9) - (3 - 5)",
      "9 - ((3 - 5) - 13)",
      "(9 + 5) - (3 - 13)",
      "9 + (5 - (3 - 13))",
      "(3 + (13 * 9)) / 5",
      "9 + ((5 + 13) - 3)",
      "(5 + (9 + 13)) - 3",
      "(9 - (3 - 5)) + 13",
      "5 + (13 - (3 - 9))",
      "5 - ((3 - 13) - 9)",
      "13 - ((3 - 9) - 5)",
      "5 + (13 + (9 - 3))",
      "((13 + 9) - 3) + 5",
      "((9 + 13) + 5) - 3",
      "13 + (5 - (3 - 9))",
      "(9 + 5) + (13 - 3)",
      "((13 + 5) + 9) - 3",
      "(5 + 9) + (13 - 3)",
      "((5 + 9) + 13) - 3",
      "9 - (3 - (13 + 5))",
      "5 - (3 - (13 + 9))",
      "((13 * 9) + 3) / 5",
      "9 + ((13 + 5) - 3)",
      "((9 + 5) - 3) + 13",
      "9 - (3 - (5 + 13))",
      "((5 - 3) + 9) + 13",
      "((5 - 3) + 13) + 9",
      "((9 - 3) + 13) + 5",
      "((5 + 9) - 3) + 13",
      "13 - (3 - (9 + 5))",
      "(9 / 3) * (13 - 5)",
      "5 + ((13 + 9) - 3)",
      "(9 - 3) + (13 + 5)",
      "(9 - (3 - 13)) + 5",
      "(9 + (13 + 5)) - 3",
      "13 + (9 - (3 - 5))",
      "((13 - 5) * 9) / 3",
      "(13 + (5 - 3)) + 9",
      "5 + ((13 - 3) + 9)",
      "(9 + (5 - 3)) + 13",
      "(13 + 9) + (5 - 3)",
      "9 / (3 / (13 - 5))",
      "((5 + 13) + 9) - 3",
      "(13 - (3 - 9)) + 5",
      "13 + ((5 - 3) + 9)",
      "9 * ((13 - 5) / 3)",
      "((5 + 13) - 3) + 9",
      "9 + (5 + (13 - 3))",
      "(5 + (13 - 3)) + 9",
      "(13 + (9 - 3)) + 5",
      "13 - ((3 - 5) - 9)",
      "(9 + (13 - 3)) + 5",
      "5 + (9 + (13 - 3))",
      "9 + ((13 - 3) + 5)",
      "9 - ((3 - 13) - 5)",
      "9 + ((5 - 3) + 13)",
      "13 + ((9 - 3) + 5)",
      "(13 + 5) + (9 - 3)",
      "(5 + 13) + (9 - 3)",
      "5 - ((3 - 9) - 13)",
      "(5 + 9) - (3 - 13)",
      "(5 - (3 - 9)) + 13",
      "((9 * 13) + 3) / 5",
      "(9 + 13) + (5 - 3)",
      "((13 + 9) + 5) - 3",
      "13 + ((5 + 9) - 3)",
      "((13 - 3) + 9) + 5",
      "(13 - (3 - 5)) + 9",
      "13 + (9 + (5 - 3))",
      "((13 + 5) - 3) + 9",
      "(9 + (5 + 13)) - 3"
    ]
  },
  "3 5 10 10": {
    "cards": "3 5 10 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "3 * (10 - (10 / 5))",
      "(10 - (10 / 5)) * 3"
    ]
  },
  "3 5 10 11": {
    "cards": "3 5 10 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((10 - 3) * 5) - 11",
      "(5 + (10 * 3)) - 11",
      "(3 * 10) + (5 - 11)",
      "((3 * 10) + 5) - 11",
      "((3 * 10) - 11) + 5",
      "(10 * 3) - (11 - 5)",
      "((10 * 3) - 11) + 5",
      "5 - (11 - (3 * 10))",
      "5 + ((10 * 3) - 11)",
      "(5 - 11) + (3 * 10)",
      "(5 - 11) + (10 * 3)",
      "(5 * (10 - 3)) - 11",
      "(3 * 10) - (11 - 5)",
      "((10 * 3) + 5) - 11",
      "(5 + (3 * 10)) - 11",
      "(10 * 3) + (5 - 11)",
      "5 - (11 - (10 * 3))",
      "5 + ((3 * 10) - 11)"
    ]
  },
  "3 5 10 12": {
    "cards": "3 5 10 12",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "12 - (3 - (5 + 10))",
      "((5 + 12) + 10) - 3",
      "(10 + (12 - 3)) + 5",
      "10 - (3 - (5 + 12))",
      "10 + ((12 + 5) - 3)",
      "5 + (10 - (3 - 12))",
      "(12 - 3) + (10 + 5)",
      "12 + ((10 + 5) - 3)",
      "12 + (10 - (3 - 5))",
      "5 + (12 - (3 - 10))",
      "(5 - (3 - 12)) + 10",
      "((10 + 5) - 3) + 12",
      "(10 + 5) - (3 - 12)",
      "(12 - (3 - 5)) + 10",
      "10 - (3 - (12 + 5))",
      "10 + (12 - (3 - 5))",
      "12 - ((3 - 5) - 10)",
      "((12 + 5) + 10) - 3",
      "5 + ((10 + 12) - 3)",
      "((10 - 3) - 5) * 12",
      "(12 + 5) - (3 - 10)",
      "(12 - 3) + (5 + 10)",
      "12 * ((10 - 5) - 3)",
      "10 + ((5 - 3) + 12)",
      "5 - (3 - (12 + 10))",
      "(10 + (12 + 5)) - 3",
      "((5 - 3) + 12) + 10",
      "12 + ((10 - 3) + 5)",
      "(10 - (3 + 5)) * 12",
      "(10 - (3 - 12)) + 5",
      "12 + ((5 + 10) - 3)",
      "((10 + 12) + 5) - 3",
      "(5 + 10) + (12 - 3)",
      "12 + (5 - (3 - 10))",
      "10 - ((3 - 5) - 12)",
      "(5 + 12) + (10 - 3)",
      "((12 + 5) - 3) + 10",
      "5 + (10 + (12 - 3))",
      "10 - ((3 - 12) - 5)",
      "(12 + 10) - (3 - 5)",
      "10 + (12 + (5 - 3))",
      "((10 - 5) - 3) * 12",
      "((12 + 10) + 5) - 3",
      "5 - ((3 - 10) - 12)",
      "(10 + (5 + 12)) - 3",
      "5 + ((12 - 3) + 10)",
      "5 + (12 + (10 - 3))",
      "12 - ((3 - 10) - 5)",
      "5 - (3 - (10 + 12))",
      "(5 + 10) - (3 - 12)",
      "12 - (3 - (10 + 5))",
      "(5 - (3 - 10)) + 12",
      "((5 + 12) - 3) + 10",
      "(5 + (10 + 12)) - 3",
      "12 + (10 + (5 - 3))",
      "(12 + (5 - 3)) + 10",
      "(5 + (12 + 10)) - 3",
      "(10 + (5 - 3)) + 12",
      "(10 - 3) + (12 + 5)",
      "((10 + 12) - 3) + 5",
      "((12 - 3) + 5) + 10",
      "((10 + 5) + 12) - 3",
      "((5 + 10) + 12) - 3",
      "(10 - (3 - 5)) + 12",
      "((12 - 3) + 10) + 5",
      "((5 + 10) - 3) + 12",
      "(10 - 3) + (5 + 12)",
      "((12 + 10) - 3) + 5",
      "((5 - 3) + 10) + 12",
      "(10 + 12) - (3 - 5)",
      "(5 + 12) - (3 - 10)",
      "(12 + 5) + (10 - 3)",
      "5 + ((12 + 10) - 3)",
      "(5 - 3) + (10 + 12)",
      "(10 - (5 + 3)) * 12",
      "12 * ((10 - 3) - 5)",
      "(5 + (10 - 3)) + 12",
      "12 + ((5 - 3) + 10)",
      "(5 - 3) + (12 + 10)",
      "(10 + 5) + (12 - 3)",
      "(12 + 10) + (5 - 3)",
      "(12 - (3 - 10)) + 5",
      "10 + ((12 - 3) + 5)",
      "10 + (5 - (3 - 12))",
      "12 + (5 + (10 - 3))",
      "(12 + (10 + 5)) - 3",
      "10 + ((5 + 12) - 3)",
      "12 * (10 - (5 + 3))",
      "(12 + (10 - 3)) + 5",
      "(5 + (12 - 3)) + 10",
      "(10 + 12) + (5 - 3)",
      "5 + ((10 - 3) + 12)",
      "12 * (10 - (3 + 5))",
      "(12 + (5 + 10)) - 3",
      "10 + (5 + (12 - 3))",
      "5 - ((3 - 12) - 10)",
      "((10 - 3) + 5) + 12",
      "((10 - 3) + 12) + 5"
    ]
  },
  "3 5 10 13": {
    "cards": "3 5 10 13",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((5 - 10) + 13) * 3",
      "(5 + 3) * (13 - 10)",
      "3 * (13 + (5 - 10))",
      "((13 - 10) + 5) * 3",
      "3 * (5 - (10 - 13))",
      "(13 - (10 - 5)) * 3",
      "(3 * 13) - (10 + 5)",
      "((13 * 3) - 5) - 10",
      "((3 * 13) - 10) - 5",
      "((13 * 3) - 10) - 5",
      "((3 * 13) - 5) - 10",
      "3 * (5 + (13 - 10))",
      "3 * ((5 - 10) + 13)",
      "((5 + 13) - 10) * 3",
      "3 * (13 - (10 - 5))",
      "(13 - 10) * (5 + 3)",
      "((13 + 5) - 10) * 3",
      "(13 + (5 - 10)) * 3",
      "(13 * 3) - (10 + 5)",
      "3 * ((5 + 13) - 10)",
      "(13 - 10) * (3 + 5)",
      "(3 * 13) - (5 + 10)",
      "(3 + 5) * (13 - 10)",
      "3 * ((13 + 5) - 10)",
      "(5 + (13 - 10)) * 3",
      "(13 * 3) - (5 + 10)",
      "3 * ((13 - 10) + 5)",
      "(5 - (10 - 13)) * 3"
    ]
  },
  "3 5 11 11": {
    "cards": "3 5 11 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "5 - (3 - (11 + 11))",
      "5 - ((3 - 11) - 11)",
      "((5 + 11) - 3) + 11",
      "11 + ((11 - 3) + 5)",
      "(11 + (5 - 3)) + 11",
      "5 + ((11 + 11) - 3)",
      "11 - (3 - (11 + 5))",
      "(11 + 11) + (5 - 3)",
      "(11 - (3 - 5)) + 11",
      "11 - (3 - (5 + 11))",
      "11 + (5 + (11 - 3))",
      "((11 - 3) + 11) + 5",
      "(5 + 11) + (11 - 3)",
      "((11 + 5) + 11) - 3",
      "(11 + (11 - 3)) + 5",
      "11 + (11 - (3 - 5))",
      "11 - ((3 - 11) - 5)",
      "(5 - (3 - 11)) + 11",
      "(11 - 3) + (11 + 5)",
      "11 + (5 - (3 - 11))",
      "((5 - 3) + 11) + 11",
      "(5 + (11 - 3)) + 11",
      "(11 + 5) + (11 - 3)",
      "(5 - 3) + (11 + 11)",
      "((5 + 11) + 11) - 3",
      "11 + ((11 + 5) - 3)",
      "((11 - 3) + 5) + 11",
      "((11 + 5) - 3) + 11",
      "5 + ((11 - 3) + 11)",
      "(11 - 3) + (5 + 11)",
      "(11 - (3 - 11)) + 5",
      "((11 + 11) + 5) - 3",
      "11 - ((3 - 5) - 11)",
      "5 + (11 - (3 - 11))",
      "11 + ((5 + 11) - 3)",
      "(11 + (11 + 5)) - 3",
      "(11 + (5 + 11)) - 3",
      "11 + ((5 - 3) + 11)",
      "(5 + (11 + 11)) - 3",
      "(5 + 11) - (3 - 11)",
      "(11 + 5) - (3 - 11)",
      "((11 + 11) - 3) + 5",
      "11 + (11 + (5 - 3))",
      "(11 + 11) - (3 - 5)",
      "5 + (11 + (11 - 3))"
    ]
  },
  "3 5 11 12": {
    "cards": "3 5 11 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 - 5) * 12) / 3",
      "(11 - 5) / (3 / 12)",
      "(12 * (11 - 5)) / 3",
      "12 * ((11 - 5) / 3)",
      "(12 / 3) * (11 - 5)",
      "(11 - 5) * (12 / 3)",
      "((11 - 5) / 3) * 12",
      "12 / (3 / (11 - 5))"
    ]
  },
  "3 5 11 13": {
    "cards": "3 5 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 5 12 12": {
    "cards": "3 5 12 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((5 * 12) + 12) / 3",
      "(5 * 12) - (12 * 3)",
      "(12 + (5 * 12)) / 3",
      "(12 + (12 * 5)) / 3",
      "(12 * 5) - (12 * 3)",
      "((12 * 5) + 12) / 3",
      "(5 * 12) - (3 * 12)",
      "(12 * 5) - (3 * 12)"
    ]
  },
  "3 5 12 13": {
    "cards": "3 5 12 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(13 - 3) / (5 / 12)",
      "((13 - 3) / 5) * 12",
      "((5 * 3) - 13) * 12",
      "12 * ((5 * 3) - 13)",
      "12 / (5 / (13 - 3))",
      "(12 * (13 - 3)) / 5",
      "(13 - 3) * (12 / 5)",
      "(12 / 5) * (13 - 3)",
      "((13 - 3) * 12) / 5",
      "((3 * 5) - 13) * 12",
      "12 * ((3 * 5) - 13)",
      "12 * ((13 - 3) / 5)"
    ]
  },
  "3 5 13 13": {
    "cards": "3 5 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(3 + (13 + 13)) - 5",
      "13 + ((13 + 3) - 5)",
      "(3 + 13) + (13 - 5)",
      "(13 + (13 + 3)) - 5",
      "(13 + (3 - 5)) + 13",
      "3 + ((13 + 13) - 5)",
      "(13 + 3) - (5 - 13)",
      "13 - ((5 - 13) - 3)",
      "((13 - 5) + 3) + 13",
      "3 + ((13 - 5) + 13)",
      "13 + ((13 - 5) + 3)",
      "(3 - (5 - 13)) + 13",
      "((3 - 5) + 13) + 13",
      "3 + (13 - (5 - 13))",
      "3 - (5 - (13 + 13))",
      "(13 - 5) + (3 + 13)",
      "(13 - (5 - 13)) + 3",
      "((13 - 5) + 13) + 3",
      "3 + (13 + (13 - 5))",
      "13 - (5 - (3 + 13))",
      "(3 + 13) - (5 - 13)",
      "((13 + 3) + 13) - 5",
      "13 - (5 - (13 + 3))",
      "3 - ((5 - 13) - 13)",
      "(13 + (3 + 13)) - 5",
      "(3 - 5) + (13 + 13)",
      "((13 + 13) - 5) + 3",
      "13 + (13 + (3 - 5))",
      "(3 + (13 - 5)) + 13",
      "(13 - 5) + (13 + 3)",
      "(13 + 3) + (13 - 5)",
      "((3 + 13) - 5) + 13",
      "(13 + (13 - 5)) + 3",
      "13 + ((3 + 13) - 5)",
      "((13 + 13) + 3) - 5",
      "(13 - (5 - 3)) + 13",
      "(13 + 13) + (3 - 5)",
      "13 + (3 + (13 - 5))",
      "13 + (3 - (5 - 13))",
      "13 - ((5 - 3) - 13)",
      "((3 + 13) + 13) - 5",
      "13 + ((3 - 5) + 13)",
      "((13 + 3) - 5) + 13",
      "(13 + 13) - (5 - 3)",
      "13 + (13 - (5 - 3))"
    ]
  },
  "3 6 6 6": {
    "cards": "3 6 6 6",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((6 + 6) * 6) / 3",
      "6 * ((6 / 6) + 3)",
      "6 * (6 - (6 / 3))",
      "(6 / 3) * (6 + 6)",
      "6 * ((6 + 6) / 3)",
      "(6 * (6 + 6)) / 3",
      "((6 / 6) + 3) * 6",
      "6 + ((6 - 3) * 6)",
      "6 * (3 + (6 / 6))",
      "6 + (6 * (6 - 3))",
      "6 - (6 * (3 - 6))",
      "(3 + (6 / 6)) * 6",
      "(6 - (6 / 3)) * 6",
      "((6 + 6) / 3) * 6",
      "(6 + 6) * (6 / 3)",
      "((6 - 3) * 6) + 6",
      "(6 * (6 - 3)) + 6",
      "(6 + 6) / (3 / 6)",
      "6 - ((3 - 6) * 6)",
      "6 / (3 / (6 + 6))"
    ]
  },
  "3 6 6 7": {
    "cards": "3 6 6 7",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((7 - 6) + 3) * 6",
      "6 * (7 - (6 - 3))",
      "6 * (3 + (7 - 6))",
      "(7 + (6 / 6)) * 3",
      "3 * ((6 / 6) + 7)",
      "6 * ((7 - 6) + 3)",
      "6 * (7 + (3 - 6))",
      "(6 * 7) - (3 * 6)",
      "(6 * 7) - (6 * 3)",
      "(7 * 6) - (3 * 6)",
      "6 * ((3 + 7) - 6)",
      "((7 + 3) - 6) * 6",
      "6 * (3 - (6 - 7))",
      "(7 + (3 - 6)) * 6",
      "(3 - (6 - 7)) * 6",
      "6 * ((3 - 6) + 7)",
      "((3 - 6) + 7) * 6",
      "3 * (7 + (6 / 6))",
      "((6 / 6) + 7) * 3",
      "((3 + 7) - 6) * 6",
      "6 * ((7 + 3) - 6)",
      "(3 + (7 - 6)) * 6",
      "(7 * 6) - (6 * 3)",
      "(7 - (6 - 3)) * 6"
    ]
  },
  "3 6 6 8": {
    "cards": "3 6 6 8",
    "has_solution": "Y",
    "num_solutions": 140,
    "solutions": [
      "8 * ((6 - 6) + 3)",
      "8 * (6 + (3 - 6))",
      "(6 + (8 * 3)) - 6",
      "(6 * (8 / 6)) * 3",
      "(8 * 3) * (6 / 6)",
      "(8 * (6 * 3)) / 6",
      "8 * (3 * (6 / 6))",
      "8 * (6 / (6 / 3))",
      "(8 / 6) * (3 * 6)",
      "(6 - 6) + (3 * 8)",
      "6 * ((3 / 6) * 8)",
      "8 * (3 - (6 - 6))",
      "((3 * 6) * 8) / 6",
      "8 / ((6 / 6) / 3)",
      "8 * (6 * (3 / 6))",
      "3 * (6 + (8 - 6))",
      "8 * ((3 - 6) + 6)",
      "((3 * 8) * 6) / 6",
      "6 - (6 - (8 * 3))",
      "(8 * 6) / (6 / 3)",
      "3 * (8 * (6 / 6))",
      "(8 * (6 / 6)) * 3",
      "(8 * (3 / 6)) * 6",
      "((8 * 3) * 6) / 6",
      "((6 * 3) * 8) / 6",
      "(3 * 6) / (6 / 8)",
      "(3 * 8) / (6 / 6)",
      "6 * (3 / (6 / 8))",
      "((6 + 3) - 6) * 8",
      "(6 / 6) * (3 * 8)",
      "6 * (3 * (8 / 6))",
      "6 / (6 / (3 * 8))",
      "3 / ((6 / 6) / 8)",
      "(3 / 6) * (6 * 8)",
      "(3 / 6) * (8 * 6)",
      "(8 * (3 * 6)) / 6",
      "(3 * 8) + (6 - 6)",
      "(3 * (8 / 6)) * 6",
      "3 * (6 - (6 - 8))",
      "8 * ((6 / 6) * 3)",
      "3 * ((6 + 8) - 6)",
      "8 / (6 / (3 * 6))",
      "(6 / (6 / 3)) * 8",
      "8 * ((6 + 3) - 6)",
      "(6 * 3) * (8 / 6)",
      "((6 * 3) / 6) * 8",
      "((6 / 6) * 8) * 3",
      "(6 * (3 / 6)) * 8",
      "(8 * 3) - (6 - 6)",
      "(8 * 3) / (6 / 6)",
      "3 * (6 / (6 / 8))",
      "6 / ((6 / 8) / 3)",
      "(8 * 3) + (6 - 6)",
      "((3 + 6) - 6) * 8",
      "6 * ((8 * 3) / 6)",
      "8 * (6 - (6 - 3))",
      "(3 / (6 / 8)) * 6",
      "(3 + (6 - 6)) * 8",
      "8 * (3 / (6 / 6))",
      "(8 - (6 - 6)) * 3",
      "((3 * 6) / 6) * 8",
      "3 * ((8 * 6) / 6)",
      "3 * (6 * (8 / 6))",
      "(3 - (6 - 6)) * 8",
      "3 * (8 - (6 - 6))",
      "((6 + 8) - 6) * 3",
      "8 * ((3 / 6) * 6)",
      "(6 * (8 - 3)) - 6",
      "(8 + (6 - 6)) * 3",
      "3 * ((6 - 6) + 8)",
      "(3 * 6) * (8 / 6)",
      "6 * ((3 * 8) / 6)",
      "6 * ((8 / 6) * 3)",
      "((8 / 6) * 3) * 6",
      "6 * (8 * (3 / 6))",
      "8 * ((6 * 3) / 6)",
      "(3 * (6 / 6)) * 8",
      "((3 * 8) / 6) * 6",
      "(8 / (6 / 6)) * 3",
      "3 * (8 + (6 - 6))",
      "((6 / 6) * 3) * 8",
      "3 * ((8 / 6) * 6)",
      "((8 - 3) * 6) - 6",
      "((8 * 3) + 6) - 6",
      "3 * ((8 - 6) + 6)",
      "(6 / 6) * (8 * 3)",
      "6 / ((6 / 3) / 8)",
      "6 + ((8 * 3) - 6)",
      "(3 * 8) - (6 - 6)",
      "(3 / (6 / 6)) * 8",
      "((3 - 6) + 6) * 8",
      "((8 - 6) + 6) * 3",
      "6 / (6 / (8 * 3))",
      "((6 - 6) + 3) * 8",
      "(6 * 8) / (6 / 3)",
      "(8 * 6) * (3 / 6)",
      "((8 * 6) / 6) * 3",
      "((8 * 6) * 3) / 6",
      "(3 * 8) * (6 / 6)",
      "6 - (6 - (3 * 8))",
      "3 * ((6 * 8) / 6)",
      "((6 - 6) + 8) * 3",
      "(6 + (8 - 6)) * 3",
      "8 * (3 + (6 - 6))",
      "8 * ((3 + 6) - 6)",
      "(6 - (6 - 8)) * 3",
      "(8 / (6 / 3)) * 6",
      "(8 / 6) * (6 * 3)",
      "(6 + (3 * 8)) - 6",
      "(6 * 3) / (6 / 8)",
      "3 / ((6 / 8) / 6)",
      "(6 + (3 - 6)) * 8",
      "8 / (6 / (6 * 3))",
      "((3 * 8) - 6) + 6",
      "3 * (8 / (6 / 6))",
      "((3 * 8) + 6) - 6",
      "3 / (6 / (8 * 6))",
      "3 / (6 / (6 * 8))",
      "((8 / 6) * 6) * 3",
      "(6 * (8 * 3)) / 6",
      "6 + ((3 * 8) - 6)",
      "((8 * 3) / 6) * 6",
      "((8 * 3) - 6) + 6",
      "(3 * (8 * 6)) / 6",
      "(3 * (6 * 8)) / 6",
      "((3 / 6) * 8) * 6",
      "(6 - 6) + (8 * 3)",
      "((6 * 8) * 3) / 6",
      "(6 - (6 - 3)) * 8",
      "(6 / (6 / 8)) * 3",
      "(6 * (3 * 8)) / 6",
      "3 * ((8 + 6) - 6)",
      "(6 * 8) * (3 / 6)",
      "8 * ((3 * 6) / 6)",
      "3 * ((6 / 6) * 8)",
      "8 / ((6 / 3) / 6)",
      "((3 / 6) * 6) * 8",
      "((6 * 8) / 6) * 3",
      "((8 + 6) - 6) * 3",
      "6 * (8 / (6 / 3))"
    ]
  },
  "3 6 6 9": {
    "cards": "3 6 6 9",
    "has_solution": "Y",
    "num_solutions": 82,
    "solutions": [
      "(9 + (6 + 6)) + 3",
      "3 * (9 - (6 / 6))",
      "6 + (6 / (3 / 9))",
      "(6 + 6) + (9 + 3)",
      "9 + ((3 + 6) + 6)",
      "(6 + 9) + (6 + 3)",
      "3 + (6 + (9 + 6))",
      "6 + (6 * (9 / 3))",
      "(6 + 3) + (9 + 6)",
      "3 + ((6 + 6) + 9)",
      "6 + (6 + (3 + 9))",
      "(3 + (6 + 6)) + 9",
      "9 + (6 + (6 + 3))",
      "6 + ((9 + 3) + 6)",
      "((6 + 3) + 6) + 9",
      "3 + (6 + (6 + 9))",
      "6 + ((6 * 9) / 3)",
      "((3 + 6) + 6) + 9",
      "((6 + 3) + 9) + 6",
      "3 + ((9 + 6) + 6)",
      "6 + (3 + (6 + 9))",
      "6 + (3 + (9 + 6))",
      "((6 * 6) - 3) - 9",
      "(3 + (9 + 6)) + 6",
      "3 + (9 + (6 + 6))",
      "((9 * 6) / 3) + 6",
      "6 + ((6 / 3) * 9)",
      "(9 + (6 + 3)) + 6",
      "((9 + 3) + 6) + 6",
      "6 + ((9 / 3) * 6)",
      "3 + ((6 + 9) + 6)",
      "(6 + 6) + (3 + 9)",
      "(6 + (9 + 6)) + 3",
      "((9 + 6) + 3) + 6",
      "9 + (6 + (3 + 6))",
      "(6 * 6) - (9 + 3)",
      "6 + (9 / (3 / 6))",
      "((6 + 6) + 3) + 9",
      "6 + ((6 + 9) + 3)",
      "9 + ((6 + 6) + 3)",
      "(6 + (6 + 3)) + 9",
      "(9 / (3 / 6)) + 6",
      "((6 * 9) / 3) + 6",
      "9 + ((6 + 3) + 6)",
      "((3 + 9) + 6) + 6",
      "(9 + (3 + 6)) + 6",
      "(3 + (6 + 9)) + 6",
      "((6 + 6) + 9) + 3",
      "(6 / (3 / 9)) + 6",
      "6 + ((3 + 9) + 6)",
      "(9 - (6 / 6)) * 3",
      "((6 + 9) + 6) + 3",
      "(6 + (3 + 9)) + 6",
      "(6 + (6 + 9)) + 3",
      "(6 + (9 + 3)) + 6",
      "(9 + 3) + (6 + 6)",
      "(9 * (6 / 3)) + 6",
      "(6 + 3) + (6 + 9)",
      "6 + (9 + (6 + 3))",
      "(3 + 9) + (6 + 6)",
      "((9 / 3) * 6) + 6",
      "((6 / 3) * 9) + 6",
      "(6 + (3 + 6)) + 9",
      "6 + ((6 + 3) + 9)",
      "((6 + 9) + 3) + 6",
      "((3 + 6) + 9) + 6",
      "(9 + 6) + (3 + 6)",
      "((9 + 6) + 6) + 3",
      "(9 + 6) + (6 + 3)",
      "(6 * 6) - (3 + 9)",
      "6 + ((9 + 6) + 3)",
      "6 + (9 + (3 + 6))",
      "((6 * 6) - 9) - 3",
      "6 + ((3 + 6) + 9)",
      "6 + ((9 * 6) / 3)",
      "6 + (9 * (6 / 3))",
      "(3 + 6) + (9 + 6)",
      "(6 + 9) + (3 + 6)",
      "(6 * (9 / 3)) + 6",
      "(3 + 6) + (6 + 9)",
      "6 + (6 + (9 + 3))",
      "9 + (3 + (6 + 6))"
    ]
  },
  "3 6 6 10": {
    "cards": "3 6 6 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(10 * (6 - 3)) - 6",
      "((6 - 3) * 10) - 6"
    ]
  },
  "3 6 6 11": {
    "cards": "3 6 6 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(6 + (6 * 11)) / 3",
      "(6 + (11 * 6)) / 3",
      "((11 * 6) + 6) / 3",
      "((6 * 11) + 6) / 3"
    ]
  },
  "3 6 6 12": {
    "cards": "3 6 6 12",
    "has_solution": "Y",
    "num_solutions": 50,
    "solutions": [
      "6 / ((6 - 3) / 12)",
      "(6 * 12) / (6 - 3)",
      "12 * (3 - (6 / 6))",
      "12 + ((6 * 3) - 6)",
      "(6 * (6 / 3)) + 12",
      "(12 + (3 * 6)) - 6",
      "3 * (6 + (12 / 6))",
      "(3 * 6) - (6 - 12)",
      "(12 * 6) / (6 - 3)",
      "(12 * 3) - (6 + 6)",
      "(12 / (6 - 3)) * 6",
      "((12 - 6) * 3) + 6",
      "((6 * 3) + 12) - 6",
      "(3 * 6) + (12 - 6)",
      "(6 * 3) - (6 - 12)",
      "6 - ((6 - 12) * 3)",
      "(3 * (12 - 6)) + 6",
      "((12 / 6) + 6) * 3",
      "((6 * 3) - 6) + 12",
      "(12 + (6 * 3)) - 6",
      "12 * (6 / (6 - 3))",
      "((3 * 12) - 6) - 6",
      "12 / ((6 - 3) / 6)",
      "((6 + 6) * 3) - 12",
      "12 + ((3 * 6) - 6)",
      "12 + ((6 / 3) * 6)",
      "(6 * 3) + (12 - 6)",
      "((3 * 6) + 12) - 6",
      "(3 - (6 / 6)) * 12",
      "((6 * 6) / 3) + 12",
      "((12 * 3) - 6) - 6",
      "(6 + (12 / 6)) * 3",
      "6 + ((12 - 6) * 3)",
      "12 + (6 * (6 / 3))",
      "(12 - 6) + (3 * 6)",
      "12 + ((6 * 6) / 3)",
      "6 + (3 * (12 - 6))",
      "(12 - 6) + (6 * 3)",
      "12 + (6 / (3 / 6))",
      "(6 / (3 / 6)) + 12",
      "12 - (6 - (6 * 3))",
      "(3 * (6 + 6)) - 12",
      "3 * ((12 / 6) + 6)",
      "((3 * 6) - 6) + 12",
      "12 - (6 - (3 * 6))",
      "6 - (3 * (6 - 12))",
      "((6 / 3) * 6) + 12",
      "(3 * 12) - (6 + 6)",
      "6 * (12 / (6 - 3))",
      "(6 / (6 - 3)) * 12"
    ]
  },
  "3 6 6 13": {
    "cards": "3 6 6 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "6 * (13 - (6 + 3))",
      "(13 - (3 + 6)) * 6",
      "(13 - (6 + 3)) * 6",
      "((13 - 3) - 6) * 6",
      "((6 * 13) - 6) / 3",
      "6 * ((13 - 6) - 3)",
      "((13 - 6) - 3) * 6",
      "6 * (13 - (3 + 6))",
      "6 * ((13 - 3) - 6)",
      "((13 * 6) - 6) / 3"
    ]
  },
  "3 6 7 7": {
    "cards": "3 6 7 7",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((7 / 7) + 3) * 6",
      "3 * (7 + (7 - 6))",
      "6 * ((7 / 7) + 3)",
      "((7 + 7) - 6) * 3",
      "3 * ((7 - 6) + 7)",
      "(7 - (6 - 7)) * 3",
      "((7 - 6) + 7) * 3",
      "3 * (7 - (6 - 7))",
      "3 * ((7 + 7) - 6)",
      "6 * (3 + (7 / 7))",
      "(7 + (7 - 6)) * 3",
      "(3 + (7 / 7)) * 6"
    ]
  },
  "3 6 7 8": {
    "cards": "3 6 7 8",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "(6 + 7) + (3 + 8)",
      "((8 + 3) + 6) + 7",
      "8 + ((6 + 7) + 3)",
      "6 * ((3 - 7) + 8)",
      "(3 * 8) / (7 - 6)",
      "3 + ((8 + 6) + 7)",
      "(8 + 6) + (3 + 7)",
      "(8 + (7 + 6)) + 3",
      "(3 + 7) + (8 + 6)",
      "7 + (8 + (3 + 6))",
      "(6 + 7) + (8 + 3)",
      "((3 + 6) + 8) + 7",
      "6 + ((8 + 3) + 7)",
      "8 + (7 + (3 + 6))",
      "(8 + (6 + 7)) + 3",
      "7 + (3 + (8 + 6))",
      "6 * (3 - (7 - 8))",
      "((3 - 7) + 8) * 6",
      "6 + (8 + (7 + 3))",
      "6 + ((3 + 8) + 7)",
      "(6 + (7 + 3)) + 8",
      "3 * (8 / (7 - 6))",
      "(3 + 8) + (6 + 7)",
      "3 + ((8 + 7) + 6)",
      "(6 + (3 + 7)) + 8",
      "3 + ((7 + 6) + 8)",
      "(7 + 8) + (3 + 6)",
      "(6 + (7 + 8)) + 3",
      "(7 + 8) + (6 + 3)",
      "(8 * 3) * (7 - 6)",
      "3 / ((7 - 6) / 8)",
      "(3 + (8 + 6)) + 7",
      "(8 * 3) / (7 - 6)",
      "(7 + 6) + (3 + 8)",
      "(8 + 3) + (6 + 7)",
      "7 + ((8 + 6) + 3)",
      "(3 * 8) * (7 - 6)",
      "((8 + 6) + 7) + 3",
      "6 + ((3 + 7) + 8)",
      "(6 + 3) + (7 + 8)",
      "6 + (8 + (3 + 7))",
      "(7 - 6) * (3 * 8)",
      "((7 - 6) * 3) * 8",
      "((7 + 6) + 8) + 3",
      "(8 + (7 + 3)) + 6",
      "8 + (3 + (7 + 6))",
      "6 * ((8 + 3) - 7)",
      "(8 + (3 - 7)) * 6",
      "((6 + 8) + 7) + 3",
      "(8 * (7 - 6)) * 3",
      "7 + (6 + (8 + 3))",
      "7 + (8 + (6 + 3))",
      "3 + (6 + (7 + 8))",
      "6 * (8 + (3 - 7))",
      "3 * ((7 - 6) * 8)",
      "8 + (7 + (6 + 3))",
      "8 + ((6 + 3) + 7)",
      "(7 + (6 + 8)) + 3",
      "(3 + 8) + (7 + 6)",
      "(6 + 8) + (7 + 3)",
      "(7 + 3) + (8 + 6)",
      "(3 + (7 + 6)) + 8",
      "6 + ((8 + 7) + 3)",
      "8 + (6 + (7 + 3))",
      "(7 + (6 + 3)) + 8",
      "6 + (7 + (3 + 8))",
      "(3 + (6 + 8)) + 7",
      "3 + (7 + (8 + 6))",
      "(8 + 7) + (6 + 3)",
      "((8 + 3) - 7) * 6",
      "(3 * (7 - 6)) * 8",
      "((6 + 3) + 7) + 8",
      "(8 + (3 + 6)) + 7",
      "8 + ((7 + 6) + 3)",
      "8 + ((7 + 3) + 6)",
      "((7 + 8) + 3) + 6",
      "((3 + 6) + 7) + 8",
      "6 * ((8 - 7) + 3)",
      "(3 + (8 - 7)) * 6",
      "(6 + (8 + 7)) + 3",
      "(6 + (3 + 8)) + 7",
      "((3 + 8) + 6) + 7",
      "(8 + 3) + (7 + 6)",
      "(8 + (6 + 3)) + 7",
      "((7 + 3) + 6) + 8",
      "((8 + 3) + 7) + 6",
      "(8 / (7 - 6)) * 3",
      "(3 - (7 - 8)) * 6",
      "8 * (3 * (7 - 6))",
      "(3 + 6) + (7 + 8)",
      "(7 + 6) + (8 + 3)",
      "6 + ((7 + 8) + 3)",
      "3 + (8 + (6 + 7))",
      "(3 + (8 + 7)) + 6",
      "((3 + 7) + 6) + 8",
      "((7 + 3) + 8) + 6",
      "((3 + 8) - 7) * 6",
      "8 * ((7 - 6) * 3)",
      "(3 + 6) + (8 + 7)",
      "(7 + (8 + 6)) + 3",
      "8 / ((7 - 6) / 3)",
      "(3 + 7) + (6 + 8)",
      "((8 - 7) + 3) * 6",
      "7 + (6 + (3 + 8))",
      "3 + (7 + (6 + 8))",
      "((3 + 8) + 7) + 6",
      "6 * (3 + (8 - 7))",
      "6 + (7 + (8 + 3))",
      "((7 + 6) + 3) + 8",
      "6 * ((3 + 8) - 7)",
      "(6 + (8 + 3)) + 7",
      "(7 + (8 + 3)) + 6",
      "6 * (8 - (7 - 3))",
      "7 + ((6 + 3) + 8)",
      "3 * (8 * (7 - 6))",
      "(8 - (7 - 3)) * 6",
      "((8 + 7) + 6) + 3",
      "7 + ((3 + 6) + 8)",
      "(7 - 6) * (8 * 3)",
      "(8 + (3 + 7)) + 6",
      "3 + ((6 + 8) + 7)",
      "((6 + 7) + 3) + 8",
      "(7 + 3) + (6 + 8)",
      "6 + ((7 + 3) + 8)",
      "(3 / (7 - 6)) * 8",
      "((7 - 6) * 8) * 3",
      "((6 + 3) + 8) + 7",
      "7 + ((8 + 3) + 6)",
      "(3 + (6 + 7)) + 8",
      "3 + ((7 + 8) + 6)",
      "8 + ((3 + 6) + 7)",
      "(8 + 6) + (7 + 3)",
      "(6 + 8) + (3 + 7)",
      "(6 + 3) + (8 + 7)",
      "8 * (3 / (7 - 6))",
      "8 + (3 + (6 + 7))",
      "7 + ((6 + 8) + 3)",
      "(7 + (3 + 8)) + 6",
      "6 + (3 + (8 + 7))",
      "(7 + (3 + 6)) + 8",
      "3 + (6 + (8 + 7))",
      "7 + ((3 + 8) + 6)",
      "((6 + 8) + 3) + 7",
      "7 + (3 + (6 + 8))",
      "8 + (6 + (3 + 7))",
      "((8 + 6) + 3) + 7",
      "(8 + 7) + (3 + 6)",
      "(3 + (7 + 8)) + 6",
      "((8 + 7) + 3) + 6",
      "((3 + 7) + 8) + 6",
      "8 + ((3 + 7) + 6)",
      "3 + (8 + (7 + 6))",
      "((7 + 8) + 6) + 3",
      "3 + ((6 + 7) + 8)",
      "((6 + 7) + 8) + 3",
      "6 + (3 + (7 + 8))"
    ]
  },
  "3 6 7 9": {
    "cards": "3 6 7 9",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "((7 * 3) + 9) - 6",
      "(7 * (9 - 6)) + 3",
      "(6 - (7 - 9)) * 3",
      "(9 + (7 * 3)) - 6",
      "3 * (9 - (7 - 6))",
      "(7 * 3) - (6 - 9)",
      "((3 * 7) + 9) - 6",
      "(3 * 7) - (6 - 9)",
      "3 + (7 * (9 - 6))",
      "3 - ((6 - 9) * 7)",
      "3 * (6 + (9 - 7))",
      "9 - (6 - (7 * 3))",
      "(9 - (7 - 6)) * 3",
      "9 + ((7 * 3) - 6)",
      "(6 + (9 - 7)) * 3",
      "3 * ((6 - 7) + 9)",
      "(9 - 6) + (3 * 7)",
      "(9 + (3 * 7)) - 6",
      "(7 * 3) + (9 - 6)",
      "((6 + 9) - 7) * 3",
      "9 + ((3 * 7) - 6)",
      "3 * (6 - (7 - 9))",
      "3 * ((6 + 9) - 7)",
      "((9 - 7) + 6) * 3",
      "(9 - 6) + (7 * 3)",
      "3 * (9 + (6 - 7))",
      "((3 * 7) - 6) + 9",
      "((7 * 3) - 6) + 9",
      "3 + ((9 - 6) * 7)",
      "3 * ((9 + 6) - 7)",
      "(9 + (6 - 7)) * 3",
      "((9 + 6) - 7) * 3",
      "9 - (6 - (3 * 7))",
      "(7 - (9 / 3)) * 6",
      "3 * ((9 - 7) + 6)",
      "(3 * 7) + (9 - 6)",
      "3 - (7 * (6 - 9))",
      "6 * (7 - (9 / 3))",
      "((6 - 7) + 9) * 3",
      "((9 - 6) * 7) + 3"
    ]
  },
  "3 6 7 10": {
    "cards": "3 6 7 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((6 * 7) / 3) + 10",
      "10 + (7 * (6 / 3))",
      "(6 * (7 / 3)) + 10",
      "((6 / 3) * 7) + 10",
      "10 + (7 / (3 / 6))",
      "10 + ((7 / 3) * 6)",
      "10 + (6 / (3 / 7))",
      "10 + ((6 * 7) / 3)",
      "((7 / 3) * 6) + 10",
      "10 + ((6 / 3) * 7)",
      "((7 * 6) / 3) + 10",
      "(6 / (3 / 7)) + 10",
      "10 + (6 * (7 / 3))",
      "10 + ((7 * 6) / 3)",
      "(7 * (6 / 3)) + 10",
      "(7 / (3 / 6)) + 10"
    ]
  },
  "3 6 7 11": {
    "cards": "3 6 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 6 7 12": {
    "cards": "3 6 7 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(6 - (7 - 3)) * 12",
      "(6 + (3 - 7)) * 12",
      "12 * ((3 + 6) - 7)",
      "(3 - (7 - 6)) * 12",
      "12 * (3 + (6 - 7))",
      "(7 - 3) * (12 - 6)",
      "12 * ((6 - 7) + 3)",
      "(3 - 7) * (6 - 12)",
      "((3 + 6) - 7) * 12",
      "12 * (6 - (7 - 3))",
      "((3 - 7) + 6) * 12",
      "((6 + 3) - 7) * 12",
      "(6 - 12) * (3 - 7)",
      "(12 - 6) * (7 - 3)",
      "12 * ((3 - 7) + 6)",
      "12 * ((6 + 3) - 7)",
      "(3 + (6 - 7)) * 12",
      "12 * (3 - (7 - 6))",
      "12 * (6 + (3 - 7))",
      "((6 - 7) + 3) * 12"
    ]
  },
  "3 6 7 13": {
    "cards": "3 6 7 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((3 * 6) - 7) + 13",
      "(13 - 7) + (6 * 3)",
      "13 + ((3 * 6) - 7)",
      "6 - ((7 - 13) * 3)",
      "(3 * 6) - (7 - 13)",
      "13 - (7 - (3 * 6))",
      "((3 * 6) + 13) - 7",
      "((13 - 7) * 3) + 6",
      "(6 * 3) - (7 - 13)",
      "((6 * 3) + 13) - 7",
      "6 - (3 * (7 - 13))",
      "6 + ((13 - 7) * 3)",
      "(6 * 3) + (13 - 7)",
      "(13 + (3 * 6)) - 7",
      "(3 * 6) + (13 - 7)",
      "6 + (3 * (13 - 7))",
      "((6 * 3) - 7) + 13",
      "13 - (7 - (6 * 3))",
      "(13 - 7) + (3 * 6)",
      "13 + ((6 * 3) - 7)",
      "(13 + (6 * 3)) - 7",
      "(3 * (13 - 7)) + 6"
    ]
  },
  "3 6 8 8": {
    "cards": "3 6 8 8",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(8 / (3 / 6)) + 8",
      "((8 / 8) + 3) * 6",
      "6 * (3 + (8 / 8))",
      "(6 * 8) - (3 * 8)",
      "(6 / (3 / 8)) + 8",
      "8 + ((8 / 3) * 6)",
      "(8 * 6) - (8 * 3)",
      "8 + ((6 / 3) * 8)",
      "8 + ((6 * 8) / 3)",
      "((8 * 6) / 3) + 8",
      "((6 * 8) / 3) + 8",
      "((8 / 3) * 6) + 8",
      "(3 + (8 / 8)) * 6",
      "8 + ((8 * 6) / 3)",
      "(8 * 6) - (3 * 8)",
      "(6 * 8) - (8 * 3)",
      "(6 * (8 / 3)) + 8",
      "8 + (8 * (6 / 3))",
      "((6 / 3) * 8) + 8",
      "8 + (6 * (8 / 3))",
      "8 + (8 / (3 / 6))",
      "8 + (6 / (3 / 8))",
      "(8 * (6 / 3)) + 8",
      "6 * ((8 / 8) + 3)"
    ]
  },
  "3 6 8 9": {
    "cards": "3 6 8 9",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(8 - 6) * (3 + 9)",
      "(3 + 9) * (8 - 6)",
      "((9 - 8) + 3) * 6",
      "((9 + 3) - 8) * 6",
      "6 * ((9 - 8) + 3)",
      "6 * ((3 - 8) + 9)",
      "6 * (9 + (3 - 8))",
      "(9 - (8 - 3)) * 6",
      "6 * ((9 + 3) - 8)",
      "6 * (9 - (8 - 3))",
      "(8 / (6 - 3)) * 9",
      "8 / ((6 - 3) / 9)",
      "((3 + 9) - 8) * 6",
      "9 * (8 / (6 - 3))",
      "6 * ((3 + 9) - 8)",
      "(9 / (6 - 3)) * 8",
      "(9 + (3 - 8)) * 6",
      "6 * (3 + (9 - 8))",
      "(3 - (8 - 9)) * 6",
      "8 * (6 - (9 / 3))",
      "((3 - 8) + 9) * 6",
      "(8 * 9) / (6 - 3)",
      "(9 * 8) / (6 - 3)",
      "(6 - (9 / 3)) * 8",
      "(8 - 6) * (9 + 3)",
      "(9 + 3) * (8 - 6)",
      "6 * (3 - (8 - 9))",
      "9 / ((6 - 3) / 8)",
      "8 * (9 / (6 - 3))",
      "(3 + (9 - 8)) * 6"
    ]
  },
  "3 6 8 10": {
    "cards": "3 6 8 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "3 * ((10 - 8) + 6)",
      "((10 + 6) - 8) * 3",
      "((10 - 8) + 6) * 3",
      "3 * ((10 + 6) - 8)",
      "(6 + (10 - 8)) * 3",
      "(10 - (8 - 6)) * 3",
      "3 * (6 - (8 - 10))",
      "(6 - (8 - 10)) * 3",
      "3 * (10 + (6 - 8))",
      "3 * (6 + (10 - 8))",
      "(10 + (6 - 8)) * 3",
      "((6 + 10) - 8) * 3",
      "((6 - 8) + 10) * 3",
      "3 * (10 - (8 - 6))",
      "3 * ((6 + 10) - 8)",
      "3 * ((6 - 8) + 10)"
    ]
  },
  "3 6 8 11": {
    "cards": "3 6 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 6 8 12": {
    "cards": "3 6 8 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(12 - (6 + 3)) * 8",
      "((12 - 3) - 6) * 8",
      "8 * (12 - (3 + 6))",
      "6 * (8 - (12 / 3))",
      "8 * ((12 - 6) - 3)",
      "(8 - (12 / 3)) * 6",
      "((12 - 6) - 3) * 8",
      "8 * (12 - (6 + 3))",
      "8 * ((12 - 3) - 6)",
      "(12 - (3 + 6)) * 8"
    ]
  },
  "3 6 8 13": {
    "cards": "3 6 8 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "8 - ((3 - 13) - 6)",
      "(13 + 8) + (6 - 3)",
      "(13 - 3) + (8 + 6)",
      "13 + ((8 + 6) - 3)",
      "((13 + 8) + 6) - 3",
      "6 - (3 - (13 + 8))",
      "13 - ((3 - 8) - 6)",
      "(6 + 8) + (13 - 3)",
      "((6 + 8) + 13) - 3",
      "(13 - (3 - 8)) + 6",
      "8 - (3 - (13 + 6))",
      "((13 + 6) + 8) - 3",
      "8 + (13 + (6 - 3))",
      "(13 - 3) + (6 + 8)",
      "(6 - (3 - 8)) + 13",
      "(8 - (3 - 13)) + 6",
      "13 + (8 - (3 - 6))",
      "(13 + (8 - 3)) + 6",
      "13 - (3 - (6 + 8))",
      "(13 + 8) - (3 - 6)",
      "(8 + (13 - 3)) + 6",
      "8 + (13 - (3 - 6))",
      "((13 + 8) - 3) + 6",
      "(8 + 6) + (13 - 3)",
      "8 - ((3 - 6) - 13)",
      "(6 - 3) + (8 + 13)",
      "8 - (3 - (6 + 13))",
      "(6 + 8) - (3 - 13)",
      "(8 + (6 + 13)) - 3",
      "6 + ((8 - 3) + 13)",
      "(13 - (3 - 6)) + 8",
      "6 - ((3 - 8) - 13)",
      "((8 + 13) + 6) - 3",
      "13 + ((6 + 8) - 3)",
      "(13 + 6) + (8 - 3)",
      "(6 - 3) + (13 + 8)",
      "8 + ((13 - 3) + 6)",
      "6 + (8 - (3 - 13))",
      "8 + (6 + (13 - 3))",
      "((13 - 3) + 6) + 8",
      "6 + ((13 - 3) + 8)",
      "(8 - (3 - 6)) + 13",
      "13 - ((3 - 6) - 8)",
      "(6 + 13) + (8 - 3)",
      "(8 + 6) - (3 - 13)",
      "(8 + (13 + 6)) - 3",
      "13 + ((6 - 3) + 8)",
      "6 - ((3 - 13) - 8)",
      "(8 - 3) + (13 + 6)",
      "((6 - 3) + 13) + 8",
      "((8 + 13) - 3) + 6",
      "(6 + (13 + 8)) - 3",
      "8 + ((13 + 6) - 3)",
      "8 + ((6 - 3) + 13)",
      "(6 + (13 - 3)) + 8",
      "((8 - 3) + 6) + 13",
      "(13 + 6) - (3 - 8)",
      "6 + ((13 + 8) - 3)",
      "6 + ((8 + 13) - 3)",
      "((13 - 3) + 8) + 6",
      "(8 + (6 - 3)) + 13",
      "((6 + 13) - 3) + 8",
      "(6 + (8 + 13)) - 3",
      "(8 + 13) + (6 - 3)",
      "((8 + 6) + 13) - 3",
      "(13 + (6 + 8)) - 3",
      "((8 - 3) + 13) + 6",
      "(6 + (8 - 3)) + 13",
      "6 + (13 - (3 - 8))",
      "((6 - 3) + 8) + 13",
      "6 - (3 - (8 + 13))",
      "13 + (6 - (3 - 8))",
      "6 + (13 + (8 - 3))",
      "((6 + 8) - 3) + 13",
      "(6 + 13) - (3 - 8)",
      "13 + (8 + (6 - 3))",
      "((8 + 6) - 3) + 13",
      "((13 + 6) - 3) + 8",
      "6 + (8 + (13 - 3))",
      "(13 + (8 + 6)) - 3",
      "(6 - (3 - 13)) + 8",
      "(8 + 13) - (3 - 6)",
      "8 + ((6 + 13) - 3)",
      "(13 + (6 - 3)) + 8",
      "13 - (3 - (8 + 6))",
      "(8 - 3) + (6 + 13)",
      "13 + (6 + (8 - 3))",
      "13 + ((8 - 3) + 6)",
      "8 + (6 - (3 - 13))",
      "((6 + 13) + 8) - 3"
    ]
  },
  "3 6 9 9": {
    "cards": "3 6 9 9",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((9 * 3) - 9) + 6",
      "((3 * 9) + 6) - 9",
      "(9 * 3) - (9 - 6)",
      "(3 + (9 / 9)) * 6",
      "6 - (9 - (3 * 9))",
      "((3 * 9) - 9) + 6",
      "6 * (3 + (9 / 9))",
      "(9 * 3) + (6 - 9)",
      "6 + ((3 * 9) - 9)",
      "(6 + (3 * 9)) - 9",
      "6 * ((9 / 9) + 3)",
      "((9 / 9) + 3) * 6",
      "6 + ((9 * 3) - 9)",
      "(6 - 9) + (3 * 9)",
      "(9 * (9 - 6)) - 3",
      "((9 - 6) * 9) - 3",
      "(6 - 9) + (9 * 3)",
      "(3 * 9) + (6 - 9)",
      "(6 + (9 * 3)) - 9",
      "6 - (9 - (9 * 3))",
      "((9 * 3) + 6) - 9",
      "(3 * 9) - (9 - 6)"
    ]
  },
  "3 6 9 10": {
    "cards": "3 6 9 10",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(6 - 10) * (3 - 9)",
      "9 * (6 - (10 / 3))",
      "(3 - (9 - 10)) * 6",
      "6 * ((3 + 10) - 9)",
      "((3 + 10) - 9) * 6",
      "(10 - (9 - 3)) * 6",
      "(10 + (3 - 9)) * 6",
      "((9 * 10) / 3) - 6",
      "((9 / 3) * 10) - 6",
      "(6 - (10 / 3)) * 9",
      "6 * (3 + (10 - 9))",
      "(10 / (3 / 9)) - 6",
      "(10 - 6) * (9 - 3)",
      "((3 - 9) + 10) * 6",
      "6 * (10 - (9 - 3))",
      "(9 - 3) * (10 - 6)",
      "(10 * (9 / 3)) - 6",
      "(9 * 6) - (10 * 3)",
      "((10 / 3) * 9) - 6",
      "(9 * (10 / 3)) - 6",
      "(6 * 9) - (3 * 10)",
      "((10 * 9) / 3) - 6",
      "6 * ((10 - 9) + 3)",
      "(6 * 9) - (10 * 3)",
      "(9 * 6) - (3 * 10)",
      "6 * (3 - (9 - 10))",
      "(9 / (3 / 10)) - 6",
      "6 * ((10 + 3) - 9)",
      "((10 + 3) - 9) * 6",
      "((10 - 9) + 3) * 6",
      "(3 + (10 - 9)) * 6",
      "(3 - 9) * (6 - 10)",
      "6 * ((3 - 9) + 10)",
      "6 * (10 + (3 - 9))"
    ]
  },
  "3 6 9 11": {
    "cards": "3 6 9 11",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "3 * ((11 + 6) - 9)",
      "3 * (11 - (9 - 6))",
      "(3 - 11) * (6 - 9)",
      "3 * (6 - (9 - 11))",
      "(11 - (9 - 6)) * 3",
      "(11 + (6 - 9)) * 3",
      "3 * (6 + (11 - 9))",
      "9 - ((6 - 11) * 3)",
      "9 + ((11 - 6) * 3)",
      "3 * ((6 + 11) - 9)",
      "3 * (11 + (6 - 9))",
      "3 * ((11 - 9) + 6)",
      "((11 - 9) + 6) * 3",
      "3 * ((6 - 9) + 11)",
      "((6 - 3) * 11) - 9",
      "(3 * (11 - 6)) + 9",
      "(6 + (11 - 9)) * 3",
      "(6 - 9) * (3 - 11)",
      "(9 - 6) * (11 - 3)",
      "9 - (3 * (6 - 11))",
      "(11 - 3) * (9 - 6)",
      "(11 * (6 - 3)) - 9",
      "((6 + 11) - 9) * 3",
      "9 + (3 * (11 - 6))",
      "((6 - 9) + 11) * 3",
      "((11 + 6) - 9) * 3",
      "((11 - 6) * 3) + 9",
      "(6 - (9 - 11)) * 3"
    ]
  },
  "3 6 9 12": {
    "cards": "3 6 9 12",
    "has_solution": "Y",
    "num_solutions": 198,
    "solutions": [
      "(9 + 3) / (6 / 12)",
      "((6 * 3) * 12) / 9",
      "(12 / 9) * (6 * 3)",
      "(6 * (12 * 3)) / 9",
      "(6 / 9) * (3 * 12)",
      "(6 + 9) + (12 - 3)",
      "(3 / 9) * (12 * 6)",
      "(12 + 6) + (9 - 3)",
      "12 * ((3 / 9) * 6)",
      "(3 / (9 / 6)) * 12",
      "12 / (6 / (3 + 9))",
      "((12 + 9) - 3) + 6",
      "12 + (9 + (6 - 3))",
      "3 / ((9 / 6) / 12)",
      "12 + (6 + (9 - 3))",
      "((3 / 9) * 6) * 12",
      "(3 * (6 * 12)) / 9",
      "3 * ((6 / 9) * 12)",
      "(6 - (3 - 12)) + 9",
      "(12 * (3 * 6)) / 9",
      "(12 * (9 + 3)) / 6",
      "(6 * 3) / (9 / 12)",
      "9 + (12 + (6 - 3))",
      "(12 * (6 / 9)) * 3",
      "3 * ((12 * 6) / 9)",
      "3 * (12 * (6 / 9))",
      "(12 - (3 - 9)) + 6",
      "6 - (3 - (9 + 12))",
      "(3 * 12) * (6 / 9)",
      "(6 + 12) + (9 - 3)",
      "12 + (6 - (3 - 9))",
      "6 + (12 + (9 - 3))",
      "3 / (9 / (12 * 6))",
      "((3 * 12) * 6) / 9",
      "9 + (12 - (3 - 6))",
      "(6 + (12 + 9)) - 3",
      "6 * ((3 / 9) * 12)",
      "(6 + (9 - 3)) + 12",
      "(6 + 9) - (3 - 12)",
      "((3 * 6) * 12) / 9",
      "6 + (9 - (3 - 12))",
      "(12 * (3 + 9)) / 6",
      "12 / (9 / (3 * 6))",
      "9 - ((3 - 12) - 6)",
      "((3 / 9) * 12) * 6",
      "(3 + 9) / (6 / 12)",
      "((6 * 3) / 9) * 12",
      "(6 * (3 / 9)) * 12",
      "9 + (6 - (3 - 12))",
      "(6 * (9 - 3)) - 12",
      "6 / (9 / (3 * 12))",
      "((6 / 9) * 3) * 12",
      "(12 * 3) / (9 / 6)",
      "12 * ((3 + 9) / 6)",
      "((9 - 3) + 6) + 12",
      "6 - ((3 - 9) - 12)",
      "3 / (9 / (6 * 12))",
      "12 / ((9 / 6) / 3)",
      "(9 - 3) + (12 + 6)",
      "9 - ((3 - 6) - 12)",
      "(12 - 3) + (6 + 9)",
      "12 * (3 * (6 / 9))",
      "(6 * 3) * (12 / 9)",
      "12 * ((3 * 6) / 9)",
      "12 / ((9 / 3) / 6)",
      "(9 - (3 - 12)) + 6",
      "((12 * 6) / 9) * 3",
      "((12 + 6) - 3) + 9",
      "((9 + 12) - 3) + 6",
      "(12 + 6) - (3 - 9)",
      "(9 - (3 - 6)) + 12",
      "6 * (3 / (9 / 12))",
      "(3 * 6) * (12 / 9)",
      "(12 + 9) + (6 - 3)",
      "(12 * 6) * (3 / 9)",
      "(6 * (12 / 9)) * 3",
      "12 * (3 / (9 / 6))",
      "3 / ((9 / 12) / 6)",
      "(6 - (3 - 9)) + 12",
      "((3 + 9) * 12) / 6",
      "12 / (6 / (9 + 3))",
      "9 + ((12 - 3) + 6)",
      "(3 * 6) / (9 / 12)",
      "12 - ((3 - 9) - 6)",
      "(9 + 12) + (6 - 3)",
      "(6 / (9 / 12)) * 3",
      "((6 + 9) + 12) - 3",
      "6 / (9 / (12 * 3))",
      "(3 * 12) / (9 / 6)",
      "((12 - 3) + 6) + 9",
      "6 * ((12 * 3) / 9)",
      "9 - (3 - (12 + 6))",
      "3 * (6 / (9 / 12))",
      "(12 / 9) * (3 * 6)",
      "(9 + (6 - 3)) + 12",
      "(12 / 6) * (9 + 3)",
      "(12 + (6 + 9)) - 3",
      "6 + (12 - (3 - 9))",
      "((12 * 3) * 6) / 9",
      "((9 + 3) * 12) / 6",
      "((6 - 3) + 9) + 12",
      "12 + ((9 + 6) - 3)",
      "(12 + (6 - 3)) + 9",
      "12 * (6 * (3 / 9))",
      "(6 - 3) + (12 + 9)",
      "(6 + 12) - (3 - 9)",
      "((12 * 3) / 9) * 6",
      "12 / (9 / (6 * 3))",
      "((3 * 12) / 9) * 6",
      "12 * (6 / (9 / 3))",
      "12 - (3 - (9 + 6))",
      "(12 / (9 / 6)) * 3",
      "((6 / 9) * 12) * 3",
      "12 + ((6 - 3) + 9)",
      "((12 / 9) * 6) * 3",
      "((12 * 6) * 3) / 9",
      "(9 + (12 - 3)) + 6",
      "6 + ((12 + 9) - 3)",
      "(6 + (12 - 3)) + 9",
      "((12 + 6) + 9) - 3",
      "(9 + 6) - (3 - 12)",
      "(3 * (12 / 9)) * 6",
      "((9 + 6) + 12) - 3",
      "((12 / 9) * 3) * 6",
      "((3 + 9) / 6) * 12",
      "((6 - 3) + 12) + 9",
      "9 + ((12 + 6) - 3)",
      "(12 + 9) - (3 - 6)",
      "6 + ((12 - 3) + 9)",
      "12 * ((6 / 9) * 3)",
      "(12 * (3 / 9)) * 6",
      "6 + (9 + (12 - 3))",
      "(6 - 3) + (9 + 12)",
      "(3 + 9) * (12 / 6)",
      "((6 + 9) - 3) + 12",
      "(6 / (9 / 3)) * 12",
      "3 * ((12 / 9) * 6)",
      "6 * ((12 / 9) * 3)",
      "(9 + 12) - (3 - 6)",
      "((9 + 12) + 6) - 3",
      "(12 * 6) / (9 / 3)",
      "6 - (3 - (12 + 9))",
      "((9 - 3) * 6) - 12",
      "(12 / 6) * (3 + 9)",
      "(3 / (9 / 12)) * 6",
      "((6 * 12) * 3) / 9",
      "6 / ((9 / 3) / 12)",
      "(6 * (3 * 12)) / 9",
      "12 * ((9 + 3) / 6)",
      "9 + (6 + (12 - 3))",
      "((9 + 6) - 3) + 12",
      "(9 + 3) * (12 / 6)",
      "12 + (9 - (3 - 6))",
      "((12 + 9) + 6) - 3",
      "6 / ((9 / 12) / 3)",
      "(3 / 9) * (6 * 12)",
      "9 - (3 - (6 + 12))",
      "((6 + 12) - 3) + 9",
      "6 * (12 * (3 / 9))",
      "(12 + (9 - 3)) + 6",
      "((12 - 3) + 9) + 6",
      "(6 / 9) * (12 * 3)",
      "(3 * (6 / 9)) * 12",
      "3 * ((6 * 12) / 9)",
      "(9 + (6 + 12)) - 3",
      "(9 - 3) + (6 + 12)",
      "(12 - (3 - 6)) + 9",
      "3 * (6 * (12 / 9))",
      "12 - ((3 - 6) - 9)",
      "6 - ((3 - 12) - 9)",
      "(3 * (12 * 6)) / 9",
      "(6 + (9 + 12)) - 3",
      "(6 * 12) * (3 / 9)",
      "(12 - 3) + (9 + 6)",
      "(9 + 6) + (12 - 3)",
      "12 + ((9 - 3) + 6)",
      "(12 + (9 + 6)) - 3",
      "6 * (3 * (12 / 9))",
      "(12 * 3) * (6 / 9)",
      "((3 * 6) / 9) * 12",
      "6 + ((9 + 12) - 3)",
      "((6 + 12) + 9) - 3",
      "(12 * (6 * 3)) / 9",
      "(9 + (12 + 6)) - 3",
      "(12 / (9 / 3)) * 6",
      "9 + ((6 - 3) + 12)",
      "3 * (12 / (9 / 6))",
      "12 - (3 - (6 + 9))",
      "6 * (12 / (9 / 3))",
      "12 + ((6 + 9) - 3)",
      "((6 * 12) / 9) * 3",
      "9 + ((6 + 12) - 3)",
      "((9 - 3) + 12) + 6",
      "12 * ((6 * 3) / 9)",
      "6 + ((9 - 3) + 12)",
      "6 * ((3 * 12) / 9)",
      "((9 + 3) / 6) * 12",
      "(6 * 12) / (9 / 3)"
    ]
  },
  "3 6 9 13": {
    "cards": "3 6 9 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "9 + (13 + (6 / 3))",
      "9 + ((6 / 3) + 13)",
      "((13 * 3) - 6) - 9",
      "(13 + 3) / (6 / 9)",
      "((13 + 3) * 9) / 6",
      "(9 / 6) * (13 + 3)",
      "((13 * 3) - 9) - 6",
      "(3 + 13) / (6 / 9)",
      "(13 + 3) * (9 / 6)",
      "(3 + 13) * (9 / 6)",
      "(13 * 3) - (6 + 9)",
      "(3 * 13) - (6 + 9)",
      "(13 + 9) + (6 / 3)",
      "(9 + 13) + (6 / 3)",
      "(9 * (13 + 3)) / 6",
      "9 / (6 / (3 + 13))",
      "9 * ((13 + 3) / 6)",
      "(13 + (6 / 3)) + 9",
      "((6 / 3) + 9) + 13",
      "(13 * 3) - (9 + 6)",
      "(6 / 3) + (13 + 9)",
      "(6 / 3) + (9 + 13)",
      "((3 + 13) * 9) / 6",
      "(9 / 6) * (3 + 13)",
      "((3 + 13) / 6) * 9",
      "(9 * (3 + 13)) / 6",
      "((3 * 13) - 6) - 9",
      "((6 / 3) + 13) + 9",
      "13 + (9 + (6 / 3))",
      "13 + ((6 / 3) + 9)",
      "(9 + (6 / 3)) + 13",
      "9 / (6 / (13 + 3))",
      "((13 + 3) / 6) * 9",
      "(3 * 13) - (9 + 6)",
      "9 * ((3 + 13) / 6)",
      "((3 * 13) - 9) - 6"
    ]
  },
  "3 6 10 10": {
    "cards": "3 6 10 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "6 * (3 + (10 / 10))",
      "(3 + (10 / 10)) * 6",
      "(3 - (6 / 10)) * 10",
      "((10 / 10) + 3) * 6",
      "10 * (3 - (6 / 10))",
      "6 * ((10 / 10) + 3)"
    ]
  },
  "3 6 10 11": {
    "cards": "3 6 10 11",
    "has_solution": "Y",
    "num_solutions": 106,
    "solutions": [
      "((10 + 6) - 3) + 11",
      "((11 + 10) + 6) - 3",
      "11 - ((3 - 6) - 10)",
      "10 + (11 - (3 - 6))",
      "6 * ((11 - 10) + 3)",
      "(6 + 11) + (10 - 3)",
      "((10 + 6) + 11) - 3",
      "10 - (3 - (11 + 6))",
      "(11 - 3) + (10 + 6)",
      "6 * ((11 + 3) - 10)",
      "(6 + (10 - 3)) + 11",
      "11 + ((10 + 6) - 3)",
      "((11 + 10) - 3) + 6",
      "(6 + (11 + 10)) - 3",
      "6 * (3 + (11 - 10))",
      "11 - ((3 - 10) - 6)",
      "6 + (11 + (10 - 3))",
      "(10 + 11) - (3 - 6)",
      "6 + ((10 + 11) - 3)",
      "(10 + 11) + (6 - 3)",
      "(3 + (11 - 10)) * 6",
      "6 - ((3 - 11) - 10)",
      "((6 + 10) + 11) - 3",
      "(10 + 6) + (11 - 3)",
      "11 + (10 - (3 - 6))",
      "((3 + 11) - 10) * 6",
      "(3 - (10 - 11)) * 6",
      "(6 + (10 + 11)) - 3",
      "11 + (6 + (10 - 3))",
      "10 + (6 - (3 - 11))",
      "(6 - 3) + (10 + 11)",
      "11 + (6 - (3 - 10))",
      "(10 + (11 - 3)) + 6",
      "((6 + 11) + 10) - 3",
      "6 + (10 - (3 - 11))",
      "6 + ((11 + 10) - 3)",
      "((11 + 6) - 3) + 10",
      "((11 + 6) + 10) - 3",
      "10 + ((11 - 3) + 6)",
      "((10 - 3) + 6) + 11",
      "(6 + (11 - 3)) + 10",
      "(11 + (3 - 10)) * 6",
      "(10 - 3) + (11 + 6)",
      "(10 - (3 - 11)) + 6",
      "((11 - 10) + 3) * 6",
      "((11 - 3) + 10) + 6",
      "6 - ((3 - 10) - 11)",
      "6 * (11 + (3 - 10))",
      "((6 + 10) - 3) + 11",
      "((10 + 11) + 6) - 3",
      "(6 + 10) + (11 - 3)",
      "10 + ((6 - 3) + 11)",
      "10 + (11 + (6 - 3))",
      "11 + ((10 - 3) + 6)",
      "((6 - 3) + 11) + 10",
      "6 * (3 - (10 - 11))",
      "6 * ((3 - 10) + 11)",
      "((11 + 3) - 10) * 6",
      "(10 + (6 - 3)) + 11",
      "(10 + (11 + 6)) - 3",
      "((6 + 11) - 3) + 10",
      "((11 - 3) + 6) + 10",
      "(10 - 3) + (6 + 11)",
      "(6 - (3 - 11)) + 10",
      "(11 - (3 - 10)) + 6",
      "(10 + (6 + 11)) - 3",
      "6 - (3 - (11 + 10))",
      "11 + ((6 - 3) + 10)",
      "11 - (3 - (6 + 10))",
      "(11 + 6) - (3 - 10)",
      "6 + ((11 - 3) + 10)",
      "(11 + 10) + (6 - 3)",
      "10 - ((3 - 6) - 11)",
      "(11 + (10 + 6)) - 3",
      "(11 + (10 - 3)) + 6",
      "((3 - 10) + 11) * 6",
      "(11 + 10) - (3 - 6)",
      "(6 - 3) + (11 + 10)",
      "6 + (11 - (3 - 10))",
      "6 + (10 + (11 - 3))",
      "((10 - 3) + 11) + 6",
      "11 - (3 - (10 + 6))",
      "(11 + (6 + 10)) - 3",
      "(11 + (6 - 3)) + 10",
      "10 - ((3 - 11) - 6)",
      "(6 - (3 - 10)) + 11",
      "(11 - (3 - 6)) + 10",
      "(6 + 11) - (3 - 10)",
      "10 + ((11 + 6) - 3)",
      "6 * (11 - (10 - 3))",
      "((6 - 3) + 10) + 11",
      "6 + ((10 - 3) + 11)",
      "11 + ((6 + 10) - 3)",
      "(10 + 6) - (3 - 11)",
      "(11 - 3) + (6 + 10)",
      "6 - (3 - (10 + 11))",
      "11 + (10 + (6 - 3))",
      "10 + ((6 + 11) - 3)",
      "10 + (6 + (11 - 3))",
      "((10 + 11) - 3) + 6",
      "(10 - (3 - 6)) + 11",
      "(6 + 10) - (3 - 11)",
      "(11 + 6) + (10 - 3)",
      "10 - (3 - (6 + 11))",
      "6 * ((3 + 11) - 10)",
      "(11 - (10 - 3)) * 6"
    ]
  },
  "3 6 10 12": {
    "cards": "3 6 10 12",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "(6 / 3) + (12 + 10)",
      "((6 * 10) + 12) / 3",
      "(6 * 10) - (3 * 12)",
      "3 * ((12 + 6) - 10)",
      "6 - (12 - (10 * 3))",
      "(6 - 12) + (3 * 10)",
      "(6 + (3 * 10)) - 12",
      "(12 + (6 / 3)) + 10",
      "12 + (10 + (6 / 3))",
      "12 + ((10 - 6) * 3)",
      "6 + ((10 * 3) - 12)",
      "((6 / 3) + 12) + 10",
      "3 * ((12 - 10) + 6)",
      "6 + ((3 * 10) - 12)",
      "(12 + (10 * 6)) / 3",
      "3 * ((6 - 10) + 12)",
      "3 * (6 + (12 - 10))",
      "12 + (3 * (10 - 6))",
      "((12 + 6) - 10) * 3",
      "3 * ((6 + 12) - 10)",
      "12 + ((6 / 3) + 10)",
      "3 * (6 - (10 - 12))",
      "10 + ((6 / 3) + 12)",
      "(3 * (10 - 6)) + 12",
      "(6 * 10) - (12 * 3)",
      "(6 - (10 - 12)) * 3",
      "(6 + (10 * 3)) - 12",
      "3 * (12 + (6 - 10))",
      "(3 * 10) - (12 - 6)",
      "(10 + (6 / 3)) + 12",
      "(10 - (12 / 6)) * 3",
      "(12 + 10) + (6 / 3)",
      "12 - ((6 - 10) * 3)",
      "((12 - 10) + 6) * 3",
      "6 - (12 - (3 * 10))",
      "(10 * 6) - (3 * 12)",
      "(6 / 3) + (10 + 12)",
      "(10 * 3) + (6 - 12)",
      "12 - (3 * (6 - 10))",
      "3 * (10 - (12 / 6))",
      "((3 * 10) + 6) - 12",
      "(12 - (10 - 6)) * 3",
      "((3 * 10) - 12) + 6",
      "(10 + 12) + (6 / 3)",
      "((6 + 12) - 10) * 3",
      "((6 / 3) + 10) + 12",
      "(10 * 3) - (12 - 6)",
      "(3 * 10) + (6 - 12)",
      "((10 - 6) * 3) + 12",
      "(10 * 6) - (12 * 3)",
      "((6 - 10) + 12) * 3",
      "3 * (12 - (10 - 6))",
      "((10 * 3) - 12) + 6",
      "(12 + (6 - 10)) * 3",
      "(12 + (6 * 10)) / 3",
      "(6 + (12 - 10)) * 3",
      "(6 - 12) + (10 * 3)",
      "((10 * 6) + 12) / 3",
      "10 + (12 + (6 / 3))",
      "((10 * 3) + 6) - 12"
    ]
  },
  "3 6 10 13": {
    "cards": "3 6 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 6 11 11": {
    "cards": "3 6 11 11",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(3 + (11 / 11)) * 6",
      "11 + ((6 / 3) + 11)",
      "11 + (11 + (6 / 3))",
      "(11 + 11) + (6 / 3)",
      "((11 / 11) + 3) * 6",
      "(11 + (6 / 3)) + 11",
      "((6 / 3) + 11) + 11",
      "6 * (3 + (11 / 11))",
      "(6 / 3) + (11 + 11)",
      "6 * ((11 / 11) + 3)"
    ]
  },
  "3 6 11 12": {
    "cards": "3 6 11 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "6 * ((3 - 11) + 12)",
      "6 * ((12 + 3) - 11)",
      "6 * ((3 + 12) - 11)",
      "(11 - (3 + 6)) * 12",
      "12 * ((11 - 3) - 6)",
      "6 * ((12 - 11) + 3)",
      "6 * (3 + (12 - 11))",
      "12 * ((11 - 6) - 3)",
      "((3 - 11) + 12) * 6",
      "(12 - (11 - 3)) * 6",
      "((12 - 11) + 3) * 6",
      "((3 + 12) - 11) * 6",
      "(11 - (6 + 3)) * 12",
      "6 * (3 - (11 - 12))",
      "((11 - 3) - 6) * 12",
      "12 * (11 - (3 + 6))",
      "12 * (11 - (6 + 3))",
      "(12 + (3 - 11)) * 6",
      "((11 - 6) - 3) * 12",
      "(3 + (12 - 11)) * 6",
      "(3 - (11 - 12)) * 6",
      "6 * (12 + (3 - 11))",
      "((12 + 3) - 11) * 6",
      "6 * (12 - (11 - 3))"
    ]
  },
  "3 6 11 13": {
    "cards": "3 6 11 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(13 + (6 - 11)) * 3",
      "((6 - 11) + 13) * 3",
      "((13 + 6) - 11) * 3",
      "(6 - (11 - 13)) * 3",
      "3 * (13 - (11 - 6))",
      "((13 - 11) + 6) * 3",
      "(13 - (11 - 6)) * 3",
      "3 * (6 + (13 - 11))",
      "3 * ((6 + 13) - 11)",
      "((6 + 13) - 11) * 3",
      "(6 + (13 - 11)) * 3",
      "3 * ((6 - 11) + 13)",
      "3 * ((13 - 11) + 6)",
      "3 * ((13 + 6) - 11)",
      "3 * (6 - (11 - 13))",
      "3 * (13 + (6 - 11))"
    ]
  },
  "3 6 12 12": {
    "cards": "3 6 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((12 - 6) * 12) / 3",
      "((6 - 3) * 12) - 12",
      "6 * (3 + (12 / 12))",
      "12 * ((12 - 6) / 3)",
      "12 / (3 / (12 - 6))",
      "(12 / 3) * (12 - 6)",
      "(12 * (12 - 6)) / 3",
      "6 * ((12 / 12) + 3)",
      "(12 - 6) * (12 / 3)",
      "(12 - 6) / (3 / 12)",
      "12 * (6 - (12 / 3))",
      "(3 + (12 / 12)) * 6",
      "(12 * (6 - 3)) - 12",
      "(6 - (12 / 3)) * 12",
      "((12 - 6) / 3) * 12",
      "((12 / 12) + 3) * 6"
    ]
  },
  "3 6 12 13": {
    "cards": "3 6 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((13 - 12) + 3) * 6",
      "((3 - 12) + 13) * 6",
      "6 * ((13 - 12) + 3)",
      "((3 + 13) - 12) * 6",
      "(13 - (12 - 3)) * 6",
      "6 * (13 + (3 - 12))",
      "(3 - (12 - 13)) * 6",
      "6 * ((13 + 3) - 12)",
      "(13 + (3 - 12)) * 6",
      "6 * (3 - (12 - 13))",
      "6 * ((3 + 13) - 12)",
      "(3 + (13 - 12)) * 6",
      "((13 + 3) - 12) * 6",
      "6 * ((3 - 12) + 13)",
      "6 * (3 + (13 - 12))",
      "6 * (13 - (12 - 3))"
    ]
  },
  "3 6 13 13": {
    "cards": "3 6 13 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "6 * (3 + (13 / 13))",
      "6 * ((13 / 13) + 3)",
      "(3 + (13 / 13)) * 6",
      "(13 - (6 / 3)) + 13",
      "13 - ((6 / 3) - 13)",
      "(13 + 13) - (6 / 3)",
      "13 + (13 - (6 / 3))",
      "((13 / 13) + 3) * 6"
    ]
  },
  "3 7 7 7": {
    "cards": "3 7 7 7",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(7 + (7 + 3)) + 7",
      "(7 + 7) + (3 + 7)",
      "(7 + 3) + (7 + 7)",
      "(7 + 7) + (7 + 3)",
      "3 * (7 + (7 / 7))",
      "7 + ((7 + 7) + 3)",
      "(7 + (7 / 7)) * 3",
      "3 + (7 + (7 + 7))",
      "(7 + (3 + 7)) + 7",
      "(3 + (7 + 7)) + 7",
      "((7 + 7) + 3) + 7",
      "7 + ((7 + 3) + 7)",
      "3 + ((7 + 7) + 7)",
      "3 * ((7 / 7) + 7)",
      "((7 / 7) + 7) * 3",
      "7 + (3 + (7 + 7))",
      "7 + ((3 + 7) + 7)",
      "(3 + 7) + (7 + 7)",
      "((7 + 7) + 7) + 3",
      "7 + (7 + (7 + 3))",
      "7 + (7 + (3 + 7))",
      "(7 + (7 + 7)) + 3",
      "((7 + 3) + 7) + 7",
      "((3 + 7) + 7) + 7"
    ]
  },
  "3 7 7 8": {
    "cards": "3 7 7 8",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "7 / ((7 / 8) / 3)",
      "(7 * (3 / 7)) * 8",
      "7 * (3 / (7 / 8))",
      "(7 / 7) * (3 * 8)",
      "8 * ((7 * 3) / 7)",
      "(8 * (3 * 7)) / 7",
      "(3 * (7 / 7)) * 8",
      "((8 * 7) * 3) / 7",
      "(7 + (3 - 7)) * 8",
      "((3 / 7) * 8) * 7",
      "(8 / (7 / 3)) * 7",
      "8 * ((7 - 7) + 3)",
      "(3 * 7) / (7 / 8)",
      "((3 * 8) * 7) / 7",
      "(7 * (8 / 7)) * 3",
      "8 / ((7 / 7) / 3)",
      "7 / (7 / (3 * 8))",
      "8 * ((7 + 3) - 7)",
      "(3 * 8) / (7 / 7)",
      "8 / ((7 / 3) / 7)",
      "8 * (7 - (7 - 3))",
      "(7 - (7 - 8)) * 3",
      "(3 / 7) * (7 * 8)",
      "(8 + (7 - 7)) * 3",
      "3 * ((7 - 7) + 8)",
      "((3 * 7) / 7) * 8",
      "((8 * 3) + 7) - 7",
      "(8 * 3) - (7 - 7)",
      "3 * ((7 + 8) - 7)",
      "((8 * 3) - 7) + 7",
      "(3 / (7 / 8)) * 7",
      "(7 * 8) * (3 / 7)",
      "3 * ((8 / 7) * 7)",
      "((3 * 8) + 7) - 7",
      "(8 * 3) + (7 - 7)",
      "(7 * (8 * 3)) / 7",
      "(3 * 8) + (7 - 7)",
      "(8 * (7 / 7)) * 3",
      "(3 * (7 * 8)) / 7",
      "(8 * 7) / (7 / 3)",
      "3 / (7 / (7 * 8))",
      "7 - (7 - (8 * 3))",
      "((8 - 7) + 7) * 3",
      "(7 / 7) * (8 * 3)",
      "((8 * 3) * 7) / 7",
      "(8 / 7) * (7 * 3)",
      "((7 / 7) * 3) * 8",
      "((3 * 8) - 7) + 7",
      "7 + ((8 * 3) - 7)",
      "(3 * (8 * 7)) / 7",
      "8 * (7 / (7 / 3))",
      "(8 / 7) * (3 * 7)",
      "(3 + (7 - 7)) * 8",
      "7 * (3 * (8 / 7))",
      "8 * ((3 * 7) / 7)",
      "3 * (8 - (7 - 7))",
      "((8 / 7) * 3) * 7",
      "(7 / (7 / 3)) * 8",
      "3 * ((8 * 7) / 7)",
      "(7 + (8 - 7)) * 3",
      "((7 - 7) + 8) * 3",
      "((7 * 3) * 8) / 7",
      "3 * (7 * (8 / 7))",
      "8 * ((7 / 7) * 3)",
      "3 * (7 + (8 - 7))",
      "(8 * 7) * (3 / 7)",
      "3 * (8 + (7 - 7))",
      "8 / (7 / (3 * 7))",
      "8 * (3 / (7 / 7))",
      "3 * ((7 * 8) / 7)",
      "(7 + (8 * 3)) - 7",
      "7 * ((8 / 7) * 3)",
      "3 * ((8 + 7) - 7)",
      "(8 * 3) / (7 / 7)",
      "8 / (7 / (7 * 3))",
      "(3 * 8) * (7 / 7)",
      "((7 + 3) - 7) * 8",
      "7 / ((7 / 3) / 8)",
      "(7 - 7) + (8 * 3)",
      "(3 / (7 / 7)) * 8",
      "7 * ((8 * 3) / 7)",
      "3 * (8 / (7 / 7))",
      "8 * ((3 + 7) - 7)",
      "(8 * (3 / 7)) * 7",
      "(7 * (3 * 8)) / 7",
      "(7 - (7 - 3)) * 8",
      "7 * (8 / (7 / 3))",
      "(3 * (8 / 7)) * 7",
      "(7 * 3) / (7 / 8)",
      "(8 * 3) * (7 / 7)",
      "3 * ((8 - 7) + 7)",
      "8 * (7 + (3 - 7))",
      "3 * (8 * (7 / 7))",
      "7 + ((3 * 8) - 7)",
      "((3 - 7) + 7) * 8",
      "3 / ((7 / 7) / 8)",
      "7 - (7 - (3 * 8))",
      "((8 * 7) / 7) * 3",
      "7 * (8 * (3 / 7))",
      "(3 * 8) - (7 - 7)",
      "(7 * 3) * (8 / 7)",
      "((7 * 8) * 3) / 7",
      "8 * (7 * (3 / 7))",
      "8 * ((3 / 7) * 7)",
      "((8 / 7) * 7) * 3",
      "(7 + (3 * 8)) - 7",
      "7 * ((3 / 7) * 8)",
      "((7 * 3) / 7) * 8",
      "(3 - (7 - 7)) * 8",
      "(7 / (7 / 8)) * 3",
      "3 / ((7 / 8) / 7)",
      "3 * (7 / (7 / 8))",
      "(8 - (7 - 7)) * 3",
      "(3 * 7) * (8 / 7)",
      "(3 / 7) * (8 * 7)",
      "8 * (3 * (7 / 7))",
      "(8 / (7 / 7)) * 3",
      "7 * ((3 * 8) / 7)",
      "((7 / 7) * 8) * 3",
      "((7 + 8) - 7) * 3",
      "((7 - 7) + 3) * 8",
      "8 * ((3 - 7) + 7)",
      "((3 * 7) * 8) / 7",
      "3 / (7 / (8 * 7))",
      "3 * ((7 / 7) * 8)",
      "((3 * 8) / 7) * 7",
      "8 * (3 + (7 - 7))",
      "((8 * 3) / 7) * 7",
      "(7 * 8) / (7 / 3)",
      "3 * (7 - (7 - 8))",
      "8 * (3 - (7 - 7))",
      "7 / (7 / (8 * 3))",
      "((3 + 7) - 7) * 8",
      "(7 - 7) + (3 * 8)",
      "(8 * (7 * 3)) / 7",
      "((7 * 8) / 7) * 3",
      "((3 / 7) * 7) * 8",
      "((8 + 7) - 7) * 3"
    ]
  },
  "3 7 7 9": {
    "cards": "3 7 7 9",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "3 * (9 - (7 / 7))",
      "(9 - (7 / 7)) * 3"
    ]
  },
  "3 7 7 10": {
    "cards": "3 7 7 10",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "10 - (7 - (3 * 7))",
      "10 - (7 - (7 * 3))",
      "(7 * 3) - (7 - 10)",
      "(10 - 7) + (7 * 3)",
      "10 + ((7 * 3) - 7)",
      "3 - ((7 - 10) * 7)",
      "(3 * 7) - (7 - 10)",
      "(10 + (3 * 7)) - 7",
      "3 + (7 * (10 - 7))",
      "(7 * (10 - 7)) + 3",
      "(7 * 3) + (10 - 7)",
      "3 + ((10 - 7) * 7)",
      "(10 + (7 * 3)) - 7",
      "((7 * 3) - 7) + 10",
      "((7 * 3) + 10) - 7",
      "(3 * 7) + (10 - 7)",
      "((3 * 7) - 7) + 10",
      "(10 - 7) + (3 * 7)",
      "3 - (7 * (7 - 10))",
      "10 + ((3 * 7) - 7)",
      "((3 * 7) + 10) - 7",
      "((10 - 7) * 7) + 3"
    ]
  },
  "3 7 7 11": {
    "cards": "3 7 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 7 7 12": {
    "cards": "3 7 7 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "12 * (3 - (7 / 7))",
      "(3 - (7 / 7)) * 12"
    ]
  },
  "3 7 7 13": {
    "cards": "3 7 7 13",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "7 + (7 - (3 - 13))",
      "7 - (3 - (7 + 13))",
      "7 + ((13 + 7) - 3)",
      "(13 - 7) * (7 - 3)",
      "((7 + 7) + 13) - 3",
      "(13 + 7) - (3 - 7)",
      "(7 - 3) * (13 - 7)",
      "7 + ((7 + 13) - 3)",
      "(7 + 13) + (7 - 3)",
      "(13 + 7) + (7 - 3)",
      "7 + (7 + (13 - 3))",
      "(7 + 7) - (3 - 13)",
      "7 + ((13 - 3) + 7)",
      "(7 + 13) - (3 - 7)",
      "(7 + (13 - 3)) + 7",
      "(7 + 7) + (13 - 3)",
      "13 - (3 - (7 + 7))",
      "13 + (7 - (3 - 7))",
      "(7 + (7 - 3)) + 13",
      "13 - ((3 - 7) - 7)",
      "((13 + 7) - 3) + 7",
      "7 - (3 - (13 + 7))",
      "(7 + (13 + 7)) - 3",
      "((7 - 3) + 7) + 13",
      "(7 - (3 - 13)) + 7",
      "7 - ((3 - 7) - 13)",
      "(7 - 3) + (13 + 7)",
      "7 + (13 - (3 - 7))",
      "((7 + 13) + 7) - 3",
      "13 + (7 + (7 - 3))",
      "(3 - 7) * (7 - 13)",
      "7 - ((3 - 13) - 7)",
      "((7 - 3) + 13) + 7",
      "(13 - (3 - 7)) + 7",
      "(7 - 3) + (7 + 13)",
      "((7 + 13) - 3) + 7",
      "((7 + 7) - 3) + 13",
      "7 + ((7 - 3) + 13)",
      "7 + (13 + (7 - 3))",
      "(13 - 3) + (7 + 7)",
      "(7 + (7 + 13)) - 3",
      "(13 + (7 + 7)) - 3",
      "(7 - 13) * (3 - 7)",
      "((13 - 3) + 7) + 7",
      "(7 - (3 - 7)) + 13",
      "(13 + (7 - 3)) + 7",
      "13 + ((7 + 7) - 3)",
      "13 + ((7 - 3) + 7)",
      "((13 + 7) + 7) - 3"
    ]
  },
  "3 7 8 8": {
    "cards": "3 7 8 8",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((7 - 3) * 8) - 8",
      "8 * (3 / (8 - 7))",
      "(8 * (7 - 3)) - 8",
      "((8 / 8) + 7) * 3",
      "(8 - 7) * (8 * 3)",
      "(8 / (8 - 7)) * 3",
      "(8 - 7) * (3 * 8)",
      "((8 - 7) * 3) * 8",
      "((8 - 7) * 8) * 3",
      "3 * (8 / (8 - 7))",
      "(8 * 3) / (8 - 7)",
      "(8 * 3) * (8 - 7)",
      "(3 * (8 - 7)) * 8",
      "8 * ((8 - 7) * 3)",
      "8 * (3 * (8 - 7))",
      "(3 * 8) / (8 - 7)",
      "3 * ((8 - 7) * 8)",
      "(3 * 8) * (8 - 7)",
      "3 / ((8 - 7) / 8)",
      "(3 / (8 - 7)) * 8",
      "3 * ((8 / 8) + 7)",
      "(8 * (8 - 7)) * 3",
      "3 * (7 + (8 / 8))",
      "8 / ((8 - 7) / 3)",
      "3 * (8 * (8 - 7))",
      "(7 + (8 / 8)) * 3"
    ]
  },
  "3 7 8 9": {
    "cards": "3 7 8 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 - (8 - 7)) * 3",
      "((7 + 9) - 8) * 3",
      "3 * (7 + (9 - 8))",
      "3 * (7 - (8 - 9))",
      "3 * ((9 - 8) + 7)",
      "((9 - 8) + 7) * 3",
      "3 * ((9 + 7) - 8)",
      "3 * ((7 - 8) + 9)",
      "3 * (9 + (7 - 8))",
      "((9 + 7) - 8) * 3",
      "(7 + (9 - 8)) * 3",
      "(9 + (7 - 8)) * 3",
      "((7 - 8) + 9) * 3",
      "3 * (9 - (8 - 7))",
      "3 * ((7 + 9) - 8)",
      "(7 - (8 - 9)) * 3"
    ]
  },
  "3 7 8 10": {
    "cards": "3 7 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 7 8 11": {
    "cards": "3 7 8 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((3 * 7) + 11) - 8",
      "11 + ((7 * 3) - 8)",
      "3 + (7 * (11 - 8))",
      "11 - (8 - (7 * 3))",
      "(7 * (8 - 3)) - 11",
      "(7 * 3) - (8 - 11)",
      "(11 + (7 * 3)) - 8",
      "(11 - 8) + (7 * 3)",
      "3 - (7 * (8 - 11))",
      "((7 * 3) + 11) - 8",
      "3 - ((8 - 11) * 7)",
      "(11 - 8) + (3 * 7)",
      "(3 * 7) + (11 - 8)",
      "((8 - 3) * 7) - 11",
      "(7 * (11 - 8)) + 3",
      "3 + ((11 - 8) * 7)",
      "(3 * 7) - (8 - 11)",
      "11 - (8 - (3 * 7))",
      "((11 - 8) * 7) + 3",
      "((3 * 7) - 8) + 11",
      "(7 * 3) + (11 - 8)",
      "(11 + (3 * 7)) - 8",
      "11 + ((3 * 7) - 8)",
      "((7 * 3) - 8) + 11"
    ]
  },
  "3 7 8 12": {
    "cards": "3 7 8 12",
    "has_solution": "Y",
    "num_solutions": 116,
    "solutions": [
      "(12 + (7 - 3)) + 8",
      "(3 + (7 - 8)) * 12",
      "12 + ((7 - 3) + 8)",
      "(12 - (3 - 7)) + 8",
      "((12 + 7) + 8) - 3",
      "12 + ((8 - 3) + 7)",
      "8 * (12 / (7 - 3))",
      "12 - ((3 - 8) - 7)",
      "8 * (7 - (12 / 3))",
      "(7 + (12 + 8)) - 3",
      "12 * (7 - (8 - 3))",
      "12 + (7 - (3 - 8))",
      "12 + (7 + (8 - 3))",
      "(12 + (8 - 3)) + 7",
      "((7 + 12) - 3) + 8",
      "((12 + 8) + 7) - 3",
      "12 / ((7 - 3) / 8)",
      "(7 + 8) - (3 - 12)",
      "12 * (8 / (7 - 3))",
      "(7 + (12 - 3)) + 8",
      "12 * (7 + (3 - 8))",
      "(7 - (3 - 8)) + 12",
      "((8 + 12) - 3) + 7",
      "(7 + (8 + 12)) - 3",
      "12 * ((7 + 3) - 8)",
      "(7 + (3 - 8)) * 12",
      "7 + (12 + (8 - 3))",
      "((7 + 8) - 3) + 12",
      "7 + ((12 + 8) - 3)",
      "((12 + 7) - 3) + 8",
      "(12 - 3) + (7 + 8)",
      "(7 + (8 - 3)) + 12",
      "7 + ((12 - 3) + 8)",
      "(7 + 8) + (12 - 3)",
      "8 + ((7 + 12) - 3)",
      "((8 + 7) - 3) + 12",
      "(7 - 3) + (12 + 8)",
      "((7 + 3) - 8) * 12",
      "((12 - 3) + 7) + 8",
      "(7 - (8 - 3)) * 12",
      "8 - (3 - (7 + 12))",
      "(8 + (7 + 12)) - 3",
      "(12 / (7 - 3)) * 8",
      "7 - ((3 - 12) - 8)",
      "(8 + 7) + (12 - 3)",
      "8 / ((7 - 3) / 12)",
      "(8 / (7 - 3)) * 12",
      "((8 - 3) + 12) + 7",
      "8 + ((12 - 3) + 7)",
      "((12 - 3) + 8) + 7",
      "8 - ((3 - 7) - 12)",
      "(8 * 12) / (7 - 3)",
      "12 * ((3 - 8) + 7)",
      "((7 + 12) + 8) - 3",
      "12 + ((8 + 7) - 3)",
      "12 * ((3 + 7) - 8)",
      "((7 - 8) + 3) * 12",
      "(8 - (3 - 7)) + 12",
      "12 * (3 + (7 - 8))",
      "8 + (12 + (7 - 3))",
      "(7 - 3) + (8 + 12)",
      "(8 + (12 - 3)) + 7",
      "(8 + (12 + 7)) - 3",
      "((8 - 3) + 7) + 12",
      "8 - ((3 - 12) - 7)",
      "12 + (8 + (7 - 3))",
      "12 + ((7 + 8) - 3)",
      "((3 + 7) - 8) * 12",
      "(8 + (7 - 3)) + 12",
      "(12 - 3) + (8 + 7)",
      "(12 + 7) - (3 - 8)",
      "(12 + (8 + 7)) - 3",
      "7 - ((3 - 8) - 12)",
      "(7 - (12 / 3)) * 8",
      "(8 + 7) - (3 - 12)",
      "(7 - (3 - 12)) + 8",
      "8 + (12 - (3 - 7))",
      "8 + (7 - (3 - 12))",
      "((7 + 8) + 12) - 3",
      "7 + (8 + (12 - 3))",
      "8 + ((12 + 7) - 3)",
      "12 * (3 - (8 - 7))",
      "7 - (3 - (12 + 8))",
      "7 + (8 - (3 - 12))",
      "((7 - 3) + 8) + 12",
      "8 + (7 + (12 - 3))",
      "7 - (3 - (8 + 12))",
      "(8 - 3) + (7 + 12)",
      "(8 - (3 - 12)) + 7",
      "8 - (3 - (12 + 7))",
      "((7 - 3) + 12) + 8",
      "(12 * 8) / (7 - 3)",
      "(12 + 8) + (7 - 3)",
      "(12 + (7 + 8)) - 3",
      "((3 - 8) + 7) * 12",
      "(12 + 7) + (8 - 3)",
      "(8 - 3) + (12 + 7)",
      "((12 + 8) - 3) + 7",
      "12 - ((3 - 7) - 8)",
      "((8 + 7) + 12) - 3",
      "12 + (8 - (3 - 7))",
      "(12 + 8) - (3 - 7)",
      "(8 + 12) + (7 - 3)",
      "7 + ((8 + 12) - 3)",
      "(3 - (8 - 7)) * 12",
      "((8 + 12) + 7) - 3",
      "(8 + 12) - (3 - 7)",
      "7 + ((8 - 3) + 12)",
      "8 + ((7 - 3) + 12)",
      "(12 - (3 - 8)) + 7",
      "12 - (3 - (7 + 8))",
      "(7 + 12) + (8 - 3)",
      "12 * ((7 - 8) + 3)",
      "7 + (12 - (3 - 8))",
      "(7 + 12) - (3 - 8)",
      "12 - (3 - (8 + 7))"
    ]
  },
  "3 7 8 13": {
    "cards": "3 7 8 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((13 - 7) - 3) * 8",
      "(3 * 13) - (7 + 8)",
      "8 * (13 - (3 + 7))",
      "8 * ((13 - 3) - 7)",
      "8 * ((13 - 7) - 3)",
      "(13 * 3) - (8 + 7)",
      "(13 - (7 + 3)) * 8",
      "((3 * 13) - 8) - 7",
      "8 * (13 - (7 + 3))",
      "((13 * 3) - 7) - 8",
      "((13 * 3) - 8) - 7",
      "(13 - (3 + 7)) * 8",
      "(3 * 13) - (8 + 7)",
      "((3 * 13) - 7) - 8",
      "(13 * 3) - (7 + 8)",
      "((13 - 3) - 7) * 8"
    ]
  },
  "3 7 9 9": {
    "cards": "3 7 9 9",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((9 / 9) + 7) * 3",
      "(9 + 3) * (9 - 7)",
      "3 * ((9 / 9) + 7)",
      "(7 + (9 / 9)) * 3",
      "((7 * 9) + 9) / 3",
      "(9 + (9 * 7)) / 3",
      "(9 + (7 * 9)) / 3",
      "(9 - 7) * (9 + 3)",
      "(9 - 7) * (3 + 9)",
      "((9 * 7) + 9) / 3",
      "3 * (7 + (9 / 9))",
      "(3 + 9) * (9 - 7)"
    ]
  },
  "3 7 9 10": {
    "cards": "3 7 9 10",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "3 * ((7 + 10) - 9)",
      "7 + ((3 * 9) - 10)",
      "((7 - 9) + 10) * 3",
      "3 * (7 + (10 - 9))",
      "(9 * 3) + (7 - 10)",
      "7 - (10 - (3 * 9))",
      "3 * ((10 + 7) - 9)",
      "(10 - (9 - 7)) * 3",
      "(7 - 10) + (3 * 9)",
      "(7 - (9 - 10)) * 3",
      "(9 * (10 - 7)) - 3",
      "(7 - 10) + (9 * 3)",
      "(3 * 9) + (7 - 10)",
      "((9 * 3) - 10) + 7",
      "3 * (10 + (7 - 9))",
      "7 + ((9 * 3) - 10)",
      "((3 * 9) + 7) - 10",
      "((3 * 9) - 10) + 7",
      "(10 + (7 - 9)) * 3",
      "3 * ((10 - 9) + 7)",
      "((10 - 9) + 7) * 3",
      "((7 + 10) - 9) * 3",
      "(7 + (10 - 9)) * 3",
      "((10 + 7) - 9) * 3",
      "7 - (10 - (9 * 3))",
      "3 * (7 - (9 - 10))",
      "(3 * 9) - (10 - 7)",
      "(7 + (9 * 3)) - 10",
      "3 * ((7 - 9) + 10)",
      "3 * (10 - (9 - 7))",
      "(7 + (3 * 9)) - 10",
      "((10 - 7) * 9) - 3",
      "((9 * 3) + 7) - 10",
      "(9 * 3) - (10 - 7)"
    ]
  },
  "3 7 9 11": {
    "cards": "3 7 9 11",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "((9 + 7) + 11) - 3",
      "(7 - 3) + (11 + 9)",
      "11 - (3 - (9 + 7))",
      "9 - ((3 - 11) - 7)",
      "(11 + 7) - (3 - 9)",
      "(7 + 9) - (3 - 11)",
      "7 + (11 - (3 - 9))",
      "(11 + 7) + (9 - 3)",
      "7 + ((9 + 11) - 3)",
      "(9 + 11) - (3 - 7)",
      "9 + ((7 - 3) + 11)",
      "(9 + (11 + 7)) - 3",
      "(11 + (7 + 9)) - 3",
      "(11 - 3) + (9 + 7)",
      "((7 + 11) + 9) - 3",
      "((7 - 3) + 11) + 9",
      "(9 + (7 - 3)) + 11",
      "11 - ((3 - 9) - 7)",
      "(7 + 11) + (9 - 3)",
      "7 - (3 - (11 + 9))",
      "(11 - (3 - 7)) + 9",
      "7 + (9 + (11 - 3))",
      "(7 - 3) + (9 + 11)",
      "((7 + 9) + 11) - 3",
      "9 + (7 - (3 - 11))",
      "((11 - 3) + 9) + 7",
      "(11 - 7) * (9 - 3)",
      "(9 + 7) + (11 - 3)",
      "(11 + (7 - 3)) + 9",
      "7 + (9 - (3 - 11))",
      "(9 - (3 - 7)) + 11",
      "11 + (7 + (9 - 3))",
      "(9 - 3) * (11 - 7)",
      "(7 + (9 + 11)) - 3",
      "(11 - 3) + (7 + 9)",
      "(7 - 11) * (3 - 9)",
      "11 + (7 - (3 - 9))",
      "(7 + (11 + 9)) - 3",
      "(7 + (11 - 3)) + 9",
      "(7 - (3 - 9)) + 11",
      "7 + ((11 + 9) - 3)",
      "(7 - (3 - 11)) + 9",
      "(9 + (7 + 11)) - 3",
      "11 + (9 - (3 - 7))",
      "11 - ((3 - 7) - 9)",
      "11 + ((9 - 3) + 7)",
      "11 + ((7 - 3) + 9)",
      "(11 - (3 - 9)) + 7",
      "((11 + 9) - 3) + 7",
      "(3 - 9) * (7 - 11)",
      "(9 - (3 - 11)) + 7",
      "(7 + 11) - (3 - 9)",
      "(11 + 9) - (3 - 7)",
      "((9 - 3) + 7) + 11",
      "7 + (11 + (9 - 3))",
      "7 + ((11 - 3) + 9)",
      "9 - (3 - (11 + 7))",
      "(11 + (9 + 7)) - 3",
      "((7 - 3) + 9) + 11",
      "9 - ((3 - 7) - 11)",
      "((7 + 9) - 3) + 11",
      "(9 + 11) + (7 - 3)",
      "(9 - 3) + (7 + 11)",
      "(11 + (9 - 3)) + 7",
      "(11 + 9) + (7 - 3)",
      "(9 - 3) + (11 + 7)",
      "9 + ((7 + 11) - 3)",
      "((11 - 3) + 7) + 9",
      "((11 + 9) + 7) - 3",
      "11 + ((9 + 7) - 3)",
      "7 - ((3 - 11) - 9)",
      "(9 + (11 - 3)) + 7",
      "(7 + 9) + (11 - 3)",
      "((9 + 11) - 3) + 7",
      "((9 + 11) + 7) - 3",
      "7 - ((3 - 9) - 11)",
      "9 + (7 + (11 - 3))",
      "((9 - 3) + 11) + 7",
      "9 + ((11 + 7) - 3)",
      "7 + ((9 - 3) + 11)",
      "9 + (11 - (3 - 7))",
      "((11 + 7) - 3) + 9",
      "((7 + 11) - 3) + 9",
      "7 - (3 - (9 + 11))",
      "((11 + 7) + 9) - 3",
      "11 - (3 - (7 + 9))",
      "((9 + 7) - 3) + 11",
      "(7 + (9 - 3)) + 11",
      "11 + ((7 + 9) - 3)",
      "9 - (3 - (7 + 11))",
      "9 + (11 + (7 - 3))",
      "(9 + 7) - (3 - 11)",
      "9 + ((11 - 3) + 7)",
      "11 + (9 + (7 - 3))"
    ]
  },
  "3 7 9 12": {
    "cards": "3 7 9 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(3 * 7) + (12 - 9)",
      "((3 * 7) - 9) + 12",
      "(3 * (12 - 7)) + 9",
      "9 + ((12 - 7) * 3)",
      "3 + ((12 - 9) * 7)",
      "((12 - 9) * 7) + 3",
      "((7 * 3) - 9) + 12",
      "((7 * 3) + 12) - 9",
      "3 - (7 * (9 - 12))",
      "(7 * 3) + (12 - 9)",
      "9 - ((7 - 12) * 3)",
      "((7 - 3) * 9) - 12",
      "12 - (9 - (7 * 3))",
      "9 + (3 * (12 - 7))",
      "12 + ((3 * 7) - 9)",
      "12 + ((7 * 3) - 9)",
      "12 - (9 - (3 * 7))",
      "(9 * (7 - 3)) - 12",
      "((3 * 7) + 12) - 9",
      "(7 * 3) - (9 - 12)",
      "(12 + (7 * 3)) - 9",
      "(12 - 9) + (7 * 3)",
      "(3 * 7) - (9 - 12)",
      "((12 - 7) * 3) + 9",
      "(12 - 9) + (3 * 7)",
      "(12 + (3 * 7)) - 9",
      "3 + (7 * (12 - 9))",
      "(7 * (12 - 9)) + 3",
      "9 - (3 * (7 - 12))",
      "3 - ((9 - 12) * 7)"
    ]
  },
  "3 7 9 13": {
    "cards": "3 7 9 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(7 * 9) - (3 * 13)",
      "9 * (7 - (13 / 3))",
      "(7 - (13 / 3)) * 9",
      "(7 * 9) - (13 * 3)",
      "(9 * 7) - (13 * 3)",
      "(9 * 7) - (3 * 13)"
    ]
  },
  "3 7 10 10": {
    "cards": "3 7 10 10",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "((10 + 10) - 3) + 7",
      "10 + (7 + (10 - 3))",
      "3 * (7 + (10 / 10))",
      "(7 + 10) - (3 - 10)",
      "((7 + 10) + 10) - 3",
      "((10 - 3) + 7) + 10",
      "((10 + 10) + 7) - 3",
      "10 + (10 + (7 - 3))",
      "10 + (10 - (3 - 7))",
      "7 + ((10 - 3) + 10)",
      "10 + ((10 + 7) - 3)",
      "7 - (3 - (10 + 10))",
      "(7 + 10) + (10 - 3)",
      "((7 - 3) + 10) + 10",
      "((10 + 7) + 10) - 3",
      "3 * ((10 / 10) + 7)",
      "7 + (10 - (3 - 10))",
      "(10 - 3) + (7 + 10)",
      "(10 - (3 - 7)) + 10",
      "10 + ((10 - 3) + 7)",
      "(10 + 7) - (3 - 10)",
      "10 - ((3 - 7) - 10)",
      "7 - ((3 - 10) - 10)",
      "(10 + 10) - (3 - 7)",
      "(7 + (10 + 10)) - 3",
      "((10 - 3) + 10) + 7",
      "(7 - 3) + (10 + 10)",
      "((10 + 7) - 3) + 10",
      "(10 + (10 - 3)) + 7",
      "10 + ((7 - 3) + 10)",
      "(10 - 3) + (10 + 7)",
      "10 - (3 - (10 + 7))",
      "(10 + (7 - 3)) + 10",
      "(10 + 7) + (10 - 3)",
      "10 + (7 - (3 - 10))",
      "10 - (3 - (7 + 10))",
      "((7 + 10) - 3) + 10",
      "(10 + (7 + 10)) - 3",
      "7 + (10 + (10 - 3))",
      "7 + ((10 + 10) - 3)",
      "(10 + 10) + (7 - 3)",
      "(7 - (3 - 10)) + 10",
      "(10 + (10 + 7)) - 3",
      "10 - ((3 - 10) - 7)",
      "10 + ((7 + 10) - 3)",
      "((10 / 10) + 7) * 3",
      "(10 - (3 - 10)) + 7",
      "(7 + (10 - 3)) + 10",
      "(7 + (10 / 10)) * 3"
    ]
  },
  "3 7 10 11": {
    "cards": "3 7 10 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((7 - 10) + 11) * 3",
      "3 * (11 + (7 - 10))",
      "((11 + 7) - 10) * 3",
      "(11 - (10 - 7)) * 3",
      "3 * (7 + (11 - 10))",
      "(10 - 7) * (11 - 3)",
      "(7 - (10 - 11)) * 3",
      "3 * ((11 - 10) + 7)",
      "(3 - 11) * (7 - 10)",
      "((7 + 11) - 10) * 3",
      "3 * ((11 + 7) - 10)",
      "3 * (11 - (10 - 7))",
      "((11 - 10) + 7) * 3",
      "3 * ((7 - 10) + 11)",
      "3 * ((7 + 11) - 10)",
      "(11 - 3) * (10 - 7)",
      "3 * (7 - (10 - 11))",
      "(7 - 10) * (3 - 11)",
      "(11 + (7 - 10)) * 3",
      "(7 + (11 - 10)) * 3"
    ]
  },
  "3 7 10 12": {
    "cards": "3 7 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 7 10 13": {
    "cards": "3 7 10 13",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "((7 * 3) + 13) - 10",
      "((3 * 7) - 10) + 13",
      "3 + ((13 - 10) * 7)",
      "3 + (7 * (13 - 10))",
      "7 + ((3 * 10) - 13)",
      "(7 * 3) + (13 - 10)",
      "(3 * 7) - (10 - 13)",
      "(7 + (3 * 10)) - 13",
      "(7 - 13) + (10 * 3)",
      "(7 - 13) + (3 * 10)",
      "((13 - 10) * 7) + 3",
      "(3 * 7) + (13 - 10)",
      "13 + ((7 * 3) - 10)",
      "(13 + (7 * 3)) - 10",
      "13 - (10 - (7 * 3))",
      "13 + ((3 * 7) - 10)",
      "((3 * 10) + 7) - 13",
      "3 - (7 * (10 - 13))",
      "(10 * 3) + (7 - 13)",
      "((3 * 7) + 13) - 10",
      "((7 * 3) - 10) + 13",
      "13 - (10 - (3 * 7))",
      "7 + ((10 * 3) - 13)",
      "(7 * 3) - (10 - 13)",
      "7 - (13 - (3 * 10))",
      "(3 * 10) - (13 - 7)",
      "(13 + (3 * 7)) - 10",
      "(13 - 10) + (7 * 3)",
      "((3 * 10) - 13) + 7",
      "(7 * (13 - 10)) + 3",
      "(7 + (10 * 3)) - 13",
      "(13 - 10) + (3 * 7)",
      "((10 * 3) - 13) + 7",
      "7 - (13 - (10 * 3))",
      "(10 * 3) - (13 - 7)",
      "3 - ((10 - 13) * 7)",
      "(3 * 10) + (7 - 13)",
      "((10 * 3) + 7) - 13"
    ]
  },
  "3 7 11 11": {
    "cards": "3 7 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((11 / 11) + 7) * 3",
      "3 * ((11 / 11) + 7)",
      "(7 + (11 / 11)) * 3",
      "3 * (7 + (11 / 11))"
    ]
  },
  "3 7 11 12": {
    "cards": "3 7 11 12",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "((12 + 7) - 11) * 3",
      "(7 + (12 - 11)) * 3",
      "((12 - 11) + 7) * 3",
      "(12 + (7 - 11)) * 3",
      "12 - ((7 - 11) * 3)",
      "12 + (3 * (11 - 7))",
      "3 * (12 + (7 - 11))",
      "12 * ((11 + 3) / 7)",
      "(7 - (11 - 12)) * 3",
      "((3 + 11) * 12) / 7",
      "(12 - (11 - 7)) * 3",
      "(11 + 3) * (12 / 7)",
      "(12 * (11 + 3)) / 7",
      "((7 - 11) + 12) * 3",
      "3 * (7 + (12 - 11))",
      "((11 + 3) * 12) / 7",
      "(12 / 7) * (11 + 3)",
      "(11 + 3) / (7 / 12)",
      "((7 + 12) - 11) * 3",
      "3 * ((7 - 11) + 12)",
      "((11 - 7) * 3) + 12",
      "((11 + 3) / 7) * 12",
      "12 * ((3 + 11) / 7)",
      "3 * ((7 + 12) - 11)",
      "(3 + 11) * (12 / 7)",
      "(12 / 7) * (3 + 11)",
      "(3 * (11 - 7)) + 12",
      "12 - (3 * (7 - 11))",
      "12 / (7 / (3 + 11))",
      "12 + ((11 - 7) * 3)",
      "3 * (12 - (11 - 7))",
      "(3 + 11) / (7 / 12)",
      "(12 * (3 + 11)) / 7",
      "3 * ((12 + 7) - 11)",
      "3 * ((12 - 11) + 7)",
      "12 / (7 / (11 + 3))",
      "3 * (7 - (11 - 12))",
      "((3 + 11) / 7) * 12"
    ]
  },
  "3 7 11 13": {
    "cards": "3 7 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 7 12 12": {
    "cards": "3 7 12 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "12 * (12 - (7 + 3))",
      "((12 / 12) + 7) * 3",
      "12 * ((12 - 3) - 7)",
      "((12 - 3) - 7) * 12",
      "(7 + (12 / 12)) * 3",
      "((12 - 7) - 3) * 12",
      "((7 * 12) - 12) / 3",
      "3 * ((12 / 12) + 7)",
      "3 * (7 + (12 / 12))",
      "(12 - (7 + 3)) * 12",
      "12 * ((12 - 7) - 3)",
      "((12 * 7) - 12) / 3",
      "(12 - (3 + 7)) * 12",
      "12 * (12 - (3 + 7))"
    ]
  },
  "3 7 12 13": {
    "cards": "3 7 12 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "12 * ((13 - 7) / 3)",
      "((13 + 7) - 12) * 3",
      "3 * (7 + (13 - 12))",
      "((7 + 13) - 12) * 3",
      "13 + (7 + (12 / 3))",
      "((12 / 3) + 7) + 13",
      "(12 * (13 - 7)) / 3",
      "(12 / 3) + (13 + 7)",
      "((13 - 12) + 7) * 3",
      "3 * (7 - (12 - 13))",
      "(12 / 3) * (13 - 7)",
      "(7 + (13 - 12)) * 3",
      "7 + (13 + (12 / 3))",
      "3 * (13 + (7 - 12))",
      "(7 - (12 - 13)) * 3",
      "3 * ((7 + 13) - 12)",
      "7 + ((12 / 3) + 13)",
      "(13 + 7) + (12 / 3)",
      "3 * ((7 - 12) + 13)",
      "3 * ((13 + 7) - 12)",
      "13 + ((12 / 3) + 7)",
      "((7 - 12) + 13) * 3",
      "12 / (3 / (13 - 7))",
      "(13 - 7) / (3 / 12)",
      "3 * (13 - (12 - 7))",
      "(7 + 13) + (12 / 3)",
      "(13 - 7) * (12 / 3)",
      "3 * ((13 - 12) + 7)",
      "(13 + (12 / 3)) + 7",
      "((13 - 7) * 12) / 3",
      "((13 - 7) / 3) * 12",
      "(12 / 3) + (7 + 13)",
      "((12 / 3) + 13) + 7",
      "(13 - (12 - 7)) * 3",
      "(7 + (12 / 3)) + 13",
      "(13 + (7 - 12)) * 3"
    ]
  },
  "3 7 13 13": {
    "cards": "3 7 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 + (13 / 13)) * 3",
      "((13 / 13) + 7) * 3",
      "3 * (7 + (13 / 13))",
      "3 * ((13 / 13) + 7)"
    ]
  },
  "3 8 8 8": {
    "cards": "3 8 8 8",
    "has_solution": "Y",
    "num_solutions": 87,
    "solutions": [
      "(8 + (8 * 8)) / 3",
      "3 * ((8 * 8) / 8)",
      "3 * ((8 / 8) * 8)",
      "(8 / 8) * (3 * 8)",
      "((8 * 8) * 3) / 8",
      "(8 - (8 - 3)) * 8",
      "3 / (8 / (8 * 8))",
      "(3 * (8 / 8)) * 8",
      "(8 - 8) + (3 * 8)",
      "(3 * 8) - (8 - 8)",
      "((8 * 3) - 8) + 8",
      "8 * (3 * (8 / 8))",
      "(8 + (3 * 8)) - 8",
      "8 / (8 / (3 * 8))",
      "((8 + 8) - 8) * 3",
      "8 * ((3 / 8) * 8)",
      "(8 * 3) / (8 / 8)",
      "(8 / (8 / 8)) * 3",
      "((8 * 8) + 8) / 3",
      "(8 - 8) + (8 * 3)",
      "(8 * 8) * (3 / 8)",
      "(8 * (8 / 8)) * 3",
      "8 + ((8 * 3) - 8)",
      "(8 / (8 / 3)) * 8",
      "8 * (3 - (8 - 8))",
      "8 * (8 / (8 / 3))",
      "8 / (8 / (8 * 3))",
      "(3 * 8) / (8 / 8)",
      "8 * ((3 + 8) - 8)",
      "8 + ((3 * 8) - 8)",
      "8 * (8 + (3 - 8))",
      "(3 + (8 - 8)) * 8",
      "((8 * 8) / 8) * 3",
      "((3 * 8) - 8) + 8",
      "8 * ((8 - 8) + 3)",
      "((8 * 3) * 8) / 8",
      "3 * ((8 + 8) - 8)",
      "(3 * 8) + (8 - 8)",
      "((8 - 8) + 8) * 3",
      "((8 * 3) / 8) * 8",
      "(3 * (8 * 8)) / 8",
      "((8 / 8) * 3) * 8",
      "8 / ((8 / 8) / 3)",
      "(3 - (8 - 8)) * 8",
      "(8 * 3) * (8 / 8)",
      "(3 / 8) * (8 * 8)",
      "((3 * 8) * 8) / 8",
      "((3 + 8) - 8) * 8",
      "8 * ((3 - 8) + 8)",
      "8 * ((8 * 3) / 8)",
      "8 * (8 - (8 - 3))",
      "3 * (8 - (8 - 8))",
      "(8 * (8 * 3)) / 8",
      "(8 * (3 / 8)) * 8",
      "8 * ((8 / 8) * 3)",
      "(8 * 3) + (8 - 8)",
      "((8 * 3) + 8) - 8",
      "3 * ((8 - 8) + 8)",
      "((3 / 8) * 8) * 8",
      "((3 * 8) + 8) - 8",
      "(8 * (3 * 8)) / 8",
      "3 * (8 + (8 - 8))",
      "(8 + (3 - 8)) * 8",
      "((3 - 8) + 8) * 8",
      "3 * (8 * (8 / 8))",
      "8 * ((3 * 8) / 8)",
      "(8 + (8 - 8)) * 3",
      "(8 + (8 * 3)) - 8",
      "8 * (3 / (8 / 8))",
      "(8 / 8) * (8 * 3)",
      "((8 + 3) - 8) * 8",
      "(3 / (8 / 8)) * 8",
      "8 * (8 * (3 / 8))",
      "(8 - (8 - 8)) * 3",
      "(8 * 8) / (8 / 3)",
      "8 / ((8 / 3) / 8)",
      "(3 * 8) * (8 / 8)",
      "((8 / 8) * 8) * 3",
      "((8 - 8) + 3) * 8",
      "8 * (3 + (8 - 8))",
      "8 * ((8 + 3) - 8)",
      "8 - (8 - (3 * 8))",
      "3 * (8 / (8 / 8))",
      "(8 * 3) - (8 - 8)",
      "8 - (8 - (8 * 3))",
      "3 / ((8 / 8) / 8)",
      "((3 * 8) / 8) * 8"
    ]
  },
  "3 8 8 9": {
    "cards": "3 8 8 9",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "3 * (8 * (9 - 8))",
      "8 * (3 / (9 - 8))",
      "(8 * (9 - 8)) * 3",
      "(8 * 3) / (9 - 8)",
      "(9 - (8 / 8)) * 3",
      "3 / ((9 - 8) / 8)",
      "3 * (9 - (8 / 8))",
      "8 * ((9 - 8) * 3)",
      "(9 - 8) * (8 * 3)",
      "8 * (3 * (9 - 8))",
      "(9 - 8) * (3 * 8)",
      "(3 * 8) / (9 - 8)",
      "3 * (8 / (9 - 8))",
      "8 / ((9 - 8) / 3)",
      "((9 - 8) * 3) * 8",
      "3 * ((9 - 8) * 8)",
      "(3 * 8) * (9 - 8)",
      "(3 / (9 - 8)) * 8",
      "((9 - 8) * 8) * 3",
      "(3 * (9 - 8)) * 8",
      "(8 / (9 - 8)) * 3",
      "(8 * 3) * (9 - 8)"
    ]
  },
  "3 8 8 10": {
    "cards": "3 8 8 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((10 * 8) - 8) / 3",
      "((8 * 10) - 8) / 3"
    ]
  },
  "3 8 8 11": {
    "cards": "3 8 8 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "((8 + 8) + 11) - 3",
      "(8 + (11 + 8)) - 3",
      "(11 + 8) - (3 - 8)",
      "(8 - (3 - 8)) + 11",
      "(11 + (8 + 8)) - 3",
      "((8 + 11) - 3) + 8",
      "(11 + (8 - 3)) + 8",
      "8 + (11 + (8 - 3))",
      "11 - (3 - (8 + 8))",
      "((8 - 3) + 11) + 8",
      "((11 - 3) + 8) + 8",
      "8 + (11 - (3 - 8))",
      "((8 + 11) + 8) - 3",
      "8 + ((8 + 11) - 3)",
      "11 + ((8 + 8) - 3)",
      "(8 + 11) + (8 - 3)",
      "((8 + 8) - 3) + 11",
      "((8 - 3) + 8) + 11",
      "11 + (8 - (3 - 8))",
      "((11 + 8) - 3) + 8",
      "(8 + (11 - 3)) + 8",
      "(11 + 8) + (8 - 3)",
      "8 - (3 - (11 + 8))",
      "(8 + 8) - (3 - 11)",
      "8 + ((8 - 3) + 11)",
      "(8 + 8) + (11 - 3)",
      "8 + (8 - (3 - 11))",
      "(8 - 3) + (8 + 11)",
      "8 - ((3 - 8) - 11)",
      "(11 - (3 - 8)) + 8",
      "8 - ((3 - 11) - 8)",
      "((11 + 8) + 8) - 3",
      "(8 - 3) + (11 + 8)",
      "11 + ((8 - 3) + 8)",
      "8 - (3 - (8 + 11))",
      "(8 + 11) - (3 - 8)",
      "(8 - (3 - 11)) + 8",
      "11 - ((3 - 8) - 8)",
      "(8 + (8 + 11)) - 3",
      "8 + ((11 - 3) + 8)",
      "8 + ((11 + 8) - 3)",
      "8 + (8 + (11 - 3))",
      "(11 - 3) + (8 + 8)",
      "(8 + (8 - 3)) + 11",
      "11 + (8 + (8 - 3))"
    ]
  },
  "3 8 8 12": {
    "cards": "3 8 8 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(3 - (8 / 8)) * 12",
      "((12 / 3) * 8) - 8",
      "((12 * 8) / 3) - 8",
      "12 * (3 - (8 / 8))",
      "(12 / (3 / 8)) - 8",
      "(8 / (3 / 12)) - 8",
      "((8 / 3) * 12) - 8",
      "((8 * 12) / 3) - 8",
      "(8 * (12 / 3)) - 8",
      "(12 * (8 / 3)) - 8"
    ]
  },
  "3 8 8 13": {
    "cards": "3 8 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 8 9 9": {
    "cards": "3 8 9 9",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "3 * (9 + (8 - 9))",
      "(3 / (9 / 8)) * 9",
      "((8 * 9) * 3) / 9",
      "((9 + 3) - 9) * 8",
      "((3 * 8) + 9) - 9",
      "(9 * 8) / (9 / 3)",
      "(3 * 9) / (9 / 8)",
      "(8 / (9 / 3)) * 9",
      "(3 * 9) * (8 / 9)",
      "((9 - 9) + 3) * 8",
      "(8 * (3 * 9)) / 9",
      "(9 * (3 / 9)) * 8",
      "(8 / 9) * (3 * 9)",
      "((8 * 3) + 9) - 9",
      "(8 + (9 - 9)) * 3",
      "8 / (9 / (9 * 3))",
      "8 * ((9 + 3) - 9)",
      "8 * (3 - (9 - 9))",
      "9 / (9 / (3 * 8))",
      "8 * ((3 - 9) + 9)",
      "3 * (8 / (9 / 9))",
      "8 * (9 / (9 / 3))",
      "(9 - 9) + (3 * 8)",
      "(8 / 9) * (9 * 3)",
      "3 * ((8 - 9) + 9)",
      "(3 / (9 / 9)) * 8",
      "((9 * 3) / 9) * 8",
      "((3 * 9) * 8) / 9",
      "((9 * 8) * 3) / 9",
      "((3 * 8) / 9) * 9",
      "(3 * (8 / 9)) * 9",
      "9 * ((8 * 3) / 9)",
      "8 / (9 / (3 * 9))",
      "8 * ((3 + 9) - 9)",
      "(3 * 8) + (9 - 9)",
      "3 / (9 / (8 * 9))",
      "((8 / 9) * 9) * 3",
      "(9 / 9) * (3 * 8)",
      "3 * ((8 / 9) * 9)",
      "((8 * 9) / 9) * 3",
      "9 * (3 / (9 / 8))",
      "9 * ((8 / 9) * 3)",
      "((3 + 9) - 9) * 8",
      "(9 + (3 - 9)) * 8",
      "(8 / (9 / 9)) * 3",
      "(9 + (3 * 8)) - 9",
      "(3 * (8 * 9)) / 9",
      "9 - (9 - (3 * 8))",
      "((8 - 9) + 9) * 3",
      "((8 * 3) / 9) * 9",
      "3 * ((8 * 9) / 9)",
      "8 * ((9 * 3) / 9)",
      "(3 * (9 / 9)) * 8",
      "(8 - (9 - 9)) * 3",
      "3 * ((9 / 9) * 8)",
      "((9 / 9) * 3) * 8",
      "8 * ((3 / 9) * 9)",
      "9 * (3 * (8 / 9))",
      "(9 * (3 * 8)) / 9",
      "((3 * 9) / 9) * 8",
      "((8 + 9) - 9) * 3",
      "9 + ((8 * 3) - 9)",
      "((3 * 8) * 9) / 9",
      "3 / ((9 / 8) / 9)",
      "(9 * 3) / (9 / 8)",
      "(9 / (9 / 3)) * 8",
      "8 * (3 / (9 / 9))",
      "9 * (8 / (9 / 3))",
      "((9 + 8) - 9) * 3",
      "8 * ((3 * 9) / 9)",
      "8 * (3 * (9 / 9))",
      "9 / ((9 / 8) / 3)",
      "(9 * (8 * 3)) / 9",
      "(9 * 8) * (3 / 9)",
      "(3 * 8) / (9 / 9)",
      "3 * ((9 + 8) - 9)",
      "9 * (8 * (3 / 9))",
      "((3 - 9) + 9) * 8",
      "(8 * (9 / 9)) * 3",
      "8 * (9 + (3 - 9))",
      "8 / ((9 / 3) / 9)",
      "9 / (9 / (8 * 3))",
      "8 * (9 - (9 - 3))",
      "(9 - 9) + (8 * 3)",
      "(9 + (8 - 9)) * 3",
      "((9 / 9) * 8) * 3",
      "(9 * 3) * (8 / 9)",
      "((3 / 9) * 8) * 9",
      "3 * (8 - (9 - 9))",
      "3 * (8 * (9 / 9))",
      "((9 - 9) + 8) * 3",
      "3 * (9 - (9 - 8))",
      "((8 * 3) - 9) + 9",
      "3 / (9 / (9 * 8))",
      "((9 * 8) / 9) * 3",
      "(3 / 9) * (9 * 8)",
      "(8 * (3 / 9)) * 9",
      "(9 / (9 / 8)) * 3",
      "(9 / 9) * (8 * 3)",
      "3 * ((9 * 8) / 9)",
      "9 * ((3 * 8) / 9)",
      "8 * ((9 / 9) * 3)",
      "(3 * 8) * (9 / 9)",
      "9 + ((3 * 8) - 9)",
      "(8 * 9) * (3 / 9)",
      "9 - (9 - (8 * 3))",
      "(8 * 3) * (9 / 9)",
      "(3 * (9 * 8)) / 9",
      "(8 * (9 * 3)) / 9",
      "8 * ((9 - 9) + 3)",
      "(3 + (9 - 9)) * 8",
      "(3 / 9) * (8 * 9)",
      "8 * (9 * (3 / 9))",
      "(3 - (9 - 9)) * 8",
      "3 * (9 * (8 / 9))",
      "3 * (8 + (9 - 9))",
      "3 * ((9 - 9) + 8)",
      "3 * (9 / (9 / 8))",
      "(8 * 9) / (9 / 3)",
      "(3 * 8) - (9 - 9)",
      "(9 * (8 / 9)) * 3",
      "((9 * 3) * 8) / 9",
      "(9 + (8 * 3)) - 9",
      "((3 * 8) - 9) + 9",
      "(9 - (9 - 3)) * 8",
      "3 / ((9 / 9) / 8)",
      "3 * ((8 + 9) - 9)",
      "(8 * 3) - (9 - 9)",
      "((8 / 9) * 3) * 9",
      "(8 * 3) / (9 / 9)",
      "(9 - (9 - 8)) * 3",
      "(8 * 3) + (9 - 9)",
      "((3 / 9) * 9) * 8",
      "9 / ((9 / 3) / 8)",
      "9 * ((3 / 9) * 8)",
      "((8 * 3) * 9) / 9",
      "8 / ((9 / 9) / 3)",
      "8 * (3 + (9 - 9))"
    ]
  },
  "3 8 9 10": {
    "cards": "3 8 9 10",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "((9 - 3) + 8) + 10",
      "10 + (9 + (8 - 3))",
      "8 - ((3 - 10) - 9)",
      "9 + (10 + (8 - 3))",
      "((10 + 8) + 9) - 3",
      "8 + ((9 - 3) + 10)",
      "(8 + 10) - (3 - 9)",
      "(10 - 3) + (8 + 9)",
      "(8 + 10) + (9 - 3)",
      "3 * (8 * (10 - 9))",
      "((9 + 10) + 8) - 3",
      "(8 * 3) * (10 - 9)",
      "(10 + 9) + (8 - 3)",
      "((8 + 10) - 3) + 9",
      "8 + ((10 - 3) + 9)",
      "9 + ((10 + 8) - 3)",
      "9 + (8 + (10 - 3))",
      "(10 + 8) - (3 - 9)",
      "8 + ((9 + 10) - 3)",
      "((9 + 8) + 10) - 3",
      "(9 + 8) - (3 - 10)",
      "(8 / (10 - 9)) * 3",
      "9 - ((3 - 8) - 10)",
      "10 - ((3 - 8) - 9)",
      "(10 + (9 - 3)) + 8",
      "3 / ((10 - 9) / 8)",
      "(3 / (10 - 9)) * 8",
      "8 - (3 - (9 + 10))",
      "((9 + 8) - 3) + 10",
      "((10 - 3) + 8) + 9",
      "9 + ((8 - 3) + 10)",
      "(8 + 9) - (3 - 10)",
      "(8 + 9) + (10 - 3)",
      "(9 - (3 - 8)) + 10",
      "(10 - (3 - 9)) + 8",
      "(10 - (3 - 8)) + 9",
      "9 + ((10 - 3) + 8)",
      "(8 + (9 + 10)) - 3",
      "(8 - 3) + (10 + 9)",
      "3 * ((10 - 9) * 8)",
      "(10 + (9 + 8)) - 3",
      "(9 - (3 - 10)) + 8",
      "((10 + 9) + 8) - 3",
      "8 - (3 - (10 + 9))",
      "10 + (8 + (9 - 3))",
      "(10 + (8 + 9)) - 3",
      "10 - (3 - (8 + 9))",
      "(9 + 8) + (10 - 3)",
      "(3 * (10 - 9)) * 8",
      "((10 - 9) * 8) * 3",
      "(8 * (10 - 9)) * 3",
      "8 + (9 - (3 - 10))",
      "10 + (8 - (3 - 9))",
      "(3 * 8) / (10 - 9)",
      "9 + (10 - (3 - 8))",
      "10 + (9 - (3 - 8))",
      "(9 + (10 + 8)) - 3",
      "10 + ((8 + 9) - 3)",
      "8 + ((10 + 9) - 3)",
      "((8 + 9) + 10) - 3",
      "(10 - 3) + (9 + 8)",
      "(10 - 9) * (8 * 3)",
      "(9 + (8 + 10)) - 3",
      "((10 + 8) - 3) + 9",
      "(10 - 8) * (9 + 3)",
      "8 / ((10 - 9) / 3)",
      "((8 + 9) - 3) + 10",
      "(9 - 3) + (8 + 10)",
      "(3 * 8) * (10 - 9)",
      "8 * ((10 - 9) * 3)",
      "(8 - 3) + (9 + 10)",
      "(10 + 8) + (9 - 3)",
      "(9 + (8 - 3)) + 10",
      "((10 - 9) * 3) * 8",
      "10 + ((9 + 8) - 3)",
      "((8 - 3) + 9) + 10",
      "((9 - 3) + 10) + 8",
      "8 + (9 + (10 - 3))",
      "9 - (3 - (10 + 8))",
      "(10 - 8) * (3 + 9)",
      "8 - ((3 - 9) - 10)",
      "((8 - 3) + 10) + 9",
      "(8 - (3 - 9)) + 10",
      "9 - ((3 - 10) - 8)",
      "(3 + 9) * (10 - 8)",
      "3 * (8 / (10 - 9))",
      "((10 - 3) + 9) + 8",
      "((10 + 9) - 3) + 8",
      "(8 + (10 + 9)) - 3",
      "10 - ((3 - 9) - 8)",
      "(9 + 3) * (10 - 8)",
      "(10 + (8 - 3)) + 9",
      "(10 + 9) - (3 - 8)",
      "(8 * 3) / (10 - 9)",
      "8 * (3 * (10 - 9))",
      "(8 + (9 - 3)) + 10",
      "(9 + 10) + (8 - 3)",
      "(8 + (10 - 3)) + 9",
      "8 * (3 / (10 - 9))",
      "9 + ((8 + 10) - 3)",
      "(9 + (10 - 3)) + 8",
      "8 + (10 + (9 - 3))",
      "9 + (8 - (3 - 10))",
      "(10 - 9) * (3 * 8)",
      "8 + (10 - (3 - 9))",
      "(8 - (3 - 10)) + 9",
      "10 + ((8 - 3) + 9)",
      "10 + ((9 - 3) + 8)",
      "9 - (3 - (8 + 10))",
      "(9 + 10) - (3 - 8)",
      "(9 - 3) + (10 + 8)",
      "((9 + 10) - 3) + 8",
      "((8 + 10) + 9) - 3",
      "10 - (3 - (9 + 8))"
    ]
  },
  "3 8 9 11": {
    "cards": "3 8 9 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(3 * 9) + (8 - 11)",
      "((3 * 9) - 11) + 8",
      "((9 * 3) + 8) - 11",
      "(8 - 11) + (9 * 3)",
      "8 - (11 - (3 * 9))",
      "((3 * 9) + 8) - 11",
      "(8 - 11) + (3 * 9)",
      "(9 * 3) + (8 - 11)",
      "((9 * 3) - 11) + 8",
      "(9 * 3) - (11 - 8)",
      "((11 - 8) * 9) - 3",
      "8 - (11 - (9 * 3))",
      "8 + ((3 * 9) - 11)",
      "(3 * 9) - (11 - 8)",
      "(9 * (11 - 8)) - 3",
      "(8 + (9 * 3)) - 11",
      "8 + ((9 * 3) - 11)",
      "(8 + (3 * 9)) - 11"
    ]
  },
  "3 8 9 12": {
    "cards": "3 8 9 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(9 - 3) * (12 - 8)",
      "((3 + 8) - 9) * 12",
      "12 * (8 - (9 - 3))",
      "(3 + (8 - 9)) * 12",
      "12 * ((8 - 9) + 3)",
      "(8 - 12) * (3 - 9)",
      "12 * (3 - (9 - 8))",
      "12 * ((8 + 3) - 9)",
      "((8 - 9) + 3) * 12",
      "((3 - 9) + 8) * 12",
      "((8 + 3) - 9) * 12",
      "(12 - 8) * (9 - 3)",
      "(3 - 9) * (8 - 12)",
      "(8 + (3 - 9)) * 12",
      "12 * ((3 - 9) + 8)",
      "12 * (8 + (3 - 9))",
      "12 * (3 + (8 - 9))",
      "(3 - (9 - 8)) * 12",
      "12 * ((3 + 8) - 9)",
      "(8 - (9 - 3)) * 12"
    ]
  },
  "3 8 9 13": {
    "cards": "3 8 9 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(8 + (9 / 3)) + 13",
      "(3 * (13 - 8)) + 9",
      "9 + (3 * (13 - 8))",
      "(9 / 3) + (8 + 13)",
      "8 + (13 + (9 / 3))",
      "((13 - 8) * 3) + 9",
      "13 + ((9 / 3) + 8)",
      "9 - ((8 - 13) * 3)",
      "9 - (3 * (8 - 13))",
      "(8 + 13) + (9 / 3)",
      "(13 + (9 / 3)) + 8",
      "8 + ((9 / 3) + 13)",
      "((9 / 3) + 13) + 8",
      "(9 / 3) + (13 + 8)",
      "9 + ((13 - 8) * 3)",
      "13 + (8 + (9 / 3))",
      "((9 / 3) + 8) + 13",
      "(13 + 8) + (9 / 3)"
    ]
  },
  "3 8 10 10": {
    "cards": "3 8 10 10",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "((8 * 3) * 10) / 10",
      "((3 / 10) * 8) * 10",
      "10 * ((3 / 10) * 8)",
      "((3 - 10) + 10) * 8",
      "((3 * 10) * 8) / 10",
      "(3 * 8) / (10 / 10)",
      "3 * ((8 - 10) + 10)",
      "3 * (8 - (10 - 10))",
      "10 + ((3 * 8) - 10)",
      "8 * (10 - (10 - 3))",
      "((3 * 8) / 10) * 10",
      "(3 * 10) * (8 / 10)",
      "((3 * 8) - 10) + 10",
      "(10 + (3 - 10)) * 8",
      "(10 - (10 - 3)) * 8",
      "(10 * 3) / (10 / 8)",
      "10 - (10 - (8 * 3))",
      "(3 / 10) * (10 * 8)",
      "3 * (10 * (8 / 10))",
      "10 / (10 / (8 * 3))",
      "8 * (3 - (10 - 10))",
      "((8 + 10) - 10) * 3",
      "(10 + (8 - 10)) * 3",
      "(8 / 10) * (10 * 3)",
      "(10 * (8 / 10)) * 3",
      "10 * ((3 * 8) / 10)",
      "(10 * 8) * (3 / 10)",
      "(3 * 8) - (10 - 10)",
      "10 + ((8 * 3) - 10)",
      "(3 * (10 / 10)) * 8",
      "(10 - (10 - 8)) * 3",
      "((3 * 8) * 10) / 10",
      "((8 / 10) * 3) * 10",
      "8 / ((10 / 10) / 3)",
      "(10 * (8 * 3)) / 10",
      "(3 * (10 * 8)) / 10",
      "10 * (8 / (10 / 3))",
      "3 * ((10 + 8) - 10)",
      "(10 * (3 / 10)) * 8",
      "3 * ((8 / 10) * 10)",
      "(8 * 10) / (10 / 3)",
      "(3 * (8 / 10)) * 10",
      "(8 * (10 * 3)) / 10",
      "(3 / (10 / 8)) * 10",
      "((10 * 3) / 10) * 8",
      "8 * ((10 * 3) / 10)",
      "10 * (3 * (8 / 10))",
      "(3 + (10 - 10)) * 8",
      "((10 + 3) - 10) * 8",
      "8 * (10 * (3 / 10))",
      "8 / (10 / (10 * 3))",
      "(8 / 10) * (3 * 10)",
      "8 * (10 / (10 / 3))",
      "8 * (3 * (10 / 10))",
      "(8 * 3) - (10 - 10)",
      "(8 + (10 - 10)) * 3",
      "3 * (10 + (8 - 10))",
      "(8 * (3 / 10)) * 10",
      "(8 * 3) * (10 / 10)",
      "10 * (3 / (10 / 8))",
      "(8 / (10 / 3)) * 10",
      "8 * ((10 - 10) + 3)",
      "3 * (8 + (10 - 10))",
      "(8 * 3) / (10 / 10)",
      "8 * ((3 + 10) - 10)",
      "3 * ((8 + 10) - 10)",
      "((10 * 8) * 3) / 10",
      "((8 - 10) + 10) * 3",
      "3 * ((10 / 10) * 8)",
      "(10 + (8 * 3)) - 10",
      "10 - (10 - (3 * 8))",
      "((3 + 10) - 10) * 8",
      "((8 / 10) * 10) * 3",
      "8 * ((10 + 3) - 10)",
      "(8 * 10) * (3 / 10)",
      "(8 * 3) + (10 - 10)",
      "3 * (10 / (10 / 8))",
      "(8 * (10 / 10)) * 3",
      "((10 * 8) / 10) * 3",
      "((10 * 3) * 8) / 10",
      "8 * (3 + (10 - 10))",
      "10 * ((8 / 10) * 3)",
      "(10 / 10) * (3 * 8)",
      "10 / ((10 / 3) / 8)",
      "3 / (10 / (10 * 8))",
      "10 / ((10 / 8) / 3)",
      "(3 / 10) * (8 * 10)",
      "3 / ((10 / 8) / 10)",
      "3 * ((10 * 8) / 10)",
      "((3 / 10) * 10) * 8",
      "3 / (10 / (8 * 10))",
      "((8 * 10) * 3) / 10",
      "(10 / (10 / 8)) * 3",
      "(8 / (10 / 10)) * 3",
      "((3 * 10) / 10) * 8",
      "((10 + 8) - 10) * 3",
      "(10 - 10) + (3 * 8)",
      "(3 * 8) * (10 / 10)",
      "(3 / (10 / 10)) * 8",
      "3 * (8 / (10 / 10))",
      "(8 - (10 - 10)) * 3",
      "((8 * 3) + 10) - 10",
      "(3 * 8) + (10 - 10)",
      "3 * (8 * (10 / 10))",
      "((8 * 3) / 10) * 10",
      "3 * ((8 * 10) / 10)",
      "(10 * (3 * 8)) / 10",
      "10 * (8 * (3 / 10))",
      "((8 * 3) - 10) + 10",
      "(3 - (10 - 10)) * 8",
      "3 * (10 - (10 - 8))",
      "((10 - 10) + 8) * 3",
      "8 / ((10 / 3) / 10)",
      "8 * ((3 * 10) / 10)",
      "(10 * 8) / (10 / 3)",
      "(10 - 10) + (8 * 3)",
      "((10 / 10) * 8) * 3",
      "(10 / 10) * (8 * 3)",
      "10 * ((8 * 3) / 10)",
      "8 * (3 / (10 / 10))",
      "(10 * 3) * (8 / 10)",
      "8 * ((10 / 10) * 3)",
      "8 * (10 + (3 - 10))",
      "3 * ((10 - 10) + 8)",
      "10 / (10 / (3 * 8))",
      "(3 * 10) / (10 / 8)",
      "(8 * (3 * 10)) / 10",
      "((8 * 10) / 10) * 3",
      "8 / (10 / (3 * 10))",
      "((3 * 8) + 10) - 10",
      "((10 - 10) + 3) * 8",
      "(3 * (8 * 10)) / 10",
      "(10 + (3 * 8)) - 10",
      "(10 / (10 / 3)) * 8",
      "8 * ((3 - 10) + 10)",
      "((10 / 10) * 3) * 8",
      "8 * ((3 / 10) * 10)",
      "3 / ((10 / 10) / 8)"
    ]
  },
  "3 8 10 11": {
    "cards": "3 8 10 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "3 * ((11 - 10) * 8)",
      "8 * (3 / (11 - 10))",
      "8 * ((11 - 10) * 3)",
      "3 / ((11 - 10) / 8)",
      "(3 * 8) / (11 - 10)",
      "(8 / (11 - 10)) * 3",
      "8 / ((11 - 10) / 3)",
      "3 * (8 * (11 - 10))",
      "(3 * (11 - 10)) * 8",
      "(8 * 3) * (11 - 10)",
      "(3 / (11 - 10)) * 8",
      "(8 * 3) / (11 - 10)",
      "(3 * 8) * (11 - 10)",
      "((11 - 10) * 3) * 8",
      "(11 - 10) * (8 * 3)",
      "((11 - 10) * 8) * 3",
      "(8 * (11 - 10)) * 3",
      "(11 - 10) * (3 * 8)",
      "3 * (8 / (11 - 10))",
      "8 * (3 * (11 - 10))"
    ]
  },
  "3 8 10 12": {
    "cards": "3 8 10 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 * (10 / (8 - 3))",
      "(12 / (8 - 3)) * 10",
      "(10 * 12) / (8 - 3)",
      "(12 * 10) / (8 - 3)",
      "10 * (12 / (8 - 3))",
      "12 / ((8 - 3) / 10)",
      "10 / ((8 - 3) / 12)",
      "(10 / (8 - 3)) * 12"
    ]
  },
  "3 8 10 13": {
    "cards": "3 8 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 8 11 11": {
    "cards": "3 8 11 11",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "(11 - 11) + (8 * 3)",
      "((3 * 8) + 11) - 11",
      "(3 / (11 / 8)) * 11",
      "3 * ((8 + 11) - 11)",
      "(3 * (8 / 11)) * 11",
      "(3 - (11 - 11)) * 8",
      "3 * (11 / (11 / 8))",
      "((8 / 11) * 3) * 11",
      "11 / (11 / (3 * 8))",
      "8 / ((11 / 11) / 3)",
      "11 + ((3 * 8) - 11)",
      "11 * (8 * (3 / 11))",
      "3 * (8 - (11 - 11))",
      "(8 - 11) * (3 - 11)",
      "((8 * 11) * 3) / 11",
      "(3 / (11 / 11)) * 8",
      "11 / (11 / (8 * 3))",
      "(8 / 11) * (11 * 3)",
      "(11 / 11) * (8 * 3)",
      "(8 * (3 * 11)) / 11",
      "3 / ((11 / 8) / 11)",
      "(11 - 8) * (11 - 3)",
      "11 - (11 - (3 * 8))",
      "11 * (3 * (8 / 11))",
      "(3 * 8) * (11 / 11)",
      "3 * ((8 * 11) / 11)",
      "8 * (11 - (11 - 3))",
      "((8 / 11) * 11) * 3",
      "(8 * 3) * (11 / 11)",
      "(11 - 3) * (11 - 8)",
      "11 / ((11 / 8) / 3)",
      "8 * ((11 / 11) * 3)",
      "8 / ((11 / 3) / 11)",
      "11 - (11 - (8 * 3))",
      "(8 / 11) * (3 * 11)",
      "11 * (3 / (11 / 8))",
      "(11 / (11 / 3)) * 8",
      "((3 * 11) / 11) * 8",
      "(3 * 8) + (11 - 11)",
      "3 / (11 / (8 * 11))",
      "((8 - 11) + 11) * 3",
      "((11 * 3) / 11) * 8",
      "((11 / 11) * 3) * 8",
      "3 * ((11 - 11) + 8)",
      "3 * ((8 - 11) + 11)",
      "8 * (11 * (3 / 11))",
      "3 * (8 + (11 - 11))",
      "3 * (8 / (11 / 11))",
      "((3 * 8) - 11) + 11",
      "((8 * 11) / 11) * 3",
      "(11 * (8 * 3)) / 11",
      "11 * ((3 * 8) / 11)",
      "8 * ((11 * 3) / 11)",
      "((11 * 8) * 3) / 11",
      "3 * ((8 / 11) * 11)",
      "(3 * (11 * 8)) / 11",
      "8 / (11 / (11 * 3))",
      "8 * ((3 - 11) + 11)",
      "(11 * (3 * 8)) / 11",
      "((3 / 11) * 11) * 8",
      "(3 * 11) * (8 / 11)",
      "(11 + (3 * 8)) - 11",
      "((8 * 3) / 11) * 11",
      "(3 / 11) * (11 * 8)",
      "(11 + (8 - 11)) * 3",
      "((3 * 8) * 11) / 11",
      "((3 - 11) + 11) * 8",
      "(8 * (11 / 11)) * 3",
      "11 * ((8 / 11) * 3)",
      "((3 / 11) * 8) * 11",
      "8 * (3 - (11 - 11))",
      "11 * ((8 * 3) / 11)",
      "((8 * 3) + 11) - 11",
      "(11 - (11 - 8)) * 3",
      "11 + ((8 * 3) - 11)",
      "8 * ((3 / 11) * 11)",
      "(3 * 11) / (11 / 8)",
      "3 * (11 + (8 - 11))",
      "(3 * 8) - (11 - 11)",
      "(8 * 3) - (11 - 11)",
      "(3 * 8) / (11 / 11)",
      "8 * (11 + (3 - 11))",
      "((11 + 8) - 11) * 3",
      "((11 - 11) + 3) * 8",
      "(8 * 3) / (11 / 11)",
      "(8 * (3 / 11)) * 11",
      "(8 * (11 * 3)) / 11",
      "(8 / (11 / 3)) * 11",
      "((8 * 3) - 11) + 11",
      "3 / (11 / (11 * 8))",
      "8 * (11 / (11 / 3))",
      "((8 + 11) - 11) * 3",
      "8 * (3 / (11 / 11))",
      "(11 * 8) * (3 / 11)",
      "((11 + 3) - 11) * 8",
      "3 / ((11 / 11) / 8)",
      "(3 + (11 - 11)) * 8",
      "((11 - 11) + 8) * 3",
      "(3 * (11 / 11)) * 8",
      "8 * ((3 * 11) / 11)",
      "3 * (11 - (11 - 8))",
      "3 * (11 * (8 / 11))",
      "(3 / 11) * (8 * 11)",
      "8 * (3 + (11 - 11))",
      "(11 + (8 * 3)) - 11",
      "3 * ((11 / 11) * 8)",
      "8 * (3 * (11 / 11))",
      "((8 * 3) * 11) / 11",
      "11 * ((3 / 11) * 8)",
      "(11 * (8 / 11)) * 3",
      "3 * ((11 + 8) - 11)",
      "((3 + 11) - 11) * 8",
      "((3 * 11) * 8) / 11",
      "(11 / (11 / 8)) * 3",
      "(8 / (11 / 11)) * 3",
      "(8 - (11 - 11)) * 3",
      "8 * ((11 + 3) - 11)",
      "(8 * 3) + (11 - 11)",
      "3 * ((11 * 8) / 11)",
      "((11 * 3) * 8) / 11",
      "(11 * 3) / (11 / 8)",
      "(11 * 8) / (11 / 3)",
      "8 * ((11 - 11) + 3)",
      "(11 - 11) + (3 * 8)",
      "(8 * 11) / (11 / 3)",
      "3 * (8 * (11 / 11))",
      "(8 * 11) * (3 / 11)",
      "(11 / 11) * (3 * 8)",
      "(11 - (11 - 3)) * 8",
      "8 * ((3 + 11) - 11)",
      "(11 * (3 / 11)) * 8",
      "(11 + (3 - 11)) * 8",
      "8 / (11 / (3 * 11))",
      "((11 / 11) * 8) * 3",
      "11 / ((11 / 3) / 8)",
      "(3 - 11) * (8 - 11)",
      "((3 * 8) / 11) * 11",
      "(8 + (11 - 11)) * 3",
      "(3 * (8 * 11)) / 11",
      "11 * (8 / (11 / 3))",
      "(11 * 3) * (8 / 11)",
      "((11 * 8) / 11) * 3"
    ]
  },
  "3 8 11 12": {
    "cards": "3 8 11 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(3 * (12 - 11)) * 8",
      "(8 * 3) / (12 - 11)",
      "8 * (3 * (12 - 11))",
      "(3 * 8) / (12 - 11)",
      "(8 * 3) * (12 - 11)",
      "(3 * 8) * (12 - 11)",
      "((12 - 11) * 3) * 8",
      "8 * (3 / (12 - 11))",
      "3 * ((12 - 11) * 8)",
      "(8 * (12 - 11)) * 3",
      "(3 / (12 - 11)) * 8",
      "3 / ((12 - 11) / 8)",
      "3 * (8 / (12 - 11))",
      "((12 - 11) * 8) * 3",
      "(12 - 11) * (3 * 8)",
      "(8 / (12 - 11)) * 3",
      "3 * (8 * (12 - 11))",
      "(12 - 11) * (8 * 3)",
      "8 / ((12 - 11) / 3)",
      "8 * ((12 - 11) * 3)"
    ]
  },
  "3 8 11 13": {
    "cards": "3 8 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 8 12 12": {
    "cards": "3 8 12 12",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "(3 * (12 - 8)) + 12",
      "((3 * 8) - 12) + 12",
      "8 * ((3 / 12) * 12)",
      "3 / ((12 / 12) / 8)",
      "(8 * (3 / 12)) * 12",
      "12 + ((3 * 8) - 12)",
      "12 + ((12 / 3) + 8)",
      "8 * (12 / (12 / 3))",
      "12 - ((8 - 12) * 3)",
      "((12 * 3) * 8) / 12",
      "8 * ((12 + 3) - 12)",
      "3 * ((12 / 12) * 8)",
      "12 + ((8 * 3) - 12)",
      "(8 / (12 / 3)) * 12",
      "8 * (3 - (12 - 12))",
      "3 * ((8 / 12) * 12)",
      "8 * ((3 - 12) + 12)",
      "3 * (12 + (8 - 12))",
      "(12 * 3) / (12 / 8)",
      "8 / (12 / (3 * 12))",
      "((8 * 3) * 12) / 12",
      "((12 * 8) * 3) / 12",
      "((3 * 12) / 12) * 8",
      "12 * (8 * (3 / 12))",
      "8 + (12 + (12 / 3))",
      "((12 / 3) + 12) + 8",
      "(3 * (12 * 8)) / 12",
      "(3 * 12) / (12 / 8)",
      "(3 * 8) + (12 - 12)",
      "12 - (3 * (8 - 12))",
      "(12 / (12 / 3)) * 8",
      "((8 + 12) - 12) * 3",
      "8 * (12 * (3 / 12))",
      "(8 * 3) - (12 - 12)",
      "((12 + 3) - 12) * 8",
      "(8 * 3) + (12 - 12)",
      "(12 / 3) + (12 + 8)",
      "12 / ((12 / 8) / 3)",
      "(8 * (12 / 12)) * 3",
      "(3 / 12) * (8 * 12)",
      "(8 * 3) * (12 / 12)",
      "12 + (8 + (12 / 3))",
      "((12 / 12) * 3) * 8",
      "(12 * 3) * (8 / 12)",
      "(12 - (12 - 3)) * 8",
      "(12 / (12 / 8)) * 3",
      "(3 / (12 / 12)) * 8",
      "8 * ((3 * 12) / 12)",
      "((8 * 12) / 12) * 3",
      "((8 * 3) + 12) - 12",
      "(8 * (12 * 3)) / 12",
      "((3 - 12) + 12) * 8",
      "((3 * 8) / 12) * 12",
      "(3 * 8) / (12 / 12)",
      "12 * (3 / (12 / 8))",
      "12 * ((3 / 12) * 8)",
      "(12 / 12) * (3 * 8)",
      "(12 - (12 - 8)) * 3",
      "3 * ((8 + 12) - 12)",
      "(12 * (8 * 3)) / 12",
      "((3 / 12) * 8) * 12",
      "8 / ((12 / 12) / 3)",
      "3 / ((12 / 8) / 12)",
      "((12 - 12) + 3) * 8",
      "3 * (12 - (12 - 8))",
      "((12 * 8) / 12) * 3",
      "((8 / 12) * 12) * 3",
      "((8 - 12) + 12) * 3",
      "12 + ((12 - 8) * 3)",
      "(12 - 12) + (3 * 8)",
      "(12 + (8 * 3)) - 12",
      "(3 / (12 / 8)) * 12",
      "(12 + (8 - 12)) * 3",
      "3 * (12 / (12 / 8))",
      "(12 / 3) + (8 + 12)",
      "((12 * 3) / 12) * 8",
      "12 * ((8 / 12) * 3)",
      "3 * (8 - (12 - 12))",
      "(12 + 8) + (12 / 3)",
      "3 / (12 / (8 * 12))",
      "(12 + (3 * 8)) - 12",
      "(12 - 12) + (8 * 3)",
      "((3 / 12) * 12) * 8",
      "((3 * 8) + 12) - 12",
      "8 * ((12 - 12) + 3)",
      "(8 / (12 / 12)) * 3",
      "12 / (12 / (8 * 3))",
      "12 * (3 * (8 / 12))",
      "((12 - 12) + 8) * 3",
      "3 * ((12 + 8) - 12)",
      "8 * ((3 + 12) - 12)",
      "12 * ((8 * 3) / 12)",
      "(8 * (3 * 12)) / 12",
      "(3 + (12 - 12)) * 8",
      "3 * ((12 * 8) / 12)",
      "8 * (3 / (12 / 12))",
      "((8 * 3) / 12) * 12",
      "(8 + (12 / 3)) + 12",
      "3 * (8 / (12 / 12))",
      "(8 * 12) * (3 / 12)",
      "(12 / 12) * (8 * 3)",
      "((12 + 8) - 12) * 3",
      "8 / ((12 / 3) / 12)",
      "12 / (12 / (3 * 8))",
      "(3 * 8) - (12 - 12)",
      "(8 + 12) + (12 / 3)",
      "(8 * 12) / (12 / 3)",
      "((3 * 8) * 12) / 12",
      "((12 / 12) * 8) * 3",
      "8 * (12 + (3 - 12))",
      "3 * ((8 - 12) + 12)",
      "8 * ((12 * 3) / 12)",
      "3 * (8 * (12 / 12))",
      "(8 / 12) * (12 * 3)",
      "(3 - (12 - 12)) * 8",
      "(12 * (3 / 12)) * 8",
      "(8 + (12 - 12)) * 3",
      "8 + ((12 / 3) + 12)",
      "(12 + (3 - 12)) * 8",
      "(12 * 8) * (3 / 12)",
      "((12 / 3) + 8) + 12",
      "3 * ((8 * 12) / 12)",
      "(12 * (8 / 12)) * 3",
      "(3 * 8) * (12 / 12)",
      "(3 * (8 / 12)) * 12",
      "(8 / 12) * (3 * 12)",
      "3 * ((12 - 12) + 8)",
      "8 * (3 * (12 / 12))",
      "(8 - (12 - 12)) * 3",
      "(3 * 12) * (8 / 12)",
      "12 + (3 * (12 - 8))",
      "8 * (3 + (12 - 12))",
      "(12 + (12 / 3)) + 8",
      "8 * (12 - (12 - 3))",
      "((12 - 8) * 3) + 12",
      "3 * (8 + (12 - 12))",
      "3 / (12 / (12 * 8))",
      "12 - (12 - (3 * 8))",
      "((8 * 3) - 12) + 12",
      "((3 + 12) - 12) * 8",
      "((8 * 12) * 3) / 12",
      "(12 * (3 * 8)) / 12",
      "((3 * 12) * 8) / 12",
      "8 / (12 / (12 * 3))",
      "8 * ((12 / 12) * 3)",
      "(8 * 3) / (12 / 12)",
      "12 * (8 / (12 / 3))",
      "(3 * (12 / 12)) * 8",
      "12 / ((12 / 3) / 8)",
      "((8 / 12) * 3) * 12",
      "(12 * 8) / (12 / 3)",
      "12 - (12 - (8 * 3))",
      "(3 / 12) * (12 * 8)",
      "(3 * (8 * 12)) / 12",
      "12 * ((3 * 8) / 12)",
      "3 * (12 * (8 / 12))"
    ]
  },
  "3 8 12 13": {
    "cards": "3 8 12 13",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "(12 * (13 + 3)) / 8",
      "((13 - 12) * 3) * 8",
      "(3 * 8) / (13 - 12)",
      "((13 - 3) - 8) * 12",
      "3 * (8 * (13 - 12))",
      "12 * ((13 - 3) - 8)",
      "(12 * (3 + 13)) / 8",
      "(8 * 3) / (13 - 12)",
      "(13 + 3) * (12 / 8)",
      "12 * (13 - (3 + 8))",
      "8 * ((13 - 12) * 3)",
      "3 * (8 / (13 - 12))",
      "3 * ((13 - 12) * 8)",
      "12 * ((13 + 3) / 8)",
      "(8 / (13 - 12)) * 3",
      "((13 - 12) * 8) * 3",
      "(8 * 3) * (13 - 12)",
      "(13 - 12) * (3 * 8)",
      "3 / ((13 - 12) / 8)",
      "(13 - 12) * (8 * 3)",
      "8 / ((13 - 12) / 3)",
      "(3 / (13 - 12)) * 8",
      "((13 + 3) / 8) * 12",
      "(3 + 13) / (8 / 12)",
      "12 * ((13 - 8) - 3)",
      "((13 - 8) - 3) * 12",
      "(12 / 8) * (13 + 3)",
      "(13 + 3) / (8 / 12)",
      "((3 + 13) / 8) * 12",
      "(13 - (8 + 3)) * 12",
      "(3 * 8) * (13 - 12)",
      "8 * (3 / (13 - 12))",
      "(13 - (3 + 8)) * 12",
      "12 / (8 / (3 + 13))",
      "12 * (13 - (8 + 3))",
      "12 / (8 / (13 + 3))",
      "((13 + 3) * 12) / 8",
      "(8 * (13 - 12)) * 3",
      "(12 / 8) * (3 + 13)",
      "(3 * (13 - 12)) * 8",
      "8 * (3 * (13 - 12))",
      "12 * ((3 + 13) / 8)",
      "((3 + 13) * 12) / 8",
      "(3 + 13) * (12 / 8)"
    ]
  },
  "3 8 13 13": {
    "cards": "3 8 13 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "(8 * 3) + (13 - 13)",
      "(3 * 8) + (13 - 13)",
      "(3 * (8 / 13)) * 13",
      "13 - (13 - (8 * 3))",
      "13 + ((8 * 3) - 13)",
      "8 * ((3 * 13) / 13)",
      "(13 * 8) * (3 / 13)",
      "((13 * 8) / 13) * 3",
      "(8 * (3 * 13)) / 13",
      "3 * ((8 - 13) + 13)",
      "3 / ((13 / 8) / 13)",
      "8 * ((13 - 13) + 3)",
      "(13 - 13) + (8 * 3)",
      "((13 / 13) * 3) * 8",
      "8 * (3 - (13 - 13))",
      "(13 - 13) + (3 * 8)",
      "(8 + (13 - 13)) * 3",
      "8 * ((3 - 13) + 13)",
      "3 * ((8 + 13) - 13)",
      "((3 / 13) * 8) * 13",
      "8 * (3 / (13 / 13))",
      "(13 / (13 / 3)) * 8",
      "(13 * (3 / 13)) * 8",
      "((3 * 8) / 13) * 13",
      "(13 - (13 - 8)) * 3",
      "3 / (13 / (8 * 13))",
      "8 * ((13 + 3) - 13)",
      "8 * ((13 * 3) / 13)",
      "((8 - 13) + 13) * 3",
      "(8 * 13) * (3 / 13)",
      "13 / (13 / (3 * 8))",
      "(8 / (13 / 13)) * 3",
      "(8 / (13 / 3)) * 13",
      "13 + ((3 * 8) - 13)",
      "(3 * (8 * 13)) / 13",
      "((3 / 13) * 13) * 8",
      "(3 * 13) / (13 / 8)",
      "(8 * 3) - (13 - 13)",
      "(3 * 8) / (13 / 13)",
      "3 / (13 / (13 * 8))",
      "((3 + 13) - 13) * 8",
      "8 * (3 * (13 / 13))",
      "((13 - 13) + 8) * 3",
      "13 - (13 - (3 * 8))",
      "3 * (13 / (13 / 8))",
      "(13 * (8 / 13)) * 3",
      "13 * (8 / (13 / 3))",
      "8 * (13 + (3 - 13))",
      "((13 * 3) * 8) / 13",
      "3 * ((13 + 8) - 13)",
      "((13 * 3) / 13) * 8",
      "8 * (13 / (13 / 3))",
      "8 / ((13 / 13) / 3)",
      "((3 - 13) + 13) * 8",
      "(13 + (3 * 8)) - 13",
      "(13 * (3 * 8)) / 13",
      "8 / (13 / (3 * 13))",
      "8 / (13 / (13 * 3))",
      "8 * (13 * (3 / 13))",
      "8 * ((3 + 13) - 13)",
      "13 * (3 * (8 / 13))",
      "3 / ((13 / 13) / 8)",
      "13 * (8 * (3 / 13))",
      "(3 - (13 - 13)) * 8",
      "((3 * 13) * 8) / 13",
      "8 * (13 - (13 - 3))",
      "8 * ((13 / 13) * 3)",
      "(8 / 13) * (13 * 3)",
      "(13 + (8 - 13)) * 3",
      "(8 * (3 / 13)) * 13",
      "(3 * (13 * 8)) / 13",
      "13 * ((3 / 13) * 8)",
      "(13 / 13) * (8 * 3)",
      "(13 * (8 * 3)) / 13",
      "((8 / 13) * 13) * 3",
      "3 * (8 * (13 / 13))",
      "3 * ((13 / 13) * 8)",
      "(3 / 13) * (8 * 13)",
      "3 * ((8 * 13) / 13)",
      "(3 * 8) - (13 - 13)",
      "((8 + 13) - 13) * 3",
      "(3 / (13 / 8)) * 13",
      "3 * ((8 / 13) * 13)",
      "(3 * 8) * (13 / 13)",
      "(8 * (13 / 13)) * 3",
      "(3 + (13 - 13)) * 8",
      "(13 * 3) * (8 / 13)",
      "(3 * 13) * (8 / 13)",
      "((13 + 8) - 13) * 3",
      "(13 / (13 / 8)) * 3",
      "(13 + (3 - 13)) * 8",
      "((8 * 3) + 13) - 13",
      "((13 / 13) * 8) * 3",
      "3 * (8 / (13 / 13))",
      "3 * (13 + (8 - 13))",
      "(8 * 13) / (13 / 3)",
      "((3 * 8) * 13) / 13",
      "3 * ((13 * 8) / 13)",
      "8 * (3 + (13 - 13))",
      "(3 / 13) * (13 * 8)",
      "(8 / 13) * (3 * 13)",
      "((3 * 8) - 13) + 13",
      "(8 - (13 - 13)) * 3",
      "(8 * (13 * 3)) / 13",
      "((8 * 3) / 13) * 13",
      "(13 / 13) * (3 * 8)",
      "((13 + 3) - 13) * 8",
      "((8 * 3) - 13) + 13",
      "3 * (13 * (8 / 13))",
      "13 * ((8 / 13) * 3)",
      "13 / ((13 / 8) / 3)",
      "3 * ((13 - 13) + 8)",
      "(3 / (13 / 13)) * 8",
      "(13 * 3) / (13 / 8)",
      "((8 * 13) * 3) / 13",
      "8 * ((3 / 13) * 13)",
      "13 * ((3 * 8) / 13)",
      "((8 / 13) * 3) * 13",
      "(13 - (13 - 3)) * 8",
      "(13 * 8) / (13 / 3)",
      "((3 * 13) / 13) * 8",
      "(8 * 3) * (13 / 13)",
      "13 / ((13 / 3) / 8)",
      "((13 * 8) * 3) / 13",
      "((13 - 13) + 3) * 8",
      "((8 * 13) / 13) * 3",
      "8 / ((13 / 3) / 13)",
      "13 / (13 / (8 * 3))",
      "(8 * 3) / (13 / 13)",
      "(3 * (13 / 13)) * 8",
      "((3 * 8) + 13) - 13",
      "13 * (3 / (13 / 8))",
      "(13 + (8 * 3)) - 13",
      "3 * (8 + (13 - 13))",
      "((8 * 3) * 13) / 13",
      "3 * (13 - (13 - 8))",
      "3 * (8 - (13 - 13))",
      "13 * ((8 * 3) / 13)"
    ]
  },
  "3 9 9 9": {
    "cards": "3 9 9 9",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "9 + (9 - (3 - 9))",
      "(9 + (9 + 9)) - 3",
      "9 - ((3 - 9) - 9)",
      "(9 - 3) + (9 + 9)",
      "(9 - (9 / 9)) * 3",
      "((9 * 9) - 9) / 3",
      "((9 + 9) - 3) + 9",
      "9 + ((9 - 3) + 9)",
      "(9 - (3 - 9)) + 9",
      "(9 + (9 - 3)) + 9",
      "((9 - 3) + 9) + 9",
      "3 * (9 - (9 / 9))",
      "9 + (9 + (9 - 3))",
      "9 - (3 - (9 + 9))",
      "((9 + 9) + 9) - 3",
      "(9 + 9) + (9 - 3)",
      "(9 + 9) - (3 - 9)",
      "9 + ((9 + 9) - 3)"
    ]
  },
  "3 9 9 10": {
    "cards": "3 9 9 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((9 - 10) + 9) * 3",
      "((9 + 9) - 10) * 3",
      "3 * (9 + (9 - 10))",
      "3 * ((9 + 9) - 10)",
      "(9 - (10 - 9)) * 3",
      "3 * ((9 - 10) + 9)",
      "3 * (9 - (10 - 9))",
      "(9 + (9 - 10)) * 3"
    ]
  },
  "3 9 9 11": {
    "cards": "3 9 9 11",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(11 / (3 / 9)) - 9",
      "((11 / 3) * 9) - 9",
      "(9 * (11 / 3)) - 9",
      "(9 + 3) * (11 - 9)",
      "(11 - 9) * (9 + 3)",
      "(11 * (9 / 3)) - 9",
      "((9 / 3) * 11) - 9",
      "((11 * 9) / 3) - 9",
      "(9 / (3 / 11)) - 9",
      "(11 - 9) * (3 + 9)",
      "((9 * 11) / 3) - 9",
      "(3 + 9) * (11 - 9)"
    ]
  },
  "3 9 9 12": {
    "cards": "3 9 9 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "9 - (12 - (3 * 9))",
      "(3 - (9 / 9)) * 12",
      "(9 + (9 * 3)) - 12",
      "(9 - 12) + (3 * 9)",
      "9 + ((3 * 9) - 12)",
      "((9 * 3) - 12) + 9",
      "12 + ((9 / 3) + 9)",
      "(9 * 3) - (12 - 9)",
      "(12 + (9 / 3)) + 9",
      "9 + (12 + (9 / 3))",
      "(9 + (9 / 3)) + 12",
      "(9 * 3) + (9 - 12)",
      "((9 / 3) + 9) + 12",
      "(9 + (3 * 9)) - 12",
      "(9 / 3) + (9 + 12)",
      "(12 + 9) + (9 / 3)",
      "9 + ((9 / 3) + 12)",
      "(3 * 9) - (12 - 9)",
      "(9 / 3) + (12 + 9)",
      "(9 + 12) + (9 / 3)",
      "(3 * 9) + (9 - 12)",
      "((3 * 9) + 9) - 12",
      "((9 / 3) + 12) + 9",
      "((12 - 9) * 9) - 3",
      "((3 * 9) - 12) + 9",
      "(9 * (12 - 9)) - 3",
      "((9 * 3) + 9) - 12",
      "12 + (9 + (9 / 3))",
      "(9 - 12) + (9 * 3)",
      "12 * (3 - (9 / 9))",
      "9 - (12 - (9 * 3))",
      "9 + ((9 * 3) - 12)"
    ]
  },
  "3 9 9 13": {
    "cards": "3 9 9 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 9) * (9 - 3)",
      "(9 - 3) * (13 - 9)",
      "(3 - 9) * (9 - 13)",
      "(9 - 13) * (3 - 9)"
    ]
  },
  "3 9 10 10": {
    "cards": "3 9 10 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "3 * (9 - (10 / 10))",
      "(9 - (10 / 10)) * 3"
    ]
  },
  "3 9 10 11": {
    "cards": "3 9 10 11",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "3 * (9 + (10 - 11))",
      "((10 + 9) - 11) * 3",
      "(9 - (11 - 10)) * 3",
      "(10 + 11) + (9 / 3)",
      "3 * (10 + (9 - 11))",
      "(10 - (11 - 9)) * 3",
      "3 * ((9 + 10) - 11)",
      "(9 / 3) + (11 + 10)",
      "11 + ((9 / 3) + 10)",
      "10 + (11 + (9 / 3))",
      "(9 + (10 - 11)) * 3",
      "3 * ((10 + 9) - 11)",
      "(11 + (9 / 3)) + 10",
      "(11 + 10) + (9 / 3)",
      "11 + (10 + (9 / 3))",
      "3 * (9 - (11 - 10))",
      "(10 + (9 - 11)) * 3",
      "10 + ((9 / 3) + 11)",
      "(9 / 3) + (10 + 11)",
      "((9 / 3) + 11) + 10",
      "((10 - 11) + 9) * 3",
      "(10 + (9 / 3)) + 11",
      "3 * ((9 - 11) + 10)",
      "((9 / 3) + 10) + 11",
      "((9 - 11) + 10) * 3",
      "((9 + 10) - 11) * 3",
      "3 * ((10 - 11) + 9)",
      "3 * (10 - (11 - 9))"
    ]
  },
  "3 9 10 12": {
    "cards": "3 9 10 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "12 * (3 + (9 - 10))",
      "12 * ((3 - 10) + 9)",
      "(12 - 10) * (9 + 3)",
      "(9 + (3 - 10)) * 12",
      "(3 + 9) * (12 - 10)",
      "(3 + (9 - 10)) * 12",
      "12 * ((9 - 10) + 3)",
      "(3 - (10 - 9)) * 12",
      "12 * ((3 + 9) - 10)",
      "((3 + 9) - 10) * 12",
      "(12 - 10) * (3 + 9)",
      "12 * (9 + (3 - 10))",
      "(9 + 3) * (12 - 10)",
      "12 * (9 - (10 - 3))",
      "((9 + 3) - 10) * 12",
      "(9 - (10 - 3)) * 12",
      "12 * ((9 + 3) - 10)",
      "((9 - 10) + 3) * 12",
      "((3 - 10) + 9) * 12",
      "12 * (3 - (10 - 9))"
    ]
  },
  "3 9 10 13": {
    "cards": "3 9 10 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((3 * 9) + 10) - 13",
      "(3 * 9) - (13 - 10)",
      "(3 * 9) + (10 - 13)",
      "10 + ((3 * 9) - 13)",
      "(10 + (3 * 9)) - 13",
      "10 - (13 - (3 * 9))",
      "10 + ((9 * 3) - 13)",
      "(10 + (9 * 3)) - 13",
      "((9 * 3) - 13) + 10",
      "(9 * 3) - (13 - 10)",
      "(10 - 13) + (3 * 9)",
      "(10 - 13) + (9 * 3)",
      "((13 - 10) * 9) - 3",
      "((3 * 9) - 13) + 10",
      "(9 * 3) + (10 - 13)",
      "((9 * 3) + 10) - 13",
      "(9 * (13 - 10)) - 3",
      "10 - (13 - (9 * 3))"
    ]
  },
  "3 9 11 11": {
    "cards": "3 9 11 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(3 - (9 / 11)) * 11",
      "(9 - (11 / 11)) * 3",
      "3 * (9 - (11 / 11))",
      "11 * (3 - (9 / 11))"
    ]
  },
  "3 9 11 12": {
    "cards": "3 9 11 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "3 * ((11 - 12) + 9)",
      "(9 - 12) * (3 - 11)",
      "((11 - 12) + 9) * 3",
      "(9 + (12 / 3)) + 11",
      "(12 / 3) + (11 + 9)",
      "3 * (11 - (12 - 9))",
      "9 + (11 + (12 / 3))",
      "(11 + (9 - 12)) * 3",
      "(9 + (11 - 12)) * 3",
      "((9 - 12) + 11) * 3",
      "((11 + 9) - 12) * 3",
      "(11 + 9) + (12 / 3)",
      "(9 + 11) + (12 / 3)",
      "(12 - 9) * (11 - 3)",
      "11 + (9 + (12 / 3))",
      "(11 - (12 - 9)) * 3",
      "3 * (9 + (11 - 12))",
      "3 * ((9 - 12) + 11)",
      "(11 + (12 / 3)) + 9",
      "3 * ((11 + 9) - 12)",
      "((12 / 3) + 11) + 9",
      "3 * (11 + (9 - 12))",
      "(9 - (12 - 11)) * 3",
      "3 * (9 - (12 - 11))",
      "3 * ((9 + 11) - 12)",
      "((9 + 11) - 12) * 3",
      "11 + ((12 / 3) + 9)",
      "(12 / 3) + (9 + 11)",
      "((12 / 3) + 9) + 11",
      "9 + ((12 / 3) + 11)",
      "(11 - 3) * (12 - 9)",
      "(3 - 11) * (9 - 12)"
    ]
  },
  "3 9 11 13": {
    "cards": "3 9 11 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 11) * (9 + 3)",
      "(13 - 11) * (3 + 9)",
      "(9 + 3) * (13 - 11)",
      "(3 + 9) * (13 - 11)"
    ]
  },
  "3 9 12 12": {
    "cards": "3 9 12 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "((12 / 3) * 9) - 12",
      "(12 * 12) / (9 - 3)",
      "(9 - (12 / 12)) * 3",
      "(9 * (12 / 3)) - 12",
      "(12 / (9 - 3)) * 12",
      "3 * (9 - (12 / 12))",
      "(9 / (3 / 12)) - 12",
      "(12 / (3 / 9)) - 12",
      "((9 / 3) * 12) - 12",
      "((9 * 12) / 3) - 12",
      "12 * (12 / (9 - 3))",
      "((12 * 9) / 3) - 12",
      "12 / ((9 - 3) / 12)",
      "(12 * (9 / 3)) - 12"
    ]
  },
  "3 9 12 13": {
    "cards": "3 9 12 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "12 - (3 * (9 - 13))",
      "((9 - 13) + 12) * 3",
      "((12 - 13) + 9) * 3",
      "12 - ((9 - 13) * 3)",
      "(12 + (9 - 13)) * 3",
      "3 * ((12 + 9) - 13)",
      "3 * (12 - (13 - 9))",
      "((12 + 9) - 13) * 3",
      "3 * ((12 - 13) + 9)",
      "3 * (12 + (9 - 13))",
      "3 * ((9 - 13) + 12)",
      "(9 - (13 - 12)) * 3",
      "(3 * (13 - 9)) + 12",
      "(9 + (12 - 13)) * 3",
      "(12 - (13 - 9)) * 3",
      "3 * (9 + (12 - 13))",
      "((13 - 9) * 3) + 12",
      "3 * ((9 + 12) - 13)",
      "3 * (9 - (13 - 12))",
      "12 + (3 * (13 - 9))",
      "12 + ((13 - 9) * 3)",
      "((9 + 12) - 13) * 3"
    ]
  },
  "3 9 13 13": {
    "cards": "3 9 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(9 - (13 / 13)) * 3",
      "3 * (9 - (13 / 13))"
    ]
  },
  "3 10 10 10": {
    "cards": "3 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 10 11": {
    "cards": "3 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 10 12": {
    "cards": "3 10 10 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(12 / 3) + (10 + 10)",
      "((12 / 3) + 10) + 10",
      "(3 - (10 / 10)) * 12",
      "3 * (10 - (12 - 10))",
      "(10 + (10 - 12)) * 3",
      "3 * (10 + (10 - 12))",
      "10 + ((12 / 3) + 10)",
      "3 * ((10 - 12) + 10)",
      "((10 - 12) + 10) * 3",
      "(10 + (12 / 3)) + 10",
      "3 * ((10 + 10) - 12)",
      "10 + (10 + (12 / 3))",
      "(10 - (12 - 10)) * 3",
      "(10 + 10) + (12 / 3)",
      "((10 + 10) - 12) * 3",
      "12 * (3 - (10 / 10))"
    ]
  },
  "3 10 10 13": {
    "cards": "3 10 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 11 11": {
    "cards": "3 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 11 12": {
    "cards": "3 10 11 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((3 - 11) + 10) * 12",
      "12 * (10 + (3 - 11))",
      "((3 + 10) - 11) * 12",
      "(3 + (10 - 11)) * 12",
      "((10 + 3) - 11) * 12",
      "12 * ((10 + 3) - 11)",
      "12 * ((10 - 11) + 3)",
      "(10 + (3 - 11)) * 12",
      "12 * (10 - (11 - 3))",
      "(3 - (11 - 10)) * 12",
      "12 * (3 - (11 - 10))",
      "12 * ((3 - 11) + 10)",
      "((10 - 11) + 3) * 12",
      "12 * ((3 + 10) - 11)",
      "(10 - (11 - 3)) * 12",
      "12 * (3 + (10 - 11))"
    ]
  },
  "3 10 11 13": {
    "cards": "3 10 11 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "3 * (10 - (13 - 11))",
      "((10 - 13) + 11) * 3",
      "3 * (11 - (13 - 10))",
      "(11 - (13 - 10)) * 3",
      "(3 - 11) * (10 - 13)",
      "3 * ((11 - 13) + 10)",
      "(10 + (11 - 13)) * 3",
      "((10 + 11) - 13) * 3",
      "3 * ((10 - 13) + 11)",
      "3 * (10 + (11 - 13))",
      "((11 + 10) - 13) * 3",
      "((11 - 13) + 10) * 3",
      "3 * ((10 + 11) - 13)",
      "3 * ((11 + 10) - 13)",
      "3 * (11 + (10 - 13))",
      "(11 - 3) * (13 - 10)",
      "(10 - (13 - 11)) * 3",
      "(10 - 13) * (3 - 11)",
      "(13 - 10) * (11 - 3)",
      "(11 + (10 - 13)) * 3"
    ]
  },
  "3 10 12 12": {
    "cards": "3 10 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 12 13": {
    "cards": "3 10 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 10 13 13": {
    "cards": "3 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 11 11 11": {
    "cards": "3 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 11 11 12": {
    "cards": "3 11 11 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "12 * (3 - (11 / 11))",
      "(3 - (11 / 11)) * 12"
    ]
  },
  "3 11 11 13": {
    "cards": "3 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 11 12 12": {
    "cards": "3 11 12 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * (3 - (12 - 11))",
      "(11 + (3 - 12)) * 12",
      "12 * (11 - (12 - 3))",
      "12 * ((11 - 12) + 3)",
      "((11 + 3) - 12) * 12",
      "(3 + (11 - 12)) * 12",
      "12 * ((11 + 3) - 12)",
      "((3 - 12) + 11) * 12",
      "(3 - (12 - 11)) * 12",
      "((11 - 12) + 3) * 12",
      "12 * (3 + (11 - 12))",
      "12 * (11 + (3 - 12))",
      "(11 - (12 - 3)) * 12",
      "12 * ((3 + 11) - 12)",
      "((3 + 11) - 12) * 12",
      "12 * ((3 - 12) + 11)"
    ]
  },
  "3 11 12 13": {
    "cards": "3 11 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 11 13 13": {
    "cards": "3 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "3 12 12 12": {
    "cards": "3 12 12 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "12 * (3 - (12 / 12))",
      "(3 - (12 / 12)) * 12"
    ]
  },
  "3 12 12 13": {
    "cards": "3 12 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * (12 + (3 - 13))",
      "(3 + (12 - 13)) * 12",
      "(12 - (13 - 3)) * 12",
      "((12 + 3) - 13) * 12",
      "(12 + (3 - 13)) * 12",
      "12 * ((12 + 3) - 13)",
      "12 * (3 - (13 - 12))",
      "12 * ((12 - 13) + 3)",
      "12 * (3 + (12 - 13))",
      "(3 - (13 - 12)) * 12",
      "12 * ((3 - 13) + 12)",
      "((3 - 13) + 12) * 12",
      "((12 - 13) + 3) * 12",
      "((3 + 12) - 13) * 12",
      "12 * (12 - (13 - 3))",
      "12 * ((3 + 12) - 13)"
    ]
  },
  "3 12 13 13": {
    "cards": "3 12 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "12 * (3 - (13 / 13))",
      "(3 - (13 / 13)) * 12"
    ]
  },
  "3 13 13 13": {
    "cards": "3 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 4 4": {
    "cards": "4 4 4 4",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((4 * 4) + 4) + 4",
      "(4 + (4 * 4)) + 4",
      "(4 + 4) + (4 * 4)",
      "4 + (4 + (4 * 4))",
      "(4 * 4) + (4 + 4)",
      "4 + ((4 * 4) + 4)"
    ]
  },
  "4 4 4 5": {
    "cards": "4 4 4 5",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((4 / 4) + 5) * 4",
      "(5 + (4 / 4)) * 4",
      "4 * (5 + (4 / 4))",
      "4 * ((4 / 4) + 5)"
    ]
  },
  "4 4 4 6": {
    "cards": "4 4 4 6",
    "has_solution": "Y",
    "num_solutions": 85,
    "solutions": [
      "(4 / 4) * (4 * 6)",
      "4 * ((4 * 6) / 4)",
      "(4 * 4) * (6 / 4)",
      "4 / ((4 / 4) / 6)",
      "4 / (4 / (4 * 6))",
      "6 / (4 / (4 * 4))",
      "(4 * 4) / (4 / 6)",
      "(6 * 4) + (4 - 4)",
      "(4 * 6) / (4 / 4)",
      "((4 * 4) / 4) * 6",
      "(6 * 4) - (4 - 4)",
      "4 / (4 / (6 * 4))",
      "((4 * 4) * 6) / 4",
      "(4 + (4 * 6)) - 4",
      "((4 * 6) - 4) + 4",
      "((4 * 6) / 4) * 4",
      "((6 * 4) - 4) + 4",
      "(4 * 6) * (4 / 4)",
      "((4 + 4) - 4) * 6",
      "(6 * 4) * (4 / 4)",
      "(4 - 4) + (4 * 6)",
      "6 * (4 * (4 / 4))",
      "((4 - 4) + 4) * 6",
      "4 * ((6 * 4) / 4)",
      "(6 * 4) / (4 / 4)",
      "6 * ((4 * 4) / 4)",
      "6 * (4 - (4 - 4))",
      "4 * (4 - (4 - 6))",
      "((6 * 4) / 4) * 4",
      "6 * ((4 / 4) * 4)",
      "(4 * (4 * 6)) / 4",
      "(4 / (4 / 6)) * 4",
      "(6 - (4 - 4)) * 4",
      "4 / ((4 / 6) / 4)",
      "(4 / 4) * (6 * 4)",
      "(6 * (4 / 4)) * 4",
      "(4 + (6 - 4)) * 4",
      "((4 + 6) - 4) * 4",
      "6 * ((4 - 4) + 4)",
      "((6 / 4) * 4) * 4",
      "4 + ((6 * 4) - 4)",
      "6 * (4 / (4 / 4))",
      "4 * (4 / (4 / 6))",
      "((4 / 4) * 6) * 4",
      "4 * ((4 / 4) * 6)",
      "4 * ((6 - 4) + 4)",
      "(6 + (4 - 4)) * 4",
      "(4 + (4 - 4)) * 6",
      "((6 + 4) - 4) * 4",
      "4 * ((4 - 4) + 6)",
      "((6 - 4) + 4) * 4",
      "(4 - (4 - 4)) * 6",
      "(6 * (4 * 4)) / 4",
      "4 - (4 - (4 * 6))",
      "(4 * 6) - (4 - 4)",
      "((4 - 4) + 6) * 4",
      "((6 * 4) * 4) / 4",
      "(4 - (4 - 6)) * 4",
      "6 / ((4 / 4) / 4)",
      "6 * (4 + (4 - 4))",
      "4 - (4 - (6 * 4))",
      "(4 + (6 * 4)) - 4",
      "6 * ((4 + 4) - 4)",
      "4 * (4 + (6 - 4))",
      "(4 * 6) + (4 - 4)",
      "4 * ((4 + 6) - 4)",
      "4 * ((6 + 4) - 4)",
      "4 * (4 * (6 / 4))",
      "((4 * 6) + 4) - 4",
      "4 * (6 / (4 / 4))",
      "((4 / 4) * 4) * 6",
      "(4 - 4) + (6 * 4)",
      "4 * (6 + (4 - 4))",
      "(4 * (4 / 4)) * 6",
      "4 * (6 * (4 / 4))",
      "(4 / (4 / 4)) * 6",
      "4 * (6 - (4 - 4))",
      "(6 / (4 / 4)) * 4",
      "4 * ((6 / 4) * 4)",
      "(4 * (6 / 4)) * 4",
      "(6 / 4) * (4 * 4)",
      "((6 * 4) + 4) - 4",
      "(4 * (6 * 4)) / 4",
      "4 + ((4 * 6) - 4)",
      "((4 * 6) * 4) / 4"
    ]
  },
  "4 4 4 7": {
    "cards": "4 4 4 7",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "4 * (7 - (4 / 4))",
      "(4 + 4) * (7 - 4)",
      "(7 - (4 / 4)) * 4",
      "(7 - 4) * (4 + 4)"
    ]
  },
  "4 4 4 8": {
    "cards": "4 4 4 8",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(4 * (4 + 4)) - 8",
      "((8 / 4) + 4) * 4",
      "4 * ((8 / 4) + 4)",
      "((4 * 8) - 4) - 4",
      "((8 * 4) - 4) - 4",
      "((4 + 4) * 4) - 8",
      "(4 + (8 / 4)) * 4",
      "(8 * 4) - (4 + 4)",
      "(4 * 8) - (4 + 4)",
      "8 * (4 - (4 / 4))",
      "4 * (4 + (8 / 4))",
      "(4 - (4 / 4)) * 8"
    ]
  },
  "4 4 4 9": {
    "cards": "4 4 4 9",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((9 - 4) * 4) + 4",
      "4 + ((9 - 4) * 4)",
      "4 - ((4 - 9) * 4)",
      "4 + (4 * (9 - 4))",
      "4 - (4 * (4 - 9))",
      "(4 * (9 - 4)) + 4"
    ]
  },
  "4 4 4 10": {
    "cards": "4 4 4 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(10 * 4) - (4 * 4)",
      "((4 * 4) - 10) * 4",
      "(4 * 10) - (4 * 4)",
      "4 * ((4 * 4) - 10)"
    ]
  },
  "4 4 4 11": {
    "cards": "4 4 4 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(4 * (11 - 4)) - 4",
      "((11 - 4) * 4) - 4"
    ]
  },
  "4 4 4 12": {
    "cards": "4 4 4 12",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(4 + 4) / (4 / 12)",
      "(4 + (4 + 4)) + 12",
      "((4 * 4) - 4) + 12",
      "(4 + (12 + 4)) + 4",
      "((4 * 4) + 12) - 4",
      "((12 + 4) + 4) + 4",
      "(12 + 4) + (4 + 4)",
      "12 * ((4 + 4) / 4)",
      "4 + (4 + (4 + 12))",
      "(12 + (4 + 4)) + 4",
      "((4 + 4) * 12) / 4",
      "(4 + 4) + (12 + 4)",
      "4 + (12 + (4 + 4))",
      "(4 * 4) + (12 - 4)",
      "12 / (4 / (4 + 4))",
      "((4 + 4) / 4) * 12",
      "4 + ((4 + 4) + 12)",
      "12 + ((4 * 4) - 4)",
      "(12 / 4) * (4 + 4)",
      "(12 - 4) + (4 * 4)",
      "((4 + 4) + 12) + 4",
      "(4 + 12) + (4 + 4)",
      "4 + ((4 + 12) + 4)",
      "(4 * 4) - (4 - 12)",
      "(4 + (4 + 12)) + 4",
      "12 + (4 + (4 + 4))",
      "(4 + 4) + (4 + 12)",
      "12 - (4 - (4 * 4))",
      "4 + ((12 + 4) + 4)",
      "(4 + 4) * (12 / 4)",
      "(12 * (4 + 4)) / 4",
      "4 + (4 + (12 + 4))",
      "12 + ((4 + 4) + 4)",
      "(12 + (4 * 4)) - 4",
      "((4 + 12) + 4) + 4",
      "((4 + 4) + 4) + 12"
    ]
  },
  "4 4 4 13": {
    "cards": "4 4 4 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 5 5": {
    "cards": "4 4 5 5",
    "has_solution": "Y",
    "num_solutions": 13,
    "solutions": [
      "4 * ((5 - 4) + 5)",
      "(5 - (4 - 5)) * 4",
      "4 * (5 + (5 - 4))",
      "((4 / 5) + 4) * 5",
      "(5 + (5 - 4)) * 4",
      "4 * (5 - (4 - 5))",
      "(4 + (4 / 5)) * 5",
      "4 * ((5 + 5) - 4)",
      "((5 - 4) + 5) * 4",
      "5 * ((4 / 5) + 4)",
      "5 * (4 + (4 / 5))",
      "((5 + 5) - 4) * 4",
      "(5 * 5) - (4 / 4)"
    ]
  },
  "4 4 5 6": {
    "cards": "4 4 5 6",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((5 - 4) * 4) * 6",
      "6 / ((5 - 4) / 4)",
      "4 / ((5 - 4) / 6)",
      "(6 / (5 - 4)) * 4",
      "(4 * 6) / (5 - 4)",
      "4 * ((5 - 4) * 6)",
      "(6 * (5 - 4)) * 4",
      "6 * (4 * (5 - 4))",
      "6 * ((5 - 4) * 4)",
      "(5 - 4) * (6 * 4)",
      "6 * (4 / (5 - 4))",
      "(6 * 4) * (5 - 4)",
      "4 * (6 * (5 - 4))",
      "6 * (5 - (4 / 4))",
      "4 * (6 / (5 - 4))",
      "(5 - (4 / 4)) * 6",
      "((5 - 4) * 6) * 4",
      "(4 * (5 - 4)) * 6",
      "(6 * 4) / (5 - 4)",
      "(5 - 4) * (4 * 6)",
      "(4 / (5 - 4)) * 6",
      "(4 * 6) * (5 - 4)"
    ]
  },
  "4 4 5 7": {
    "cards": "4 4 5 7",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((7 - 5) + 4) * 4",
      "(7 - (5 - 4)) * 4",
      "4 * ((4 - 5) + 7)",
      "4 * ((7 + 4) - 5)",
      "((4 + 7) - 5) * 4",
      "(7 + (4 - 5)) * 4",
      "4 * ((7 - 5) + 4)",
      "(4 + (7 - 5)) * 4",
      "((7 + 4) - 5) * 4",
      "4 * (4 - (5 - 7))",
      "4 * ((4 + 7) - 5)",
      "4 * (7 - (5 - 4))",
      "(4 - (5 - 7)) * 4",
      "4 * (7 + (4 - 5))",
      "((4 - 5) + 7) * 4",
      "4 * (4 + (7 - 5))"
    ]
  },
  "4 4 5 8": {
    "cards": "4 4 5 8",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "(8 + (5 * 4)) - 4",
      "8 + ((4 * 5) - 4)",
      "(8 - 4) + (4 * 5)",
      "4 - ((4 - 8) * 5)",
      "8 * (4 + (4 - 5))",
      "(4 - (5 - 4)) * 8",
      "(5 * (8 - 4)) + 4",
      "((4 - 5) + 4) * 8",
      "((8 - 4) * 5) + 4",
      "(5 * 4) + (8 - 4)",
      "(4 + (4 - 5)) * 8",
      "8 + ((5 * 4) - 4)",
      "(4 * 5) + (8 - 4)",
      "(4 * 5) - (4 - 8)",
      "(8 - 4) + (5 * 4)",
      "4 - (5 * (4 - 8))",
      "((4 * 5) + 8) - 4",
      "(5 * 4) - (4 - 8)",
      "((4 * 5) - 4) + 8",
      "8 - (4 - (5 * 4))",
      "(8 - 5) * (4 + 4)",
      "4 + ((8 - 4) * 5)",
      "8 * (4 - (5 - 4))",
      "(8 + (4 * 5)) - 4",
      "(8 * 5) - (4 * 4)",
      "4 + (5 * (8 - 4))",
      "((5 * 4) - 4) + 8",
      "8 - (4 - (4 * 5))",
      "(4 + 4) * (8 - 5)",
      "(5 * 8) - (4 * 4)",
      "((5 * 4) + 8) - 4",
      "((4 + 4) - 5) * 8",
      "8 * ((4 - 5) + 4)",
      "8 * ((4 + 4) - 5)"
    ]
  },
  "4 4 5 9": {
    "cards": "4 4 5 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 5 10": {
    "cards": "4 4 5 10",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((10 / 5) + 4) * 4",
      "4 + ((10 - 5) * 4)",
      "(4 + (10 / 5)) * 4",
      "((10 - 5) * 4) + 4",
      "4 * ((10 / 5) + 4)",
      "4 + (4 * (10 - 5))",
      "4 - ((5 - 10) * 4)",
      "4 - (4 * (5 - 10))",
      "4 * (4 + (10 / 5))",
      "(4 * (10 - 5)) + 4"
    ]
  },
  "4 4 5 11": {
    "cards": "4 4 5 11",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "(4 + 5) + (4 + 11)",
      "4 + (5 + (4 + 11))",
      "(11 + (5 + 4)) + 4",
      "((4 + 11) + 5) + 4",
      "((5 + 4) + 4) + 11",
      "(4 + 4) + (5 + 11)",
      "((11 + 4) + 4) + 5",
      "(11 + (4 + 5)) + 4",
      "((4 + 11) + 4) + 5",
      "(5 + (11 + 4)) + 4",
      "4 + ((5 + 4) + 11)",
      "(11 + 4) + (4 + 5)",
      "4 + ((5 + 11) + 4)",
      "11 + ((5 + 4) + 4)",
      "4 + ((4 + 5) + 11)",
      "11 + (5 + (4 + 4))",
      "(11 * 4) - (4 * 5)",
      "(11 + (4 + 4)) + 5",
      "((4 + 5) + 4) + 11",
      "(4 + (11 + 5)) + 4",
      "5 + (11 + (4 + 4))",
      "(4 + 11) + (5 + 4)",
      "(4 + (5 + 11)) + 4",
      "4 + (4 + (11 + 5))",
      "(5 + 11) + (4 + 4)",
      "(11 + 4) + (5 + 4)",
      "11 + (4 + (5 + 4))",
      "(4 + (11 + 4)) + 5",
      "(4 + 11) + (4 + 5)",
      "5 + ((4 + 11) + 4)",
      "(4 + 5) + (11 + 4)",
      "(5 + (4 + 11)) + 4",
      "((4 + 4) + 11) + 5",
      "5 + ((4 + 4) + 11)",
      "((5 + 11) + 4) + 4",
      "(4 * 11) - (5 * 4)",
      "4 + (11 + (5 + 4))",
      "((4 + 5) + 11) + 4",
      "5 + (4 + (4 + 11))",
      "(11 * 4) - (5 * 4)",
      "11 + ((4 + 5) + 4)",
      "5 + ((11 + 4) + 4)",
      "(4 + (4 + 5)) + 11",
      "((4 + 4) + 5) + 11",
      "(5 + (4 + 4)) + 11",
      "4 + (11 + (4 + 5))",
      "11 + (4 + (4 + 5))",
      "(5 + 4) + (4 + 11)",
      "((5 + 4) + 11) + 4",
      "4 + (5 + (11 + 4))",
      "(4 * 11) - (4 * 5)",
      "((11 + 5) + 4) + 4",
      "(4 + (4 + 11)) + 5",
      "(4 + 4) + (11 + 5)",
      "((11 + 4) + 5) + 4",
      "4 + ((11 + 4) + 5)",
      "11 + ((4 + 4) + 5)",
      "(5 + 4) + (11 + 4)",
      "4 + ((4 + 11) + 5)",
      "(11 + 5) + (4 + 4)",
      "4 + ((11 + 5) + 4)",
      "(4 + (5 + 4)) + 11",
      "4 + (4 + (5 + 11))",
      "5 + (4 + (11 + 4))"
    ]
  },
  "4 4 5 12": {
    "cards": "4 4 5 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((5 + 4) * 4) - 12",
      "((12 - 5) * 4) - 4",
      "(4 * (4 + 5)) - 12",
      "(4 * (5 + 4)) - 12",
      "(4 * (12 - 5)) - 4",
      "((4 + 5) * 4) - 12"
    ]
  },
  "4 4 5 13": {
    "cards": "4 4 5 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(4 * 4) - (5 - 13)",
      "(13 - 5) + (4 * 4)",
      "13 + ((4 * 4) - 5)",
      "13 - (5 - (4 * 4))",
      "((4 * 4) + 13) - 5",
      "((4 * 4) - 5) + 13",
      "(4 * 4) + (13 - 5)",
      "(13 + (4 * 4)) - 5"
    ]
  },
  "4 4 6 6": {
    "cards": "4 4 6 6",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 6 7": {
    "cards": "4 4 6 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 6 8": {
    "cards": "4 4 6 8",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(6 - 4) * (8 + 4)",
      "(4 + (8 - 6)) * 4",
      "(4 - (6 - 8)) * 4",
      "(4 + 8) * (6 - 4)",
      "4 * ((8 + 4) - 6)",
      "(8 + 4) * (6 - 4)",
      "((8 - 6) + 4) * 4",
      "4 * ((4 + 8) - 6)",
      "4 * ((4 - 6) + 8)",
      "(6 - 4) * (4 + 8)",
      "(8 + (4 - 6)) * 4",
      "4 * (4 - (6 - 8))",
      "4 * ((8 - 6) + 4)",
      "(8 - (6 - 4)) * 4",
      "4 * (8 - (6 - 4))",
      "((8 + 4) - 6) * 4",
      "((4 - 6) + 8) * 4",
      "4 * (4 + (8 - 6))",
      "((4 + 8) - 6) * 4",
      "4 * (8 + (4 - 6))"
    ]
  },
  "4 4 6 9": {
    "cards": "4 4 6 9",
    "has_solution": "Y",
    "num_solutions": 47,
    "solutions": [
      "(9 * 4) / (6 / 4)",
      "(4 * (4 * 9)) / 6",
      "4 * ((4 * 9) / 6)",
      "4 * (4 * (9 / 6))",
      "((4 / 6) * 9) * 4",
      "(4 + 4) * (9 - 6)",
      "(4 * 9) / (6 / 4)",
      "(4 * 4) * (9 / 6)",
      "(4 / (6 / 4)) * 9",
      "4 / (6 / (9 * 4))",
      "4 * ((9 * 4) / 6)",
      "((4 * 9) / 6) * 4",
      "(9 / (6 / 4)) * 4",
      "4 * (9 * (4 / 6))",
      "(9 * 4) * (4 / 6)",
      "9 * ((4 / 6) * 4)",
      "(4 / (6 / 9)) * 4",
      "((9 * 4) / 6) * 4",
      "9 / ((6 / 4) / 4)",
      "(4 / 6) * (9 * 4)",
      "4 * (9 / (6 / 4))",
      "(4 * (9 * 4)) / 6",
      "9 * ((4 * 4) / 6)",
      "(9 / 6) * (4 * 4)",
      "((4 * 4) * 9) / 6",
      "4 / (6 / (4 * 9))",
      "4 * (4 / (6 / 9))",
      "9 * (4 / (6 / 4))",
      "(4 / 6) * (4 * 9)",
      "(9 * (4 / 6)) * 4",
      "4 * ((4 / 6) * 9)",
      "((9 / 6) * 4) * 4",
      "((9 * 4) * 4) / 6",
      "4 / ((6 / 9) / 4)",
      "(4 * 4) / (6 / 9)",
      "((4 / 6) * 4) * 9",
      "4 / ((6 / 4) / 9)",
      "(4 * (4 / 6)) * 9",
      "4 * ((9 / 6) * 4)",
      "9 * (4 * (4 / 6))",
      "((4 * 4) / 6) * 9",
      "(9 - 6) * (4 + 4)",
      "9 / (6 / (4 * 4))",
      "((4 * 9) * 4) / 6",
      "(9 * (4 * 4)) / 6",
      "(4 * (9 / 6)) * 4",
      "(4 * 9) * (4 / 6)"
    ]
  },
  "4 4 6 10": {
    "cards": "4 4 6 10",
    "has_solution": "Y",
    "num_solutions": 66,
    "solutions": [
      "(10 * (6 - 4)) + 4",
      "(10 + (6 + 4)) + 4",
      "4 + (10 + (4 + 6))",
      "4 + ((4 + 10) + 6)",
      "(4 + (6 + 10)) + 4",
      "10 + ((4 + 4) + 6)",
      "4 + ((10 + 6) + 4)",
      "(10 + 4) + (4 + 6)",
      "((6 - 4) * 10) + 4",
      "((4 + 4) + 6) + 10",
      "(6 + (4 + 10)) + 4",
      "((4 + 10) + 4) + 6",
      "4 + (4 + (10 + 6))",
      "(10 + (4 + 6)) + 4",
      "((10 + 4) + 4) + 6",
      "6 + (4 + (4 + 10))",
      "((4 + 6) + 10) + 4",
      "(4 + 6) + (4 + 10)",
      "((4 + 10) + 6) + 4",
      "(6 + 10) + (4 + 4)",
      "6 + ((4 + 4) + 10)",
      "(4 + (10 + 6)) + 4",
      "(6 + (10 + 4)) + 4",
      "(4 + 4) + (6 + 10)",
      "(10 + (4 + 4)) + 6",
      "(10 + 4) + (6 + 4)",
      "(4 + 10) + (6 + 4)",
      "4 + (10 * (6 - 4))",
      "(4 + 10) + (4 + 6)",
      "6 + (4 + (10 + 4))",
      "((6 + 10) + 4) + 4",
      "((4 + 4) + 10) + 6",
      "(6 + 4) + (10 + 4)",
      "4 + (6 + (4 + 10))",
      "4 + (4 + (6 + 10))",
      "(4 + (10 + 4)) + 6",
      "((6 + 4) + 10) + 4",
      "(4 + 6) + (10 + 4)",
      "4 + (10 + (6 + 4))",
      "10 + ((6 + 4) + 4)",
      "6 + ((10 + 4) + 4)",
      "((6 + 4) + 4) + 10",
      "4 - (10 * (4 - 6))",
      "4 - ((4 - 6) * 10)",
      "10 + (6 + (4 + 4))",
      "10 + ((4 + 6) + 4)",
      "(4 + 4) + (10 + 6)",
      "(4 + (6 + 4)) + 10",
      "((4 + 6) + 4) + 10",
      "(6 + 4) + (4 + 10)",
      "(6 + (4 + 4)) + 10",
      "4 + ((10 + 4) + 6)",
      "6 + (10 + (4 + 4))",
      "(4 + (4 + 10)) + 6",
      "6 + ((4 + 10) + 4)",
      "((10 + 6) + 4) + 4",
      "4 + ((6 + 10) + 4)",
      "4 + ((6 + 4) + 10)",
      "10 + (4 + (4 + 6))",
      "(10 + 6) + (4 + 4)",
      "4 + ((4 + 6) + 10)",
      "((10 + 4) + 6) + 4",
      "10 + (4 + (6 + 4))",
      "4 + ((6 - 4) * 10)",
      "4 + (6 + (10 + 4))",
      "(4 + (4 + 6)) + 10"
    ]
  },
  "4 4 6 11": {
    "cards": "4 4 6 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((11 - 6) * 4) + 4",
      "4 - ((6 - 11) * 4)",
      "4 + ((11 - 6) * 4)",
      "4 + (4 * (11 - 6))",
      "4 - (4 * (6 - 11))",
      "(4 * (11 - 6)) + 4"
    ]
  },
  "4 4 6 12": {
    "cards": "4 4 6 12",
    "has_solution": "Y",
    "num_solutions": 46,
    "solutions": [
      "(12 - (4 + 4)) * 6",
      "(4 * 12) - (6 * 4)",
      "12 * ((4 + 4) - 6)",
      "6 * ((12 + 4) / 4)",
      "(12 / (6 - 4)) * 4",
      "6 * ((12 - 4) - 4)",
      "12 * (4 - (6 - 4))",
      "4 * ((12 / 6) + 4)",
      "(4 + 12) / (4 / 6)",
      "12 * ((4 - 6) + 4)",
      "(4 * 12) - (4 * 6)",
      "(12 * 4) / (6 - 4)",
      "((12 + 4) * 6) / 4",
      "4 * (12 / (6 - 4))",
      "4 * (4 + (12 / 6))",
      "12 / ((6 - 4) / 4)",
      "(4 + 12) * (6 / 4)",
      "(12 + 4) * (6 / 4)",
      "(6 * (4 + 12)) / 4",
      "6 / (4 / (4 + 12))",
      "(12 + 4) / (4 / 6)",
      "((4 + 4) - 6) * 12",
      "(4 + (12 / 6)) * 4",
      "(12 * 4) - (6 * 4)",
      "((12 - 4) - 4) * 6",
      "12 * (4 / (6 - 4))",
      "((4 - 6) + 4) * 12",
      "(6 * (12 + 4)) / 4",
      "12 * (4 + (4 - 6))",
      "((4 * 4) - 12) * 6",
      "((4 + 12) / 4) * 6",
      "(4 / (6 - 4)) * 12",
      "(4 + (4 - 6)) * 12",
      "6 / (4 / (12 + 4))",
      "6 * ((4 + 12) / 4)",
      "(6 / 4) * (12 + 4)",
      "6 * (12 - (4 + 4))",
      "(4 - (6 - 4)) * 12",
      "(4 * 12) / (6 - 4)",
      "(6 / 4) * (4 + 12)",
      "6 * ((4 * 4) - 12)",
      "((12 / 6) + 4) * 4",
      "4 / ((6 - 4) / 12)",
      "(12 * 4) - (4 * 6)",
      "((4 + 12) * 6) / 4",
      "((12 + 4) / 4) * 6"
    ]
  },
  "4 4 6 13": {
    "cards": "4 4 6 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(4 * (13 - 6)) - 4",
      "((13 - 6) * 4) - 4"
    ]
  },
  "4 4 7 7": {
    "cards": "4 4 7 7",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "7 * (4 - (4 / 7))",
      "(4 - (4 / 7)) * 7"
    ]
  },
  "4 4 7 8": {
    "cards": "4 4 7 8",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "4 + ((7 * 4) - 8)",
      "((8 - 4) * 7) - 4",
      "((4 * 7) - 8) + 4",
      "(4 * 7) + (4 - 8)",
      "(4 + (7 * 4)) - 8",
      "(4 - 8) + (7 * 4)",
      "(7 * (8 - 4)) - 4",
      "(7 * 4) + (4 - 8)",
      "4 + ((4 * 7) - 8)",
      "(4 * 7) - (8 - 4)",
      "((7 * 4) + 4) - 8",
      "4 - (8 - (7 * 4))",
      "((7 * 4) - 8) + 4",
      "(4 + (4 * 7)) - 8",
      "(7 * 4) - (8 - 4)",
      "((4 * 7) + 4) - 8",
      "4 - (8 - (4 * 7))",
      "(4 - 8) + (4 * 7)"
    ]
  },
  "4 4 7 9": {
    "cards": "4 4 7 9",
    "has_solution": "Y",
    "num_solutions": 76,
    "solutions": [
      "4 + (9 + (7 + 4))",
      "(9 + (4 + 4)) + 7",
      "(4 + (7 + 9)) + 4",
      "4 * (9 - (7 - 4))",
      "4 * (4 - (7 - 9))",
      "((4 + 4) + 9) + 7",
      "((4 + 7) + 4) + 9",
      "(4 + 7) + (9 + 4)",
      "4 + (7 + (9 + 4))",
      "(4 - (7 - 9)) * 4",
      "((4 - 7) + 9) * 4",
      "(7 + 4) + (4 + 9)",
      "4 + ((9 + 4) + 7)",
      "4 + ((7 + 9) + 4)",
      "7 + (9 + (4 + 4))",
      "9 + ((4 + 4) + 7)",
      "7 + ((4 + 9) + 4)",
      "((9 + 4) - 7) * 4",
      "((4 + 9) + 4) + 7",
      "((7 + 4) + 4) + 9",
      "7 + ((4 + 4) + 9)",
      "4 + (9 + (4 + 7))",
      "(9 + (4 - 7)) * 4",
      "9 + ((7 + 4) + 4)",
      "(4 + (4 + 9)) + 7",
      "(4 + (7 + 4)) + 9",
      "(7 + (4 + 4)) + 9",
      "4 + ((7 + 4) + 9)",
      "(4 + 9) + (7 + 4)",
      "9 + (4 + (4 + 7))",
      "4 + ((4 + 9) + 7)",
      "((9 - 7) + 4) * 4",
      "(4 + (4 + 7)) + 9",
      "7 + (4 + (9 + 4))",
      "(9 + 4) + (7 + 4)",
      "(4 + 4) + (7 + 9)",
      "(4 + (9 - 7)) * 4",
      "7 + ((9 + 4) + 4)",
      "9 + (7 + (4 + 4))",
      "(9 + 7) + (4 + 4)",
      "4 * ((4 - 7) + 9)",
      "(7 + (4 + 9)) + 4",
      "(4 + (9 + 7)) + 4",
      "(4 + 7) + (4 + 9)",
      "(4 + (9 + 4)) + 7",
      "4 + ((9 + 7) + 4)",
      "(4 + 9) + (4 + 7)",
      "(9 + (4 + 7)) + 4",
      "9 + ((4 + 7) + 4)",
      "9 + (4 + (7 + 4))",
      "(7 + 4) + (9 + 4)",
      "7 + (4 + (4 + 9))",
      "4 * ((4 + 9) - 7)",
      "(7 + 9) + (4 + 4)",
      "((7 + 4) + 9) + 4",
      "((4 + 4) + 7) + 9",
      "((9 + 7) + 4) + 4",
      "(9 - (7 - 4)) * 4",
      "4 + ((4 + 7) + 9)",
      "4 * ((9 - 7) + 4)",
      "4 * (9 + (4 - 7))",
      "(7 + (9 + 4)) + 4",
      "((9 + 4) + 4) + 7",
      "((4 + 9) - 7) * 4",
      "4 * ((9 + 4) - 7)",
      "4 + (4 + (7 + 9))",
      "((9 + 4) + 7) + 4",
      "((7 + 9) + 4) + 4",
      "(9 + 4) + (4 + 7)",
      "4 * (4 + (9 - 7))",
      "((4 + 9) + 7) + 4",
      "((4 + 7) + 9) + 4",
      "4 + (7 + (4 + 9))",
      "4 + (4 + (9 + 7))",
      "(9 + (7 + 4)) + 4",
      "(4 + 4) + (9 + 7)"
    ]
  },
  "4 4 7 10": {
    "cards": "4 4 7 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(10 - 7) * (4 + 4)",
      "(4 + 4) * (10 - 7)"
    ]
  },
  "4 4 7 11": {
    "cards": "4 4 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 7 12": {
    "cards": "4 4 7 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(4 * (12 - 7)) + 4",
      "(4 - 12) * (4 - 7)",
      "4 + ((12 - 7) * 4)",
      "(4 * (7 - 4)) + 12",
      "(12 - 4) * (7 - 4)",
      "12 + (4 * (7 - 4))",
      "(7 - 4) * (12 - 4)",
      "4 + (4 * (12 - 7))",
      "4 - ((7 - 12) * 4)",
      "4 - (4 * (7 - 12))",
      "((12 - 7) * 4) + 4",
      "((7 - 4) * 4) + 12",
      "12 + ((7 - 4) * 4)",
      "12 - ((4 - 7) * 4)",
      "(4 - 7) * (4 - 12)",
      "12 - (4 * (4 - 7))"
    ]
  },
  "4 4 7 13": {
    "cards": "4 4 7 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(4 * 13) - (7 * 4)",
      "(13 * 4) - (4 * 7)",
      "(13 * 4) - (7 * 4)",
      "(4 * 13) - (4 * 7)"
    ]
  },
  "4 4 8 8": {
    "cards": "4 4 8 8",
    "has_solution": "Y",
    "num_solutions": 54,
    "solutions": [
      "4 + ((8 + 4) + 8)",
      "8 + (4 + (8 + 4))",
      "4 + (4 + (8 + 8))",
      "((4 + 8) / 4) * 8",
      "((8 + 4) * 8) / 4",
      "(8 + (4 + 4)) + 8",
      "(4 * (8 - 4)) + 8",
      "4 + ((8 + 8) + 4)",
      "((4 + 8) * 8) / 4",
      "(4 + 8) + (4 + 8)",
      "(4 + 4) + (8 + 8)",
      "(8 + 4) / (4 / 8)",
      "(4 + (4 + 8)) + 8",
      "8 + (4 + (4 + 8))",
      "8 + ((8 + 4) + 4)",
      "((8 + 4) + 4) + 8",
      "(8 / 4) * (4 + 8)",
      "((8 + 4) + 8) + 4",
      "((8 + 8) + 4) + 4",
      "((4 + 8) + 8) + 4",
      "(8 * (8 + 4)) / 4",
      "4 + (8 + (4 + 8))",
      "(8 / 4) * (8 + 4)",
      "((8 + 4) / 4) * 8",
      "8 + (8 + (4 + 4))",
      "8 * ((8 + 4) / 4)",
      "(8 + 4) + (4 + 8)",
      "8 + ((8 - 4) * 4)",
      "(4 + 8) + (8 + 4)",
      "(8 - (8 / 4)) * 4",
      "(8 + 4) + (8 + 4)",
      "(4 + (8 + 8)) + 4",
      "8 - (4 * (4 - 8))",
      "8 + ((4 + 8) + 4)",
      "(8 + (8 + 4)) + 4",
      "(4 + 8) / (4 / 8)",
      "8 + (4 * (8 - 4))",
      "(8 * (4 + 8)) / 4",
      "((8 - 4) * 4) + 8",
      "8 + ((4 + 4) + 8)",
      "((4 + 8) + 4) + 8",
      "(8 + 4) * (8 / 4)",
      "8 - ((4 - 8) * 4)",
      "4 + ((4 + 8) + 8)",
      "8 / (4 / (8 + 4))",
      "(4 + 8) * (8 / 4)",
      "(4 + (8 + 4)) + 8",
      "(8 + (4 + 8)) + 4",
      "(8 + 8) + (4 + 4)",
      "4 + (8 + (8 + 4))",
      "((4 + 4) + 8) + 8",
      "8 / (4 / (4 + 8))",
      "8 * ((4 + 8) / 4)",
      "4 * (8 - (8 / 4))"
    ]
  },
  "4 4 8 9": {
    "cards": "4 4 8 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((9 * 4) - 4) - 8",
      "(9 * 4) - (8 + 4)",
      "((4 * 9) - 8) - 4",
      "(9 * 4) - (4 + 8)",
      "(4 * 9) - (4 + 8)",
      "((4 * 9) - 4) - 8",
      "(4 * 9) - (8 + 4)",
      "((9 * 4) - 8) - 4"
    ]
  },
  "4 4 8 10": {
    "cards": "4 4 8 10",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(8 * (10 / 4)) + 4",
      "4 + ((10 * 8) / 4)",
      "(10 - 4) * (8 - 4)",
      "(4 - (8 - 10)) * 4",
      "(4 - 8) * (4 - 10)",
      "4 + ((8 / 4) * 10)",
      "4 * (4 + (10 - 8))",
      "(8 / (4 / 10)) + 4",
      "4 * ((4 + 10) - 8)",
      "(4 + (10 - 8)) * 4",
      "(10 / (4 / 8)) + 4",
      "(10 + (4 - 8)) * 4",
      "((4 + 10) - 8) * 4",
      "((10 - 8) + 4) * 4",
      "4 * (4 - (8 - 10))",
      "4 + (10 * (8 / 4))",
      "4 + ((8 * 10) / 4)",
      "(8 - 4) * (10 - 4)",
      "4 * ((10 - 8) + 4)",
      "4 * (10 - (8 - 4))",
      "4 + ((10 / 4) * 8)",
      "((10 / 4) * 8) + 4",
      "((4 - 8) + 10) * 4",
      "4 * (10 + (4 - 8))",
      "4 + (8 * (10 / 4))",
      "4 + (10 / (4 / 8))",
      "(10 * (8 / 4)) + 4",
      "(10 - (8 - 4)) * 4",
      "4 + (8 / (4 / 10))",
      "((8 / 4) * 10) + 4",
      "((10 * 8) / 4) + 4",
      "(4 - 10) * (4 - 8)",
      "4 * ((4 - 8) + 10)",
      "((10 + 4) - 8) * 4",
      "4 * ((10 + 4) - 8)",
      "((8 * 10) / 4) + 4"
    ]
  },
  "4 4 8 11": {
    "cards": "4 4 8 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "8 * (11 - (4 + 4))",
      "(4 + 4) * (11 - 8)",
      "((11 - 4) - 4) * 8",
      "8 * ((11 - 4) - 4)",
      "(11 - (4 + 4)) * 8",
      "(11 - 8) * (4 + 4)"
    ]
  },
  "4 4 8 12": {
    "cards": "4 4 8 12",
    "has_solution": "Y",
    "num_solutions": 65,
    "solutions": [
      "(4 - (8 / 4)) * 12",
      "(4 + (4 * 8)) - 12",
      "(8 * 4) - (12 - 4)",
      "(4 / 8) * (12 * 4)",
      "12 * ((4 / 8) * 4)",
      "(4 - 12) + (4 * 8)",
      "4 - (12 - (8 * 4))",
      "(4 * 12) / (8 / 4)",
      "(4 * 4) * (12 / 8)",
      "(4 * (12 / 8)) * 4",
      "4 + ((8 * 4) - 12)",
      "((12 * 4) / 8) * 4",
      "4 + ((4 * 8) - 12)",
      "(4 * (12 * 4)) / 8",
      "4 / ((8 / 12) / 4)",
      "(4 / (8 / 12)) * 4",
      "4 * ((12 / 8) * 4)",
      "12 * (4 * (4 / 8))",
      "((4 * 4) / 8) * 12",
      "(12 * 4) / (8 / 4)",
      "(4 * 4) / (8 / 12)",
      "(4 * (12 - 4)) - 8",
      "(12 * (4 * 4)) / 8",
      "((4 * 12) * 4) / 8",
      "12 * ((4 * 4) / 8)",
      "4 / (8 / (12 * 4))",
      "4 * (12 * (4 / 8))",
      "((4 * 4) * 12) / 8",
      "((12 * 4) * 4) / 8",
      "(12 / (8 / 4)) * 4",
      "4 * (4 * (12 / 8))",
      "((4 * 12) / 8) * 4",
      "(4 - 12) + (8 * 4)",
      "4 * ((12 * 4) / 8)",
      "(4 + (8 * 4)) - 12",
      "((4 * 8) - 12) + 4",
      "4 / (8 / (4 * 12))",
      "4 * ((4 * 12) / 8)",
      "(4 * 8) - (12 - 4)",
      "12 * (4 / (8 / 4))",
      "4 * (4 / (8 / 12))",
      "(4 * (4 / 8)) * 12",
      "(4 * 8) + (4 - 12)",
      "12 / ((8 / 4) / 4)",
      "(4 * (4 * 12)) / 8",
      "(4 * 12) * (4 / 8)",
      "((4 / 8) * 4) * 12",
      "((4 / 8) * 12) * 4",
      "((12 / 8) * 4) * 4",
      "4 * (12 / (8 / 4))",
      "12 / (8 / (4 * 4))",
      "((8 * 4) + 4) - 12",
      "4 - (12 - (4 * 8))",
      "(4 / 8) * (4 * 12)",
      "(4 / (8 / 4)) * 12",
      "((4 * 8) + 4) - 12",
      "(12 * (4 / 8)) * 4",
      "(8 * 4) + (4 - 12)",
      "((12 - 4) * 4) - 8",
      "4 / ((8 / 4) / 12)",
      "(12 * 4) * (4 / 8)",
      "4 * ((4 / 8) * 12)",
      "12 * (4 - (8 / 4))",
      "(12 / 8) * (4 * 4)",
      "((8 * 4) - 12) + 4"
    ]
  },
  "4 4 8 13": {
    "cards": "4 4 8 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "4 + (4 * (13 - 8))",
      "((4 * 4) - 13) * 8",
      "(4 * (13 - 8)) + 4",
      "4 + ((13 - 8) * 4)",
      "4 - ((8 - 13) * 4)",
      "((13 - 8) * 4) + 4",
      "4 - (4 * (8 - 13))",
      "8 * ((4 * 4) - 13)"
    ]
  },
  "4 4 9 9": {
    "cards": "4 4 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 9 10": {
    "cards": "4 4 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 9 11": {
    "cards": "4 4 9 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "4 * (4 + (11 - 9))",
      "(11 - (9 - 4)) * 4",
      "4 * ((4 - 9) + 11)",
      "((4 - 9) + 11) * 4",
      "(4 + (11 - 9)) * 4",
      "4 * (11 + (4 - 9))",
      "4 * ((11 + 4) - 9)",
      "((11 + 4) - 9) * 4",
      "4 * ((11 - 9) + 4)",
      "(4 - (9 - 11)) * 4",
      "((4 + 11) - 9) * 4",
      "((11 - 9) + 4) * 4",
      "(11 + (4 - 9)) * 4",
      "4 * (4 - (9 - 11))",
      "4 * (11 - (9 - 4))",
      "4 * ((4 + 11) - 9)"
    ]
  },
  "4 4 9 12": {
    "cards": "4 4 9 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(4 + 4) * (12 - 9)",
      "4 * (9 - (12 / 4))",
      "(9 - (12 / 4)) * 4",
      "(12 - 9) * (4 + 4)"
    ]
  },
  "4 4 9 13": {
    "cards": "4 4 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 10 10": {
    "cards": "4 4 10 10",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "((10 * 10) - 4) / 4"
    ]
  },
  "4 4 10 11": {
    "cards": "4 4 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 10 12": {
    "cards": "4 4 10 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "4 * ((12 + 4) - 10)",
      "(10 * 4) - (12 + 4)",
      "((4 + 12) - 10) * 4",
      "((4 - 10) + 12) * 4",
      "4 * (4 + (12 - 10))",
      "(4 - (10 - 12)) * 4",
      "(10 - (4 + 4)) * 12",
      "(4 * 10) - (4 + 12)",
      "(10 * 4) - (4 + 12)",
      "(12 + (4 - 10)) * 4",
      "12 * (10 - (4 + 4))",
      "12 * ((10 - 4) - 4)",
      "4 * (12 + (4 - 10))",
      "(4 * 10) - (12 + 4)",
      "((4 * 10) - 4) - 12",
      "4 * (4 - (10 - 12))",
      "4 * ((4 - 10) + 12)",
      "((12 - 10) + 4) * 4",
      "((10 * 4) - 12) - 4",
      "4 * (12 - (10 - 4))",
      "4 * ((12 - 10) + 4)",
      "(12 - (10 - 4)) * 4",
      "((12 + 4) - 10) * 4",
      "(4 + (12 - 10)) * 4",
      "((4 * 10) - 12) - 4",
      "((10 * 4) - 4) - 12",
      "4 * ((4 + 12) - 10)",
      "((10 - 4) - 4) * 12"
    ]
  },
  "4 4 10 13": {
    "cards": "4 4 10 13",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "13 + ((4 / 4) + 10)",
      "(13 + 10) + (4 / 4)",
      "(4 / 4) + (13 + 10)",
      "((4 / 4) + 13) + 10",
      "(13 + (4 / 4)) + 10",
      "(4 / 4) + (10 + 13)",
      "10 + (13 + (4 / 4))",
      "13 + (10 + (4 / 4))",
      "(13 - 10) * (4 + 4)",
      "10 + ((4 / 4) + 13)",
      "(10 + (4 / 4)) + 13",
      "(4 + 4) * (13 - 10)",
      "(10 + 13) + (4 / 4)",
      "((4 / 4) + 10) + 13"
    ]
  },
  "4 4 11 11": {
    "cards": "4 4 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 4 11 12": {
    "cards": "4 4 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(11 + 12) + (4 / 4)",
      "(12 + (4 / 4)) + 11",
      "12 + (11 + (4 / 4))",
      "((4 / 4) + 12) + 11",
      "(4 / 4) + (11 + 12)",
      "(11 + (4 / 4)) + 12",
      "11 + (12 + (4 / 4))",
      "((4 / 4) + 11) + 12",
      "(4 / 4) + (12 + 11)",
      "11 + ((4 / 4) + 12)",
      "12 + ((4 / 4) + 11)",
      "(12 + 11) + (4 / 4)"
    ]
  },
  "4 4 11 13": {
    "cards": "4 4 11 13",
    "has_solution": "Y",
    "num_solutions": 154,
    "solutions": [
      "13 - ((4 - 11) - 4)",
      "(11 - 4) + (4 + 13)",
      "(11 - (4 - 13)) + 4",
      "13 + (11 - (4 - 4))",
      "(11 + 13) + (4 - 4)",
      "11 + ((13 * 4) / 4)",
      "13 + ((4 - 4) + 11)",
      "((4 - 11) + 13) * 4",
      "(4 + 11) + (13 - 4)",
      "11 - ((4 - 4) - 13)",
      "(4 - (4 - 13)) + 11",
      "4 * ((4 - 11) + 13)",
      "13 - (4 - (4 + 11))",
      "((13 / 4) * 4) + 11",
      "(13 - (4 - 11)) + 4",
      "((4 + 11) + 13) - 4",
      "13 + (4 / (4 / 11))",
      "((13 + 11) * 4) / 4",
      "4 * (4 + (13 - 11))",
      "4 - (4 - (11 + 13))",
      "4 * ((11 + 13) / 4)",
      "4 / (4 / (13 + 11))",
      "((13 + 11) - 4) + 4",
      "((11 * 4) / 4) + 13",
      "(11 - (4 - 4)) + 13",
      "((13 + 11) / 4) * 4",
      "11 + ((4 * 13) / 4)",
      "((4 - 4) + 13) + 11",
      "((4 / 4) * 13) + 11",
      "(13 + 4) + (11 - 4)",
      "(11 + 4) + (13 - 4)",
      "((11 - 4) + 4) + 13",
      "(11 + 13) - (4 - 4)",
      "(4 + (11 - 4)) + 13",
      "(4 + (11 + 13)) - 4",
      "((11 + 4) + 13) - 4",
      "11 + (4 - (4 - 13))",
      "((4 / 4) * 11) + 13",
      "11 - (4 - (13 + 4))",
      "(13 + (11 - 4)) + 4",
      "(13 + 11) * (4 / 4)",
      "13 + ((11 * 4) / 4)",
      "((13 + 4) - 11) * 4",
      "13 + ((11 + 4) - 4)",
      "(4 + (13 + 11)) - 4",
      "(11 + 13) / (4 / 4)",
      "(13 + (4 + 11)) - 4",
      "11 + (13 * (4 / 4))",
      "(11 + (13 - 4)) + 4",
      "4 + ((11 + 13) - 4)",
      "11 - ((4 - 13) - 4)",
      "(4 + (13 - 4)) + 11",
      "(4 - (4 - 11)) + 13",
      "13 + (11 * (4 / 4))",
      "((4 * 13) / 4) + 11",
      "13 + (4 * (11 / 4))",
      "((11 / 4) * 4) + 13",
      "(4 + (13 - 11)) * 4",
      "11 + (13 / (4 / 4))",
      "((4 + 13) - 4) + 11",
      "(11 / (4 / 4)) + 13",
      "((11 + 13) - 4) + 4",
      "(13 / (4 / 4)) + 11",
      "4 * (13 + (4 - 11))",
      "((4 * 11) / 4) + 13",
      "((4 + 11) - 4) + 13",
      "4 + ((11 - 4) + 13)",
      "(13 - 4) + (4 + 11)",
      "((13 + 4) + 11) - 4",
      "(13 + 11) + (4 - 4)",
      "(4 + 13) - (4 - 11)",
      "((13 - 4) + 4) + 11",
      "13 - ((4 - 4) - 11)",
      "(11 + (4 - 4)) + 13",
      "13 + (4 - (4 - 11))",
      "13 - (4 - (11 + 4))",
      "11 + ((4 - 4) + 13)",
      "((13 - 4) + 11) + 4",
      "((13 - 11) + 4) * 4",
      "((11 + 13) + 4) - 4",
      "((11 + 13) / 4) * 4",
      "13 + (11 / (4 / 4))",
      "11 + (4 + (13 - 4))",
      "(4 / (4 / 11)) + 13",
      "(13 - 4) + (11 + 4)",
      "((4 + 13) + 11) - 4",
      "(13 + (4 - 4)) + 11",
      "((4 + 13) - 11) * 4",
      "11 + (4 * (13 / 4))",
      "(13 + (4 - 11)) * 4",
      "(4 * (13 + 11)) / 4",
      "4 + (11 + (13 - 4))",
      "(11 + 13) * (4 / 4)",
      "(4 * (11 / 4)) + 13",
      "(13 - (11 - 4)) * 4",
      "((13 + 4) - 4) + 11",
      "(4 + 13) + (11 - 4)",
      "13 + (4 + (11 - 4))",
      "(4 - (11 - 13)) * 4",
      "(4 - 4) + (13 + 11)",
      "(4 * (11 + 13)) / 4",
      "4 * ((4 + 13) - 11)",
      "4 + (13 + (11 - 4))",
      "11 + ((4 / 4) * 13)",
      "4 + ((13 + 11) - 4)",
      "((11 - 4) + 13) + 4",
      "(4 * (13 / 4)) + 11",
      "(4 / (4 / 13)) + 11",
      "(13 * (4 / 4)) + 11",
      "11 + ((13 / 4) * 4)",
      "(11 + (13 + 4)) - 4",
      "(13 + 11) - (4 - 4)",
      "((4 - 4) + 11) + 13",
      "13 + ((4 + 11) - 4)",
      "4 * ((13 + 11) / 4)",
      "((11 + 4) - 4) + 13",
      "4 - ((4 - 11) - 13)",
      "(11 - 4) + (13 + 4)",
      "4 - ((4 - 13) - 11)",
      "11 + ((13 - 4) + 4)",
      "11 + (13 + (4 - 4))",
      "11 - (4 - (4 + 13))",
      "(13 + 11) / (4 / 4)",
      "11 + ((4 + 13) - 4)",
      "4 + ((13 - 4) + 11)",
      "4 - (4 - (13 + 11))",
      "13 + ((4 / 4) * 11)",
      "(13 + 4) - (4 - 11)",
      "11 + (13 - (4 - 4))",
      "13 + ((4 * 11) / 4)",
      "(11 + 4) - (4 - 13)",
      "13 + ((11 / 4) * 4)",
      "(11 + (4 + 13)) - 4",
      "((13 + 11) + 4) - 4",
      "(13 - (4 - 4)) + 11",
      "11 + ((13 + 4) - 4)",
      "4 * ((13 + 4) - 11)",
      "(4 + 11) - (4 - 13)",
      "(4 / 4) * (11 + 13)",
      "((11 + 13) * 4) / 4",
      "(4 - 4) + (11 + 13)",
      "(13 + (11 + 4)) - 4",
      "((13 * 4) / 4) + 11",
      "4 + (11 - (4 - 13))",
      "4 * (13 - (11 - 4))",
      "4 / (4 / (11 + 13))",
      "11 + (4 / (4 / 13))",
      "(11 * (4 / 4)) + 13",
      "4 + (13 - (4 - 11))",
      "(4 / 4) * (13 + 11)",
      "13 + ((11 - 4) + 4)",
      "13 + (11 + (4 - 4))",
      "4 * (4 - (11 - 13))",
      "4 * ((13 - 11) + 4)"
    ]
  },
  "4 4 12 12": {
    "cards": "4 4 12 12",
    "has_solution": "Y",
    "num_solutions": 77,
    "solutions": [
      "12 + ((4 + 12) - 4)",
      "(12 - (4 - 12)) + 4",
      "(12 + (12 - 4)) + 4",
      "12 + (12 / (4 / 4))",
      "12 + (12 - (4 - 4))",
      "(12 - 4) / (4 / 12)",
      "(4 * (12 / 4)) + 12",
      "((12 + 4) - 4) + 12",
      "12 + (12 + (4 - 4))",
      "12 + ((12 - 4) + 4)",
      "12 + (4 + (12 - 4))",
      "((12 * 4) / 4) + 12",
      "((12 / 4) * 4) + 12",
      "(12 + 12) + (4 - 4)",
      "(12 * (12 - 4)) / 4",
      "(4 + (12 + 12)) - 4",
      "(12 - (4 - 4)) + 12",
      "((12 + 12) - 4) + 4",
      "12 + (4 - (4 - 12))",
      "(12 + (4 - 4)) + 12",
      "12 * ((12 - 4) / 4)",
      "12 - ((4 - 4) - 12)",
      "12 / (4 / (12 - 4))",
      "(12 + (4 + 12)) - 4",
      "12 + (4 * (12 / 4))",
      "12 + ((12 / 4) * 4)",
      "(12 - 4) * (12 / 4)",
      "12 - (4 - (4 + 12))",
      "(4 / 4) * (12 + 12)",
      "(4 + 12) - (4 - 12)",
      "12 - (4 - (12 + 4))",
      "12 + (12 * (4 / 4))",
      "12 + ((12 * 4) / 4)",
      "(12 + 12) - (4 - 4)",
      "(4 + (12 - 4)) + 12",
      "4 - (4 - (12 + 12))",
      "((12 + 12) * 4) / 4",
      "((12 + 4) + 12) - 4",
      "4 + (12 - (4 - 12))",
      "4 / (4 / (12 + 12))",
      "12 + ((4 - 4) + 12)",
      "(12 + 12) * (4 / 4)",
      "(12 + 4) - (4 - 12)",
      "12 + (4 / (4 / 12))",
      "4 - ((4 - 12) - 12)",
      "12 - ((4 - 12) - 4)",
      "(12 - 4) + (12 + 4)",
      "4 * ((12 + 12) / 4)",
      "((4 - 4) + 12) + 12",
      "(12 + 12) / (4 / 4)",
      "((4 + 12) + 12) - 4",
      "(4 - (4 - 12)) + 12",
      "((12 - 4) + 12) + 4",
      "12 + ((4 * 12) / 4)",
      "((12 - 4) + 4) + 12",
      "(12 / (4 / 4)) + 12",
      "(4 - 4) + (12 + 12)",
      "12 + ((12 + 4) - 4)",
      "((12 - 4) * 12) / 4",
      "(12 / 4) * (12 - 4)",
      "(4 / (4 / 12)) + 12",
      "4 + ((12 + 12) - 4)",
      "((12 + 12) + 4) - 4",
      "12 + ((4 / 4) * 12)",
      "((4 / 4) * 12) + 12",
      "4 + ((12 - 4) + 12)",
      "(12 * (4 / 4)) + 12",
      "((12 + 12) / 4) * 4",
      "(4 * (12 + 12)) / 4",
      "(12 + 4) + (12 - 4)",
      "(12 - 4) + (4 + 12)",
      "(12 + (12 + 4)) - 4",
      "4 + (12 + (12 - 4))",
      "((4 * 12) / 4) + 12",
      "(4 + 12) + (12 - 4)",
      "((4 + 12) - 4) + 12",
      "((12 - 4) / 4) * 12"
    ]
  },
  "4 4 12 13": {
    "cards": "4 4 12 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(12 - (4 / 4)) + 13",
      "(13 - (4 / 4)) + 12",
      "12 - ((4 / 4) - 13)",
      "13 + (12 - (4 / 4))",
      "(13 + 12) - (4 / 4)",
      "(4 * (13 - 4)) - 12",
      "12 + (13 - (4 / 4))",
      "((13 - 4) * 4) - 12",
      "13 - ((4 / 4) - 12)",
      "(12 + 13) - (4 / 4)"
    ]
  },
  "4 4 13 13": {
    "cards": "4 4 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 5 5 5": {
    "cards": "4 5 5 5",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(5 + (5 / 5)) * 4",
      "(5 * 5) + (4 - 5)",
      "(4 - 5) + (5 * 5)",
      "4 + ((5 * 5) - 5)",
      "(5 * 5) - (5 - 4)",
      "(4 + (5 * 5)) - 5",
      "((5 / 5) + 5) * 4",
      "4 - (5 - (5 * 5))",
      "4 * ((5 / 5) + 5)",
      "((5 * 5) + 4) - 5",
      "((5 * 5) - 5) + 4",
      "4 * (5 + (5 / 5))"
    ]
  },
  "4 5 5 6": {
    "cards": "4 5 5 6",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "((5 + 4) - 5) * 6",
      "6 / ((5 / 5) / 4)",
      "((4 / 5) * 5) * 6",
      "(5 * (6 / 5)) * 4",
      "(6 * (5 * 4)) / 5",
      "4 * (5 * (6 / 5))",
      "6 * (5 * (4 / 5))",
      "(5 * (4 / 5)) * 6",
      "(6 * 5) / (5 / 4)",
      "5 * (6 * (4 / 5))",
      "4 / ((5 / 5) / 6)",
      "4 * (6 * (5 / 5))",
      "(4 - (5 - 5)) * 6",
      "(6 - (5 - 5)) * 4",
      "(6 * 4) * (5 / 5)",
      "5 - (5 - (6 * 4))",
      "((6 * 5) * 4) / 5",
      "((6 / 5) * 5) * 4",
      "(5 * (6 * 4)) / 5",
      "(4 / 5) * (6 * 5)",
      "(4 + (5 - 5)) * 6",
      "(5 - (5 - 4)) * 6",
      "(6 * 4) / (5 / 5)",
      "((4 - 5) + 5) * 6",
      "((6 / 5) * 4) * 5",
      "(5 - 5) + (4 * 6)",
      "(5 / 5) * (6 * 4)",
      "6 * (5 - (5 - 4))",
      "(6 / 5) * (5 * 4)",
      "(6 * (5 / 5)) * 4",
      "4 / (5 / (5 * 6))",
      "((5 * 6) / 5) * 4",
      "(5 * (4 * 6)) / 5",
      "6 / (5 / (5 * 4))",
      "(4 / (5 / 5)) * 6",
      "4 * ((6 + 5) - 5)",
      "6 * (4 - (5 - 5))",
      "(6 / 5) * (4 * 5)",
      "4 * ((6 - 5) + 5)",
      "(6 * 5) * (4 / 5)",
      "6 / (5 / (4 * 5))",
      "5 * ((4 * 6) / 5)",
      "((4 * 6) / 5) * 5",
      "(4 * 6) / (5 / 5)",
      "(5 / 5) * (4 * 6)",
      "6 * ((4 * 5) / 5)",
      "5 / (5 / (4 * 6))",
      "4 * ((6 / 5) * 5)",
      "(4 * (5 * 6)) / 5",
      "(4 * (6 * 5)) / 5",
      "((6 - 5) + 5) * 4",
      "5 * ((6 / 5) * 4)",
      "6 * (4 * (5 / 5))",
      "4 * ((6 * 5) / 5)",
      "5 - (5 - (4 * 6))",
      "(4 * (5 / 5)) * 6",
      "((6 + 5) - 5) * 4",
      "((4 * 6) + 5) - 5",
      "(5 - 5) + (6 * 4)",
      "(6 * 4) + (5 - 5)",
      "(4 * (6 / 5)) * 5",
      "4 * (5 / (5 / 6))",
      "(6 + (5 - 5)) * 4",
      "6 * ((5 + 4) - 5)",
      "((4 * 6) * 5) / 5",
      "6 * ((5 / 5) * 4)",
      "6 * ((4 + 5) - 5)",
      "6 * ((4 - 5) + 5)",
      "5 / ((5 / 6) / 4)",
      "5 / (5 / (6 * 4))",
      "(4 / (5 / 6)) * 5",
      "5 * ((6 * 4) / 5)",
      "6 / ((5 / 4) / 5)",
      "5 * (4 / (5 / 6))",
      "(5 - (5 - 6)) * 4",
      "(6 * 4) - (5 - 5)",
      "(5 + (6 * 4)) - 5",
      "4 * (6 / (5 / 5))",
      "(5 * 4) * (6 / 5)",
      "((5 - 5) + 4) * 6",
      "(4 * 6) * (5 / 5)",
      "6 * ((5 - 5) + 4)",
      "4 * (6 - (5 - 5))",
      "((5 / 5) * 4) * 6",
      "(4 * 5) * (6 / 5)",
      "((5 / 5) * 6) * 4",
      "6 * ((5 * 4) / 5)",
      "((6 * 4) + 5) - 5",
      "5 + ((4 * 6) - 5)",
      "(6 / (5 / 4)) * 5",
      "((4 + 5) - 5) * 6",
      "((6 * 4) - 5) + 5",
      "5 * ((4 / 5) * 6)",
      "(5 * 4) / (5 / 6)",
      "(5 * 6) * (4 / 5)",
      "6 * (4 + (5 - 5))",
      "4 * (6 + (5 - 5))",
      "(6 * (4 * 5)) / 5",
      "4 * ((5 / 5) * 6)",
      "(5 / (5 / 4)) * 6",
      "((4 * 5) / 5) * 6",
      "((6 * 4) / 5) * 5",
      "4 / ((5 / 6) / 5)",
      "5 / ((5 / 4) / 6)",
      "6 * (4 / (5 / 5))",
      "4 * (5 + (6 - 5))",
      "4 * ((5 - 5) + 6)",
      "6 * (5 / (5 / 4))",
      "((5 * 4) * 6) / 5",
      "((5 * 4) / 5) * 6",
      "(6 / (5 / 5)) * 4",
      "5 * (6 / (5 / 4))",
      "(4 * 5) / (5 / 6)",
      "(4 / 5) * (5 * 6)",
      "(5 + (6 - 5)) * 4",
      "((6 * 4) * 5) / 5",
      "((6 * 5) / 5) * 4",
      "(5 * 6) / (5 / 4)",
      "5 + ((6 * 4) - 5)",
      "4 / (5 / (6 * 5))",
      "6 * (5 + (4 - 5))",
      "((4 * 6) - 5) + 5",
      "4 * ((5 * 6) / 5)",
      "(4 * 6) + (5 - 5)",
      "4 * ((5 + 6) - 5)",
      "(5 / (5 / 6)) * 4",
      "((4 * 5) * 6) / 5",
      "(5 + (4 * 6)) - 5",
      "(6 * (4 / 5)) * 5",
      "4 * (5 - (5 - 6))",
      "((4 / 5) * 6) * 5",
      "5 * (4 * (6 / 5))",
      "((5 - 5) + 6) * 4",
      "(4 * 6) - (5 - 5)",
      "((5 + 6) - 5) * 4",
      "((5 * 6) * 4) / 5",
      "(5 + (4 - 5)) * 6",
      "6 * ((4 / 5) * 5)"
    ]
  },
  "4 5 5 7": {
    "cards": "4 5 5 7",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(7 - (5 / 5)) * 4",
      "4 * (7 - (5 / 5))"
    ]
  },
  "4 5 5 8": {
    "cards": "4 5 5 8",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(4 - (5 / 5)) * 8",
      "8 * (4 - (5 / 5))"
    ]
  },
  "4 5 5 9": {
    "cards": "4 5 5 9",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(5 * 4) + (9 - 5)",
      "4 - ((5 - 9) * 5)",
      "((4 * 5) - 5) + 9",
      "(4 * 5) - (5 - 9)",
      "4 - (5 * (5 - 9))",
      "4 + (5 * (9 - 5))",
      "(9 + (5 * 4)) - 5",
      "(9 - 5) + (5 * 4)",
      "9 + ((4 * 5) - 5)",
      "9 + ((5 * 4) - 5)",
      "(5 * (9 - 5)) + 4",
      "9 - (5 - (5 * 4))",
      "((4 * 5) + 9) - 5",
      "4 + ((9 - 5) * 5)",
      "((9 - 5) * 5) + 4",
      "((5 * 4) + 9) - 5",
      "(9 + (4 * 5)) - 5",
      "9 - (5 - (4 * 5))",
      "(4 * 5) + (9 - 5)",
      "((5 * 4) - 5) + 9",
      "(5 * 4) - (5 - 9)",
      "(9 - 5) + (4 * 5)"
    ]
  },
  "4 5 5 10": {
    "cards": "4 5 5 10",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "5 + ((5 + 10) + 4)",
      "(5 + 4) + (5 + 10)",
      "(4 + (5 + 10)) + 5",
      "(5 + 10) + (5 + 4)",
      "5 + (10 + (5 + 4))",
      "10 + ((5 + 4) + 5)",
      "(10 + (5 + 5)) + 4",
      "(10 + 5) + (4 + 5)",
      "(10 + (5 + 4)) + 5",
      "(5 + (5 + 10)) + 4",
      "((10 + 5) + 4) + 5",
      "(5 + (10 + 5)) + 4",
      "((10 + 5) + 5) + 4",
      "10 + (5 + (5 + 4))",
      "5 + (10 + (4 + 5))",
      "(5 + (4 + 5)) + 10",
      "4 + ((10 + 5) + 5)",
      "5 + ((4 + 5) + 10)",
      "((5 + 5) + 10) + 4",
      "(5 + 5) + (4 + 10)",
      "(5 + (5 + 4)) + 10",
      "5 + ((5 + 4) + 10)",
      "(4 + (5 + 5)) + 10",
      "(5 + 4) + (10 + 5)",
      "((4 + 10) + 5) + 5",
      "(5 + (4 + 10)) + 5",
      "(5 + 10) + (4 + 5)",
      "((4 + 5) + 5) + 10",
      "((5 + 10) + 4) + 5",
      "10 + (4 + (5 + 5))",
      "5 + (4 + (5 + 10))",
      "((5 + 4) + 10) + 5",
      "5 + (4 + (10 + 5))",
      "5 + (5 + (4 + 10))",
      "(5 + (10 + 4)) + 5",
      "10 + (5 + (4 + 5))",
      "5 + ((10 + 5) + 4)",
      "4 + ((5 + 5) + 10)",
      "((5 + 4) + 5) + 10",
      "(4 + 10) + (5 + 5)",
      "5 + ((10 + 4) + 5)",
      "((4 + 5) + 10) + 5",
      "((5 + 5) + 4) + 10",
      "(10 + 5) + (5 + 4)",
      "4 + (10 + (5 + 5))",
      "4 + (5 + (10 + 5))",
      "(10 + (4 + 5)) + 5",
      "5 + (5 + (10 + 4))",
      "(4 + (10 + 5)) + 5",
      "10 + ((4 + 5) + 5)",
      "(4 + 5) + (10 + 5)",
      "(5 + 5) + (10 + 4)",
      "(10 + 4) + (5 + 5)",
      "4 + (5 + (5 + 10))",
      "4 + ((5 + 10) + 5)",
      "5 + ((4 + 10) + 5)",
      "(4 + 5) + (5 + 10)",
      "10 + ((5 + 5) + 4)",
      "((10 + 4) + 5) + 5",
      "((5 + 10) + 5) + 4"
    ]
  },
  "4 5 5 11": {
    "cards": "4 5 5 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 5 5 12": {
    "cards": "4 5 5 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 5 5 13": {
    "cards": "4 5 5 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 5 6 6": {
    "cards": "4 5 6 6",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(4 * 6) / (6 - 5)",
      "(6 * 4) * (6 - 5)",
      "6 * (4 / (6 - 5))",
      "((6 - 5) * 4) * 6",
      "(5 + (6 / 6)) * 4",
      "4 * ((6 / 6) + 5)",
      "(4 / (6 - 5)) * 6",
      "(6 / (6 - 5)) * 4",
      "((6 - 5) * 6) * 4",
      "4 / ((6 - 5) / 6)",
      "4 * (6 / (6 - 5))",
      "4 * (6 * (6 - 5))",
      "6 / ((6 - 5) / 4)",
      "(6 - 5) * (4 * 6)",
      "4 * ((6 - 5) * 6)",
      "4 * (5 + (6 / 6))",
      "(4 * 6) * (6 - 5)",
      "(6 * (6 - 5)) * 4",
      "6 * ((6 - 5) * 4)",
      "6 * (4 * (6 - 5))",
      "(4 * (6 - 5)) * 6",
      "(6 * 4) / (6 - 5)",
      "((6 / 6) + 5) * 4",
      "(6 - 5) * (6 * 4)"
    ]
  },
  "4 5 6 7": {
    "cards": "4 5 6 7",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "4 * ((5 - 6) + 7)",
      "(5 + (7 - 6)) * 4",
      "((7 + 5) - 6) * 4",
      "(6 - 4) * (7 + 5)",
      "((7 - 6) + 5) * 4",
      "((5 + 7) - 6) * 4",
      "4 * ((7 - 6) + 5)",
      "(5 - (6 - 7)) * 4",
      "((5 - 6) + 7) * 4",
      "4 * (5 - (6 - 7))",
      "(6 - 4) * (5 + 7)",
      "4 * (5 + (7 - 6))",
      "4 * (7 + (5 - 6))",
      "(7 + (5 - 6)) * 4",
      "(7 - (6 - 5)) * 4",
      "4 * ((7 + 5) - 6)",
      "(5 + 7) * (6 - 4)",
      "(7 + 5) * (6 - 4)",
      "4 * (7 - (6 - 5))",
      "4 * ((5 + 7) - 6)"
    ]
  },
  "4 5 6 8": {
    "cards": "4 5 6 8",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(4 - (6 - 5)) * 8",
      "8 * (4 + (5 - 6))",
      "8 * (5 + (4 - 6))",
      "((5 + 4) - 6) * 8",
      "8 * (4 - (6 - 5))",
      "8 * ((4 - 6) + 5)",
      "((4 + 5) - 6) * 8",
      "(5 + (4 - 6)) * 8",
      "(4 + (5 - 6)) * 8",
      "8 * ((4 + 5) - 6)",
      "8 * ((5 + 4) - 6)",
      "8 * ((5 - 6) + 4)",
      "8 * (5 - (6 - 4))",
      "((5 - 6) + 4) * 8",
      "((4 - 6) + 5) * 8",
      "(5 - (6 - 4)) * 8"
    ]
  },
  "4 5 6 9": {
    "cards": "4 5 6 9",
    "has_solution": "Y",
    "num_solutions": 120,
    "solutions": [
      "(5 + 4) + (9 + 6)",
      "(9 + (5 + 4)) + 6",
      "((6 + 4) + 9) + 5",
      "(4 + 9) + (5 + 6)",
      "9 + ((4 + 6) + 5)",
      "((5 + 4) + 9) + 6",
      "6 + ((5 + 9) + 4)",
      "(9 + 4) + (5 + 6)",
      "4 + ((5 + 9) + 6)",
      "((6 + 9) + 5) + 4",
      "9 + ((4 + 5) + 6)",
      "4 + ((5 + 6) + 9)",
      "(5 + 6) + (9 + 4)",
      "((6 + 4) + 5) + 9",
      "((9 + 4) + 5) + 6",
      "(9 + (6 + 5)) + 4",
      "9 + ((6 + 5) + 4)",
      "(4 + 6) + (5 + 9)",
      "(5 + (9 + 6)) + 4",
      "6 + (4 + (5 + 9))",
      "4 + ((9 + 6) + 5)",
      "((4 + 5) + 6) + 9",
      "6 + (9 + (4 + 5))",
      "(6 + 4) + (5 + 9)",
      "6 + (5 + (9 + 4))",
      "5 + ((9 + 6) + 4)",
      "9 + ((5 + 4) + 6)",
      "9 + (5 + (6 + 4))",
      "(6 + (9 + 5)) + 4",
      "(6 + 5) + (4 + 9)",
      "4 + (5 + (9 + 6))",
      "9 + ((5 + 6) + 4)",
      "(5 + 9) + (4 + 6)",
      "5 + ((6 + 4) + 9)",
      "4 + (6 + (5 + 9))",
      "4 + (9 + (6 + 5))",
      "((4 + 5) + 9) + 6",
      "(9 + (5 + 6)) + 4",
      "(4 + 5) + (6 + 9)",
      "6 + (9 + (5 + 4))",
      "(4 + (5 + 9)) + 6",
      "5 + ((6 + 9) + 4)",
      "(5 + (9 + 4)) + 6",
      "(5 + 6) + (4 + 9)",
      "(6 + (4 + 9)) + 5",
      "((6 + 5) + 9) + 4",
      "(6 + (5 + 9)) + 4",
      "6 + (4 + (9 + 5))",
      "4 + (9 + (5 + 6))",
      "4 + ((9 + 5) + 6)",
      "(9 + 6) + (5 + 4)",
      "(6 + 9) + (5 + 4)",
      "(9 + 6) + (4 + 5)",
      "(6 + 4) + (9 + 5)",
      "((4 + 6) + 5) + 9",
      "5 + (4 + (9 + 6))",
      "((4 + 9) + 6) + 5",
      "6 + ((9 + 5) + 4)",
      "9 + (5 + (4 + 6))",
      "(9 + (6 + 4)) + 5",
      "6 + (5 + (4 + 9))",
      "((9 + 6) + 5) + 4",
      "((5 + 6) + 4) + 9",
      "5 + ((9 + 4) + 6)",
      "6 + ((4 + 9) + 5)",
      "(5 + (4 + 6)) + 9",
      "(4 + 6) + (9 + 5)",
      "((6 + 9) + 4) + 5",
      "6 + ((4 + 5) + 9)",
      "(4 + (6 + 5)) + 9",
      "(6 + 9) + (4 + 5)",
      "(9 + (4 + 5)) + 6",
      "(5 + (6 + 4)) + 9",
      "9 + (4 + (5 + 6))",
      "9 + (6 + (4 + 5))",
      "9 + (4 + (6 + 5))",
      "(9 + (4 + 6)) + 5",
      "((9 + 6) + 4) + 5",
      "5 + (6 + (9 + 4))",
      "(5 + (4 + 9)) + 6",
      "(4 + 5) + (9 + 6)",
      "5 + (6 + (4 + 9))",
      "6 + ((9 + 4) + 5)",
      "((6 + 5) + 4) + 9",
      "(4 + (9 + 5)) + 6",
      "5 + ((4 + 6) + 9)",
      "5 + (4 + (6 + 9))",
      "((9 + 4) + 6) + 5",
      "((5 + 6) + 9) + 4",
      "5 + (9 + (6 + 4))",
      "((9 + 5) + 4) + 6",
      "4 + (5 + (6 + 9))",
      "((5 + 9) + 6) + 4",
      "(5 + 4) + (6 + 9)",
      "(9 + 5) + (4 + 6)",
      "((9 + 5) + 6) + 4",
      "(6 + (4 + 5)) + 9",
      "(9 + 4) + (6 + 5)",
      "((5 + 4) + 6) + 9",
      "((4 + 6) + 9) + 5",
      "4 + (6 + (9 + 5))",
      "(5 + (6 + 9)) + 4",
      "4 + ((6 + 9) + 5)",
      "(4 + (5 + 6)) + 9",
      "9 + ((6 + 4) + 5)",
      "4 + ((6 + 5) + 9)",
      "5 + ((4 + 9) + 6)",
      "((5 + 9) + 4) + 6",
      "((4 + 9) + 5) + 6",
      "(6 + (5 + 4)) + 9",
      "(4 + (9 + 6)) + 5",
      "5 + (9 + (4 + 6))",
      "6 + ((5 + 4) + 9)",
      "9 + (6 + (5 + 4))",
      "(5 + 9) + (6 + 4)",
      "(9 + 5) + (6 + 4)",
      "(4 + 9) + (6 + 5)",
      "(4 + (6 + 9)) + 5",
      "(6 + (9 + 4)) + 5",
      "(6 + 5) + (9 + 4)"
    ]
  },
  "4 5 6 10": {
    "cards": "4 5 6 10",
    "has_solution": "Y",
    "num_solutions": 40,
    "solutions": [
      "(4 * 5) + (10 - 6)",
      "10 - (6 - (5 * 4))",
      "(5 * 6) + (4 - 10)",
      "10 + ((5 * 4) - 6)",
      "((6 * 5) - 10) + 4",
      "(4 + (6 * 5)) - 10",
      "((4 * 5) - 6) + 10",
      "(6 * 5) + (4 - 10)",
      "(4 + (5 * 6)) - 10",
      "4 + ((10 - 6) * 5)",
      "4 + (5 * (10 - 6))",
      "(4 - 10) + (5 * 6)",
      "((5 * 4) - 6) + 10",
      "(5 * (10 - 6)) + 4",
      "(5 * 4) - (6 - 10)",
      "((5 * 6) - 10) + 4",
      "((6 * 5) + 4) - 10",
      "(5 * 6) - (10 - 4)",
      "4 + ((5 * 6) - 10)",
      "((10 - 6) * 5) + 4",
      "((5 * 4) + 10) - 6",
      "(4 - 10) + (6 * 5)",
      "(5 * (10 - 4)) - 6",
      "10 - (6 - (4 * 5))",
      "4 - (10 - (5 * 6))",
      "(10 - 6) + (4 * 5)",
      "(10 + (5 * 4)) - 6",
      "4 - (5 * (6 - 10))",
      "((4 * 5) + 10) - 6",
      "(10 - 6) + (5 * 4)",
      "4 - (10 - (6 * 5))",
      "(4 * 5) - (6 - 10)",
      "4 - ((6 - 10) * 5)",
      "(10 + (4 * 5)) - 6",
      "10 + ((4 * 5) - 6)",
      "((5 * 6) + 4) - 10",
      "((10 - 4) * 5) - 6",
      "(5 * 4) + (10 - 6)",
      "4 + ((6 * 5) - 10)",
      "(6 * 5) - (10 - 4)"
    ]
  },
  "4 5 6 11": {
    "cards": "4 5 6 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "6 / (4 / (11 + 5))",
      "6 * ((5 + 11) / 4)",
      "6 / (4 / (5 + 11))",
      "((5 + 11) * 6) / 4",
      "((5 + 11) / 4) * 6",
      "((11 + 5) * 6) / 4",
      "(11 + 5) * (6 / 4)",
      "(6 / 4) * (5 + 11)",
      "(6 * (11 + 5)) / 4",
      "(5 + 11) / (4 / 6)",
      "(6 / 4) * (11 + 5)",
      "(5 + 11) * (6 / 4)",
      "(11 + 5) / (4 / 6)",
      "((11 + 5) / 4) * 6",
      "(6 * (5 + 11)) / 4",
      "6 * ((11 + 5) / 4)"
    ]
  },
  "4 5 6 12": {
    "cards": "4 5 6 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((6 + 4) / 5) * 12",
      "(6 + 4) / (5 / 12)",
      "((4 + 6) / 5) * 12",
      "(4 + 6) / (5 / 12)",
      "12 * ((4 + 6) / 5)",
      "(12 / 5) * (4 + 6)",
      "12 / (5 / (4 + 6))",
      "((6 + 4) * 12) / 5",
      "(12 / 5) * (6 + 4)",
      "(6 + 4) * (12 / 5)",
      "(12 * (4 + 6)) / 5",
      "(4 + 6) * (12 / 5)",
      "(12 * (6 + 4)) / 5",
      "12 * ((6 + 4) / 5)",
      "12 / (5 / (6 + 4))",
      "((4 + 6) * 12) / 5"
    ]
  },
  "4 5 6 13": {
    "cards": "4 5 6 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "6 * (13 - (5 + 4))",
      "((13 - 4) - 5) * 6",
      "6 * ((13 - 5) - 4)",
      "(13 - (5 + 4)) * 6",
      "((13 - 5) - 4) * 6",
      "6 * (13 - (4 + 5))",
      "6 * ((13 - 4) - 5)",
      "(13 - (4 + 5)) * 6"
    ]
  },
  "4 5 7 7": {
    "cards": "4 5 7 7",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "4 * ((7 / 7) + 5)",
      "(5 * 7) - (7 + 4)",
      "((5 * 7) - 4) - 7",
      "(7 * 5) - (4 + 7)",
      "((7 * 5) - 7) - 4",
      "((7 * 5) - 4) - 7",
      "4 * (5 + (7 / 7))",
      "((5 * 7) - 7) - 4",
      "(5 * 7) - (4 + 7)",
      "(7 * 5) - (7 + 4)",
      "((7 / 7) + 5) * 4",
      "(5 + (7 / 7)) * 4"
    ]
  },
  "4 5 7 8": {
    "cards": "4 5 7 8",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "(5 + 4) + (8 + 7)",
      "4 + ((7 + 5) + 8)",
      "4 + (5 + (8 + 7))",
      "4 * (5 - (7 - 8))",
      "(8 * (7 + 5)) / 4",
      "(4 + 7) + (8 + 5)",
      "5 + ((7 + 4) + 8)",
      "(8 + (5 + 7)) + 4",
      "((4 + 8) + 5) + 7",
      "5 + (7 + (8 + 4))",
      "(5 + (8 + 7)) + 4",
      "(5 + 7) / (4 / 8)",
      "4 + ((8 + 7) + 5)",
      "8 + ((5 + 4) + 7)",
      "(7 + (5 + 4)) + 8",
      "((8 - 7) + 5) * 4",
      "(4 + (8 + 7)) + 5",
      "5 + (8 + (7 + 4))",
      "4 + ((5 + 8) + 7)",
      "(7 + (8 + 4)) + 5",
      "5 + ((8 + 7) + 4)",
      "((7 + 5) * 8) / 4",
      "(8 + 4) + (5 + 7)",
      "((8 + 5) + 4) + 7",
      "((5 + 7) / 4) * 8",
      "8 + (4 + (7 + 5))",
      "((8 + 5) - 7) * 4",
      "(8 + 5) + (4 + 7)",
      "((5 + 8) + 7) + 4",
      "(5 + 7) + (8 + 4)",
      "((7 + 5) / 4) * 8",
      "7 + (5 + (8 + 4))",
      "(8 / 4) * (5 + 7)",
      "(5 + (8 - 7)) * 4",
      "(5 + 8) + (7 + 4)",
      "(4 + (7 + 8)) + 5",
      "8 / (4 / (7 + 5))",
      "5 + (4 + (7 + 8))",
      "(5 + 7) * (8 / 4)",
      "((5 + 4) + 7) + 8",
      "(7 + 5) / (4 / 8)",
      "7 + (4 + (5 + 8))",
      "5 + ((8 + 4) + 7)",
      "((7 + 4) + 8) + 5",
      "8 / (4 / (5 + 7))",
      "7 + ((4 + 5) + 8)",
      "7 + ((8 + 4) + 5)",
      "(4 + (5 + 7)) + 8",
      "(8 + (5 - 7)) * 4",
      "(7 + 5) + (8 + 4)",
      "(5 - (7 - 8)) * 4",
      "7 + (8 + (4 + 5))",
      "5 + (8 + (4 + 7))",
      "7 + (4 + (8 + 5))",
      "(8 / 4) * (7 + 5)",
      "7 + ((5 + 4) + 8)",
      "(8 + (7 + 4)) + 5",
      "4 * ((5 - 7) + 8)",
      "8 + ((7 + 5) + 4)",
      "4 + ((7 + 8) + 5)",
      "(5 + (7 + 4)) + 8",
      "8 * ((5 + 7) / 4)",
      "(7 + (4 + 5)) + 8",
      "(7 + 8) + (5 + 4)",
      "(7 + 5) + (4 + 8)",
      "((7 + 5) + 4) + 8",
      "5 + ((4 + 7) + 8)",
      "((4 + 8) + 7) + 5",
      "7 + ((5 + 8) + 4)",
      "(5 + (7 + 8)) + 4",
      "7 + (5 + (4 + 8))",
      "((8 + 4) + 7) + 5",
      "((8 + 7) + 4) + 5",
      "(5 + 4) + (7 + 8)",
      "8 * ((7 + 5) / 4)",
      "(8 + 5) + (7 + 4)",
      "(4 + 7) + (5 + 8)",
      "4 * (5 + (8 - 7))",
      "4 * ((8 - 7) + 5)",
      "(5 + (8 + 4)) + 7",
      "(4 + 5) + (8 + 7)",
      "(5 + (4 + 8)) + 7",
      "((8 + 4) + 5) + 7",
      "(4 + 8) + (5 + 7)",
      "5 + ((4 + 8) + 7)",
      "((4 + 5) + 8) + 7",
      "4 * ((5 + 8) - 7)",
      "7 + ((8 + 5) + 4)",
      "((5 + 7) + 8) + 4",
      "((4 + 5) + 7) + 8",
      "4 + (7 + (8 + 5))",
      "(8 - (7 - 5)) * 4",
      "7 + ((4 + 8) + 5)",
      "4 + (5 + (7 + 8))",
      "8 + ((4 + 5) + 7)",
      "((5 + 7) * 8) / 4",
      "8 + (4 + (5 + 7))",
      "4 * ((8 + 5) - 7)",
      "4 + ((5 + 7) + 8)",
      "(4 + 8) * (7 - 5)",
      "4 + (7 + (5 + 8))",
      "((7 + 8) + 4) + 5",
      "(8 + 7) + (4 + 5)",
      "8 + ((5 + 7) + 4)",
      "((7 + 5) + 8) + 4",
      "4 * (8 + (5 - 7))",
      "(4 + (5 + 8)) + 7",
      "(8 + 4) + (7 + 5)",
      "((5 + 4) + 8) + 7",
      "(7 - 5) * (8 + 4)",
      "(5 + 7) + (4 + 8)",
      "((5 + 8) + 4) + 7",
      "((8 + 5) + 7) + 4",
      "(4 + (8 + 5)) + 7",
      "7 + (8 + (5 + 4))",
      "5 + (7 + (4 + 8))",
      "(8 + 4) * (7 - 5)",
      "(7 + (4 + 8)) + 5",
      "4 + (8 + (5 + 7))",
      "(8 + 7) + (5 + 4)",
      "(8 + (4 + 5)) + 7",
      "4 + (8 + (7 + 5))",
      "8 + (5 + (4 + 7))",
      "(8 * (5 + 7)) / 4",
      "((8 + 7) + 5) + 4",
      "(7 + 5) * (8 / 4)",
      "5 + ((7 + 8) + 4)",
      "8 + ((7 + 4) + 5)",
      "8 + (7 + (4 + 5))",
      "(7 + 8) + (4 + 5)",
      "(5 + (4 + 7)) + 8",
      "8 + (7 + (5 + 4))",
      "((5 - 7) + 8) * 4",
      "((5 + 8) - 7) * 4",
      "4 + ((8 + 5) + 7)",
      "8 + (5 + (7 + 4))",
      "(7 + 4) + (8 + 5)",
      "(7 - 5) * (4 + 8)",
      "(5 + 8) + (4 + 7)",
      "(8 + (4 + 7)) + 5",
      "8 + ((4 + 7) + 5)",
      "((7 + 8) + 5) + 4",
      "(4 + 8) + (7 + 5)",
      "(4 + (7 + 5)) + 8",
      "(7 + 4) + (5 + 8)",
      "((4 + 7) + 8) + 5",
      "(8 + (7 + 5)) + 4",
      "(4 + 5) + (7 + 8)",
      "(8 + (5 + 4)) + 7",
      "((5 + 7) + 4) + 8",
      "4 * (8 - (7 - 5))",
      "5 + (4 + (8 + 7))",
      "((4 + 7) + 5) + 8",
      "(7 + (5 + 8)) + 4",
      "((7 + 4) + 5) + 8",
      "(7 + (8 + 5)) + 4"
    ]
  },
  "4 5 7 9": {
    "cards": "4 5 7 9",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(4 * 9) - (5 + 7)",
      "(7 * 4) - (9 - 5)",
      "(9 * 4) - (5 + 7)",
      "9 + (5 * (7 - 4))",
      "9 + ((7 - 4) * 5)",
      "((9 * 4) - 7) - 5",
      "(4 * 9) - (7 + 5)",
      "((4 * 7) + 5) - 9",
      "(5 + (4 * 7)) - 9",
      "(9 * 4) - (7 + 5)",
      "5 - (9 - (4 * 7))",
      "(5 - 9) + (7 * 4)",
      "(5 * (7 - 4)) + 9",
      "((4 * 9) - 7) - 5",
      "(4 * 7) - (9 - 5)",
      "(7 * 4) + (5 - 9)",
      "((7 - 4) * 5) + 9",
      "5 + ((7 * 4) - 9)",
      "((7 * 4) + 5) - 9",
      "((4 * 9) - 5) - 7",
      "5 - (9 - (7 * 4))",
      "(5 + (7 * 4)) - 9",
      "(7 * (9 - 5)) - 4",
      "((4 * 7) - 9) + 5",
      "(4 * 7) + (5 - 9)",
      "((9 * 4) - 5) - 7",
      "9 - (5 * (4 - 7))",
      "((9 - 5) * 7) - 4",
      "5 + ((4 * 7) - 9)",
      "((7 * 4) - 9) + 5",
      "(5 - 9) + (4 * 7)",
      "9 - ((4 - 7) * 5)"
    ]
  },
  "4 5 7 10": {
    "cards": "4 5 7 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "4 + (10 * (7 - 5))",
      "4 - (10 * (5 - 7))",
      "4 + ((7 - 5) * 10)",
      "((7 - 5) * 10) + 4",
      "4 - ((5 - 7) * 10)",
      "(10 * (7 - 5)) + 4"
    ]
  },
  "4 5 7 11": {
    "cards": "4 5 7 11",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(11 + (4 * 5)) - 7",
      "(4 * 5) - (7 - 11)",
      "((11 - 7) * 5) + 4",
      "(11 + (5 * 4)) - 7",
      "11 - (7 - (5 * 4))",
      "11 + ((5 * 4) - 7)",
      "(11 - 7) + (4 * 5)",
      "4 - (5 * (7 - 11))",
      "(4 * 5) + (11 - 7)",
      "(11 - 7) + (5 * 4)",
      "4 + (5 * (11 - 7))",
      "(5 * (11 - 7)) + 4",
      "((5 * 4) + 11) - 7",
      "11 + ((4 * 5) - 7)",
      "(5 * 4) - (7 - 11)",
      "11 - (7 - (4 * 5))",
      "((4 * 5) - 7) + 11",
      "4 + ((11 - 7) * 5)",
      "4 - ((7 - 11) * 5)",
      "((5 * 4) - 7) + 11",
      "(5 * 4) + (11 - 7)",
      "((4 * 5) + 11) - 7"
    ]
  },
  "4 5 7 12": {
    "cards": "4 5 7 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((5 - 7) + 4) * 12",
      "12 / ((7 - 5) / 4)",
      "12 * ((4 + 5) - 7)",
      "(5 - (7 - 4)) * 12",
      "12 * (5 + (4 - 7))",
      "(4 - (7 - 5)) * 12",
      "((4 + 5) - 7) * 12",
      "4 * (12 / (7 - 5))",
      "(4 * 12) / (7 - 5)",
      "12 * ((5 - 7) + 4)",
      "12 * ((5 + 4) - 7)",
      "12 * (4 / (7 - 5))",
      "(12 * 4) / (7 - 5)",
      "((4 - 7) + 5) * 12",
      "(5 + (4 - 7)) * 12",
      "12 * (4 - (7 - 5))",
      "(4 + (5 - 7)) * 12",
      "12 * ((4 - 7) + 5)",
      "(12 / (7 - 5)) * 4",
      "12 * (5 - (7 - 4))",
      "12 * (4 + (5 - 7))",
      "4 / ((7 - 5) / 12)",
      "(4 / (7 - 5)) * 12",
      "((5 + 4) - 7) * 12"
    ]
  },
  "4 5 7 13": {
    "cards": "4 5 7 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 + (7 * 13)) / 4",
      "((13 * 7) + 5) / 4",
      "(5 - 13) * (4 - 7)",
      "(4 - 7) * (5 - 13)",
      "(13 - 5) * (7 - 4)",
      "(7 - 4) * (13 - 5)",
      "(5 + (13 * 7)) / 4",
      "((7 * 13) + 5) / 4"
    ]
  },
  "4 5 8 8": {
    "cards": "4 5 8 8",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "4 * (5 + (8 / 8))",
      "4 * ((8 / 8) + 5)",
      "(5 + (8 / 8)) * 4",
      "(5 - (8 / 4)) * 8",
      "8 * (5 - (8 / 4))",
      "((8 / 8) + 5) * 4"
    ]
  },
  "4 5 8 9": {
    "cards": "4 5 8 9",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((9 + 5) - 8) * 4",
      "4 * ((5 + 9) - 8)",
      "8 - (4 * (5 - 9))",
      "(9 - (8 - 5)) * 4",
      "4 * ((9 - 8) + 5)",
      "(9 + (5 - 8)) * 4",
      "8 + ((9 - 5) * 4)",
      "(5 - (8 - 9)) * 4",
      "8 + (4 * (9 - 5))",
      "((9 - 5) * 4) + 8",
      "((9 - 8) + 5) * 4",
      "((5 - 8) + 9) * 4",
      "(4 * (9 - 5)) + 8",
      "4 * (9 + (5 - 8))",
      "((5 + 9) - 8) * 4",
      "4 * ((9 + 5) - 8)",
      "8 - ((5 - 9) * 4)",
      "4 * (5 - (8 - 9))",
      "4 * ((5 - 8) + 9)",
      "4 * (9 - (8 - 5))",
      "(5 + (9 - 8)) * 4",
      "4 * (5 + (9 - 8))"
    ]
  },
  "4 5 8 10": {
    "cards": "4 5 8 10",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "10 * ((8 + 4) / 5)",
      "(8 + 4) * (10 / 5)",
      "4 * (8 - (10 / 5))",
      "(10 / 5) * (8 + 4)",
      "(4 - (8 / 5)) * 10",
      "((4 + 8) * 10) / 5",
      "10 * (4 - (8 / 5))",
      "(4 + (8 / 10)) * 5",
      "((8 / 10) + 4) * 5",
      "5 * ((8 / 10) + 4)",
      "5 * (4 + (8 / 10))",
      "10 / (5 / (8 + 4))",
      "(8 + 4) / (5 / 10)",
      "(4 + 8) / (5 / 10)",
      "(10 * (8 + 4)) / 5",
      "(8 - (10 / 5)) * 4",
      "((8 + 4) * 10) / 5",
      "(10 * (4 + 8)) / 5",
      "((8 + 4) / 5) * 10",
      "10 / (5 / (4 + 8))",
      "(10 / 5) * (4 + 8)",
      "((4 + 8) / 5) * 10",
      "(4 + 8) * (10 / 5)",
      "10 * ((4 + 8) / 5)"
    ]
  },
  "4 5 8 11": {
    "cards": "4 5 8 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(8 / 5) * (11 + 4)",
      "(4 + 11) / (5 / 8)",
      "(4 + 11) * (8 / 5)",
      "(11 + 4) / (5 / 8)",
      "(11 - 5) * (8 - 4)",
      "(5 - 11) * (4 - 8)",
      "(8 / 5) * (4 + 11)",
      "8 * ((11 + 4) / 5)",
      "(8 * (11 + 4)) / 5",
      "((4 + 11) * 8) / 5",
      "((11 + 4) * 8) / 5",
      "(11 + 4) * (8 / 5)",
      "((11 + 4) / 5) * 8",
      "(8 * (4 + 11)) / 5",
      "(4 - 8) * (5 - 11)",
      "8 / (5 / (11 + 4))",
      "((4 + 11) / 5) * 8",
      "8 * ((4 + 11) / 5)",
      "8 / (5 / (4 + 11))",
      "(8 - 4) * (11 - 5)"
    ]
  },
  "4 5 8 12": {
    "cards": "4 5 8 12",
    "has_solution": "Y",
    "num_solutions": 48,
    "solutions": [
      "(8 - 5) * (12 - 4)",
      "12 + ((8 - 5) * 4)",
      "(12 - 8) + (5 * 4)",
      "12 + (4 * (8 - 5))",
      "4 - ((8 - 12) * 5)",
      "8 * (12 - (4 + 5))",
      "(12 - 8) + (4 * 5)",
      "8 * ((12 - 4) - 5)",
      "((4 * 5) + 12) - 8",
      "(8 * 5) - (12 + 4)",
      "(12 + (5 * 4)) - 8",
      "12 - (8 - (4 * 5))",
      "(12 - (5 + 4)) * 8",
      "4 + ((12 - 8) * 5)",
      "(4 - 12) * (5 - 8)",
      "(8 * 5) - (4 + 12)",
      "((8 * 5) - 12) - 4",
      "((5 * 4) + 12) - 8",
      "(4 * 5) + (12 - 8)",
      "(5 - 8) * (4 - 12)",
      "12 + ((5 * 4) - 8)",
      "(12 + (4 * 5)) - 8",
      "8 * (12 - (5 + 4))",
      "12 - (4 * (5 - 8))",
      "(5 * 4) - (8 - 12)",
      "12 - ((5 - 8) * 4)",
      "12 - (8 - (5 * 4))",
      "(5 * 8) - (4 + 12)",
      "(4 * 5) - (8 - 12)",
      "4 + (5 * (12 - 8))",
      "(4 * (8 - 5)) + 12",
      "(5 * 4) + (12 - 8)",
      "12 + ((4 * 5) - 8)",
      "(12 - 4) * (8 - 5)",
      "((5 * 8) - 12) - 4",
      "4 - (5 * (8 - 12))",
      "((8 - 5) * 4) + 12",
      "((12 - 4) - 5) * 8",
      "((5 * 4) - 8) + 12",
      "((5 * 8) - 4) - 12",
      "(5 * 8) - (12 + 4)",
      "((12 - 5) - 4) * 8",
      "((12 - 8) * 5) + 4",
      "((4 * 5) - 8) + 12",
      "((8 * 5) - 4) - 12",
      "(12 - (4 + 5)) * 8",
      "(5 * (12 - 8)) + 4",
      "8 * ((12 - 5) - 4)"
    ]
  },
  "4 5 8 13": {
    "cards": "4 5 8 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((8 * 4) + 5) - 13",
      "(8 * 4) + (5 - 13)",
      "5 + ((4 * 8) - 13)",
      "(5 + (4 * 8)) - 13",
      "((4 * 8) - 13) + 5",
      "(5 - 13) + (8 * 4)",
      "5 - (13 - (4 * 8))",
      "((4 * 8) + 5) - 13",
      "(4 * 8) - (13 - 5)",
      "5 + ((8 * 4) - 13)",
      "(4 * 8) + (5 - 13)",
      "(8 * 4) - (13 - 5)",
      "((8 * 4) - 13) + 5",
      "(5 - 13) + (4 * 8)",
      "(4 * (13 - 5)) - 8",
      "((13 - 5) * 4) - 8",
      "(5 + (8 * 4)) - 13",
      "5 - (13 - (8 * 4))"
    ]
  },
  "4 5 9 9": {
    "cards": "4 5 9 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "4 * (5 + (9 / 9))",
      "4 * ((9 / 9) + 5)",
      "(5 + (9 / 9)) * 4",
      "((9 / 9) + 5) * 4"
    ]
  },
  "4 5 9 10": {
    "cards": "4 5 9 10",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "4 * ((5 + 10) - 9)",
      "4 * (5 - (9 - 10))",
      "4 * (10 + (5 - 9))",
      "((5 - 9) + 10) * 4",
      "(5 - 9) * (4 - 10)",
      "(10 - 4) * (9 - 5)",
      "(5 + (10 - 9)) * 4",
      "((5 + 10) - 9) * 4",
      "((10 - 9) + 5) * 4",
      "(10 - (9 - 5)) * 4",
      "4 * ((10 - 9) + 5)",
      "((10 + 5) - 9) * 4",
      "4 * (10 - (9 - 5))",
      "4 * (5 + (10 - 9))",
      "(10 + (5 - 9)) * 4",
      "4 * ((5 - 9) + 10)",
      "(5 - (9 - 10)) * 4",
      "(4 - 10) * (5 - 9)",
      "(9 - 5) * (10 - 4)",
      "4 * ((10 + 5) - 9)"
    ]
  },
  "4 5 9 11": {
    "cards": "4 5 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 5 9 12": {
    "cards": "4 5 9 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "9 + ((12 * 5) / 4)",
      "(12 / (4 / 5)) + 9",
      "((12 / 4) * 5) + 9",
      "9 + (5 * (12 / 4))",
      "(12 * 5) - (9 * 4)",
      "((5 / 4) * 12) + 9",
      "(5 * (12 / 4)) + 9",
      "((5 * 12) / 4) + 9",
      "9 + ((5 / 4) * 12)",
      "(12 * (5 / 4)) + 9",
      "9 + (5 / (4 / 12))",
      "9 + ((12 / 4) * 5)",
      "9 + ((5 * 12) / 4)",
      "((12 * 5) / 4) + 9",
      "(5 * 12) - (4 * 9)",
      "9 + (12 / (4 / 5))",
      "9 + (12 * (5 / 4))",
      "(5 * 12) - (9 * 4)",
      "(5 / (4 / 12)) + 9",
      "(12 * 5) - (4 * 9)"
    ]
  },
  "4 5 9 13": {
    "cards": "4 5 9 13",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "13 - (9 - (4 * 5))",
      "13 + ((4 * 5) - 9)",
      "4 - ((9 - 13) * 5)",
      "13 + ((5 * 4) - 9)",
      "4 + ((13 - 9) * 5)",
      "((4 * 5) - 9) + 13",
      "(13 + (5 * 4)) - 9",
      "(13 - 9) + (5 * 4)",
      "(5 * 4) - (9 - 13)",
      "(13 + (4 * 5)) - 9",
      "4 + (5 * (13 - 9))",
      "(4 * 5) + (13 - 9)",
      "((4 * 5) + 13) - 9",
      "(5 * 4) + (13 - 9)",
      "13 - (9 - (5 * 4))",
      "((5 * 4) - 9) + 13",
      "(13 - 9) + (4 * 5)",
      "((13 - 9) * 5) + 4",
      "(5 * (13 - 9)) + 4",
      "((5 * 4) + 13) - 9",
      "(4 * 5) - (9 - 13)",
      "4 - (5 * (9 - 13))"
    ]
  },
  "4 5 10 10": {
    "cards": "4 5 10 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "((10 * 10) / 5) + 4",
      "(5 + (10 / 10)) * 4",
      "4 + (10 / (5 / 10))",
      "(10 / (5 / 10)) + 4",
      "4 + ((10 * 10) / 5)",
      "((10 / 10) + 5) * 4",
      "4 + ((10 / 5) * 10)",
      "((10 / 5) * 10) + 4",
      "4 * ((10 / 10) + 5)",
      "4 * (5 + (10 / 10))",
      "4 + (10 * (10 / 5))",
      "(10 * (10 / 5)) + 4"
    ]
  },
  "4 5 10 11": {
    "cards": "4 5 10 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(5 + (11 - 10)) * 4",
      "((5 - 10) + 11) * 4",
      "((5 + 11) - 10) * 4",
      "4 * ((11 - 10) + 5)",
      "(10 * 4) - (11 + 5)",
      "((10 * 4) - 11) - 5",
      "(10 * 4) - (5 + 11)",
      "4 * (5 - (10 - 11))",
      "((4 * 10) - 5) - 11",
      "4 * (11 - (10 - 5))",
      "4 * ((5 - 10) + 11)",
      "4 * (5 + (11 - 10))",
      "4 * (11 + (5 - 10))",
      "((4 * 10) - 11) - 5",
      "(4 * 10) - (11 + 5)",
      "(11 - (10 - 5)) * 4",
      "4 * ((5 + 11) - 10)",
      "(5 - (10 - 11)) * 4",
      "(11 + (5 - 10)) * 4",
      "((11 - 10) + 5) * 4",
      "((11 + 5) - 10) * 4",
      "((10 * 4) - 5) - 11",
      "(4 * 10) - (5 + 11)",
      "4 * ((11 + 5) - 10)"
    ]
  },
  "4 5 10 12": {
    "cards": "4 5 10 12",
    "has_solution": "Y",
    "num_solutions": 92,
    "solutions": [
      "((5 * 4) * 12) / 10",
      "(5 * 12) * (4 / 10)",
      "5 * ((12 * 4) / 10)",
      "((5 / 10) * 4) * 12",
      "(5 * 4) / (10 / 12)",
      "(5 * (4 * 12)) / 10",
      "(12 * 4) / (10 / 5)",
      "(12 * 4) * (5 / 10)",
      "((12 / 10) * 5) * 4",
      "((12 / 10) * 4) * 5",
      "4 / (10 / (12 * 5))",
      "5 * (12 / (10 / 4))",
      "4 * ((5 / 10) * 12)",
      "12 * ((4 / 10) * 5)",
      "(5 / 10) * (12 * 4)",
      "((4 / 10) * 12) * 5",
      "5 * ((4 * 12) / 10)",
      "(12 * (5 * 4)) / 10",
      "12 * ((4 * 5) / 10)",
      "((4 / 10) * 5) * 12",
      "4 / (10 / (5 * 12))",
      "(4 / 10) * (12 * 5)",
      "(12 / (10 / 5)) * 4",
      "4 * (12 / (10 / 5))",
      "((4 * 5) / 10) * 12",
      "(5 * (12 * 4)) / 10",
      "4 * ((12 / 10) * 5)",
      "((5 * 12) / 10) * 4",
      "12 / (10 / (4 * 5))",
      "(4 / 10) * (5 * 12)",
      "(12 * (4 * 5)) / 10",
      "(4 * 12) * (5 / 10)",
      "((12 * 5) / 10) * 4",
      "(4 * 12) / (10 / 5)",
      "((5 / 10) * 12) * 4",
      "(5 * (12 / 10)) * 4",
      "(4 * (5 / 10)) * 12",
      "12 * ((5 * 4) / 10)",
      "12 / ((10 / 5) / 4)",
      "4 * ((12 * 5) / 10)",
      "((5 * 12) * 4) / 10",
      "(4 / (10 / 5)) * 12",
      "12 * (4 * (5 / 10))",
      "5 / (10 / (4 * 12))",
      "(12 * 5) / (10 / 4)",
      "12 * (4 - (10 / 5))",
      "((4 * 5) * 12) / 10",
      "(4 * 5) * (12 / 10)",
      "(12 / (10 / 4)) * 5",
      "12 / (10 / (5 * 4))",
      "4 / ((10 / 12) / 5)",
      "(4 * 5) / (10 / 12)",
      "(5 / (10 / 4)) * 12",
      "(4 * (5 * 12)) / 10",
      "(4 * (12 * 5)) / 10",
      "5 / ((10 / 4) / 12)",
      "5 * (4 / (10 / 12))",
      "12 * ((5 / 10) * 4)",
      "(4 - (10 / 5)) * 12",
      "4 / ((10 / 5) / 12)",
      "12 * (5 / (10 / 4))",
      "12 * (4 / (10 / 5))",
      "(12 * 5) * (4 / 10)",
      "(5 * 12) / (10 / 4)",
      "5 / ((10 / 12) / 4)",
      "((12 * 4) * 5) / 10",
      "4 * ((5 * 12) / 10)",
      "4 * (5 * (12 / 10))",
      "12 * (5 * (4 / 10))",
      "(4 / (10 / 12)) * 5",
      "((4 * 12) / 10) * 5",
      "(5 * 4) * (12 / 10)",
      "((5 * 4) / 10) * 12",
      "5 * ((4 / 10) * 12)",
      "(12 / 10) * (4 * 5)",
      "(12 * (5 / 10)) * 4",
      "(12 * (4 / 10)) * 5",
      "((4 * 12) * 5) / 10",
      "(5 * (4 / 10)) * 12",
      "(5 / 10) * (4 * 12)",
      "(4 * (12 / 10)) * 5",
      "4 * (12 * (5 / 10))",
      "5 * (12 * (4 / 10))",
      "((12 * 4) / 10) * 5",
      "(5 / (10 / 12)) * 4",
      "4 * (5 / (10 / 12))",
      "5 * ((12 / 10) * 4)",
      "(12 / 10) * (5 * 4)",
      "((12 * 5) * 4) / 10",
      "12 / ((10 / 4) / 5)",
      "5 / (10 / (12 * 4))",
      "5 * (4 * (12 / 10))"
    ]
  },
  "4 5 10 13": {
    "cards": "4 5 10 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "5 + ((13 + 10) - 4)",
      "5 + (10 - (4 - 13))",
      "(10 - 4) + (5 + 13)",
      "13 - ((4 - 10) - 5)",
      "((10 + 13) - 4) + 5",
      "13 - (4 - (5 + 10))",
      "(13 + 10) - (4 - 5)",
      "13 - (4 - (10 + 5))",
      "(13 - 4) + (10 + 5)",
      "(5 - 4) + (10 + 13)",
      "((5 - 4) + 13) + 10",
      "(10 + (13 + 5)) - 4",
      "10 + ((13 + 5) - 4)",
      "5 + (13 - (4 - 10))",
      "10 + (5 + (13 - 4))",
      "(5 - 4) + (13 + 10)",
      "5 + ((13 - 4) + 10)",
      "(10 + 13) + (5 - 4)",
      "(5 + 13) + (10 - 4)",
      "13 + ((5 + 10) - 4)",
      "13 - ((4 - 5) - 10)",
      "((13 + 5) + 10) - 4",
      "(5 + 10) + (13 - 4)",
      "5 + ((10 - 4) + 13)",
      "13 + (10 - (4 - 5))",
      "10 + (13 + (5 - 4))",
      "13 + (10 + (5 - 4))",
      "5 - ((4 - 10) - 13)",
      "((10 + 5) - 4) + 13",
      "((5 + 13) - 4) + 10",
      "(5 + 10) - (4 - 13)",
      "(13 + 10) + (5 - 4)",
      "13 + ((10 + 5) - 4)",
      "10 + ((13 - 4) + 5)",
      "13 + (5 - (4 - 10))",
      "5 - ((4 - 13) - 10)",
      "((5 + 13) + 10) - 4",
      "(10 + 5) + (13 - 4)",
      "(10 + (13 - 4)) + 5",
      "((10 - 4) + 13) + 5",
      "(13 + (10 + 5)) - 4",
      "13 + ((10 - 4) + 5)",
      "(13 + (5 - 4)) + 10",
      "10 + (5 - (4 - 13))",
      "10 + ((5 - 4) + 13)",
      "(13 + (5 + 10)) - 4",
      "10 - ((4 - 13) - 5)",
      "(10 + (5 + 13)) - 4",
      "10 + (13 - (4 - 5))",
      "5 + ((10 + 13) - 4)",
      "((10 + 5) + 13) - 4",
      "13 + ((5 - 4) + 10)",
      "10 - (4 - (13 + 5))",
      "(5 + (10 - 4)) + 13",
      "((5 + 10) + 13) - 4",
      "((13 + 10) + 5) - 4",
      "10 + ((5 + 13) - 4)",
      "(10 + 5) - (4 - 13)",
      "5 + (10 + (13 - 4))",
      "((5 - 4) + 10) + 13",
      "(5 + (13 - 4)) + 10",
      "((5 + 10) - 4) + 13",
      "10 - ((4 - 5) - 13)",
      "(10 + (5 - 4)) + 13",
      "(10 - 4) + (13 + 5)",
      "((10 + 13) + 5) - 4",
      "(5 + (10 + 13)) - 4",
      "((13 + 10) - 4) + 5",
      "5 + (13 + (10 - 4))",
      "((13 - 4) + 5) + 10",
      "(5 + 13) - (4 - 10)",
      "((10 - 4) + 5) + 13",
      "(13 - 4) + (5 + 10)",
      "(10 + 13) - (4 - 5)",
      "(5 + (13 + 10)) - 4",
      "(13 + 5) + (10 - 4)",
      "((13 - 4) + 10) + 5",
      "((13 + 5) - 4) + 10",
      "(5 - (4 - 13)) + 10",
      "(13 - (4 - 5)) + 10",
      "(5 - (4 - 10)) + 13",
      "(10 - (4 - 5)) + 13",
      "13 + (5 + (10 - 4))",
      "(10 - (4 - 13)) + 5",
      "10 - (4 - (5 + 13))",
      "(13 - (4 - 10)) + 5",
      "(13 + 5) - (4 - 10)",
      "5 - (4 - (13 + 10))",
      "(13 + (10 - 4)) + 5",
      "5 - (4 - (10 + 13))"
    ]
  },
  "4 5 11 11": {
    "cards": "4 5 11 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(5 + (11 / 11)) * 4",
      "(5 * (11 - 4)) - 11",
      "((11 - 4) * 5) - 11",
      "((11 / 11) + 5) * 4",
      "4 * (5 + (11 / 11))",
      "4 * ((11 / 11) + 5)"
    ]
  },
  "4 5 11 12": {
    "cards": "4 5 11 12",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "((12 + 5) + 11) - 4",
      "((12 - 11) + 5) * 4",
      "((12 + 5) - 4) + 11",
      "((5 + 11) + 12) - 4",
      "12 + ((5 - 4) + 11)",
      "(11 + (5 - 4)) + 12",
      "(5 + 11) + (12 - 4)",
      "5 + ((11 - 4) + 12)",
      "(12 - (4 - 5)) + 11",
      "((5 + 12) + 11) - 4",
      "(12 - (11 - 5)) * 4",
      "5 + ((12 + 11) - 4)",
      "5 + ((12 - 4) + 11)",
      "(11 - (4 - 5)) + 12",
      "5 + (12 - (4 - 11))",
      "12 + (11 - (4 - 5))",
      "((5 + 11) - 4) + 12",
      "12 + ((11 + 5) - 4)",
      "5 - ((4 - 11) - 12)",
      "((12 + 11) + 5) - 4",
      "12 * ((11 - 4) - 5)",
      "(5 + (12 - 11)) * 4",
      "((11 - 4) + 5) + 12",
      "(11 - 4) + (12 + 5)",
      "((11 + 12) - 4) + 5",
      "(12 + (5 - 11)) * 4",
      "((12 - 4) + 11) + 5",
      "11 - (4 - (5 + 12))",
      "(5 + 11) - (4 - 12)",
      "11 + (12 + (5 - 4))",
      "(5 + (11 + 12)) - 4",
      "5 - (4 - (12 + 11))",
      "(12 - (4 - 11)) + 5",
      "((5 - 4) + 12) + 11",
      "(11 + 5) + (12 - 4)",
      "(12 + (11 - 4)) + 5",
      "11 - ((4 - 5) - 12)",
      "12 + (5 - (4 - 11))",
      "(11 - (4 + 5)) * 12",
      "11 + (5 - (4 - 12))",
      "4 * (12 - (11 - 5))",
      "((12 + 11) - 4) + 5",
      "((12 + 5) - 11) * 4",
      "(12 + 5) + (11 - 4)",
      "((12 - 4) + 5) + 11",
      "((11 - 5) - 4) * 12",
      "(12 + (5 - 4)) + 11",
      "(5 + (12 - 4)) + 11",
      "12 - (4 - (11 + 5))",
      "(12 + 5) - (4 - 11)",
      "4 * (12 + (5 - 11))",
      "4 * ((12 - 11) + 5)",
      "12 + (5 + (11 - 4))",
      "5 + ((11 + 12) - 4)",
      "5 + (11 + (12 - 4))",
      "(12 - 4) + (5 + 11)",
      "(5 + 12) - (4 - 11)",
      "(12 - 4) + (11 + 5)",
      "(5 + (11 - 4)) + 12",
      "(11 + (12 - 4)) + 5",
      "11 + ((12 - 4) + 5)",
      "(11 + 12) + (5 - 4)",
      "5 - (4 - (11 + 12))",
      "((11 - 4) - 5) * 12",
      "4 * ((5 - 11) + 12)",
      "(11 + 5) - (4 - 12)",
      "(5 - (11 - 12)) * 4",
      "(11 + (5 + 12)) - 4",
      "11 - (4 - (12 + 5))",
      "12 + ((11 - 4) + 5)",
      "5 + (11 - (4 - 12))",
      "12 - ((4 - 5) - 11)",
      "(12 + 11) - (4 - 5)",
      "((11 + 12) + 5) - 4",
      "5 - ((4 - 12) - 11)",
      "(11 - (4 - 12)) + 5",
      "11 - ((4 - 12) - 5)",
      "(12 + (5 + 11)) - 4",
      "(12 + (11 + 5)) - 4",
      "((5 - 4) + 11) + 12",
      "12 + ((5 + 11) - 4)",
      "4 * ((5 + 12) - 11)",
      "(11 - (5 + 4)) * 12",
      "12 * (11 - (4 + 5))",
      "4 * (5 - (11 - 12))",
      "12 * (11 - (5 + 4))",
      "(11 + 12) - (4 - 5)",
      "11 + ((5 + 12) - 4)",
      "((5 + 12) - 11) * 4",
      "(5 + (12 + 11)) - 4",
      "(5 - (4 - 11)) + 12",
      "(5 - 4) + (12 + 11)",
      "12 - (4 - (5 + 11))",
      "12 * ((11 - 5) - 4)",
      "((11 + 5) + 12) - 4",
      "((11 - 4) + 12) + 5",
      "((5 - 11) + 12) * 4",
      "(11 + (12 + 5)) - 4",
      "11 + ((12 + 5) - 4)",
      "11 + ((5 - 4) + 12)",
      "11 + (12 - (4 - 5))",
      "12 - ((4 - 11) - 5)",
      "((5 + 12) - 4) + 11",
      "11 + (5 + (12 - 4))",
      "(5 + 12) + (11 - 4)",
      "(5 - (4 - 12)) + 11",
      "5 + (12 + (11 - 4))",
      "(11 - 4) + (5 + 12)",
      "4 * (5 + (12 - 11))",
      "4 * ((12 + 5) - 11)",
      "12 + (11 + (5 - 4))",
      "((11 + 5) - 4) + 12",
      "(12 + 11) + (5 - 4)",
      "(5 - 4) + (11 + 12)"
    ]
  },
  "4 5 11 13": {
    "cards": "4 5 11 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(11 + 13) / (5 - 4)",
      "13 - (11 * (4 - 5))",
      "(5 - 4) * (11 + 13)",
      "(11 / (5 - 4)) + 13",
      "(13 / (5 - 4)) + 11",
      "11 - (13 * (4 - 5))",
      "(13 * (5 - 4)) + 11",
      "13 - (11 / (4 - 5))",
      "13 + ((5 - 4) * 11)",
      "((5 - 4) * 11) + 13",
      "(11 * (5 - 4)) + 13",
      "11 + (13 / (5 - 4))",
      "(13 + 11) / (5 - 4)",
      "11 + ((5 - 4) * 13)",
      "(11 + 13) * (5 - 4)",
      "((5 - 4) * 13) + 11",
      "11 - (13 / (4 - 5))",
      "13 + (11 / (5 - 4))",
      "13 + (11 * (5 - 4))",
      "(13 + 11) * (5 - 4)",
      "13 - ((4 - 5) * 11)",
      "11 - ((4 - 5) * 13)",
      "(5 - 4) * (13 + 11)",
      "11 + (13 * (5 - 4))"
    ]
  },
  "4 5 12 12": {
    "cards": "4 5 12 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(5 - (12 / 4)) * 12",
      "(12 / (5 - 4)) + 12",
      "((5 - 4) * 12) + 12",
      "4 * ((12 / 12) + 5)",
      "12 - (12 / (4 - 5))",
      "(12 * (5 - 4)) + 12",
      "4 * (5 + (12 / 12))",
      "12 + (12 / (5 - 4))",
      "(12 + 12) * (5 - 4)",
      "12 + (12 * (5 - 4))",
      "12 * (5 - (12 / 4))",
      "12 - ((4 - 5) * 12)",
      "(12 + 12) / (5 - 4)",
      "((12 / 12) + 5) * 4",
      "12 - (12 * (4 - 5))",
      "(5 - 4) * (12 + 12)",
      "12 + ((5 - 4) * 12)",
      "(5 + (12 / 12)) * 4"
    ]
  },
  "4 5 12 13": {
    "cards": "4 5 12 13",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "12 + ((4 - 5) + 13)",
      "12 + (13 + (4 - 5))",
      "(12 + (13 - 5)) + 4",
      "(13 + 4) + (12 - 5)",
      "(13 - 5) + (12 + 4)",
      "((13 - 5) / 4) * 12",
      "(12 + 4) + (13 - 5)",
      "((12 + 13) + 4) - 5",
      "(13 - (5 - 4)) + 12",
      "(13 + (12 - 5)) + 4",
      "(13 + (12 + 4)) - 5",
      "12 * ((13 - 5) / 4)",
      "4 * (13 - (12 - 5))",
      "((5 + 13) - 12) * 4",
      "((13 + 12) - 5) + 4",
      "13 - ((5 - 12) - 4)",
      "((5 - 12) + 13) * 4",
      "(4 + 12) - (5 - 13)",
      "13 + (12 - (5 - 4))",
      "(13 + 12) + (4 - 5)",
      "12 + ((13 + 4) - 5)",
      "(4 - 5) + (12 + 13)",
      "(12 - 5) + (13 + 4)",
      "12 / (4 / (13 - 5))",
      "12 + ((4 + 13) - 5)",
      "((12 + 4) + 13) - 5",
      "4 * ((5 - 12) + 13)",
      "((4 + 13) + 12) - 5",
      "4 + ((13 + 12) - 5)",
      "4 * ((13 - 12) + 5)",
      "12 + (13 - (5 - 4))",
      "4 + (13 - (5 - 12))",
      "13 + ((12 + 4) - 5)",
      "(12 + (4 - 5)) + 13",
      "13 - (5 - (12 + 4))",
      "(12 + (13 + 4)) - 5",
      "(13 - (5 - 12)) + 4",
      "(4 - 5) + (13 + 12)",
      "(13 - 5) + (4 + 12)",
      "(4 - (5 - 12)) + 13",
      "(4 + 12) + (13 - 5)",
      "(12 - 5) + (4 + 13)",
      "4 - ((5 - 13) - 12)",
      "4 * (5 + (13 - 12))",
      "(4 + (12 + 13)) - 5",
      "13 - (5 - (4 + 12))",
      "13 + ((4 - 5) + 12)",
      "4 * (5 - (12 - 13))",
      "((4 - 5) + 12) + 13",
      "13 - ((5 - 4) - 12)",
      "12 + (4 - (5 - 13))",
      "13 + (4 - (5 - 12))",
      "((13 + 12) + 4) - 5",
      "((12 + 13) - 5) + 4",
      "12 + ((13 - 5) + 4)",
      "4 * (13 + (5 - 12))",
      "((12 - 5) + 13) + 4",
      "(4 - (5 - 13)) + 12",
      "13 + (4 + (12 - 5))",
      "4 + (13 + (12 - 5))",
      "(13 + (5 - 12)) * 4",
      "((12 + 4) - 5) + 13",
      "4 + (12 + (13 - 5))",
      "((4 - 5) + 13) + 12",
      "4 * ((13 + 5) - 12)",
      "12 - (5 - (13 + 4))",
      "(4 + 13) - (5 - 12)",
      "12 - ((5 - 4) - 13)",
      "(5 - (12 - 13)) * 4",
      "(13 + 4) - (5 - 12)",
      "((12 - 5) + 4) + 13",
      "(12 + 13) - (5 - 4)",
      "(12 + 4) - (5 - 13)",
      "4 + ((12 - 5) + 13)",
      "13 + ((12 - 5) + 4)",
      "(13 + (4 - 5)) + 12",
      "(12 + (4 + 13)) - 5",
      "(13 - (12 - 5)) * 4",
      "((13 - 5) + 12) + 4",
      "((13 + 5) - 12) * 4",
      "(4 + (12 - 5)) + 13",
      "((13 - 5) * 12) / 4",
      "(13 - 5) / (4 / 12)",
      "(13 + 12) - (5 - 4)",
      "(4 + (13 + 12)) - 5",
      "((4 + 12) + 13) - 5",
      "(12 * (13 - 5)) / 4",
      "4 - (5 - (13 + 12))",
      "((13 + 4) + 12) - 5",
      "13 + ((4 + 12) - 5)",
      "4 * ((5 + 13) - 12)",
      "12 - (5 - (4 + 13))",
      "4 + ((13 - 5) + 12)",
      "4 + ((12 + 13) - 5)",
      "(12 - (5 - 4)) + 13",
      "(13 + (4 + 12)) - 5",
      "4 + (12 - (5 - 13))",
      "(12 + 13) + (4 - 5)",
      "((4 + 12) - 5) + 13",
      "(4 + 13) + (12 - 5)",
      "12 + (4 + (13 - 5))",
      "((4 + 13) - 5) + 12",
      "4 - ((5 - 12) - 13)",
      "(4 + (13 - 5)) + 12",
      "(13 - 5) * (12 / 4)",
      "((13 - 5) + 4) + 12",
      "12 - ((5 - 13) - 4)",
      "(12 - (5 - 13)) + 4",
      "((13 - 12) + 5) * 4",
      "4 - (5 - (12 + 13))",
      "(12 / 4) * (13 - 5)",
      "((13 + 4) - 5) + 12",
      "13 + (12 + (4 - 5))",
      "(5 + (13 - 12)) * 4"
    ]
  },
  "4 5 13 13": {
    "cards": "4 5 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 + (13 / 13)) * 4",
      "((13 / 13) + 5) * 4",
      "4 * (5 + (13 / 13))",
      "4 * ((13 / 13) + 5)"
    ]
  },
  "4 6 6 6": {
    "cards": "4 6 6 6",
    "has_solution": "Y",
    "num_solutions": 87,
    "solutions": [
      "(6 + (6 - 6)) * 4",
      "(6 * 4) + (6 - 6)",
      "(4 + (6 - 6)) * 6",
      "6 / ((6 / 4) / 6)",
      "((4 / 6) * 6) * 6",
      "6 * (4 + (6 - 6))",
      "((6 - 6) + 4) * 6",
      "(4 * 6) + (6 - 6)",
      "(6 + (6 * 4)) - 6",
      "6 * ((6 + 4) - 6)",
      "((6 + 6) - 6) * 4",
      "(4 / 6) * (6 * 6)",
      "4 * ((6 + 6) - 6)",
      "6 + ((4 * 6) - 6)",
      "6 * (6 - (6 - 4))",
      "4 * (6 + (6 - 6))",
      "(4 * (6 * 6)) / 6",
      "(6 * (6 * 4)) / 6",
      "4 * (6 - (6 - 6))",
      "6 * ((6 * 4) / 6)",
      "(6 + (4 * 6)) - 6",
      "4 * ((6 - 6) + 6)",
      "(4 * 6) - (6 - 6)",
      "6 - (6 - (4 * 6))",
      "(4 * 6) * (6 / 6)",
      "6 * (6 + (4 - 6))",
      "(6 * 6) / (6 / 4)",
      "6 + ((6 * 4) - 6)",
      "((6 * 6) * 4) / 6",
      "6 * ((4 * 6) / 6)",
      "(6 * (4 / 6)) * 6",
      "(4 - (6 - 6)) * 6",
      "(6 - 6) + (6 * 4)",
      "(6 + (4 - 6)) * 6",
      "(4 * 6) / (6 / 6)",
      "6 * (4 - (6 - 6))",
      "6 / (6 / (4 * 6))",
      "((4 * 6) * 6) / 6",
      "(6 * 4) * (6 / 6)",
      "6 * (4 * (6 / 6))",
      "4 * ((6 / 6) * 6)",
      "((4 * 6) + 6) - 6",
      "4 * (6 / (6 / 6))",
      "6 * ((4 / 6) * 6)",
      "6 * ((4 - 6) + 6)",
      "4 / (6 / (6 * 6))",
      "(6 / 6) * (6 * 4)",
      "((4 * 6) - 6) + 6",
      "((6 + 4) - 6) * 6",
      "(6 * 4) - (6 - 6)",
      "((6 * 6) / 6) * 4",
      "((6 * 4) - 6) + 6",
      "4 / ((6 / 6) / 6)",
      "((6 * 4) + 6) - 6",
      "(6 / (6 / 6)) * 4",
      "4 * (6 * (6 / 6))",
      "6 / ((6 / 6) / 4)",
      "(4 * (6 / 6)) * 6",
      "6 * (4 / (6 / 6))",
      "6 * (6 / (6 / 4))",
      "6 * ((6 / 6) * 4)",
      "6 - (6 - (6 * 4))",
      "(6 - 6) + (4 * 6)",
      "6 * ((4 + 6) - 6)",
      "(4 / (6 / 6)) * 6",
      "(6 - 4) * (6 + 6)",
      "6 * (6 * (4 / 6))",
      "(6 * (6 / 6)) * 4",
      "((4 - 6) + 6) * 6",
      "(6 * 4) / (6 / 6)",
      "6 * ((6 - 6) + 4)",
      "((4 * 6) / 6) * 6",
      "6 / (6 / (6 * 4))",
      "(6 - (6 - 4)) * 6",
      "(6 * (4 * 6)) / 6",
      "((6 / 6) * 4) * 6",
      "(6 - (6 - 6)) * 4",
      "(6 / 6) * (4 * 6)",
      "((4 + 6) - 6) * 6",
      "((6 * 4) / 6) * 6",
      "((6 / 6) * 6) * 4",
      "((6 - 6) + 6) * 4",
      "(6 / (6 / 4)) * 6",
      "4 * ((6 * 6) / 6)",
      "(6 * 6) * (4 / 6)",
      "(6 + 6) * (6 - 4)",
      "((6 * 4) * 6) / 6"
    ]
  },
  "4 6 6 7": {
    "cards": "4 6 6 7",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "6 - ((4 - 7) * 6)",
      "4 * (6 * (7 - 6))",
      "4 / ((7 - 6) / 6)",
      "6 - (6 * (4 - 7))",
      "6 / ((7 - 6) / 4)",
      "6 * ((7 - 6) * 4)",
      "(6 / (7 - 6)) * 4",
      "(4 * 6) / (7 - 6)",
      "(6 * 4) / (7 - 6)",
      "(7 - (6 / 6)) * 4",
      "(6 * 4) * (7 - 6)",
      "6 + (6 * (7 - 4))",
      "(6 * (7 - 6)) * 4",
      "(7 - 6) * (6 * 4)",
      "(6 * (7 - 4)) + 6",
      "(7 - 6) * (4 * 6)",
      "6 + ((7 - 4) * 6)",
      "((7 - 6) * 4) * 6",
      "(4 / (7 - 6)) * 6",
      "4 * (6 / (7 - 6))",
      "6 * (4 / (7 - 6))",
      "(4 * (7 - 6)) * 6",
      "4 * (7 - (6 / 6))",
      "((7 - 4) * 6) + 6",
      "((7 - 6) * 6) * 4",
      "6 * (4 * (7 - 6))",
      "4 * ((7 - 6) * 6)",
      "(4 * 6) * (7 - 6)"
    ]
  },
  "4 6 6 8": {
    "cards": "4 6 6 8",
    "has_solution": "Y",
    "num_solutions": 88,
    "solutions": [
      "(4 + 6) + (8 + 6)",
      "6 * (6 - (8 / 4))",
      "(8 + (4 + 6)) + 6",
      "6 + (6 + (4 + 8))",
      "6 + (4 + (8 + 6))",
      "(6 * 6) - (8 + 4)",
      "8 * (4 - (6 / 6))",
      "(6 + (4 + 6)) + 8",
      "6 + (8 + (4 + 6))",
      "(6 * 6) - (4 + 8)",
      "(4 + (6 + 8)) + 6",
      "8 / ((6 - 4) / 6)",
      "8 * (6 / (6 - 4))",
      "6 + ((4 + 6) + 8)",
      "6 + (6 + (8 + 4))",
      "((4 + 8) + 6) + 6",
      "((6 + 6) * 8) / 4",
      "(6 + 6) * (8 / 4)",
      "8 + (4 + (6 + 6))",
      "(8 * 6) - (6 * 4)",
      "((6 + 6) / 4) * 8",
      "(6 * 8) - (4 * 6)",
      "(4 + 6) + (6 + 8)",
      "((6 * 6) - 8) - 4",
      "6 + ((8 + 6) + 4)",
      "((6 + 8) + 4) + 6",
      "(8 + (6 + 6)) + 4",
      "(6 + (8 + 6)) + 4",
      "6 + (4 + (6 + 8))",
      "(8 + (6 + 4)) + 6",
      "((8 + 6) + 6) + 4",
      "6 * (8 / (6 - 4))",
      "(4 + (6 + 6)) + 8",
      "((4 + 6) + 6) + 8",
      "(8 * 6) / (6 - 4)",
      "6 + ((6 + 8) + 4)",
      "((4 + 6) + 8) + 6",
      "(6 + 6) / (4 / 8)",
      "(6 + (8 + 4)) + 6",
      "((6 + 4) + 6) + 8",
      "(6 * 8) - (6 * 4)",
      "(8 * 6) - (4 * 6)",
      "(4 + 8) + (6 + 6)",
      "(6 + 4) + (8 + 6)",
      "(8 / (6 - 4)) * 6",
      "8 + ((6 + 4) + 6)",
      "(8 + 6) + (6 + 4)",
      "(6 - (8 / 4)) * 6",
      "4 + (6 + (8 + 6))",
      "(6 + 4) + (6 + 8)",
      "(6 + 8) + (6 + 4)",
      "4 + (8 + (6 + 6))",
      "6 + ((8 + 4) + 6)",
      "(6 / (6 - 4)) * 8",
      "(6 + (6 + 8)) + 4",
      "((6 + 6) + 8) + 4",
      "((6 + 8) + 6) + 4",
      "(6 + 6) + (8 + 4)",
      "(8 * (6 + 6)) / 4",
      "6 + ((4 + 8) + 6)",
      "(8 + 4) + (6 + 6)",
      "(4 - (6 / 6)) * 8",
      "((6 + 4) + 8) + 6",
      "4 + ((6 + 8) + 6)",
      "8 / (4 / (6 + 6))",
      "((8 + 6) + 4) + 6",
      "4 + ((8 + 6) + 6)",
      "(6 + 8) + (4 + 6)",
      "(6 + (4 + 8)) + 6",
      "((8 + 4) + 6) + 6",
      "8 * ((6 + 6) / 4)",
      "(8 + 6) + (4 + 6)",
      "((6 * 6) - 4) - 8",
      "(6 + (6 + 4)) + 8",
      "6 + (8 + (6 + 4))",
      "4 + ((6 + 6) + 8)",
      "8 + ((6 + 6) + 4)",
      "(4 + (8 + 6)) + 6",
      "8 + (6 + (4 + 6))",
      "(6 + 6) + (4 + 8)",
      "(8 / 4) * (6 + 6)",
      "((6 + 6) + 4) + 8",
      "(6 * 8) / (6 - 4)",
      "6 / ((6 - 4) / 8)",
      "4 + (6 + (6 + 8))",
      "6 + ((6 + 4) + 8)",
      "8 + ((4 + 6) + 6)",
      "8 + (6 + (6 + 4))"
    ]
  },
  "4 6 6 9": {
    "cards": "4 6 6 9",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(6 * (9 - 4)) - 6",
      "6 + (9 * (6 - 4))",
      "((6 - 4) * 9) + 6",
      "6 - (9 * (4 - 6))",
      "(4 * 9) - (6 + 6)",
      "((9 * 4) - 6) - 6",
      "(9 * (6 - 4)) + 6",
      "6 - ((4 - 6) * 9)",
      "((9 - 4) * 6) - 6",
      "6 + ((6 - 4) * 9)",
      "(9 * 4) - (6 + 6)",
      "((4 * 9) - 6) - 6"
    ]
  },
  "4 6 6 10": {
    "cards": "4 6 6 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "6 / (4 / (6 + 10))",
      "((6 + 10) * 6) / 4",
      "(10 + 6) * (6 / 4)",
      "(6 * (6 + 10)) / 4",
      "6 / (4 / (10 + 6))",
      "(6 + 10) * (6 / 4)",
      "6 * ((10 + 6) / 4)",
      "((6 + 10) / 4) * 6",
      "(6 + 10) / (4 / 6)",
      "(10 + 6) / (4 / 6)",
      "(6 / 4) * (10 + 6)",
      "6 * ((6 + 10) / 4)",
      "(6 * (10 + 6)) / 4",
      "((10 + 6) / 4) * 6",
      "(6 / 4) * (6 + 10)",
      "((10 + 6) * 6) / 4"
    ]
  },
  "4 6 6 11": {
    "cards": "4 6 6 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 6 12": {
    "cards": "4 6 6 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "6 + (6 * (12 / 4))",
      "6 + ((6 / 4) * 12)",
      "6 + ((12 / 4) * 6)",
      "12 + (6 * (6 - 4))",
      "(6 / (4 / 12)) + 6",
      "12 + ((6 - 4) * 6)",
      "6 + ((12 * 6) / 4)",
      "(6 * (6 - 4)) + 12",
      "12 - (6 * (4 - 6))",
      "((6 - 4) * 6) + 12",
      "((6 * 12) / 4) + 6",
      "6 + (12 / (4 / 6))",
      "((12 / 4) * 6) + 6",
      "6 + (6 / (4 / 12))",
      "(12 / (4 / 6)) + 6",
      "6 + (12 * (6 / 4))",
      "6 + ((6 * 12) / 4)",
      "(12 * (6 / 4)) + 6",
      "((6 / 4) * 12) + 6",
      "(6 * (12 / 4)) + 6",
      "12 - ((4 - 6) * 6)",
      "((12 * 6) / 4) + 6"
    ]
  },
  "4 6 6 13": {
    "cards": "4 6 6 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 7 7": {
    "cards": "4 6 7 7",
    "has_solution": "Y",
    "num_solutions": 198,
    "solutions": [
      "4 * ((7 + 6) - 7)",
      "(4 - (7 - 7)) * 6",
      "((4 - 7) + 7) * 6",
      "7 + ((4 + 7) + 6)",
      "7 + ((6 * 4) - 7)",
      "7 / (7 / (4 * 6))",
      "((4 * 7) * 6) / 7",
      "((7 + 6) - 7) * 4",
      "4 / (7 / (7 * 6))",
      "(7 - 7) + (4 * 6)",
      "7 - (7 - (4 * 6))",
      "(6 * (4 * 7)) / 7",
      "(4 * 7) / (7 / 6)",
      "((7 + 4) + 7) + 6",
      "(7 / 7) * (4 * 6)",
      "(7 + (6 - 7)) * 4",
      "(7 + (4 + 6)) + 7",
      "(6 + 7) + (4 + 7)",
      "6 * (7 + (4 - 7))",
      "6 / ((7 / 4) / 7)",
      "((6 + 7) + 4) + 7",
      "(4 / (7 / 6)) * 7",
      "6 + ((7 + 4) + 7)",
      "(7 * 4) / (7 / 6)",
      "4 * ((6 / 7) * 7)",
      "(7 + 6) + (4 + 7)",
      "(7 / 7) * (6 * 4)",
      "6 * (7 / (7 / 4))",
      "(7 + 4) + (6 + 7)",
      "(4 * 6) * (7 / 7)",
      "((6 * 4) + 7) - 7",
      "(7 + 7) + (4 + 6)",
      "(7 * (4 / 7)) * 6",
      "7 * (6 / (7 / 4))",
      "(7 + (4 * 6)) - 7",
      "4 * (6 + (7 - 7))",
      "((7 - 7) + 6) * 4",
      "7 * ((6 / 7) * 4)",
      "(7 + 6) + (7 + 4)",
      "7 + ((6 + 4) + 7)",
      "7 - (7 - (6 * 4))",
      "(7 / (7 / 6)) * 4",
      "4 + ((7 + 6) + 7)",
      "6 + ((7 + 7) + 4)",
      "7 + (7 + (4 + 6))",
      "(4 * 7) * (6 / 7)",
      "6 + (4 + (7 + 7))",
      "6 * ((7 * 4) / 7)",
      "6 * (7 * (4 / 7))",
      "7 + ((4 * 6) - 7)",
      "((6 * 4) * 7) / 7",
      "7 / (7 / (6 * 4))",
      "((7 + 7) + 6) + 4",
      "4 * (7 / (7 / 6))",
      "(6 * 4) * (7 / 7)",
      "(6 + (7 + 4)) + 7",
      "(4 + (7 + 6)) + 7",
      "7 + (4 + (6 + 7))",
      "((4 / 7) * 7) * 6",
      "(4 * (6 / 7)) * 7",
      "((4 * 7) / 7) * 6",
      "7 * ((6 * 4) / 7)",
      "4 + (7 + (6 + 7))",
      "(4 / (7 / 7)) * 6",
      "(7 + 4) + (7 + 6)",
      "(7 + (6 * 4)) - 7",
      "6 * (4 - (7 - 7))",
      "(4 + (6 + 7)) + 7",
      "((6 * 4) - 7) + 7",
      "(7 * (6 / 7)) * 4",
      "((7 + 7) + 4) + 6",
      "(7 - 7) + (6 * 4)",
      "((4 + 7) + 6) + 7",
      "(6 * 4) / (7 / 7)",
      "4 + (7 + (7 + 6))",
      "4 * (6 / (7 / 7))",
      "((6 + 7) + 7) + 4",
      "7 + ((4 + 6) + 7)",
      "6 * ((4 + 7) - 7)",
      "(6 * 4) - (7 - 7)",
      "4 * (7 - (7 - 6))",
      "6 + ((4 + 7) + 7)",
      "(6 / 7) * (4 * 7)",
      "(7 + 7) + (6 + 4)",
      "(6 / (7 / 7)) * 4",
      "((6 * 7) / 7) * 4",
      "6 / (7 / (4 * 7))",
      "((4 + 6) + 7) + 7",
      "((7 / 7) * 6) * 4",
      "4 + ((7 + 7) + 6)",
      "((4 * 6) * 7) / 7",
      "((7 + 4) + 6) + 7",
      "((4 + 7) + 7) + 6",
      "(6 / 7) * (7 * 4)",
      "4 * ((6 - 7) + 7)",
      "7 + (4 + (7 + 6))",
      "6 * (7 - (7 - 4))",
      "4 * (6 * (7 / 7))",
      "7 * (4 * (6 / 7))",
      "(6 + 4) + (7 + 7)",
      "7 + ((6 + 7) + 4)",
      "6 * ((7 + 4) - 7)",
      "((6 * 4) / 7) * 7",
      "4 / ((7 / 7) / 6)",
      "7 * (4 / (7 / 6))",
      "6 * ((7 - 7) + 4)",
      "(7 + (7 + 4)) + 6",
      "(4 + 7) + (6 + 7)",
      "(4 * (7 * 6)) / 7",
      "(7 + (6 + 7)) + 4",
      "(7 * 6) * (4 / 7)",
      "(6 + 7) + (7 + 4)",
      "(6 - (7 - 7)) * 4",
      "4 * (6 - (7 - 7))",
      "7 / ((7 / 6) / 4)",
      "(4 * (7 / 7)) * 6",
      "4 * ((6 + 7) - 7)",
      "((7 * 6) * 4) / 7",
      "4 + (6 + (7 + 7))",
      "(6 * 4) + (7 - 7)",
      "4 * (7 * (6 / 7))",
      "4 + ((6 + 7) + 7)",
      "6 + (7 + (4 + 7))",
      "((7 + 6) + 4) + 7",
      "(4 / 7) * (7 * 6)",
      "(6 * (7 * 4)) / 7",
      "7 * (6 * (4 / 7))",
      "7 + (6 + (7 + 4))",
      "6 * ((4 * 7) / 7)",
      "((7 * 4) * 6) / 7",
      "(7 + (6 + 4)) + 7",
      "6 + (7 + (7 + 4))",
      "6 * ((7 / 7) * 4)",
      "(6 * 7) * (4 / 7)",
      "((7 * 6) / 7) * 4",
      "((6 + 4) + 7) + 7",
      "(7 - (7 - 4)) * 6",
      "(7 * 6) / (7 / 4)",
      "(7 * (4 * 6)) / 7",
      "(4 + 7) + (7 + 6)",
      "(4 * 6) / (7 / 7)",
      "7 * ((4 * 6) / 7)",
      "6 * ((4 / 7) * 7)",
      "(4 * 6) + (7 - 7)",
      "(7 + (7 + 6)) + 4",
      "4 / ((7 / 6) / 7)",
      "(4 + (7 + 7)) + 6",
      "4 / (7 / (6 * 7))",
      "4 * ((7 * 6) / 7)",
      "(4 + 6) + (7 + 7)",
      "6 * (4 + (7 - 7))",
      "6 / ((7 / 7) / 4)",
      "(7 / (7 / 4)) * 6",
      "4 * ((7 - 7) + 6)",
      "((7 + 6) + 7) + 4",
      "((6 + 7) - 7) * 4",
      "7 + ((7 + 4) + 6)",
      "6 * (4 / (7 / 7))",
      "(6 * (4 / 7)) * 7",
      "((6 / 7) * 7) * 4",
      "(7 * 4) * (6 / 7)",
      "(7 * (6 * 4)) / 7",
      "(6 + (7 - 7)) * 4",
      "6 / (7 / (7 * 4))",
      "((4 * 6) - 7) + 7",
      "6 * ((4 - 7) + 7)",
      "7 + ((7 + 6) + 4)",
      "(4 + (7 - 7)) * 6",
      "(4 * (6 * 7)) / 7",
      "(7 + (4 + 7)) + 6",
      "((7 / 7) * 4) * 6",
      "4 * ((7 / 7) * 6)",
      "((4 / 7) * 6) * 7",
      "4 * (7 + (6 - 7))",
      "7 + (6 + (4 + 7))",
      "((4 * 6) / 7) * 7",
      "(6 + (4 + 7)) + 7",
      "(4 / 7) * (6 * 7)",
      "7 / ((7 / 4) / 6)",
      "7 * ((4 / 7) * 6)",
      "7 + (7 + (6 + 4))",
      "((6 / 7) * 4) * 7",
      "(4 * 6) - (7 - 7)",
      "(6 * (7 / 7)) * 4",
      "4 * ((6 * 7) / 7)",
      "(7 + (4 - 7)) * 6",
      "((6 - 7) + 7) * 4",
      "((7 + 4) - 7) * 6",
      "((7 - 7) + 4) * 6",
      "(6 + (7 + 7)) + 4",
      "((7 * 4) / 7) * 6",
      "(7 - (7 - 6)) * 4",
      "6 * (4 * (7 / 7))",
      "((4 * 6) + 7) - 7",
      "((6 * 7) * 4) / 7",
      "((4 + 7) - 7) * 6",
      "(6 / (7 / 4)) * 7",
      "(6 * 7) / (7 / 4)"
    ]
  },
  "4 6 7 8": {
    "cards": "4 6 7 8",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "(4 * 6) * (8 - 7)",
      "8 * ((4 + 6) - 7)",
      "8 * (4 + (6 - 7))",
      "4 * (6 * (8 - 7))",
      "4 * (6 / (8 - 7))",
      "((8 - 7) * 4) * 6",
      "((8 - 7) * 6) * 4",
      "(4 + (6 - 7)) * 8",
      "8 * (4 - (7 - 6))",
      "((4 - 7) + 6) * 8",
      "((6 + 4) - 7) * 8",
      "6 * (4 * (8 - 7))",
      "6 * ((8 - 7) * 4)",
      "6 / ((8 - 7) / 4)",
      "(8 - 7) * (6 * 4)",
      "(6 * 4) * (8 - 7)",
      "8 * ((6 - 7) + 4)",
      "4 / ((8 - 7) / 6)",
      "8 * ((4 - 7) + 6)",
      "(6 + (4 - 7)) * 8",
      "(6 * (8 - 7)) * 4",
      "(6 / (8 - 7)) * 4",
      "(6 * 4) / (8 - 7)",
      "4 * ((8 - 7) * 6)",
      "((6 - 7) + 4) * 8",
      "(4 * (8 - 7)) * 6",
      "((4 + 6) - 7) * 8",
      "(4 * 6) / (8 - 7)",
      "8 * (6 + (4 - 7))",
      "(6 - (7 - 4)) * 8",
      "(4 / (8 - 7)) * 6",
      "(8 - 7) * (4 * 6)",
      "8 * ((6 + 4) - 7)",
      "(4 - (7 - 6)) * 8",
      "6 * (4 / (8 - 7))",
      "8 * (6 - (7 - 4))"
    ]
  },
  "4 6 7 9": {
    "cards": "4 6 7 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(6 * (9 + 7)) / 4",
      "6 / (4 / (9 + 7))",
      "((7 + 9) * 6) / 4",
      "(9 + 7) * (6 / 4)",
      "(6 / 4) * (9 + 7)",
      "6 * ((7 + 9) / 4)",
      "((9 + 7) / 4) * 6",
      "6 * ((9 + 7) / 4)",
      "(7 + 9) * (6 / 4)",
      "((9 + 7) * 6) / 4",
      "(7 + 9) / (4 / 6)",
      "6 / (4 / (7 + 9))",
      "((7 + 9) / 4) * 6",
      "(9 + 7) / (4 / 6)",
      "(6 / 4) * (7 + 9)",
      "(6 * (7 + 9)) / 4"
    ]
  },
  "4 6 7 10": {
    "cards": "4 6 7 10",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "6 + ((7 * 4) - 10)",
      "((6 - 4) * 7) + 10",
      "((7 - 4) * 10) - 6",
      "6 + ((4 * 7) - 10)",
      "10 + (7 * (6 - 4))",
      "10 - ((4 - 6) * 7)",
      "10 + ((6 - 4) * 7)",
      "10 - (7 * (4 - 6))",
      "(7 * (6 - 4)) + 10",
      "((10 - 6) * 7) - 4",
      "(6 - 10) + (7 * 4)",
      "((4 * 7) + 6) - 10",
      "6 - (10 - (4 * 7))",
      "(4 * 7) - (10 - 6)",
      "(6 - 10) + (4 * 7)",
      "6 - (10 - (7 * 4))",
      "(7 * 4) + (6 - 10)",
      "(4 * 7) + (6 - 10)",
      "((7 * 4) - 10) + 6",
      "(6 + (4 * 7)) - 10",
      "(6 + (7 * 4)) - 10",
      "((4 * 7) - 10) + 6",
      "(7 * 4) - (10 - 6)",
      "(10 * (7 - 4)) - 6",
      "((7 * 4) + 6) - 10",
      "(7 * (10 - 6)) - 4"
    ]
  },
  "4 6 7 11": {
    "cards": "4 6 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 7 12": {
    "cards": "4 6 7 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(12 / (7 - 4)) * 6",
      "6 / ((7 - 4) / 12)",
      "(12 * 6) / (7 - 4)",
      "(7 - (12 / 4)) * 6",
      "6 * (12 / (7 - 4))",
      "12 / ((7 - 4) / 6)",
      "(6 / (7 - 4)) * 12",
      "(6 * 12) / (7 - 4)",
      "6 * (7 - (12 / 4))",
      "12 * (6 / (7 - 4))"
    ]
  },
  "4 6 7 13": {
    "cards": "4 6 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 8 8": {
    "cards": "4 6 8 8",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "6 * ((8 + 8) / 4)",
      "8 * (4 / (8 / 6))",
      "6 * (4 * (8 / 8))",
      "8 - (8 * (4 - 6))",
      "((8 + 6) - 8) * 4",
      "(8 - 8) + (4 * 6)",
      "8 - (8 - (6 * 4))",
      "(8 + (4 - 8)) * 6",
      "(8 + (4 * 6)) - 8",
      "(6 * (4 * 8)) / 8",
      "(6 - (8 - 8)) * 4",
      "6 * ((8 + 4) - 8)",
      "(6 + (8 - 8)) * 4",
      "4 / (8 / (6 * 8))",
      "((4 * 6) / 8) * 8",
      "((4 / 8) * 8) * 6",
      "4 * (6 + (8 - 8))",
      "((8 + 4) - 8) * 6",
      "((8 / 8) * 4) * 6",
      "((6 / 8) * 8) * 4",
      "(6 / 8) * (4 * 8)",
      "((8 + 8) / 4) * 6",
      "((6 * 8) / 8) * 4",
      "6 * ((8 - 8) + 4)",
      "(6 / 4) * (8 + 8)",
      "((8 - 8) + 6) * 4",
      "8 / (8 / (4 * 6))",
      "(8 + 4) * (8 - 6)",
      "(8 * (6 * 4)) / 8",
      "6 / (8 / (8 * 4))",
      "(4 * (6 / 8)) * 8",
      "(8 * 4) * (6 / 8)",
      "(8 / (8 / 6)) * 4",
      "(4 * 6) + (8 - 8)",
      "4 * ((6 / 8) * 8)",
      "8 * (6 / (8 / 4))",
      "(8 - 8) + (6 * 4)",
      "6 * (4 - (8 - 8))",
      "6 * ((4 - 8) + 8)",
      "((8 * 4) / 8) * 6",
      "(4 * 8) * (6 / 8)",
      "4 * ((8 + 6) - 8)",
      "((4 * 6) * 8) / 8",
      "(8 - (8 - 6)) * 4",
      "((4 * 8) / 8) * 6",
      "4 * ((8 * 6) / 8)",
      "(4 * 6) - (8 - 8)",
      "4 * ((8 - 8) + 6)",
      "6 * (8 + (4 - 8))",
      "4 * ((8 / 8) * 6)",
      "8 / (8 / (6 * 4))",
      "((8 * 6) * 4) / 8",
      "4 * ((6 + 8) - 8)",
      "((6 * 4) - 8) + 8",
      "8 + ((6 * 4) - 8)",
      "4 * (8 / (8 / 6))",
      "((4 + 8) - 8) * 6",
      "((8 + 8) * 6) / 4",
      "(6 * 4) * (8 / 8)",
      "(8 + 8) * (6 / 4)",
      "4 * (6 - (8 - 8))",
      "((6 - 8) + 8) * 4",
      "6 / (4 / (8 + 8))",
      "(8 + 8) / (4 / 6)",
      "(6 * 4) / (8 / 8)",
      "6 * ((8 * 4) / 8)",
      "(8 / 8) * (6 * 4)",
      "6 * ((8 / 8) * 4)",
      "((4 / 8) * 6) * 8",
      "((6 * 4) * 8) / 8",
      "(4 + (8 - 8)) * 6",
      "(4 / 8) * (6 * 8)",
      "8 / ((8 / 6) / 4)",
      "8 - (8 - (4 * 6))",
      "(6 * (4 / 8)) * 8",
      "(8 / (8 / 4)) * 6",
      "6 * (4 / (8 / 8))",
      "(8 + (6 * 4)) - 8",
      "6 * ((4 * 8) / 8)",
      "(6 * 8) * (4 / 8)",
      "((6 * 8) * 4) / 8",
      "((6 / 8) * 4) * 8",
      "(8 - (8 - 4)) * 6",
      "(8 * (4 * 6)) / 8",
      "((4 * 6) - 8) + 8",
      "6 / (8 / (4 * 8))",
      "8 / ((8 / 4) / 6)",
      "(8 * 6) * (4 / 8)",
      "(4 / 8) * (8 * 6)",
      "(4 / (8 / 6)) * 8",
      "(6 / (8 / 8)) * 4",
      "4 * (6 / (8 / 8))",
      "8 * (6 * (4 / 8))",
      "(6 * (8 + 8)) / 4",
      "(6 * 4) + (8 - 8)",
      "(6 / (8 / 4)) * 8",
      "(4 + 8) * (8 - 6)",
      "(6 * (8 * 4)) / 8",
      "(8 * (6 - 4)) + 8",
      "4 * (8 * (6 / 8))",
      "8 + ((6 - 4) * 8)",
      "(6 * 8) / (8 / 4)",
      "(4 - (8 - 8)) * 6",
      "(6 * (8 / 8)) * 4",
      "(4 / (8 / 8)) * 6",
      "4 * (8 + (6 - 8))",
      "((8 / 8) * 6) * 4",
      "6 / ((8 / 4) / 8)",
      "(8 * 4) / (8 / 6)",
      "4 * (6 * (8 / 8))",
      "4 / ((8 / 6) / 8)",
      "(6 * 4) - (8 - 8)",
      "((4 * 6) + 8) - 8",
      "((6 * 4) / 8) * 8",
      "6 * ((4 / 8) * 8)",
      "8 * ((4 / 8) * 6)",
      "6 * (4 + (8 - 8))",
      "(4 * (6 * 8)) / 8",
      "6 * (8 - (8 - 4))",
      "((4 * 8) * 6) / 8",
      "4 * ((6 - 8) + 8)",
      "((8 - 8) + 4) * 6",
      "8 * ((6 / 8) * 4)",
      "4 / ((8 / 8) / 6)",
      "((6 + 8) - 8) * 4",
      "((4 - 8) + 8) * 6",
      "((8 * 4) * 6) / 8",
      "8 - ((4 - 6) * 8)",
      "(8 * 6) / (8 / 4)",
      "6 * ((4 + 8) - 8)",
      "6 * (8 * (4 / 8))",
      "((6 - 4) * 8) + 8",
      "((8 * 6) / 8) * 4",
      "6 / ((8 / 8) / 4)",
      "(4 * (8 / 8)) * 6",
      "8 * ((4 * 6) / 8)",
      "(8 - 6) * (4 + 8)",
      "(8 / 8) * (4 * 6)",
      "(4 * (8 * 6)) / 8",
      "(8 - 6) * (8 + 4)",
      "4 * ((6 * 8) / 8)",
      "6 * (8 / (8 / 4))",
      "8 + ((4 * 6) - 8)",
      "((6 * 4) + 8) - 8",
      "8 * ((6 * 4) / 8)",
      "(8 * (4 / 8)) * 6",
      "(6 / 8) * (8 * 4)",
      "(8 + (6 - 8)) * 4",
      "8 * (4 * (6 / 8))",
      "(4 * 6) * (8 / 8)",
      "4 / (8 / (8 * 6))",
      "(8 * (6 / 8)) * 4",
      "4 * (8 - (8 - 6))",
      "(4 * 8) / (8 / 6)",
      "8 + (8 * (6 - 4))",
      "(4 * 6) / (8 / 8)"
    ]
  },
  "4 6 8 9": {
    "cards": "4 6 8 9",
    "has_solution": "Y",
    "num_solutions": 38,
    "solutions": [
      "6 + ((9 / 4) * 8)",
      "((9 - 8) * 6) * 4",
      "4 * (6 * (9 - 8))",
      "9 * (4 - (8 / 6))",
      "6 / ((9 - 8) / 4)",
      "6 + (9 * (8 / 4))",
      "6 * (4 / (9 - 8))",
      "(4 * 6) / (9 - 8)",
      "((8 * 9) / 4) + 6",
      "(6 * (9 - 8)) * 4",
      "(9 - 8) * (6 * 4)",
      "(9 - 8) * (4 * 6)",
      "6 + (8 / (4 / 9))",
      "((9 * 8) / 4) + 6",
      "4 * ((9 - 8) * 6)",
      "6 + ((8 / 4) * 9)",
      "4 / ((9 - 8) / 6)",
      "6 + (8 * (9 / 4))",
      "(6 * 4) / (9 - 8)",
      "6 + (9 / (4 / 8))",
      "((9 - 8) * 4) * 6",
      "6 * (4 * (9 - 8))",
      "6 + ((8 * 9) / 4)",
      "6 * ((9 - 8) * 4)",
      "(8 / (4 / 9)) + 6",
      "6 + ((9 * 8) / 4)",
      "(4 - (8 / 6)) * 9",
      "(4 * 6) * (9 - 8)",
      "(8 * (9 / 4)) + 6",
      "(6 * 4) * (9 - 8)",
      "(6 / (9 - 8)) * 4",
      "((8 / 4) * 9) + 6",
      "(9 / (4 / 8)) + 6",
      "((9 / 4) * 8) + 6",
      "(4 * (9 - 8)) * 6",
      "(4 / (9 - 8)) * 6",
      "4 * (6 / (9 - 8))",
      "(9 * (8 / 4)) + 6"
    ]
  },
  "4 6 8 10": {
    "cards": "4 6 8 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "8 - ((6 - 10) * 4)",
      "((8 - 6) * 10) + 4",
      "4 + ((8 - 6) * 10)",
      "(4 * (10 - 6)) + 8",
      "8 + ((10 - 6) * 4)",
      "(10 * (8 - 6)) + 4",
      "4 + (10 * (8 - 6))",
      "((10 - 6) * 4) + 8",
      "8 + (4 * (10 - 6))",
      "4 - (10 * (6 - 8))",
      "8 - (4 * (6 - 10))",
      "4 - ((6 - 8) * 10)"
    ]
  },
  "4 6 8 11": {
    "cards": "4 6 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 8 12": {
    "cards": "4 6 8 12",
    "has_solution": "Y",
    "num_solutions": 64,
    "solutions": [
      "((4 + 8) / 6) * 12",
      "((4 - 8) + 6) * 12",
      "(4 * 12) / (8 - 6)",
      "(6 - (8 - 4)) * 12",
      "12 * ((6 - 8) + 4)",
      "12 + ((8 / 4) * 6)",
      "(12 / (8 - 6)) * 4",
      "(4 + (6 - 8)) * 12",
      "12 * (4 + (6 - 8))",
      "12 * ((4 + 8) / 6)",
      "(4 - 8) * (6 - 12)",
      "(8 + 4) * (12 / 6)",
      "((6 / 4) * 8) + 12",
      "(8 * (6 / 4)) + 12",
      "12 + (8 / (4 / 6))",
      "12 * (4 / (8 - 6))",
      "(4 / (8 - 6)) * 12",
      "(6 / (4 / 8)) + 12",
      "(12 * (8 + 4)) / 6",
      "(8 / (4 / 6)) + 12",
      "12 * (6 + (4 - 8))",
      "(12 / 6) * (8 + 4)",
      "((6 - 8) + 4) * 12",
      "(4 - (8 - 6)) * 12",
      "(6 * (8 / 4)) + 12",
      "((4 + 8) * 12) / 6",
      "12 * ((4 - 8) + 6)",
      "12 + ((6 / 4) * 8)",
      "12 * ((6 + 4) - 8)",
      "(12 / 6) * (4 + 8)",
      "(12 * 4) / (8 - 6)",
      "12 + (6 * (8 / 4))",
      "12 * ((8 + 4) / 6)",
      "(8 + 4) / (6 / 12)",
      "((8 + 4) * 12) / 6",
      "4 / ((8 - 6) / 12)",
      "12 * ((4 + 6) - 8)",
      "((6 + 4) - 8) * 12",
      "(12 - 6) * (8 - 4)",
      "(4 + 8) * (12 / 6)",
      "12 / (6 / (8 + 4))",
      "4 * (12 / (8 - 6))",
      "12 / ((8 - 6) / 4)",
      "12 / (6 / (4 + 8))",
      "8 * (6 - (12 / 4))",
      "((8 + 4) / 6) * 12",
      "4 * (8 - (12 / 6))",
      "((4 + 6) - 8) * 12",
      "(8 - (12 / 6)) * 4",
      "(6 + (4 - 8)) * 12",
      "(6 - (12 / 4)) * 8",
      "(12 * (4 + 8)) / 6",
      "(6 - 12) * (4 - 8)",
      "12 * (4 - (8 - 6))",
      "12 + ((8 * 6) / 4)",
      "((8 * 6) / 4) + 12",
      "((8 / 4) * 6) + 12",
      "12 + (8 * (6 / 4))",
      "(4 + 8) / (6 / 12)",
      "12 + ((6 * 8) / 4)",
      "(8 - 4) * (12 - 6)",
      "12 * (6 - (8 - 4))",
      "12 + (6 / (4 / 8))",
      "((6 * 8) / 4) + 12"
    ]
  },
  "4 6 8 13": {
    "cards": "4 6 8 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(13 - (4 + 6)) * 8",
      "((13 - 6) - 4) * 8",
      "8 * ((13 - 6) - 4)",
      "8 * ((13 - 4) - 6)",
      "((13 - 4) - 6) * 8",
      "8 * (13 - (6 + 4))",
      "8 * (13 - (4 + 6))",
      "(13 - (6 + 4)) * 8"
    ]
  },
  "4 6 9 9": {
    "cards": "4 6 9 9",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "((4 / 9) * 9) * 6",
      "(4 / 9) * (9 * 6)",
      "6 * ((4 - 9) + 9)",
      "((6 * 9) / 9) * 4",
      "((9 * 6) * 4) / 9",
      "(9 + (4 * 6)) - 9",
      "((4 * 6) / 9) * 9",
      "4 * (9 / (9 / 6))",
      "9 * ((6 * 4) / 9)",
      "(9 + (4 - 9)) * 6",
      "(6 * 9) / (9 / 4)",
      "9 / ((9 / 6) / 4)",
      "(6 * (9 * 4)) / 9",
      "(4 - (9 - 9)) * 6",
      "((6 - 9) + 9) * 4",
      "9 / ((9 / 4) / 6)",
      "(4 * 6) * (9 / 9)",
      "(4 * (9 / 9)) * 6",
      "((4 - 9) + 9) * 6",
      "9 * ((6 / 9) * 4)",
      "4 * ((6 * 9) / 9)",
      "(6 * 9) * (4 / 9)",
      "6 * ((9 * 4) / 9)",
      "4 * (6 * (9 / 9))",
      "(9 / (9 / 6)) * 4",
      "4 * ((6 + 9) - 9)",
      "9 / (9 / (4 * 6))",
      "6 * (9 / (9 / 4))",
      "(4 / 9) * (6 * 9)",
      "6 * (4 - (9 - 9))",
      "4 / (9 / (9 * 6))",
      "(9 * 6) / (9 / 4)",
      "4 * ((9 * 6) / 9)",
      "(9 * 4) * (6 / 9)",
      "9 + ((6 * 4) - 9)",
      "(4 * (6 / 9)) * 9",
      "6 * (9 * (4 / 9))",
      "(6 * 4) - (9 - 9)",
      "9 * ((4 / 9) * 6)",
      "4 * ((9 / 9) * 6)",
      "(4 * 9) / (9 / 6)",
      "6 / (9 / (9 * 4))",
      "(9 * 6) * (4 / 9)",
      "6 * (4 / (9 / 9))",
      "4 * (6 + (9 - 9))",
      "((4 * 9) * 6) / 9",
      "(6 * 4) / (9 / 9)",
      "((9 * 6) / 9) * 4",
      "4 / ((9 / 6) / 9)",
      "6 * (4 * (9 / 9))",
      "(9 * (4 / 9)) * 6",
      "4 * (9 + (6 - 9))",
      "((9 - 9) + 4) * 6",
      "(9 - 9) + (6 * 4)",
      "((6 * 4) / 9) * 9",
      "((6 * 9) * 4) / 9",
      "(9 * (6 / 9)) * 4",
      "6 / (9 / (4 * 9))",
      "6 * (9 - (9 - 4))",
      "(4 / (9 / 6)) * 9",
      "(4 / (9 / 9)) * 6",
      "4 / ((9 / 9) / 6)",
      "9 / (9 / (6 * 4))",
      "4 * ((6 / 9) * 9)",
      "6 * (9 + (4 - 9))",
      "(6 / (9 / 9)) * 4",
      "((9 / 9) * 6) * 4",
      "((6 / 9) * 9) * 4",
      "((4 / 9) * 6) * 9",
      "(4 * 6) / (9 / 9)",
      "((6 * 4) - 9) + 9",
      "6 * (4 + (9 - 9))",
      "9 * (4 * (6 / 9))",
      "((9 + 4) - 9) * 6",
      "(6 / 9) * (4 * 9)",
      "(6 * (9 / 9)) * 4",
      "9 * (4 / (9 / 6))",
      "4 / (9 / (6 * 9))",
      "(6 / (9 / 4)) * 9",
      "9 * (6 / (9 / 4))",
      "4 * ((9 - 9) + 6)",
      "(4 + (9 - 9)) * 6",
      "9 * ((4 * 6) / 9)",
      "((4 * 6) * 9) / 9",
      "9 * (6 * (4 / 9))",
      "4 * ((6 - 9) + 9)",
      "((4 * 6) + 9) - 9",
      "((6 * 4) + 9) - 9",
      "(9 * 4) / (9 / 6)",
      "((6 + 9) - 9) * 4",
      "9 - (9 - (4 * 6))",
      "(6 - (9 - 9)) * 4",
      "((9 - 9) + 6) * 4",
      "(9 / (9 / 4)) * 6",
      "(9 - (9 - 4)) * 6",
      "(9 / 9) * (4 * 6)",
      "((9 + 6) - 9) * 4",
      "6 / ((9 / 9) / 4)",
      "(4 * 9) * (6 / 9)",
      "(4 * (6 * 9)) / 9",
      "((9 / 9) * 4) * 6",
      "(6 / 9) * (9 * 4)",
      "((4 * 6) - 9) + 9",
      "9 + ((4 * 6) - 9)",
      "6 * ((4 + 9) - 9)",
      "((6 / 9) * 4) * 9",
      "(6 * 4) + (9 - 9)",
      "(4 * 6) + (9 - 9)",
      "((9 * 4) * 6) / 9",
      "9 - (9 - (6 * 4))",
      "(6 + (9 - 9)) * 4",
      "6 * ((9 + 4) - 9)",
      "6 * ((9 - 9) + 4)",
      "(9 - (9 - 6)) * 4",
      "(9 + (6 - 9)) * 4",
      "6 * ((9 / 9) * 4)",
      "4 * (9 * (6 / 9))",
      "((9 * 4) / 9) * 6",
      "((4 * 9) / 9) * 6",
      "(4 * (9 * 6)) / 9",
      "6 * ((4 / 9) * 9)",
      "((6 * 4) * 9) / 9",
      "(6 * 4) * (9 / 9)",
      "(9 - 9) + (4 * 6)",
      "6 * ((4 * 9) / 9)",
      "(9 * (6 * 4)) / 9",
      "(9 / 9) * (6 * 4)",
      "(6 * (4 / 9)) * 9",
      "4 * (6 - (9 - 9))",
      "4 * (6 / (9 / 9))",
      "(6 * (4 * 9)) / 9",
      "4 * ((9 + 6) - 9)",
      "(9 * (4 * 6)) / 9",
      "(9 + (6 * 4)) - 9",
      "(4 * 6) - (9 - 9)",
      "((4 + 9) - 9) * 6",
      "4 * (9 - (9 - 6))",
      "6 / ((9 / 4) / 9)"
    ]
  },
  "4 6 9 10": {
    "cards": "4 6 9 10",
    "has_solution": "Y",
    "num_solutions": 44,
    "solutions": [
      "(4 * 6) / (10 - 9)",
      "(4 / (10 - 9)) * 6",
      "9 + ((6 / 4) * 10)",
      "6 * (4 * (10 - 9))",
      "4 / ((10 - 9) / 6)",
      "6 * ((10 - 9) * 4)",
      "((10 * 6) / 4) + 9",
      "9 + (6 * (10 / 4))",
      "9 + (10 / (4 / 6))",
      "(6 / (4 / 10)) + 9",
      "((10 / 4) * 6) + 9",
      "((10 * 9) + 6) / 4",
      "9 + (10 * (6 / 4))",
      "(6 * 4) / (10 - 9)",
      "(6 * (10 - 9)) * 4",
      "(6 + (9 * 10)) / 4",
      "4 * (6 / (10 - 9))",
      "(10 / (4 / 6)) + 9",
      "(4 * 6) * (10 - 9)",
      "((6 * 10) / 4) + 9",
      "((6 / 4) * 10) + 9",
      "(10 * 6) - (9 * 4)",
      "(10 - 9) * (6 * 4)",
      "(4 * (10 - 9)) * 6",
      "9 + ((10 / 4) * 6)",
      "(6 * 10) - (4 * 9)",
      "6 / ((10 - 9) / 4)",
      "6 * (4 / (10 - 9))",
      "(10 * (6 / 4)) + 9",
      "((9 * 10) + 6) / 4",
      "9 + (6 / (4 / 10))",
      "((10 - 9) * 6) * 4",
      "(10 - 9) * (4 * 6)",
      "9 + ((6 * 10) / 4)",
      "9 + ((10 * 6) / 4)",
      "(6 * (10 / 4)) + 9",
      "(6 * 4) * (10 - 9)",
      "4 * (6 * (10 - 9))",
      "(10 * 6) - (4 * 9)",
      "(6 * 10) - (9 * 4)",
      "(6 + (10 * 9)) / 4",
      "((10 - 9) * 4) * 6",
      "4 * ((10 - 9) * 6)",
      "(6 / (10 - 9)) * 4"
    ]
  },
  "4 6 9 11": {
    "cards": "4 6 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 9 12": {
    "cards": "4 6 9 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "9 / (6 / (4 + 12))",
      "12 + ((9 - 6) * 4)",
      "(9 * (12 + 4)) / 6",
      "(4 * (9 - 6)) + 12",
      "(4 + 12) * (9 / 6)",
      "9 * ((4 + 12) / 6)",
      "9 / (6 / (12 + 4))",
      "12 - (4 * (6 - 9))",
      "(9 * (4 + 12)) / 6",
      "((12 + 4) * 9) / 6",
      "((12 + 4) / 6) * 9",
      "((4 + 12) / 6) * 9",
      "12 + (4 * (9 - 6))",
      "(9 / 6) * (12 + 4)",
      "9 * ((12 + 4) / 6)",
      "(12 + 4) * (9 / 6)",
      "(9 - 6) * (12 - 4)",
      "(9 / 6) * (4 + 12)",
      "12 - ((6 - 9) * 4)",
      "(4 + 12) / (6 / 9)",
      "((9 - 6) * 4) + 12",
      "(12 + 4) / (6 / 9)",
      "((4 + 12) * 9) / 6",
      "(4 - 12) * (6 - 9)",
      "(12 - 4) * (9 - 6)",
      "(6 - 9) * (4 - 12)"
    ]
  },
  "4 6 9 13": {
    "cards": "4 6 9 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "6 + ((9 + 13) - 4)",
      "(13 - 4) + (9 + 6)",
      "13 - ((4 - 6) - 9)",
      "((6 + 9) + 13) - 4",
      "(13 + (6 - 4)) + 9",
      "(13 + 6) - (4 - 9)",
      "(9 - (4 - 6)) + 13",
      "(6 + 13) - (4 - 9)",
      "(6 - (4 - 13)) + 9",
      "((9 - 4) + 6) + 13",
      "9 + ((13 - 4) + 6)",
      "(6 - 4) + (9 + 13)",
      "(13 + 6) + (9 - 4)",
      "(9 + (6 - 4)) + 13",
      "(13 - 4) + (6 + 9)",
      "(9 + 6) + (13 - 4)",
      "(13 - (4 - 6)) + 9",
      "13 + ((9 + 6) - 4)",
      "(9 + (13 - 4)) + 6",
      "13 + ((6 + 9) - 4)",
      "(13 + 9) - (4 - 6)",
      "13 - (4 - (9 + 6))",
      "(9 + (6 + 13)) - 4",
      "6 + (13 + (9 - 4))",
      "(6 - (4 - 9)) + 13",
      "9 + (13 + (6 - 4))",
      "((9 - 4) + 13) + 6",
      "(6 + (13 + 9)) - 4",
      "9 - (4 - (6 + 13))",
      "((6 + 13) + 9) - 4",
      "(6 + 13) + (9 - 4)",
      "9 + (6 - (4 - 13))",
      "(9 - 4) + (13 + 6)",
      "((6 + 13) - 4) + 9",
      "13 + ((9 - 4) + 6)",
      "(9 + (13 + 6)) - 4",
      "(6 + (9 + 13)) - 4",
      "6 + ((13 - 4) + 9)",
      "(6 + (9 - 4)) + 13",
      "(6 - 4) + (13 + 9)",
      "(13 - (4 - 9)) + 6",
      "13 + (6 + (9 - 4))",
      "(13 + (9 + 6)) - 4",
      "(13 + 9) + (6 - 4)",
      "((6 - 4) + 9) + 13",
      "((13 - 4) + 6) + 9",
      "13 + ((6 - 4) + 9)",
      "((13 + 9) + 6) - 4",
      "((13 - 4) + 9) + 6",
      "6 - (4 - (9 + 13))",
      "((6 - 4) + 13) + 9",
      "(9 + 13) - (4 - 6)",
      "9 + (13 - (4 - 6))",
      "(6 + (13 - 4)) + 9",
      "13 + (9 - (4 - 6))",
      "13 + (9 + (6 - 4))",
      "9 + (6 + (13 - 4))",
      "((6 + 9) - 4) + 13",
      "(13 + (6 + 9)) - 4",
      "((9 + 6) + 13) - 4",
      "13 - (4 - (6 + 9))",
      "6 + ((13 + 9) - 4)",
      "9 + ((6 + 13) - 4)",
      "9 - ((4 - 13) - 6)",
      "9 - ((4 - 6) - 13)",
      "6 - ((4 - 13) - 9)",
      "((13 + 6) + 9) - 4",
      "(9 - 4) + (6 + 13)",
      "13 + (6 - (4 - 9))",
      "6 + (9 + (13 - 4))",
      "13 - ((4 - 9) - 6)",
      "((9 + 13) - 4) + 6",
      "(9 + 6) - (4 - 13)",
      "((13 + 6) - 4) + 9",
      "9 + ((13 + 6) - 4)",
      "9 - (4 - (13 + 6))",
      "((9 + 6) - 4) + 13",
      "((13 + 9) - 4) + 6",
      "(9 - (4 - 13)) + 6",
      "6 + (13 - (4 - 9))",
      "((9 + 13) + 6) - 4",
      "9 + ((6 - 4) + 13)",
      "6 - ((4 - 9) - 13)",
      "(6 + 9) + (13 - 4)",
      "6 + (9 - (4 - 13))",
      "(6 + 9) - (4 - 13)",
      "(13 + (9 - 4)) + 6",
      "6 - (4 - (13 + 9))",
      "(9 + 13) + (6 - 4)",
      "6 + ((9 - 4) + 13)"
    ]
  },
  "4 6 10 10": {
    "cards": "4 6 10 10",
    "has_solution": "Y",
    "num_solutions": 150,
    "solutions": [
      "(4 * 6) / (10 / 10)",
      "(10 * 6) / (10 / 4)",
      "((10 / 10) * 6) * 4",
      "6 / ((10 / 4) / 10)",
      "10 - (10 - (4 * 6))",
      "((10 * 4) - 10) - 6",
      "(4 * 10) - (6 + 10)",
      "6 * (4 * (10 / 10))",
      "((4 * 6) - 10) + 10",
      "4 * ((10 * 6) / 10)",
      "4 * ((10 - 10) + 6)",
      "6 * (10 - (10 - 4))",
      "(4 - 10) * (6 - 10)",
      "4 * (10 * (6 / 10))",
      "4 * (6 - (10 - 10))",
      "6 * ((4 / 10) * 10)",
      "((10 * 4) / 10) * 6",
      "(4 * 10) - (10 + 6)",
      "(10 + (4 * 6)) - 10",
      "(10 - 10) + (4 * 6)",
      "(4 * 6) * (10 / 10)",
      "(10 - (10 - 6)) * 4",
      "((6 - 10) + 10) * 4",
      "4 * (10 - (10 - 6))",
      "((6 * 4) * 10) / 10",
      "10 * ((6 * 4) / 10)",
      "((10 - 10) + 4) * 6",
      "((10 * 6) / 10) * 4",
      "(4 / (10 / 10)) * 6",
      "(6 + (10 - 10)) * 4",
      "4 * ((6 - 10) + 10)",
      "((4 * 6) * 10) / 10",
      "(4 + (10 - 10)) * 6",
      "6 * (4 / (10 / 10))",
      "6 * ((10 * 4) / 10)",
      "(6 * (10 * 4)) / 10",
      "6 * ((10 + 4) - 10)",
      "4 / (10 / (6 * 10))",
      "6 / (10 / (4 * 10))",
      "((4 * 6) / 10) * 10",
      "(6 / (10 / 10)) * 4",
      "10 + ((6 * 4) - 10)",
      "(6 * (4 / 10)) * 10",
      "10 / ((10 / 6) / 4)",
      "4 / ((10 / 6) / 10)",
      "10 * ((4 / 10) * 6)",
      "(4 * (6 / 10)) * 10",
      "((6 + 10) - 10) * 4",
      "(10 - (10 - 4)) * 6",
      "6 * (4 - (10 - 10))",
      "4 * ((10 / 10) * 6)",
      "10 * (6 / (10 / 4))",
      "((4 * 6) + 10) - 10",
      "4 * ((6 * 10) / 10)",
      "10 * ((6 / 10) * 4)",
      "((6 / 10) * 4) * 10",
      "6 * ((10 - 10) + 4)",
      "((10 + 4) - 10) * 6",
      "(10 / (10 / 4)) * 6",
      "(6 * 4) - (10 - 10)",
      "(4 * (6 * 10)) / 10",
      "((6 * 4) / 10) * 10",
      "4 * (10 / (10 / 6))",
      "(4 * 10) * (6 / 10)",
      "(6 / (10 / 4)) * 10",
      "((6 * 10) * 4) / 10",
      "4 * (6 * (10 / 10))",
      "(10 - 6) * (10 - 4)",
      "(10 * (6 * 4)) / 10",
      "(6 * 4) + (10 - 10)",
      "(4 * (10 * 6)) / 10",
      "(10 + (6 - 10)) * 4",
      "(10 - 10) + (6 * 4)",
      "(6 * 4) * (10 / 10)",
      "6 / (10 / (10 * 4))",
      "6 * (10 / (10 / 4))",
      "(4 / (10 / 6)) * 10",
      "(10 * 4) - (6 + 10)",
      "4 / ((10 / 10) / 6)",
      "((10 * 4) * 6) / 10",
      "6 * ((4 - 10) + 10)",
      "(6 * 4) / (10 / 10)",
      "10 - (10 - (6 * 4))",
      "(4 * 6) - (10 - 10)",
      "((10 * 6) * 4) / 10",
      "6 * ((10 / 10) * 4)",
      "(10 * (4 * 6)) / 10",
      "((4 - 10) + 10) * 6",
      "(10 - 4) * (10 - 6)",
      "6 / ((10 / 10) / 4)",
      "((4 / 10) * 6) * 10",
      "10 * (4 * (6 / 10))",
      "(6 / 10) * (10 * 4)",
      "((6 * 4) - 10) + 10",
      "6 * (4 + (10 - 10))",
      "10 * (6 * (4 / 10))",
      "6 * (10 + (4 - 10))",
      "(10 * 4) * (6 / 10)",
      "(4 / 10) * (10 * 6)",
      "((10 - 10) + 6) * 4",
      "6 * (10 * (4 / 10))",
      "(6 * 10) / (10 / 4)",
      "(10 * 6) * (4 / 10)",
      "(10 * 4) / (10 / 6)",
      "(6 * 10) * (4 / 10)",
      "6 * ((4 * 10) / 10)",
      "4 * (10 + (6 - 10))",
      "(10 * (4 / 10)) * 6",
      "((10 + 6) - 10) * 4",
      "6 * ((4 + 10) - 10)",
      "10 / ((10 / 4) / 6)",
      "(6 / 10) * (4 * 10)",
      "4 * ((6 + 10) - 10)",
      "10 * (4 / (10 / 6))",
      "(10 + (6 * 4)) - 10",
      "(10 / 10) * (4 * 6)",
      "(10 * 4) - (10 + 6)",
      "(6 - 10) * (4 - 10)",
      "4 / (10 / (10 * 6))",
      "(4 - (10 - 10)) * 6",
      "((4 * 10) * 6) / 10",
      "(6 * (10 / 10)) * 4",
      "10 / (10 / (4 * 6))",
      "((4 * 10) - 10) - 6",
      "((4 + 10) - 10) * 6",
      "((4 / 10) * 10) * 6",
      "(10 / 10) * (6 * 4)",
      "10 + ((4 * 6) - 10)",
      "((4 * 10) / 10) * 6",
      "(6 - (10 - 10)) * 4",
      "10 / (10 / (6 * 4))",
      "((6 * 10) / 10) * 4",
      "4 * (6 / (10 / 10))",
      "4 * ((10 + 6) - 10)",
      "((10 * 4) - 6) - 10",
      "(4 * (10 / 10)) * 6",
      "4 * (6 + (10 - 10))",
      "((6 / 10) * 10) * 4",
      "(10 * (6 / 10)) * 4",
      "4 * ((6 / 10) * 10)",
      "10 * ((4 * 6) / 10)",
      "(10 / (10 / 6)) * 4",
      "(4 / 10) * (6 * 10)",
      "((4 * 10) - 6) - 10",
      "((10 / 10) * 4) * 6",
      "(4 * 10) / (10 / 6)",
      "(6 * (4 * 10)) / 10",
      "((6 * 4) + 10) - 10",
      "(10 + (4 - 10)) * 6",
      "(4 * 6) + (10 - 10)"
    ]
  },
  "4 6 10 11": {
    "cards": "4 6 10 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(4 * (11 - 10)) * 6",
      "4 / ((11 - 10) / 6)",
      "6 * (4 / (11 - 10))",
      "((11 - 10) * 4) * 6",
      "(4 * 6) * (11 - 10)",
      "(4 / (11 - 10)) * 6",
      "6 * ((11 - 10) * 4)",
      "(4 * 6) / (11 - 10)",
      "4 * ((11 - 10) * 6)",
      "(6 * 4) / (11 - 10)",
      "(6 * (11 - 10)) * 4",
      "(6 / (11 - 10)) * 4",
      "4 * (6 / (11 - 10))",
      "(11 - 10) * (4 * 6)",
      "6 / ((11 - 10) / 4)",
      "6 * (4 * (11 - 10))",
      "(11 - 10) * (6 * 4)",
      "((11 - 10) * 6) * 4",
      "(6 * 4) * (11 - 10)",
      "4 * (6 * (11 - 10))"
    ]
  },
  "4 6 10 12": {
    "cards": "4 6 10 12",
    "has_solution": "Y",
    "num_solutions": 116,
    "solutions": [
      "(6 + 12) + (10 - 4)",
      "6 + (10 + (12 - 4))",
      "12 + ((6 + 10) - 4)",
      "4 + ((10 * 12) / 6)",
      "(12 / (4 / 10)) - 6",
      "((10 + 12) - 4) + 6",
      "6 - ((4 - 10) - 12)",
      "10 - (4 - (12 + 6))",
      "(10 + (6 - 4)) + 12",
      "(12 / (6 / 10)) + 4",
      "6 + (10 - (4 - 12))",
      "(6 - (4 - 12)) + 10",
      "(10 + 12) - (4 - 6)",
      "(10 - 4) + (12 + 6)",
      "10 + ((6 + 12) - 4)",
      "(10 / (4 / 12)) - 6",
      "((12 * 10) / 6) + 4",
      "10 - ((4 - 6) - 12)",
      "10 + (12 - (4 - 6))",
      "((10 + 6) + 12) - 4",
      "(12 - 4) + (10 + 6)",
      "(12 + (6 + 10)) - 4",
      "12 + ((6 - 4) + 10)",
      "(10 + (12 + 6)) - 4",
      "(12 + (6 - 4)) + 10",
      "(12 * (10 / 4)) - 6",
      "(10 / (6 / 12)) + 4",
      "(10 + 12) + (6 - 4)",
      "4 + ((12 * 10) / 6)",
      "10 - (4 - (6 + 12))",
      "(10 + 6) - (4 - 12)",
      "10 + (6 - (4 - 12))",
      "6 + ((12 - 4) + 10)",
      "((12 / 6) * 10) + 4",
      "((6 + 10) - 4) + 12",
      "(10 * (12 / 6)) + 4",
      "((12 - 4) + 10) + 6",
      "4 + ((10 / 6) * 12)",
      "10 + (6 + (12 - 4))",
      "(10 + (6 + 12)) - 4",
      "10 - ((4 - 12) - 6)",
      "10 + ((6 - 4) + 12)",
      "4 + (12 / (6 / 10))",
      "6 - (4 - (10 + 12))",
      "(6 - (4 - 10)) + 12",
      "((10 - 4) + 6) + 12",
      "((6 - 4) + 12) + 10",
      "(12 + (10 - 4)) + 6",
      "((10 / 4) * 12) - 6",
      "12 - (4 - (10 + 6))",
      "6 - ((4 - 12) - 10)",
      "(6 + (10 - 4)) + 12",
      "4 + ((12 / 6) * 10)",
      "(6 - 4) + (10 + 12)",
      "6 - (4 - (12 + 10))",
      "((12 * 10) / 4) - 6",
      "((6 + 10) + 12) - 4",
      "12 + ((10 - 4) + 6)",
      "((12 / 4) * 10) - 6",
      "(6 - 4) + (12 + 10)",
      "(10 + (12 - 4)) + 6",
      "12 + (6 + (10 - 4))",
      "12 + (10 - (4 - 6))",
      "((10 - 4) + 12) + 6",
      "4 + (10 * (12 / 6))",
      "((10 * 12) / 4) - 6",
      "6 + ((10 + 12) - 4)",
      "((6 + 12) + 10) - 4",
      "6 + (12 - (4 - 10))",
      "6 + ((10 - 4) + 12)",
      "((12 + 10) - 4) + 6",
      "(6 + 10) + (12 - 4)",
      "12 + (6 - (4 - 10))",
      "4 + (12 * (10 / 6))",
      "12 - ((4 - 10) - 6)",
      "10 + ((12 - 4) + 6)",
      "4 + (10 / (6 / 12))",
      "((10 + 12) + 6) - 4",
      "10 + ((12 + 6) - 4)",
      "(10 - (4 - 12)) + 6",
      "12 - ((4 - 6) - 10)",
      "6 + ((12 + 10) - 4)",
      "(6 + (12 - 4)) + 10",
      "((12 - 4) + 6) + 10",
      "(6 + 12) - (4 - 10)",
      "(12 + 6) + (10 - 4)",
      "(12 + 10) + (6 - 4)",
      "(10 - 4) + (6 + 12)",
      "12 + (10 + (6 - 4))",
      "(12 + 10) - (4 - 6)",
      "(6 * (10 - 4)) - 12",
      "((10 - 4) * 6) - 12",
      "12 + ((10 + 6) - 4)",
      "(6 + 10) - (4 - 12)",
      "((10 / 6) * 12) + 4",
      "((6 + 12) - 4) + 10",
      "((10 + 6) - 4) + 12",
      "(12 - (4 - 10)) + 6",
      "((12 + 6) + 10) - 4",
      "(6 + (10 + 12)) - 4",
      "(12 * (10 / 6)) + 4",
      "((12 + 10) + 6) - 4",
      "6 + (12 + (10 - 4))",
      "10 + (12 + (6 - 4))",
      "((6 - 4) + 10) + 12",
      "((10 * 12) / 6) + 4",
      "(10 * (12 / 4)) - 6",
      "(12 - (4 - 6)) + 10",
      "(10 - (4 - 6)) + 12",
      "(12 - 4) + (6 + 10)",
      "(6 + (12 + 10)) - 4",
      "12 - (4 - (6 + 10))",
      "(12 + 6) - (4 - 10)",
      "(12 + (10 + 6)) - 4",
      "((12 + 6) - 4) + 10",
      "(10 + 6) + (12 - 4)"
    ]
  },
  "4 6 10 13": {
    "cards": "4 6 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 11 11": {
    "cards": "4 6 11 11",
    "has_solution": "Y",
    "num_solutions": 183,
    "solutions": [
      "11 - (4 - (11 + 6))",
      "((11 - 11) + 4) * 6",
      "((4 * 11) * 6) / 11",
      "(11 + 11) - (4 - 6)",
      "11 + (11 + (6 - 4))",
      "4 * (11 * (6 / 11))",
      "(11 - 11) + (6 * 4)",
      "(11 - 11) + (4 * 6)",
      "(11 + (6 + 11)) - 4",
      "((4 * 6) / 11) * 11",
      "(11 * (4 / 11)) * 6",
      "(4 * (6 * 11)) / 11",
      "(4 * 6) - (11 - 11)",
      "((6 * 4) - 11) + 11",
      "4 * (11 + (6 - 11))",
      "(4 / 11) * (11 * 6)",
      "((6 * 11) / 11) * 4",
      "(6 / (11 / 4)) * 11",
      "11 + (6 + (11 - 4))",
      "6 / ((11 / 4) / 11)",
      "4 * (6 * (11 / 11))",
      "4 * ((6 - 11) + 11)",
      "((4 * 6) * 11) / 11",
      "(6 * 4) * (11 / 11)",
      "11 / ((11 / 4) / 6)",
      "(11 / 11) * (6 * 4)",
      "((11 + 6) - 11) * 4",
      "4 * (6 + (11 - 11))",
      "(11 * (6 / 11)) * 4",
      "6 * (11 + (4 - 11))",
      "(6 * 4) - (11 - 11)",
      "(11 + (6 - 11)) * 4",
      "6 * ((4 + 11) - 11)",
      "((11 * 6) / 11) * 4",
      "((6 / 11) * 11) * 4",
      "4 / ((11 / 6) / 11)",
      "6 * (11 / (11 / 4))",
      "4 * ((6 * 11) / 11)",
      "(4 / 11) * (6 * 11)",
      "(6 + 11) + (11 - 4)",
      "((4 / 11) * 11) * 6",
      "6 * ((11 * 4) / 11)",
      "(6 / (11 / 11)) * 4",
      "11 - (4 - (6 + 11))",
      "(4 / (11 / 11)) * 6",
      "11 / ((11 / 6) / 4)",
      "4 / ((11 / 11) / 6)",
      "11 + ((11 - 4) + 6)",
      "11 * ((4 / 11) * 6)",
      "((11 - 4) + 6) + 11",
      "6 + (11 - (4 - 11))",
      "6 - ((4 - 11) - 11)",
      "(6 + (11 - 4)) + 11",
      "((4 / 11) * 6) * 11",
      "(4 * 11) / (11 / 6)",
      "6 + ((11 - 4) + 11)",
      "4 * ((11 - 11) + 6)",
      "(11 + (4 - 11)) * 6",
      "11 - (11 - (4 * 6))",
      "(6 * (4 * 11)) / 11",
      "((11 / 11) * 6) * 4",
      "11 - (11 - (6 * 4))",
      "4 * (6 / (11 / 11))",
      "11 - ((4 - 11) - 6)",
      "((11 + 11) + 6) - 4",
      "((6 + 11) - 4) + 11",
      "11 * ((6 / 11) * 4)",
      "11 + ((4 * 6) - 11)",
      "(6 - 4) + (11 + 11)",
      "6 - (4 - (11 + 11))",
      "(11 + 11) + (6 - 4)",
      "6 / ((11 / 11) / 4)",
      "6 * ((4 - 11) + 11)",
      "6 * ((4 / 11) * 11)",
      "(11 - (4 - 6)) + 11",
      "(11 * (6 * 4)) / 11",
      "((4 * 6) + 11) - 11",
      "((4 * 6) - 11) + 11",
      "((11 / 11) * 4) * 6",
      "11 * (4 / (11 / 6))",
      "11 * ((6 * 4) / 11)",
      "(11 / (11 / 4)) * 6",
      "((11 - 11) + 6) * 4",
      "((6 * 4) + 11) - 11",
      "(11 - 4) + (11 + 6)",
      "11 + ((11 + 6) - 4)",
      "(6 * (11 / 11)) * 4",
      "11 + (6 - (4 - 11))",
      "(6 / 11) * (4 * 11)",
      "((11 + 6) - 4) + 11",
      "(11 + (11 + 6)) - 4",
      "((11 + 11) - 4) + 6",
      "(11 * 4) / (11 / 6)",
      "(6 - (4 - 11)) + 11",
      "(11 - (11 - 4)) * 6",
      "6 / (11 / (11 * 4))",
      "4 * ((11 / 11) * 6)",
      "6 / (11 / (4 * 11))",
      "11 + ((6 - 4) + 11)",
      "(11 * 6) * (4 / 11)",
      "((6 - 4) + 11) + 11",
      "(6 * 11) / (11 / 4)",
      "((11 + 4) - 11) * 6",
      "((6 * 4) * 11) / 11",
      "(11 - (4 - 11)) + 6",
      "4 / (11 / (11 * 6))",
      "(6 * 11) * (4 / 11)",
      "(6 / 11) * (11 * 4)",
      "(6 * (4 / 11)) * 11",
      "(6 + 11) - (4 - 11)",
      "(4 * 6) / (11 / 11)",
      "((6 * 4) / 11) * 11",
      "4 * ((11 + 6) - 11)",
      "(6 + (11 + 11)) - 4",
      "6 * (11 - (11 - 4))",
      "6 * (4 / (11 / 11))",
      "11 + ((6 + 11) - 4)",
      "(11 * (4 * 6)) / 11",
      "((4 + 11) - 11) * 6",
      "4 / (11 / (6 * 11))",
      "11 / (11 / (4 * 6))",
      "6 * ((11 + 4) - 11)",
      "(6 * 4) / (11 / 11)",
      "(11 + (6 - 4)) + 11",
      "(4 * 6) + (11 - 11)",
      "6 * (4 - (11 - 11))",
      "((11 * 4) / 11) * 6",
      "11 * (6 * (4 / 11))",
      "((4 - 11) + 11) * 6",
      "4 * (11 - (11 - 6))",
      "(4 * 6) * (11 / 11)",
      "6 * ((11 / 11) * 4)",
      "((6 + 11) - 11) * 4",
      "((11 - 4) + 11) + 6",
      "6 * ((11 - 11) + 4)",
      "(4 / (11 / 6)) * 11",
      "(11 - (11 - 6)) * 4",
      "((6 * 11) * 4) / 11",
      "(4 * (6 / 11)) * 11",
      "(4 + (11 - 11)) * 6",
      "(4 * (11 * 6)) / 11",
      "11 + (11 - (4 - 6))",
      "((11 * 4) * 6) / 11",
      "4 * (11 / (11 / 6))",
      "4 * ((11 * 6) / 11)",
      "(11 * 6) / (11 / 4)",
      "6 * (4 * (11 / 11))",
      "(6 - (11 - 11)) * 4",
      "((4 * 11) / 11) * 6",
      "(6 * (11 * 4)) / 11",
      "(6 * 4) + (11 - 11)",
      "6 * (11 * (4 / 11))",
      "((6 / 11) * 4) * 11",
      "6 + (11 + (11 - 4))",
      "(6 + (11 - 11)) * 4",
      "(11 + 6) + (11 - 4)",
      "((11 * 6) * 4) / 11",
      "4 * ((6 + 11) - 11)",
      "(4 * (11 / 11)) * 6",
      "(11 + (4 * 6)) - 11",
      "11 * (6 / (11 / 4))",
      "11 * (4 * (6 / 11))",
      "((11 + 6) + 11) - 4",
      "6 * (4 + (11 - 11))",
      "(11 + (11 - 4)) + 6",
      "4 * (6 - (11 - 11))",
      "(11 + 6) - (4 - 11)",
      "(11 / 11) * (4 * 6)",
      "11 + ((6 * 4) - 11)",
      "11 / (11 / (6 * 4))",
      "6 * ((4 * 11) / 11)",
      "11 - ((4 - 6) - 11)",
      "6 + ((11 + 11) - 4)",
      "(11 - 4) + (6 + 11)",
      "11 * ((4 * 6) / 11)",
      "(4 - (11 - 11)) * 6",
      "4 * ((6 / 11) * 11)",
      "(4 * 11) * (6 / 11)",
      "((6 + 11) + 11) - 4",
      "(11 * 4) * (6 / 11)",
      "(11 + (6 * 4)) - 11",
      "(11 / (11 / 6)) * 4",
      "((6 - 11) + 11) * 4"
    ]
  },
  "4 6 11 12": {
    "cards": "4 6 11 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "6 * (4 / (12 - 11))",
      "(6 * (12 - 11)) * 4",
      "4 / ((12 - 11) / 6)",
      "4 * (6 / (12 - 11))",
      "(4 / (12 - 11)) * 6",
      "(6 * 4) * (12 - 11)",
      "((12 - 11) * 6) * 4",
      "(12 - 11) * (6 * 4)",
      "(6 * 4) / (12 - 11)",
      "4 * (6 * (12 - 11))",
      "6 * (4 * (12 - 11))",
      "(4 * 6) * (12 - 11)",
      "6 / ((12 - 11) / 4)",
      "4 * ((12 - 11) * 6)",
      "(12 - 11) * (4 * 6)",
      "(4 * (12 - 11)) * 6",
      "(6 / (12 - 11)) * 4",
      "((12 - 11) * 4) * 6",
      "(4 * 6) / (12 - 11)",
      "6 * ((12 - 11) * 4)"
    ]
  },
  "4 6 11 13": {
    "cards": "4 6 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 6 12 12": {
    "cards": "4 6 12 12",
    "has_solution": "Y",
    "num_solutions": 152,
    "solutions": [
      "4 * ((12 / 12) * 6)",
      "(12 * 4) / (12 / 6)",
      "6 * ((12 - 12) + 4)",
      "(12 * (4 * 6)) / 12",
      "6 * ((4 / 12) * 12)",
      "4 * (12 - (12 - 6))",
      "4 * (6 - (12 - 12))",
      "4 * ((12 + 6) - 12)",
      "(12 - (4 + 6)) * 12",
      "((12 * 6) * 4) / 12",
      "(6 * 4) + (12 - 12)",
      "6 / (12 / (12 * 4))",
      "(12 / (12 / 6)) * 4",
      "12 * ((6 / 12) * 4)",
      "((12 * 4) / 12) * 6",
      "((4 / 12) * 6) * 12",
      "12 * ((4 / 12) * 6)",
      "6 / ((12 / 12) / 4)",
      "(6 * 4) * (12 / 12)",
      "(4 / 12) * (6 * 12)",
      "6 * ((4 * 12) / 12)",
      "(4 * 6) - (12 - 12)",
      "((6 * 4) + 12) - 12",
      "(6 / 12) * (4 * 12)",
      "12 * ((12 - 6) - 4)",
      "((6 / 12) * 12) * 4",
      "6 * (4 + (12 - 12))",
      "12 * ((4 * 6) / 12)",
      "((6 * 4) * 12) / 12",
      "12 * (6 * (4 / 12))",
      "4 / ((12 / 6) / 12)",
      "(12 * 4) * (6 / 12)",
      "((6 * 12) * 4) / 12",
      "6 * (12 + (4 - 12))",
      "((12 - 6) - 4) * 12",
      "4 / (12 / (12 * 6))",
      "((6 * 4) - 12) + 12",
      "(12 / 12) * (4 * 6)",
      "(6 * (4 * 12)) / 12",
      "(4 / (12 / 12)) * 6",
      "((12 / 12) * 4) * 6",
      "(4 / (12 / 6)) * 12",
      "(4 * 6) / (12 / 12)",
      "(12 - (6 + 4)) * 12",
      "4 / ((12 / 12) / 6)",
      "(4 * (12 * 6)) / 12",
      "(4 * 12) / (12 / 6)",
      "6 / (12 / (4 * 12))",
      "(4 / 12) * (12 * 6)",
      "((6 - 12) + 12) * 4",
      "(6 + (12 - 12)) * 4",
      "(12 + (4 - 12)) * 6",
      "4 * ((6 + 12) - 12)",
      "(4 + (12 - 12)) * 6",
      "4 * (6 + (12 - 12))",
      "6 * (4 / (12 / 12))",
      "(6 - (12 - 12)) * 4",
      "((12 + 6) - 12) * 4",
      "6 * ((12 / 12) * 4)",
      "12 * (4 * (6 / 12))",
      "6 * ((4 + 12) - 12)",
      "(12 / (12 / 4)) * 6",
      "12 - (12 - (6 * 4))",
      "(6 / 12) * (12 * 4)",
      "(4 * 6) * (12 / 12)",
      "((12 / 12) * 6) * 4",
      "((12 - 12) + 6) * 4",
      "(12 - (12 - 4)) * 6",
      "(6 * 4) - (12 - 12)",
      "((6 * 12) / 12) * 4",
      "12 * (4 / (12 / 6))",
      "4 * (12 + (6 - 12))",
      "(6 * 12) / (12 / 4)",
      "6 * (4 - (12 - 12))",
      "12 * (4 - (12 / 6))",
      "(12 * (6 * 4)) / 12",
      "(12 * 6) - (4 * 12)",
      "((4 * 12) * 6) / 12",
      "(4 * (6 * 12)) / 12",
      "((6 / 12) * 4) * 12",
      "(12 - (12 - 6)) * 4",
      "4 * ((12 * 6) / 12)",
      "((12 * 4) * 6) / 12",
      "(6 * (4 / 12)) * 12",
      "(6 * (12 / 12)) * 4",
      "(12 * 6) / (12 / 4)",
      "(4 - (12 - 12)) * 6",
      "(6 / (12 / 4)) * 12",
      "(4 * 6) + (12 - 12)",
      "(12 * 6) * (4 / 12)",
      "(4 - (12 / 6)) * 12",
      "(4 * 12) * (6 / 12)",
      "(12 + (4 * 6)) - 12",
      "(6 * 12) * (4 / 12)",
      "6 * ((4 - 12) + 12)",
      "((12 * 6) / 12) * 4",
      "(12 - 12) + (4 * 6)",
      "((6 + 12) - 12) * 4",
      "4 * ((6 / 12) * 12)",
      "6 * ((12 + 4) - 12)",
      "4 * ((6 - 12) + 12)",
      "12 * (6 / (12 / 4))",
      "6 * (4 * (12 / 12))",
      "(6 / (12 / 12)) * 4",
      "12 * ((6 * 4) / 12)",
      "12 / ((12 / 4) / 6)",
      "((4 - 12) + 12) * 6",
      "((4 + 12) - 12) * 6",
      "((4 * 6) + 12) - 12",
      "12 + ((6 * 4) - 12)",
      "6 * ((12 * 4) / 12)",
      "12 * (12 - (6 + 4))",
      "(12 + (6 - 12)) * 4",
      "12 / (12 / (4 * 6))",
      "((12 + 4) - 12) * 6",
      "(4 * (6 / 12)) * 12",
      "(6 * 12) - (12 * 4)",
      "((12 - 12) + 4) * 6",
      "((12 - 4) - 6) * 12",
      "12 / ((12 / 6) / 4)",
      "(12 * 6) - (12 * 4)",
      "12 * ((12 - 4) - 6)",
      "(12 - 12) + (6 * 4)",
      "4 * ((6 * 12) / 12)",
      "(12 + (6 * 4)) - 12",
      "(6 * 12) - (4 * 12)",
      "4 * (12 / (12 / 6))",
      "((4 * 12) / 12) * 6",
      "((4 * 6) / 12) * 12",
      "((6 * 4) / 12) * 12",
      "12 - (12 - (4 * 6))",
      "6 / ((12 / 4) / 12)",
      "12 / (12 / (6 * 4))",
      "(6 * 4) / (12 / 12)",
      "4 * (12 * (6 / 12))",
      "4 / (12 / (6 * 12))",
      "12 * (12 - (4 + 6))",
      "6 * (12 / (12 / 4))",
      "((4 * 6) - 12) + 12",
      "6 * (12 - (12 - 4))",
      "((4 * 6) * 12) / 12",
      "4 * (6 / (12 / 12))",
      "(12 * (6 / 12)) * 4",
      "12 + ((4 * 6) - 12)",
      "(12 * (4 / 12)) * 6",
      "4 * (6 * (12 / 12))",
      "4 * ((12 - 12) + 6)",
      "(6 * (12 * 4)) / 12",
      "(12 / 12) * (6 * 4)",
      "6 * (12 * (4 / 12))",
      "((4 / 12) * 12) * 6",
      "(4 * (12 / 12)) * 6"
    ]
  },
  "4 6 12 13": {
    "cards": "4 6 12 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(6 * (13 - 12)) * 4",
      "(6 / (13 - 12)) * 4",
      "((13 - 12) * 6) * 4",
      "(4 * 6) / (13 - 12)",
      "4 * (6 / (13 - 12))",
      "(4 * 6) * (13 - 12)",
      "(13 - 12) * (6 * 4)",
      "(4 * (13 - 12)) * 6",
      "((13 - 12) * 4) * 6",
      "4 / ((13 - 12) / 6)",
      "(6 * 4) / (13 - 12)",
      "4 * (6 * (13 - 12))",
      "6 * (4 / (13 - 12))",
      "(13 - 12) * (4 * 6)",
      "6 / ((13 - 12) / 4)",
      "(6 * 4) * (13 - 12)",
      "6 * (4 * (13 - 12))",
      "4 * ((13 - 12) * 6)",
      "(4 / (13 - 12)) * 6",
      "6 * ((13 - 12) * 4)"
    ]
  },
  "4 6 13 13": {
    "cards": "4 6 13 13",
    "has_solution": "Y",
    "num_solutions": 183,
    "solutions": [
      "(4 + (13 - 6)) + 13",
      "(13 * 6) * (4 / 13)",
      "(4 - (6 - 13)) + 13",
      "13 * (4 * (6 / 13))",
      "13 + (13 + (4 - 6))",
      "(13 / 13) * (6 * 4)",
      "((13 / 13) * 4) * 6",
      "(4 * (13 / 13)) * 6",
      "(4 + 13) - (6 - 13)",
      "(13 - 6) + (4 + 13)",
      "13 + ((4 * 6) - 13)",
      "4 - (6 - (13 + 13))",
      "4 + ((13 + 13) - 6)",
      "13 * ((6 / 13) * 4)",
      "((4 / 13) * 13) * 6",
      "((13 * 4) * 6) / 13",
      "13 * (4 / (13 / 6))",
      "4 - ((6 - 13) - 13)",
      "((13 - 13) + 4) * 6",
      "(4 - 6) + (13 + 13)",
      "(6 * 4) - (13 - 13)",
      "(4 * 6) + (13 - 13)",
      "13 * (6 * (4 / 13))",
      "(4 / 13) * (6 * 13)",
      "6 / (13 / (13 * 4))",
      "(4 + (13 + 13)) - 6",
      "(4 * 6) / (13 / 13)",
      "(13 - 13) + (6 * 4)",
      "((4 - 6) + 13) + 13",
      "(13 + (13 - 6)) + 4",
      "(13 - 13) + (4 * 6)",
      "13 + ((13 - 6) + 4)",
      "(13 - (13 - 4)) * 6",
      "(13 * 4) / (13 / 6)",
      "13 - (6 - (4 + 13))",
      "(13 - (6 - 4)) + 13",
      "((6 / 13) * 4) * 13",
      "6 * (4 / (13 / 13))",
      "(13 * 4) * (6 / 13)",
      "(13 + (4 - 13)) * 6",
      "13 - ((6 - 13) - 4)",
      "4 * ((13 + 6) - 13)",
      "(6 * 13) * (4 / 13)",
      "((13 * 6) * 4) / 13",
      "6 * ((13 / 13) * 4)",
      "13 + ((6 * 4) - 13)",
      "(13 + 4) + (13 - 6)",
      "((4 * 13) * 6) / 13",
      "13 - (6 - (13 + 4))",
      "(13 + (6 - 13)) * 4",
      "4 / (13 / (6 * 13))",
      "((4 * 6) + 13) - 13",
      "(6 * (13 / 13)) * 4",
      "(4 * 6) * (13 / 13)",
      "13 + (13 - (6 - 4))",
      "(4 - (13 - 13)) * 6",
      "((13 - 6) + 4) + 13",
      "((6 * 13) * 4) / 13",
      "(4 * 6) - (13 - 13)",
      "6 * (13 * (4 / 13))",
      "(4 * 13) / (13 / 6)",
      "6 * ((4 / 13) * 13)",
      "(13 + (13 + 4)) - 6",
      "((13 - 13) + 6) * 4",
      "((6 + 13) - 13) * 4",
      "4 * (6 * (13 / 13))",
      "((13 / 13) * 6) * 4",
      "4 * (6 - (13 - 13))",
      "13 * (6 / (13 / 4))",
      "13 * ((6 * 4) / 13)",
      "(6 - (13 - 13)) * 4",
      "6 * (4 - (13 - 13))",
      "13 + (4 + (13 - 6))",
      "(4 + 13) + (13 - 6)",
      "6 * (13 - (13 - 4))",
      "13 / (13 / (6 * 4))",
      "((13 * 6) / 13) * 4",
      "((13 * 4) / 13) * 6",
      "4 * ((6 - 13) + 13)",
      "(6 / 13) * (13 * 4)",
      "(6 * 4) / (13 / 13)",
      "(4 / (13 / 13)) * 6",
      "(13 + (4 + 13)) - 6",
      "4 * ((6 + 13) - 13)",
      "4 / ((13 / 13) / 6)",
      "((4 * 6) / 13) * 13",
      "((6 * 4) / 13) * 13",
      "((4 + 13) - 6) + 13",
      "6 * ((4 + 13) - 13)",
      "(4 * 13) * (6 / 13)",
      "6 * ((13 * 4) / 13)",
      "(13 * 6) / (13 / 4)",
      "(4 / 13) * (13 * 6)",
      "(6 * (4 * 13)) / 13",
      "6 * (4 + (13 - 13))",
      "4 * ((6 / 13) * 13)",
      "(6 * (4 / 13)) * 13",
      "13 - (13 - (4 * 6))",
      "4 * ((13 / 13) * 6)",
      "4 * (13 + (6 - 13))",
      "(4 / (13 / 6)) * 13",
      "4 * (13 * (6 / 13))",
      "(13 * (6 / 13)) * 4",
      "(6 * (13 * 4)) / 13",
      "(13 * (4 * 6)) / 13",
      "(13 + 13) + (4 - 6)",
      "13 - (13 - (6 * 4))",
      "(13 / 13) * (4 * 6)",
      "((4 - 13) + 13) * 6",
      "4 * ((6 * 13) / 13)",
      "((13 + 13) - 6) + 4",
      "((13 + 13) + 4) - 6",
      "13 / ((13 / 6) / 4)",
      "(13 + (4 * 6)) - 13",
      "(4 + (13 - 13)) * 6",
      "(13 - 6) + (13 + 4)",
      "13 / ((13 / 4) / 6)",
      "13 + ((13 + 4) - 6)",
      "((13 + 4) - 13) * 6",
      "((4 + 13) - 13) * 6",
      "((6 * 4) + 13) - 13",
      "4 * (6 + (13 - 13))",
      "((4 * 6) * 13) / 13",
      "4 * (13 / (13 / 6))",
      "13 * ((4 / 13) * 6)",
      "(6 * 4) * (13 / 13)",
      "13 + ((4 - 6) + 13)",
      "((13 - 6) + 13) + 4",
      "(13 / (13 / 6)) * 4",
      "(4 * (6 * 13)) / 13",
      "4 * ((13 * 6) / 13)",
      "4 * ((13 - 13) + 6)",
      "((13 + 4) + 13) - 6",
      "13 * ((4 * 6) / 13)",
      "(13 + 4) - (6 - 13)",
      "((6 * 4) - 13) + 13",
      "(13 * (4 / 13)) * 6",
      "(6 + (13 - 13)) * 4",
      "4 + (13 - (6 - 13))",
      "((4 / 13) * 6) * 13",
      "(13 - (6 - 13)) + 4",
      "6 * ((4 * 13) / 13)",
      "((6 * 13) / 13) * 4",
      "(13 - (13 - 6)) * 4",
      "4 / ((13 / 6) / 13)",
      "(6 / 13) * (4 * 13)",
      "13 + ((4 + 13) - 6)",
      "((6 * 4) * 13) / 13",
      "13 / (13 / (4 * 6))",
      "((6 - 13) + 13) * 4",
      "4 + (13 + (13 - 6))",
      "(6 * 13) / (13 / 4)",
      "((13 + 6) - 13) * 4",
      "(6 / (13 / 13)) * 4",
      "(13 * (6 * 4)) / 13",
      "(4 * (13 * 6)) / 13",
      "(13 + (4 - 6)) + 13",
      "6 * (13 / (13 / 4))",
      "((4 * 13) / 13) * 6",
      "(4 * (6 / 13)) * 13",
      "6 / ((13 / 4) / 13)",
      "((6 / 13) * 13) * 4",
      "(13 / (13 / 4)) * 6",
      "((4 + 13) + 13) - 6",
      "6 / (13 / (4 * 13))",
      "6 / ((13 / 13) / 4)",
      "13 - ((6 - 4) - 13)",
      "(6 * 4) + (13 - 13)",
      "(13 + (6 * 4)) - 13",
      "(13 + 13) - (6 - 4)",
      "4 / (13 / (13 * 6))",
      "4 + ((13 - 6) + 13)",
      "6 * ((13 + 4) - 13)",
      "((13 + 4) - 6) + 13",
      "4 * (6 / (13 / 13))",
      "13 + (4 - (6 - 13))",
      "4 * (13 - (13 - 6))",
      "6 * (13 + (4 - 13))",
      "6 * (4 * (13 / 13))",
      "(6 / (13 / 4)) * 13",
      "6 * ((13 - 13) + 4)",
      "6 * ((4 - 13) + 13)",
      "((4 * 6) - 13) + 13"
    ]
  },
  "4 7 7 7": {
    "cards": "4 7 7 7",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "4 * (7 - (7 / 7))",
      "(7 - (7 / 7)) * 4"
    ]
  },
  "4 7 7 8": {
    "cards": "4 7 7 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "4 * ((7 + 7) - 8)",
      "4 * (7 + (7 - 8))",
      "4 * ((7 - 8) + 7)",
      "(7 - (8 - 7)) * 4",
      "(7 + (7 - 8)) * 4",
      "4 * (7 - (8 - 7))",
      "8 * (4 - (7 / 7))",
      "(4 - (7 / 7)) * 8",
      "((7 + 7) - 8) * 4",
      "((7 - 8) + 7) * 4"
    ]
  },
  "4 7 7 9": {
    "cards": "4 7 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 7 7 10": {
    "cards": "4 7 7 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 7 7 11": {
    "cards": "4 7 7 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(4 * 7) + (7 - 11)",
      "((7 * 4) + 7) - 11",
      "(7 * (11 - 7)) - 4",
      "(7 - 11) + (7 * 4)",
      "(7 * 4) + (7 - 11)",
      "((11 - 7) * 7) - 4",
      "7 - (11 - (4 * 7))",
      "((7 * 4) - 11) + 7",
      "(7 * 4) - (11 - 7)",
      "((4 * 7) + 7) - 11",
      "(7 + (7 * 4)) - 11",
      "(4 * 7) - (11 - 7)",
      "(7 + (4 * 7)) - 11",
      "(7 - 11) + (4 * 7)",
      "((4 * 7) - 11) + 7",
      "7 + ((4 * 7) - 11)",
      "7 + ((7 * 4) - 11)",
      "7 - (11 - (7 * 4))"
    ]
  },
  "4 7 7 12": {
    "cards": "4 7 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 7 7 13": {
    "cards": "4 7 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 7 8 8": {
    "cards": "4 7 8 8",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((7 - 8) + 4) * 8",
      "(8 * 7) - (4 * 8)",
      "8 * (4 + (7 - 8))",
      "8 * ((7 - 8) + 4)",
      "8 * (4 - (8 - 7))",
      "(7 + (4 - 8)) * 8",
      "(4 + (7 - 8)) * 8",
      "8 * (7 - (8 - 4))",
      "(7 * 8) - (8 * 4)",
      "(8 * 7) - (8 * 4)",
      "(7 - (8 / 8)) * 4",
      "8 * ((7 + 4) - 8)",
      "(4 - (8 - 7)) * 8",
      "8 * ((4 - 8) + 7)",
      "4 * (7 - (8 / 8))",
      "((4 + 7) - 8) * 8",
      "((7 + 4) - 8) * 8",
      "(7 * 8) - (4 * 8)",
      "8 * ((4 + 7) - 8)",
      "((4 - 8) + 7) * 8",
      "(7 - (8 - 4)) * 8",
      "8 * (7 + (4 - 8))"
    ]
  },
  "4 7 8 9": {
    "cards": "4 7 8 9",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(8 - (9 - 7)) * 4",
      "((7 + 8) - 9) * 4",
      "4 * ((8 + 7) - 9)",
      "8 / ((7 - 4) / 9)",
      "4 * ((7 + 8) - 9)",
      "(7 - (9 - 8)) * 4",
      "4 * ((7 - 9) + 8)",
      "(9 - 7) * (8 + 4)",
      "((7 - 9) + 8) * 4",
      "(8 + 4) * (9 - 7)",
      "4 * (7 - (9 - 8))",
      "(4 + 8) * (9 - 7)",
      "8 * (9 / (7 - 4))",
      "((8 + 7) - 9) * 4",
      "(9 * 8) / (7 - 4)",
      "9 * (8 / (7 - 4))",
      "4 * ((8 - 9) + 7)",
      "9 / ((7 - 4) / 8)",
      "(8 * 9) / (7 - 4)",
      "4 * (8 + (7 - 9))",
      "(8 / (7 - 4)) * 9",
      "(8 + (7 - 9)) * 4",
      "4 * (7 + (8 - 9))",
      "4 * (8 - (9 - 7))",
      "(9 - 7) * (4 + 8)",
      "(9 / (7 - 4)) * 8",
      "((8 - 9) + 7) * 4",
      "(7 + (8 - 9)) * 4"
    ]
  },
  "4 7 8 10": {
    "cards": "4 7 8 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((8 * 7) / 4) + 10",
      "10 + ((8 * 7) / 4)",
      "(8 * (7 / 4)) + 10",
      "((7 * 8) / 4) + 10",
      "10 + (8 * (7 / 4))",
      "10 + ((8 / 4) * 7)",
      "(7 * (8 / 4)) + 10",
      "(8 / (4 / 7)) + 10",
      "((7 / 4) * 8) + 10",
      "(7 / (4 / 8)) + 10",
      "10 + (7 * (8 / 4))",
      "((8 / 4) * 7) + 10",
      "10 + ((7 / 4) * 8)",
      "10 + (8 / (4 / 7))",
      "10 + (7 / (4 / 8))",
      "10 + ((7 * 8) / 4)"
    ]
  },
  "4 7 8 11": {
    "cards": "4 7 8 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "8 + ((11 - 7) * 4)",
      "((11 - 7) * 4) + 8",
      "(4 * (11 - 7)) + 8",
      "8 - (4 * (7 - 11))",
      "8 - ((7 - 11) * 4)",
      "8 + (4 * (11 - 7))"
    ]
  },
  "4 7 8 12": {
    "cards": "4 7 8 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "8 - (12 - (4 * 7))",
      "((4 * 7) - 12) + 8",
      "(7 * 4) - (12 - 8)",
      "((7 * 4) + 8) - 12",
      "(7 * (12 - 8)) - 4",
      "(8 - 12) + (7 * 4)",
      "(4 * 7) + (8 - 12)",
      "(7 * 4) + (8 - 12)",
      "((7 * 4) - 12) + 8",
      "8 - (12 - (7 * 4))",
      "(4 * 7) - (12 - 8)",
      "(8 + (7 * 4)) - 12",
      "(8 - 12) + (4 * 7)",
      "8 + ((7 * 4) - 12)",
      "((4 * 7) + 8) - 12",
      "8 + ((4 * 7) - 12)",
      "((12 - 8) * 7) - 4",
      "(8 + (4 * 7)) - 12"
    ]
  },
  "4 7 8 13": {
    "cards": "4 7 8 13",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "7 + (13 + (8 - 4))",
      "(7 - 4) + (8 + 13)",
      "8 - ((4 - 7) - 13)",
      "(13 - 7) * (8 - 4)",
      "8 + (7 - (4 - 13))",
      "(8 + (7 - 4)) + 13",
      "7 + ((8 - 4) + 13)",
      "7 + (13 - (4 - 8))",
      "8 + (7 + (13 - 4))",
      "((7 + 13) - 4) + 8",
      "(4 - 8) * (7 - 13)",
      "((13 + 7) + 8) - 4",
      "7 + ((13 - 4) + 8)",
      "(8 + 13) + (7 - 4)",
      "((7 + 13) + 8) - 4",
      "8 - (4 - (7 + 13))",
      "13 - ((4 - 8) - 7)",
      "(8 - 4) + (7 + 13)",
      "((13 - 4) + 8) + 7",
      "((7 - 4) + 8) + 13",
      "(7 + (13 - 4)) + 8",
      "(7 + (13 + 8)) - 4",
      "(7 + 8) + (13 - 4)",
      "(13 + 8) + (7 - 4)",
      "8 + ((7 + 13) - 4)",
      "8 + (13 - (4 - 7))",
      "8 + ((13 - 4) + 7)",
      "(7 - 13) * (4 - 8)",
      "((7 - 4) + 13) + 8",
      "7 + (8 + (13 - 4))",
      "((7 + 8) - 4) + 13",
      "13 + ((7 - 4) + 8)",
      "8 + (13 + (7 - 4))",
      "(13 + (8 + 7)) - 4",
      "13 + (7 - (4 - 8))",
      "((8 + 7) - 4) + 13",
      "(7 - (4 - 13)) + 8",
      "(8 + (7 + 13)) - 4",
      "(13 + 7) + (8 - 4)",
      "(7 - (4 - 8)) + 13",
      "7 - (4 - (13 + 8))",
      "((8 - 4) + 7) + 13",
      "8 - (4 - (13 + 7))",
      "13 + ((7 + 8) - 4)",
      "13 - ((4 - 7) - 8)",
      "(7 + (8 - 4)) + 13",
      "7 - (4 - (8 + 13))",
      "(8 + (13 + 7)) - 4",
      "13 + ((8 + 7) - 4)",
      "(8 + (13 - 4)) + 7",
      "((13 - 4) + 7) + 8",
      "(13 - (4 - 7)) + 8",
      "(8 - 4) + (13 + 7)",
      "(13 + 8) - (4 - 7)",
      "(13 - (4 - 8)) + 7",
      "(8 + 13) - (4 - 7)",
      "(8 - 4) * (13 - 7)",
      "8 + ((13 + 7) - 4)",
      "(13 + (8 - 4)) + 7",
      "(7 + 8) - (4 - 13)",
      "((13 + 7) - 4) + 8",
      "13 - (4 - (8 + 7))",
      "((8 + 13) + 7) - 4",
      "(8 - (4 - 13)) + 7",
      "(13 + (7 - 4)) + 8",
      "7 + ((13 + 8) - 4)",
      "((8 - 4) + 13) + 7",
      "(8 - (4 - 7)) + 13",
      "8 - ((4 - 13) - 7)",
      "13 - (4 - (7 + 8))",
      "13 + (8 - (4 - 7))",
      "((7 + 8) + 13) - 4",
      "13 + (8 + (7 - 4))",
      "((8 + 13) - 4) + 7",
      "((13 + 8) + 7) - 4",
      "(13 + (7 + 8)) - 4",
      "((13 + 8) - 4) + 7",
      "(13 - 4) + (8 + 7)",
      "7 + (8 - (4 - 13))",
      "13 + (7 + (8 - 4))",
      "((8 + 7) + 13) - 4",
      "7 - ((4 - 8) - 13)",
      "(13 + 7) - (4 - 8)",
      "(7 + (8 + 13)) - 4",
      "7 - ((4 - 13) - 8)",
      "(8 + 7) + (13 - 4)",
      "(7 + 13) - (4 - 8)",
      "(8 + 7) - (4 - 13)",
      "13 + ((8 - 4) + 7)",
      "(7 + 13) + (8 - 4)",
      "8 + ((7 - 4) + 13)",
      "(13 - 4) + (7 + 8)",
      "7 + ((8 + 13) - 4)",
      "(7 - 4) + (13 + 8)"
    ]
  },
  "4 7 9 9": {
    "cards": "4 7 9 9",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "4 * (7 - (9 / 9))",
      "(7 - (9 / 9)) * 4"
    ]
  },
  "4 7 9 10": {
    "cards": "4 7 9 10",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(9 + (7 - 10)) * 4",
      "4 * ((9 - 10) + 7)",
      "((9 - 7) * 10) + 4",
      "4 * (7 - (10 - 9))",
      "4 * (7 + (9 - 10))",
      "(4 * 10) - (9 + 7)",
      "((9 + 7) - 10) * 4",
      "4 + ((9 - 7) * 10)",
      "4 - (10 * (7 - 9))",
      "4 * (9 - (10 - 7))",
      "(10 * 4) - (9 + 7)",
      "(10 * 4) - (7 + 9)",
      "4 + (10 * (9 - 7))",
      "4 * ((9 + 7) - 10)",
      "4 * ((7 + 9) - 10)",
      "(9 - (10 - 7)) * 4",
      "(4 * 10) - (7 + 9)",
      "((7 + 9) - 10) * 4",
      "((9 - 10) + 7) * 4",
      "((4 * 10) - 9) - 7",
      "4 * (9 + (7 - 10))",
      "(7 - (10 - 9)) * 4",
      "((10 * 4) - 7) - 9",
      "4 - ((7 - 9) * 10)",
      "(10 * (9 - 7)) + 4",
      "4 * ((7 - 10) + 9)",
      "(7 + (9 - 10)) * 4",
      "((4 * 10) - 7) - 9",
      "((10 * 4) - 9) - 7",
      "((7 - 10) + 9) * 4"
    ]
  },
  "4 7 9 11": {
    "cards": "4 7 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(7 * (9 - 4)) - 11",
      "(11 * (7 - 4)) - 9",
      "((7 - 4) * 11) - 9",
      "((9 - 4) * 7) - 11"
    ]
  },
  "4 7 9 12": {
    "cards": "4 7 9 12",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "(12 - 4) + (9 + 7)",
      "((7 - 9) + 4) * 12",
      "12 * (7 + (4 - 9))",
      "((7 + 12) - 4) + 9",
      "(9 + 12) - (4 - 7)",
      "(12 / (9 - 7)) * 4",
      "(7 - (9 - 4)) * 12",
      "7 + (12 - (4 - 9))",
      "(9 - 4) + (12 + 7)",
      "((7 + 9) - 4) + 12",
      "((9 + 12) - 4) + 7",
      "(9 + 12) + (7 - 4)",
      "(7 - (4 - 12)) + 9",
      "(7 + 12) - (4 - 9)",
      "((7 + 9) + 12) - 4",
      "7 + (9 + (12 - 4))",
      "12 - ((4 - 7) - 9)",
      "(9 + (7 - 4)) + 12",
      "7 + ((12 + 9) - 4)",
      "((12 + 7) + 9) - 4",
      "9 + ((12 + 7) - 4)",
      "(12 * 4) / (9 - 7)",
      "9 + (12 + (7 - 4))",
      "12 + (9 + (7 - 4))",
      "(9 + (12 - 4)) + 7",
      "12 * (7 - (9 - 4))",
      "(9 - (4 - 7)) + 12",
      "9 + (7 + (12 - 4))",
      "12 * ((7 - 9) + 4)",
      "(7 - (4 - 9)) + 12",
      "12 - (4 - (7 + 9))",
      "(12 - (4 - 9)) + 7",
      "7 - ((4 - 12) - 9)",
      "12 / ((9 - 7) / 4)",
      "(12 + 9) + (7 - 4)",
      "12 + (9 - (4 - 7))",
      "7 + (9 - (4 - 12))",
      "((7 + 4) - 9) * 12",
      "4 * (12 / (9 - 7))",
      "7 - (4 - (9 + 12))",
      "(7 + 9) + (12 - 4)",
      "(7 + (9 + 12)) - 4",
      "(12 + (7 + 9)) - 4",
      "(7 + (12 + 9)) - 4",
      "12 * (4 - (9 - 7))",
      "12 * ((4 + 7) - 9)",
      "12 + ((9 - 4) + 7)",
      "(7 - 4) + (9 + 12)",
      "9 + ((7 - 4) + 12)",
      "((9 - 4) + 12) + 7",
      "(9 - (4 - 12)) + 7",
      "9 + ((12 - 4) + 7)",
      "(12 - 4) + (7 + 9)",
      "12 + (7 + (9 - 4))",
      "((12 + 9) - 4) + 7",
      "(7 + (4 - 9)) * 12",
      "12 + (7 - (4 - 9))",
      "(12 + (9 + 7)) - 4",
      "12 + ((9 + 7) - 4)",
      "(7 - 4) + (12 + 9)",
      "((7 + 12) + 9) - 4",
      "((12 + 9) + 7) - 4",
      "(12 + 7) + (9 - 4)",
      "(7 + (9 - 4)) + 12",
      "9 + (7 - (4 - 12))",
      "(9 + 7) - (4 - 12)",
      "(12 - (4 - 7)) + 9",
      "9 - ((4 - 12) - 7)",
      "9 + ((7 + 12) - 4)",
      "((9 + 12) + 7) - 4",
      "12 * ((4 - 9) + 7)",
      "(7 + 9) - (4 - 12)",
      "(12 + 9) - (4 - 7)",
      "((7 - 4) + 9) + 12",
      "(9 + (7 + 12)) - 4",
      "((9 - 4) + 7) + 12",
      "12 * (4 / (9 - 7))",
      "9 - ((4 - 7) - 12)",
      "12 * (4 + (7 - 9))",
      "(12 + (7 - 4)) + 9",
      "12 * ((7 + 4) - 9)",
      "(9 - 4) + (7 + 12)",
      "7 + ((9 + 12) - 4)",
      "((9 + 7) + 12) - 4",
      "9 + (12 - (4 - 7))",
      "((12 - 4) + 9) + 7",
      "(7 + (12 - 4)) + 9",
      "7 + ((12 - 4) + 9)",
      "((4 + 7) - 9) * 12",
      "(4 + (7 - 9)) * 12",
      "7 - ((4 - 9) - 12)",
      "12 + ((7 + 9) - 4)",
      "7 + ((9 - 4) + 12)",
      "(9 + (12 + 7)) - 4",
      "((12 + 7) - 4) + 9",
      "((9 + 7) - 4) + 12",
      "12 - ((4 - 9) - 7)",
      "12 + ((7 - 4) + 9)",
      "4 / ((9 - 7) / 12)",
      "((4 - 9) + 7) * 12",
      "9 - (4 - (12 + 7))",
      "((12 - 4) + 7) + 9",
      "9 - (4 - (7 + 12))",
      "7 - (4 - (12 + 9))",
      "(12 + (9 - 4)) + 7",
      "(4 * 12) / (9 - 7)",
      "(4 / (9 - 7)) * 12",
      "(4 - (9 - 7)) * 12",
      "(12 + 7) - (4 - 9)",
      "((7 - 4) + 12) + 9",
      "(9 + 7) + (12 - 4)",
      "7 + (12 + (9 - 4))",
      "(7 + 12) + (9 - 4)",
      "12 - (4 - (9 + 7))"
    ]
  },
  "4 7 9 13": {
    "cards": "4 7 9 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((7 * 4) - 13) + 9",
      "(7 * 4) + (9 - 13)",
      "9 + ((4 * 7) - 13)",
      "(7 * 4) - (13 - 9)",
      "(9 + (7 * 4)) - 13",
      "(9 - 13) + (4 * 7)",
      "(4 * 7) - (13 - 9)",
      "9 - (13 - (4 * 7))",
      "((7 * 4) + 9) - 13",
      "((4 * 7) + 9) - 13",
      "9 + ((7 * 4) - 13)",
      "9 - (13 - (7 * 4))",
      "(4 * 7) + (9 - 13)",
      "(7 * (13 - 9)) - 4",
      "((13 - 9) * 7) - 4",
      "(9 - 13) + (7 * 4)",
      "((4 * 7) - 13) + 9",
      "(9 + (4 * 7)) - 13"
    ]
  },
  "4 7 10 10": {
    "cards": "4 7 10 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(7 - (10 / 10)) * 4",
      "4 * (7 - (10 / 10))"
    ]
  },
  "4 7 10 11": {
    "cards": "4 7 10 11",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(11 + 7) + (10 - 4)",
      "((10 + 7) - 4) + 11",
      "(10 + 11) - (4 - 7)",
      "(10 + (11 + 7)) - 4",
      "(11 + 7) - (4 - 10)",
      "11 + ((10 - 4) + 7)",
      "(10 - (4 - 7)) + 11",
      "7 - ((4 - 11) - 10)",
      "((11 - 4) + 10) + 7",
      "(7 + (10 - 4)) + 11",
      "(10 - 4) + (7 + 11)",
      "(7 + 10) - (4 - 11)",
      "((11 - 4) + 7) + 10",
      "(11 + 10) - (4 - 7)",
      "((10 + 7) + 11) - 4",
      "(10 + (11 - 4)) + 7",
      "7 + ((10 - 4) + 11)",
      "(10 - 4) + (11 + 7)",
      "(7 - (4 - 10)) + 11",
      "((10 - 11) + 7) * 4",
      "4 * ((10 - 11) + 7)",
      "((10 + 11) - 4) + 7",
      "4 * ((10 + 7) - 11)",
      "(10 + 11) + (7 - 4)",
      "4 * (10 + (7 - 11))",
      "(10 - (11 - 7)) * 4",
      "(7 + 11) + (10 - 4)",
      "11 - ((4 - 7) - 10)",
      "11 + (10 - (4 - 7))",
      "11 + (10 + (7 - 4))",
      "7 - ((4 - 10) - 11)",
      "7 + (10 - (4 - 11))",
      "(7 - (11 - 10)) * 4",
      "10 + ((7 + 11) - 4)",
      "(10 + (7 + 11)) - 4",
      "(11 - 7) * (10 - 4)",
      "4 * (7 - (11 - 10))",
      "10 + (11 + (7 - 4))",
      "(11 + 10) + (7 - 4)",
      "(11 + (7 - 4)) + 10",
      "11 - ((4 - 10) - 7)",
      "((10 - 4) + 11) + 7",
      "11 + ((7 + 10) - 4)",
      "10 + ((7 - 4) + 11)",
      "11 - (4 - (7 + 10))",
      "11 + (7 + (10 - 4))",
      "4 * ((7 - 11) + 10)",
      "((11 + 10) + 7) - 4",
      "(11 - 4) + (7 + 10)",
      "((7 + 10) + 11) - 4",
      "(7 - (4 - 11)) + 10",
      "10 - ((4 - 11) - 7)",
      "(10 + 7) + (11 - 4)",
      "10 + ((11 + 7) - 4)",
      "((7 - 4) + 11) + 10",
      "4 * (7 + (10 - 11))",
      "(7 + (10 - 11)) * 4",
      "(7 + (11 - 4)) + 10",
      "10 + (7 - (4 - 11))",
      "7 + ((10 + 11) - 4)",
      "10 - (4 - (7 + 11))",
      "11 - (4 - (10 + 7))",
      "7 + (10 + (11 - 4))",
      "10 - ((4 - 7) - 11)",
      "((11 + 7) - 4) + 10",
      "(11 - (4 - 10)) + 7",
      "((7 + 11) - 4) + 10",
      "(10 + 7) - (4 - 11)",
      "((7 - 11) + 10) * 4",
      "((7 + 10) - 4) + 11",
      "((10 - 4) + 7) + 11",
      "10 + (11 - (4 - 7))",
      "((10 + 11) + 7) - 4",
      "(7 + (10 + 11)) - 4",
      "10 + (7 + (11 - 4))",
      "11 + ((10 + 7) - 4)",
      "(7 - 4) + (10 + 11)",
      "7 - (4 - (10 + 11))",
      "((10 + 7) - 11) * 4",
      "(7 - 11) * (4 - 10)",
      "(4 - 10) * (7 - 11)",
      "(7 - 4) + (11 + 10)",
      "(10 + (7 - 11)) * 4",
      "7 + (11 - (4 - 10))",
      "7 + ((11 + 10) - 4)",
      "((11 + 10) - 4) + 7",
      "4 * (10 - (11 - 7))",
      "10 + ((11 - 4) + 7)",
      "(11 + (10 + 7)) - 4",
      "7 - (4 - (11 + 10))",
      "((7 + 11) + 10) - 4",
      "(7 + 10) + (11 - 4)",
      "11 + (7 - (4 - 10))",
      "(11 - (4 - 7)) + 10",
      "(7 + 11) - (4 - 10)",
      "4 * ((7 + 10) - 11)",
      "(11 + (7 + 10)) - 4",
      "7 + ((11 - 4) + 10)",
      "(10 - 4) * (11 - 7)",
      "((7 + 10) - 11) * 4",
      "(10 - (4 - 11)) + 7",
      "(11 + (10 - 4)) + 7",
      "(7 + (11 + 10)) - 4",
      "((11 + 7) + 10) - 4",
      "11 + ((7 - 4) + 10)",
      "10 - (4 - (11 + 7))",
      "7 + (11 + (10 - 4))",
      "(10 + (7 - 4)) + 11",
      "((7 - 4) + 10) + 11",
      "(11 - 4) + (10 + 7)"
    ]
  },
  "4 7 10 12": {
    "cards": "4 7 10 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(7 - 10) * (4 - 12)",
      "(12 * (10 + 4)) / 7",
      "12 / (7 / (4 + 10))",
      "(12 * (4 + 10)) / 7",
      "(4 + 10) * (12 / 7)",
      "((10 - 7) * 4) + 12",
      "12 * ((10 + 4) / 7)",
      "12 + (4 * (10 - 7))",
      "12 - ((7 - 10) * 4)",
      "(12 / 7) * (10 + 4)",
      "(4 * (10 - 7)) + 12",
      "(4 - 12) * (7 - 10)",
      "((4 + 10) / 7) * 12",
      "(4 + 10) / (7 / 12)",
      "12 + ((10 - 7) * 4)",
      "(10 + 4) / (7 / 12)",
      "12 * ((4 + 10) / 7)",
      "12 - (4 * (7 - 10))",
      "(12 / 7) * (4 + 10)",
      "((10 + 4) / 7) * 12",
      "(12 - 4) * (10 - 7)",
      "12 / (7 / (10 + 4))",
      "(10 - 7) * (12 - 4)",
      "(10 + 4) * (12 / 7)",
      "((4 + 10) * 12) / 7",
      "((10 + 4) * 12) / 7"
    ]
  },
  "4 7 10 13": {
    "cards": "4 7 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 7 11 11": {
    "cards": "4 7 11 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "4 * (7 - (11 / 11))",
      "(7 - (11 / 11)) * 4"
    ]
  },
  "4 7 11 12": {
    "cards": "4 7 11 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "4 * ((7 - 12) + 11)",
      "4 * (11 + (7 - 12))",
      "(11 - (12 - 7)) * 4",
      "4 * (7 + (11 - 12))",
      "4 * ((11 + 7) - 12)",
      "((7 + 11) - 12) * 4",
      "4 * (7 - (12 - 11))",
      "((7 - 12) + 11) * 4",
      "(7 + (11 - 12)) * 4",
      "((11 - 12) + 7) * 4",
      "4 * (11 - (12 - 7))",
      "((11 + 7) - 12) * 4",
      "4 * ((7 + 11) - 12)",
      "4 * ((11 - 12) + 7)",
      "(7 - (12 - 11)) * 4",
      "(11 + (7 - 12)) * 4"
    ]
  },
  "4 7 11 13": {
    "cards": "4 7 11 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 * 4) - 13) - 7",
      "((4 * 11) - 13) - 7",
      "((11 * 4) - 7) - 13",
      "((4 * 11) - 7) - 13",
      "(4 * 11) - (7 + 13)",
      "(4 * 11) - (13 + 7)",
      "(11 * 4) - (13 + 7)",
      "(11 * 4) - (7 + 13)"
    ]
  },
  "4 7 12 12": {
    "cards": "4 7 12 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((7 - 4) * 12) - 12",
      "(12 * (7 - 4)) - 12",
      "(12 + (7 * 12)) / 4",
      "((7 * 12) + 12) / 4",
      "(7 - (12 / 12)) * 4",
      "((12 * 7) + 12) / 4",
      "(12 + (12 * 7)) / 4",
      "4 * (7 - (12 / 12))"
    ]
  },
  "4 7 12 13": {
    "cards": "4 7 12 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(7 + (12 - 13)) * 4",
      "4 * (7 - (13 - 12))",
      "12 * (13 - (7 + 4))",
      "((7 - 13) + 12) * 4",
      "4 * ((7 - 13) + 12)",
      "(7 - (13 - 12)) * 4",
      "4 * (7 + (12 - 13))",
      "((7 + 12) - 13) * 4",
      "4 * ((12 + 7) - 13)",
      "((13 - 4) - 7) * 12",
      "((12 + 7) - 13) * 4",
      "((12 - 13) + 7) * 4",
      "(13 - (4 + 7)) * 12",
      "12 * ((13 - 4) - 7)",
      "(12 + (7 - 13)) * 4",
      "4 * (12 - (13 - 7))",
      "(13 - (7 + 4)) * 12",
      "12 * ((13 - 7) - 4)",
      "(12 - (13 - 7)) * 4",
      "12 * (13 - (4 + 7))",
      "4 * (12 + (7 - 13))",
      "4 * ((12 - 13) + 7)",
      "((13 - 7) - 4) * 12",
      "4 * ((7 + 12) - 13)"
    ]
  },
  "4 7 13 13": {
    "cards": "4 7 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(7 - (13 / 13)) * 4",
      "4 * (7 - (13 / 13))"
    ]
  },
  "4 8 8 8": {
    "cards": "4 8 8 8",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(8 / (4 / 8)) + 8",
      "8 + ((8 * 8) / 4)",
      "8 + (8 / (4 / 8))",
      "8 * (4 - (8 / 8))",
      "((8 * 8) / 4) + 8",
      "(4 - (8 / 8)) * 8",
      "8 + ((8 / 4) * 8)",
      "((8 / 4) * 8) + 8",
      "(8 * (8 - 4)) - 8",
      "(8 * (8 / 4)) + 8",
      "8 + (8 * (8 / 4))",
      "((8 - 4) * 8) - 8"
    ]
  },
  "4 8 8 9": {
    "cards": "4 8 8 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((4 + 8) - 9) * 8",
      "8 * ((8 - 9) + 4)",
      "((4 - 9) + 8) * 8",
      "8 * (8 + (4 - 9))",
      "((8 - 9) + 4) * 8",
      "(8 + (4 - 9)) * 8",
      "8 * ((4 + 8) - 9)",
      "8 * ((8 + 4) - 9)",
      "8 * ((4 - 9) + 8)",
      "8 * (8 - (9 - 4))",
      "8 * (4 - (9 - 8))",
      "(8 - (9 - 4)) * 8",
      "((8 + 4) - 9) * 8",
      "(4 + (8 - 9)) * 8",
      "(4 - (9 - 8)) * 8",
      "8 * (4 + (8 - 9))"
    ]
  },
  "4 8 8 10": {
    "cards": "4 8 8 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(8 * 8) - (10 * 4)",
      "(8 + 4) * (10 - 8)",
      "(8 + (8 - 10)) * 4",
      "(4 * 10) - (8 + 8)",
      "(8 - (10 - 8)) * 4",
      "((8 + 8) - 10) * 4",
      "4 * (8 - (10 - 8))",
      "4 * ((8 + 8) - 10)",
      "4 * (8 + (8 - 10))",
      "((4 * 10) - 8) - 8",
      "4 * ((8 - 10) + 8)",
      "(10 - 8) * (8 + 4)",
      "((8 - 10) + 8) * 4",
      "(4 + 8) * (10 - 8)",
      "(8 * 8) - (4 * 10)",
      "(10 * 4) - (8 + 8)",
      "(10 - 8) * (4 + 8)",
      "((10 * 4) - 8) - 8"
    ]
  },
  "4 8 8 11": {
    "cards": "4 8 8 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(8 + (8 * 11)) / 4",
      "((11 * 8) + 8) / 4",
      "(8 + (11 * 8)) / 4",
      "((8 * 11) + 8) / 4"
    ]
  },
  "4 8 8 12": {
    "cards": "4 8 8 12",
    "has_solution": "Y",
    "num_solutions": 59,
    "solutions": [
      "(8 + (8 - 4)) + 12",
      "(12 * 8) / (8 - 4)",
      "(8 + 12) - (4 - 8)",
      "12 / ((8 - 4) / 8)",
      "12 + ((8 - 4) + 8)",
      "(12 + (8 + 8)) - 4",
      "8 + (4 * (12 - 8))",
      "((8 - 4) + 8) + 12",
      "8 + (12 - (4 - 8))",
      "((8 + 12) + 8) - 4",
      "((8 + 8) + 12) - 4",
      "(8 - (4 - 8)) + 12",
      "(8 - 4) + (12 + 8)",
      "8 + ((12 + 8) - 4)",
      "12 + ((8 + 8) - 4)",
      "(12 / (8 - 4)) * 8",
      "12 * (8 / (8 - 4))",
      "8 - ((4 - 8) - 12)",
      "(12 - (4 - 8)) + 8",
      "8 / ((8 - 4) / 12)",
      "12 - ((4 - 8) - 8)",
      "8 + (8 + (12 - 4))",
      "((8 + 12) - 4) + 8",
      "8 * (12 / (8 - 4))",
      "(8 + (12 + 8)) - 4",
      "8 + ((12 - 4) + 8)",
      "(12 - 4) + (8 + 8)",
      "(12 + 8) - (4 - 8)",
      "8 - ((4 - 12) - 8)",
      "8 - (4 - (12 + 8))",
      "(12 + (8 - 4)) + 8",
      "(8 - (4 - 12)) + 8",
      "((12 + 8) + 8) - 4",
      "((8 - 4) + 12) + 8",
      "(8 * 12) / (8 - 4)",
      "((12 + 8) - 4) + 8",
      "(8 + (12 - 4)) + 8",
      "8 - (4 * (8 - 12))",
      "12 + (8 - (4 - 8))",
      "((12 - 4) + 8) + 8",
      "(4 * (12 - 8)) + 8",
      "12 - (4 - (8 + 8))",
      "(8 + 8) + (12 - 4)",
      "(12 + 8) + (8 - 4)",
      "(8 - 4) + (8 + 12)",
      "8 - ((8 - 12) * 4)",
      "8 + (8 - (4 - 12))",
      "(8 / (8 - 4)) * 12",
      "8 + ((8 - 4) + 12)",
      "8 + ((8 + 12) - 4)",
      "(8 + (8 + 12)) - 4",
      "8 - (4 - (8 + 12))",
      "((8 + 8) - 4) + 12",
      "8 + (12 + (8 - 4))",
      "((12 - 8) * 4) + 8",
      "(8 + 8) - (4 - 12)",
      "8 + ((12 - 8) * 4)",
      "(8 + 12) + (8 - 4)",
      "12 + (8 + (8 - 4))"
    ]
  },
  "4 8 8 13": {
    "cards": "4 8 8 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((8 * 13) - 8) / 4",
      "((13 * 8) - 8) / 4"
    ]
  },
  "4 8 9 9": {
    "cards": "4 8 9 9",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(4 - (9 / 9)) * 8",
      "8 * (4 - (9 / 9))"
    ]
  },
  "4 8 9 10": {
    "cards": "4 8 9 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * (4 - (10 - 9))",
      "8 * ((4 - 10) + 9)",
      "8 * (9 + (4 - 10))",
      "8 * ((9 + 4) - 10)",
      "((4 + 9) - 10) * 8",
      "((4 - 10) + 9) * 8",
      "8 * ((9 - 10) + 4)",
      "(4 + (9 - 10)) * 8",
      "8 * ((4 + 9) - 10)",
      "((9 + 4) - 10) * 8",
      "(4 - (10 - 9)) * 8",
      "8 * (4 + (9 - 10))",
      "((9 - 10) + 4) * 8",
      "(9 - (10 - 4)) * 8",
      "(9 + (4 - 10)) * 8",
      "8 * (9 - (10 - 4))"
    ]
  },
  "4 8 9 11": {
    "cards": "4 8 9 11",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "11 - (4 - (9 + 8))",
      "11 + ((8 - 4) + 9)",
      "((9 - 11) + 8) * 4",
      "((8 + 11) + 9) - 4",
      "((8 - 4) + 11) + 9",
      "9 + (8 - (4 - 11))",
      "((9 + 8) - 4) + 11",
      "((11 - 4) + 9) + 8",
      "(11 + (9 - 4)) + 8",
      "9 + ((8 + 11) - 4)",
      "9 - ((4 - 11) - 8)",
      "8 + (11 - (4 - 9))",
      "9 + ((11 - 4) + 8)",
      "8 + (9 + (11 - 4))",
      "9 - (4 - (11 + 8))",
      "11 + (9 + (8 - 4))",
      "(11 + 9) + (8 - 4)",
      "(9 - 4) + (8 + 11)",
      "((8 + 9) - 11) * 4",
      "((9 + 8) - 11) * 4",
      "9 + ((11 + 8) - 4)",
      "(9 + (8 + 11)) - 4",
      "(11 + (8 - 4)) + 9",
      "(11 - (4 - 9)) + 8",
      "(11 + (9 + 8)) - 4",
      "8 + ((9 - 4) + 11)",
      "(8 + 11) - (4 - 9)",
      "9 + (11 + (8 - 4))",
      "4 * (8 + (9 - 11))",
      "11 + (9 - (4 - 8))",
      "11 + ((8 + 9) - 4)",
      "8 - ((4 - 9) - 11)",
      "4 * (9 + (8 - 11))",
      "11 - ((4 - 9) - 8)",
      "(8 + (11 - 4)) + 9",
      "(11 - 9) * (8 + 4)",
      "8 - ((4 - 11) - 9)",
      "(11 + 8) + (9 - 4)",
      "(11 - (4 - 8)) + 9",
      "(8 + (9 + 11)) - 4",
      "(9 - (4 - 8)) + 11",
      "(11 + (8 + 9)) - 4",
      "((9 + 11) + 8) - 4",
      "(8 - (4 - 11)) + 9",
      "9 - (4 - (8 + 11))",
      "4 * ((8 + 9) - 11)",
      "((11 + 9) - 4) + 8",
      "(9 + (11 + 8)) - 4",
      "((8 - 4) + 9) + 11",
      "8 + ((11 + 9) - 4)",
      "((11 + 9) + 8) - 4",
      "9 + (8 + (11 - 4))",
      "11 - ((4 - 8) - 9)",
      "(8 - (4 - 9)) + 11",
      "8 + (11 + (9 - 4))",
      "((11 + 8) - 4) + 9",
      "((11 - 4) + 8) + 9",
      "11 + (8 - (4 - 9))",
      "(8 - 4) + (9 + 11)",
      "((8 - 11) + 9) * 4",
      "(8 + (9 - 11)) * 4",
      "(9 + 11) + (8 - 4)",
      "((8 + 11) - 4) + 9",
      "(4 + 8) * (11 - 9)",
      "(9 + (8 - 11)) * 4",
      "(11 + 9) - (4 - 8)",
      "((8 + 9) - 4) + 11",
      "4 * (8 - (11 - 9))",
      "9 + (11 - (4 - 8))",
      "(9 + (8 - 4)) + 11",
      "8 - (4 - (11 + 9))",
      "(11 + 8) - (4 - 9)",
      "(9 + 8) - (4 - 11)",
      "4 * ((8 - 11) + 9)",
      "11 + ((9 - 4) + 8)",
      "(8 - 4) + (11 + 9)",
      "((11 + 8) + 9) - 4",
      "((9 + 11) - 4) + 8",
      "11 - (4 - (8 + 9))",
      "(11 - 4) + (8 + 9)",
      "11 + ((9 + 8) - 4)",
      "11 + (8 + (9 - 4))",
      "(11 - 4) + (9 + 8)",
      "8 - (4 - (9 + 11))",
      "(9 - 4) + (11 + 8)",
      "((9 + 8) + 11) - 4",
      "(8 + 9) - (4 - 11)",
      "(9 + 11) - (4 - 8)",
      "8 + ((9 + 11) - 4)",
      "(8 + 11) + (9 - 4)",
      "((9 - 4) + 8) + 11",
      "8 + (9 - (4 - 11))",
      "4 * ((9 + 8) - 11)",
      "(8 - (11 - 9)) * 4",
      "9 - ((4 - 8) - 11)",
      "(8 + 4) * (11 - 9)",
      "(9 + (11 - 4)) + 8",
      "(8 + 9) + (11 - 4)",
      "8 + ((11 - 4) + 9)",
      "9 + ((8 - 4) + 11)",
      "4 * (9 - (11 - 8))",
      "(9 - (4 - 11)) + 8",
      "4 * ((9 - 11) + 8)",
      "((9 - 4) + 11) + 8",
      "(8 + (9 - 4)) + 11",
      "(9 + 8) + (11 - 4)",
      "((8 + 9) + 11) - 4",
      "(9 - (11 - 8)) * 4",
      "(8 + (11 + 9)) - 4",
      "(11 - 9) * (4 + 8)"
    ]
  },
  "4 8 9 12": {
    "cards": "4 8 9 12",
    "has_solution": "Y",
    "num_solutions": 96,
    "solutions": [
      "8 / (12 / (9 * 4))",
      "(4 * 9) * (8 / 12)",
      "(4 * 9) / (12 / 8)",
      "4 * ((9 * 8) / 12)",
      "(8 * 4) / (12 / 9)",
      "8 / ((12 / 4) / 9)",
      "4 / ((12 / 9) / 8)",
      "9 * (4 * (8 / 12))",
      "(4 * (8 * 9)) / 12",
      "((8 / 12) * 9) * 4",
      "(4 * 8) * (9 / 12)",
      "8 * ((4 / 12) * 9)",
      "((4 * 9) / 12) * 8",
      "((8 - 4) * 9) - 12",
      "((9 * 4) / 12) * 8",
      "8 * ((4 * 9) / 12)",
      "((9 / 12) * 8) * 4",
      "9 * (8 * (4 / 12))",
      "(4 * (8 / 12)) * 9",
      "4 * ((8 * 9) / 12)",
      "(8 * 9) - (4 * 12)",
      "8 / (12 / (4 * 9))",
      "((9 / 12) * 4) * 8",
      "(9 * 8) / (12 / 4)",
      "(4 * (9 / 12)) * 8",
      "8 * ((9 / 12) * 4)",
      "(9 * 4) / (12 / 8)",
      "4 * (9 / (12 / 8))",
      "9 * ((8 * 4) / 12)",
      "8 / ((12 / 9) / 4)",
      "((8 * 4) / 12) * 9",
      "9 * (8 / (12 / 4))",
      "(8 * (9 * 4)) / 12",
      "(8 * (4 / 12)) * 9",
      "(8 * 9) / (12 / 4)",
      "4 * ((8 / 12) * 9)",
      "(9 * (8 * 4)) / 12",
      "(9 / (12 / 4)) * 8",
      "9 / ((12 / 4) / 8)",
      "9 * ((4 * 8) / 12)",
      "(4 / (12 / 8)) * 9",
      "(8 * (9 / 12)) * 4",
      "(9 * 8) - (12 * 4)",
      "((4 * 8) / 12) * 9",
      "(4 * (9 * 8)) / 12",
      "(8 / 12) * (4 * 9)",
      "4 * (9 * (8 / 12))",
      "4 * (8 / (12 / 9))",
      "9 / (12 / (8 * 4))",
      "((8 * 9) / 12) * 4",
      "((8 * 9) * 4) / 12",
      "9 / (12 / (4 * 8))",
      "((4 / 12) * 9) * 8",
      "((8 / 12) * 4) * 9",
      "(9 * (8 / 12)) * 4",
      "((9 * 8) * 4) / 12",
      "(9 * 8) * (4 / 12)",
      "((4 * 9) * 8) / 12",
      "(4 / 12) * (9 * 8)",
      "((9 * 8) / 12) * 4",
      "((9 * 4) * 8) / 12",
      "(4 * 8) / (12 / 9)",
      "(9 * (4 / 12)) * 8",
      "8 * (4 / (12 / 9))",
      "(8 / (12 / 9)) * 4",
      "(9 / 12) * (8 * 4)",
      "8 * (9 * (4 / 12))",
      "(8 * 9) * (4 / 12)",
      "(4 / (12 / 9)) * 8",
      "((8 * 4) * 9) / 12",
      "(9 / (12 / 8)) * 4",
      "(9 * (4 * 8)) / 12",
      "4 * (8 * (9 / 12))",
      "9 / ((12 / 8) / 4)",
      "4 * ((9 / 12) * 8)",
      "9 * ((4 / 12) * 8)",
      "((4 * 8) * 9) / 12",
      "8 * (9 / (12 / 4))",
      "(8 * 9) - (12 * 4)",
      "4 / ((12 / 8) / 9)",
      "(8 / (12 / 4)) * 9",
      "((4 / 12) * 8) * 9",
      "(9 * 4) * (8 / 12)",
      "9 * (4 / (12 / 8))",
      "4 / (12 / (8 * 9))",
      "(9 / 12) * (4 * 8)",
      "(8 * 4) * (9 / 12)",
      "(8 * (4 * 9)) / 12",
      "(9 * (8 - 4)) - 12",
      "(4 / 12) * (8 * 9)",
      "9 * ((8 / 12) * 4)",
      "(9 * 8) - (4 * 12)",
      "(8 / 12) * (9 * 4)",
      "8 * (4 * (9 / 12))",
      "4 / (12 / (9 * 8))",
      "8 * ((9 * 4) / 12)"
    ]
  },
  "4 8 9 13": {
    "cards": "4 8 9 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "8 + (4 * (13 - 9))",
      "13 + ((8 / 4) + 9)",
      "(4 * (13 - 9)) + 8",
      "(13 + (8 / 4)) + 9",
      "8 - ((9 - 13) * 4)",
      "8 + ((13 - 9) * 4)",
      "9 + (13 + (8 / 4))",
      "13 + (9 + (8 / 4))",
      "(9 + (8 / 4)) + 13",
      "8 - (4 * (9 - 13))",
      "9 + ((8 / 4) + 13)",
      "((8 / 4) + 9) + 13",
      "(13 + 9) + (8 / 4)",
      "((8 / 4) + 13) + 9",
      "(8 / 4) + (9 + 13)",
      "(9 + 13) + (8 / 4)",
      "(8 / 4) + (13 + 9)",
      "((13 - 9) * 4) + 8"
    ]
  },
  "4 8 10 10": {
    "cards": "4 8 10 10",
    "has_solution": "Y",
    "num_solutions": 53,
    "solutions": [
      "4 + ((10 - 8) * 10)",
      "4 - ((8 - 10) * 10)",
      "(10 + (10 + 8)) - 4",
      "(10 + (10 - 4)) + 8",
      "(10 + 8) + (10 - 4)",
      "((8 - 4) + 10) + 10",
      "((10 + 10) + 8) - 4",
      "((10 + 8) + 10) - 4",
      "10 + (10 - (4 - 8))",
      "8 + ((10 + 10) - 4)",
      "8 + (10 + (10 - 4))",
      "8 + ((10 - 4) + 10)",
      "8 - (4 - (10 + 10))",
      "(10 + 8) - (4 - 10)",
      "4 + (10 * (10 - 8))",
      "((8 + 10) - 4) + 10",
      "(10 - 4) + (8 + 10)",
      "(8 - (4 - 10)) + 10",
      "(10 + 10) + (8 - 4)",
      "(10 - 4) + (10 + 8)",
      "((8 + 10) + 10) - 4",
      "10 - ((4 - 10) - 8)",
      "10 - ((4 - 8) - 10)",
      "(8 + 10) + (10 - 4)",
      "8 + (10 - (4 - 10))",
      "((10 - 4) + 8) + 10",
      "8 - ((4 - 10) - 10)",
      "(8 - 4) + (10 + 10)",
      "10 + (8 - (4 - 10))",
      "(10 + (8 + 10)) - 4",
      "10 + (8 + (10 - 4))",
      "((10 - 8) * 10) + 4",
      "((10 + 8) - 4) + 10",
      "((10 + 10) - 4) + 8",
      "(10 + 10) - (4 - 8)",
      "4 - (10 * (8 - 10))",
      "(10 + (8 - 4)) + 10",
      "(4 - (10 / 10)) * 8",
      "10 + ((8 - 4) + 10)",
      "8 * (4 - (10 / 10))",
      "10 - (4 - (8 + 10))",
      "10 + ((10 + 8) - 4)",
      "(8 + (10 + 10)) - 4",
      "10 + ((8 + 10) - 4)",
      "(10 * (10 - 8)) + 4",
      "((10 - 4) + 10) + 8",
      "(8 + 10) - (4 - 10)",
      "10 + (10 + (8 - 4))",
      "10 - (4 - (10 + 8))",
      "(10 - (4 - 8)) + 10",
      "(10 - (4 - 10)) + 8",
      "(8 + (10 - 4)) + 10",
      "10 + ((10 - 4) + 8)"
    ]
  },
  "4 8 10 11": {
    "cards": "4 8 10 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((10 - 11) + 4) * 8",
      "((4 + 10) - 11) * 8",
      "((4 - 11) + 10) * 8",
      "8 * (10 - (11 - 4))",
      "8 * ((10 - 11) + 4)",
      "(10 + (4 - 11)) * 8",
      "8 * ((4 + 10) - 11)",
      "(4 + (10 - 11)) * 8",
      "8 * (4 - (11 - 10))",
      "8 * (10 + (4 - 11))",
      "8 * ((10 + 4) - 11)",
      "8 * ((4 - 11) + 10)",
      "((10 + 4) - 11) * 8",
      "(10 - (11 - 4)) * 8",
      "8 * (4 + (10 - 11))",
      "(4 - (11 - 10)) * 8"
    ]
  },
  "4 8 10 12": {
    "cards": "4 8 10 12",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "4 * (8 - (12 - 10))",
      "12 * (4 + (8 - 10))",
      "12 / ((10 - 8) / 4)",
      "(4 - (10 - 8)) * 12",
      "(12 - 10) * (8 + 4)",
      "(4 + (8 - 10)) * 12",
      "(10 - 4) * (12 - 8)",
      "((8 + 4) - 10) * 12",
      "((4 - 10) + 8) * 12",
      "(10 - (12 - 8)) * 4",
      "4 * ((10 - 12) + 8)",
      "(8 - (10 - 4)) * 12",
      "((8 - 10) + 4) * 12",
      "((8 / 4) + 10) + 12",
      "12 * ((4 + 8) - 10)",
      "(10 + 12) + (8 / 4)",
      "(12 - 8) * (10 - 4)",
      "4 * (12 / (10 - 8))",
      "4 * (8 + (10 - 12))",
      "(12 * 4) / (10 - 8)",
      "10 + ((8 / 4) + 12)",
      "(8 / 4) + (10 + 12)",
      "(8 / 4) + (12 + 10)",
      "12 * (4 - (10 - 8))",
      "(4 * 12) / (10 - 8)",
      "(10 + (8 / 4)) + 12",
      "(4 + 8) * (12 - 10)",
      "((4 + 8) - 10) * 12",
      "12 * ((8 + 4) - 10)",
      "4 * ((8 - 12) + 10)",
      "((10 + 8) - 12) * 4",
      "(8 - (12 - 10)) * 4",
      "(12 + (8 / 4)) + 10",
      "12 * (4 / (10 - 8))",
      "(8 + (10 - 12)) * 4",
      "10 + (12 + (8 / 4))",
      "(12 - 10) * (4 + 8)",
      "12 * ((8 - 10) + 4)",
      "((8 / 4) + 12) + 10",
      "(4 / (10 - 8)) * 12",
      "(10 + (8 - 12)) * 4",
      "((8 - 12) + 10) * 4",
      "12 + ((8 / 4) + 10)",
      "(8 + (4 - 10)) * 12",
      "12 * ((4 - 10) + 8)",
      "(12 / (10 - 8)) * 4",
      "(4 - 10) * (8 - 12)",
      "4 / ((10 - 8) / 12)",
      "4 * ((10 + 8) - 12)",
      "12 * (8 - (10 - 4))",
      "(12 + 10) + (8 / 4)",
      "12 + (10 + (8 / 4))",
      "(8 + 4) * (12 - 10)",
      "((8 + 10) - 12) * 4",
      "4 * (10 - (12 - 8))",
      "12 * (8 + (4 - 10))",
      "4 * ((8 + 10) - 12)",
      "4 * (10 + (8 - 12))",
      "(8 - 12) * (4 - 10)",
      "((10 - 12) + 8) * 4"
    ]
  },
  "4 8 10 13": {
    "cards": "4 8 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 8 11 11": {
    "cards": "4 8 11 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(4 - (11 / 11)) * 8",
      "8 * (4 - (11 / 11))",
      "(11 + (8 / 4)) + 11",
      "(11 + 11) + (8 / 4)",
      "(8 / 4) + (11 + 11)",
      "11 + (11 + (8 / 4))",
      "((8 / 4) + 11) + 11",
      "11 + ((8 / 4) + 11)"
    ]
  },
  "4 8 11 12": {
    "cards": "4 8 11 12",
    "has_solution": "Y",
    "num_solutions": 34,
    "solutions": [
      "((11 + 4) - 12) * 8",
      "((4 * 11) - 8) - 12",
      "8 * (11 - (12 - 4))",
      "((4 - 12) + 11) * 8",
      "8 * ((11 + 4) - 12)",
      "(11 - 8) * (12 - 4)",
      "8 * (11 + (4 - 12))",
      "8 * ((4 - 12) + 11)",
      "12 + ((11 - 8) * 4)",
      "12 - ((8 - 11) * 4)",
      "(11 - (12 - 4)) * 8",
      "(11 + (4 - 12)) * 8",
      "((11 - 12) + 4) * 8",
      "(4 - 12) * (8 - 11)",
      "(8 - 11) * (4 - 12)",
      "(4 * 11) - (8 + 12)",
      "((4 * 11) - 12) - 8",
      "8 * (4 + (11 - 12))",
      "8 * (4 - (12 - 11))",
      "(4 + (11 - 12)) * 8",
      "(11 * 4) - (8 + 12)",
      "(4 * (11 - 8)) + 12",
      "12 - (4 * (8 - 11))",
      "((11 * 4) - 12) - 8",
      "12 + (4 * (11 - 8))",
      "(4 * 11) - (12 + 8)",
      "8 * ((11 - 12) + 4)",
      "((11 * 4) - 8) - 12",
      "((4 + 11) - 12) * 8",
      "((11 - 8) * 4) + 12",
      "(12 - 4) * (11 - 8)",
      "(4 - (12 - 11)) * 8",
      "(11 * 4) - (12 + 8)",
      "8 * ((4 + 11) - 12)"
    ]
  },
  "4 8 11 13": {
    "cards": "4 8 11 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(11 - (13 - 8)) * 4",
      "4 * (11 + (8 - 13))",
      "(8 + (11 - 13)) * 4",
      "4 * ((11 - 13) + 8)",
      "(11 + (8 - 13)) * 4",
      "4 * (8 + (11 - 13))",
      "((8 - 13) + 11) * 4",
      "4 * ((8 + 11) - 13)",
      "(13 - 11) * (8 + 4)",
      "((8 + 11) - 13) * 4",
      "((11 - 13) + 8) * 4",
      "4 * ((11 + 8) - 13)",
      "4 * (11 - (13 - 8))",
      "((11 + 8) - 13) * 4",
      "(8 - (13 - 11)) * 4",
      "(13 - 11) * (4 + 8)",
      "(8 + 4) * (13 - 11)",
      "4 * ((8 - 13) + 11)",
      "4 * (8 - (13 - 11))",
      "(4 + 8) * (13 - 11)"
    ]
  },
  "4 8 12 12": {
    "cards": "4 8 12 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(12 / 8) * (4 + 12)",
      "(12 / 8) * (12 + 4)",
      "12 / (8 / (4 + 12))",
      "12 * ((12 + 4) / 8)",
      "8 * (4 - (12 / 12))",
      "(12 * (12 + 4)) / 8",
      "(12 + 4) / (8 / 12)",
      "(12 + 4) * (12 / 8)",
      "((12 + 4) * 12) / 8",
      "((4 + 12) * 12) / 8",
      "((4 + 12) / 8) * 12",
      "(4 - (12 / 12)) * 8",
      "12 * ((4 + 12) / 8)",
      "(4 + 12) / (8 / 12)",
      "12 / (8 / (12 + 4))",
      "(4 + 12) * (12 / 8)",
      "((12 + 4) / 8) * 12",
      "(12 * (4 + 12)) / 8"
    ]
  },
  "4 8 12 13": {
    "cards": "4 8 12 13",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((12 + 4) - 13) * 8",
      "(8 + 13) + (12 / 4)",
      "(4 - (13 - 12)) * 8",
      "(13 + 8) + (12 / 4)",
      "((4 + 12) - 13) * 8",
      "8 * (4 + (12 - 13))",
      "13 + (8 + (12 / 4))",
      "((4 - 13) + 12) * 8",
      "(12 / 4) + (8 + 13)",
      "((12 - 13) + 4) * 8",
      "8 * ((12 - 13) + 4)",
      "(13 + (12 / 4)) + 8",
      "((12 / 4) + 8) + 13",
      "8 * ((4 - 13) + 12)",
      "8 * (12 - (13 - 4))",
      "8 * ((4 + 12) - 13)",
      "13 + ((12 / 4) + 8)",
      "8 + ((12 / 4) + 13)",
      "(4 + (12 - 13)) * 8",
      "8 + (13 + (12 / 4))",
      "(12 - (13 - 4)) * 8",
      "8 * ((12 + 4) - 13)",
      "8 * (12 + (4 - 13))",
      "8 * (4 - (13 - 12))",
      "(8 + (12 / 4)) + 13",
      "(12 + (4 - 13)) * 8",
      "((12 / 4) + 13) + 8",
      "(12 / 4) + (13 + 8)"
    ]
  },
  "4 8 13 13": {
    "cards": "4 8 13 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(13 - (8 / 4)) + 13",
      "(4 - (13 / 13)) * 8",
      "13 - ((8 / 4) - 13)",
      "8 * (4 - (13 / 13))",
      "13 + (13 - (8 / 4))",
      "(13 + 13) - (8 / 4)"
    ]
  },
  "4 9 9 9": {
    "cards": "4 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 9 10": {
    "cards": "4 9 9 10",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(10 + 9) - (4 - 9)",
      "((9 - 4) + 10) + 9",
      "10 + ((9 - 4) + 9)",
      "9 - ((4 - 9) - 10)",
      "10 + (9 + (9 - 4))",
      "((10 + 9) + 9) - 4",
      "9 - ((4 - 10) - 9)",
      "9 - (4 - (10 + 9))",
      "((9 + 10) + 9) - 4",
      "(10 + (9 - 4)) + 9",
      "(9 - (4 - 10)) + 9",
      "(9 + (10 + 9)) - 4",
      "(10 + (9 + 9)) - 4",
      "(9 + (9 - 4)) + 10",
      "9 + ((10 + 9) - 4)",
      "10 - ((4 - 9) - 9)",
      "(9 - 4) + (10 + 9)",
      "9 + (9 - (4 - 10))",
      "((10 - 4) + 9) + 9",
      "(9 + (9 + 10)) - 4",
      "((9 + 9) - 4) + 10",
      "(9 - 4) + (9 + 10)",
      "(9 - (4 - 9)) + 10",
      "9 - (4 - (9 + 10))",
      "10 - (4 - (9 + 9))",
      "(9 + 9) - (4 - 10)",
      "(10 + 9) + (9 - 4)",
      "9 + ((10 - 4) + 9)",
      "(10 - (4 - 9)) + 9",
      "(9 + (10 - 4)) + 9",
      "9 + (9 + (10 - 4))",
      "((10 + 9) - 4) + 9",
      "10 + (9 - (4 - 9))",
      "9 + (10 - (4 - 9))",
      "((9 + 10) - 4) + 9",
      "10 + ((9 + 9) - 4)",
      "(9 + 9) + (10 - 4)",
      "9 + ((9 + 10) - 4)",
      "(10 - 4) + (9 + 9)",
      "9 + ((9 - 4) + 10)",
      "((9 + 9) + 10) - 4",
      "((9 - 4) + 9) + 10",
      "9 + (10 + (9 - 4))",
      "(9 + 10) - (4 - 9)",
      "(9 + 10) + (9 - 4)"
    ]
  },
  "4 9 9 11": {
    "cards": "4 9 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 9 12": {
    "cards": "4 9 9 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "4 * (9 - (12 - 9))",
      "4 * ((9 + 9) - 12)",
      "9 * (4 - (12 / 9))",
      "(9 - (12 - 9)) * 4",
      "(9 + (9 - 12)) * 4",
      "((9 + 9) - 12) * 4",
      "4 * ((9 - 12) + 9)",
      "(4 - (12 / 9)) * 9",
      "((9 - 12) + 9) * 4",
      "4 * (9 + (9 - 12))"
    ]
  },
  "4 9 9 13": {
    "cards": "4 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 10 10": {
    "cards": "4 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 10 11": {
    "cards": "4 9 10 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "4 + (10 * (11 - 9))",
      "(10 * (11 - 9)) + 4",
      "4 + ((11 - 9) * 10)",
      "4 - (10 * (9 - 11))",
      "((11 - 9) * 10) + 4",
      "4 - ((9 - 11) * 10)"
    ]
  },
  "4 9 10 12": {
    "cards": "4 9 10 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 / (9 - 4)) * 10",
      "10 * (12 / (9 - 4))",
      "12 * (10 / (9 - 4))",
      "(12 * 10) / (9 - 4)",
      "(10 / (9 - 4)) * 12",
      "(10 * 12) / (9 - 4)",
      "10 / ((9 - 4) / 12)",
      "12 / ((9 - 4) / 10)"
    ]
  },
  "4 9 10 13": {
    "cards": "4 9 10 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "4 * ((10 + 9) - 13)",
      "((9 - 13) + 10) * 4",
      "4 * (10 + (9 - 13))",
      "4 * ((9 - 13) + 10)",
      "(9 + (10 - 13)) * 4",
      "(4 - 10) * (9 - 13)",
      "4 * ((10 - 13) + 9)",
      "(9 - (13 - 10)) * 4",
      "((9 + 10) - 13) * 4",
      "(10 + (9 - 13)) * 4",
      "4 * (9 - (13 - 10))",
      "(9 - 13) * (4 - 10)",
      "(10 - (13 - 9)) * 4",
      "4 * (10 - (13 - 9))",
      "4 * (9 + (10 - 13))",
      "(10 - 4) * (13 - 9)",
      "((10 + 9) - 13) * 4",
      "((10 - 13) + 9) * 4",
      "4 * ((9 + 10) - 13)",
      "(13 - 9) * (10 - 4)"
    ]
  },
  "4 9 11 11": {
    "cards": "4 9 11 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((11 * 4) - 9) - 11",
      "(4 * 11) - (11 + 9)",
      "(11 * 4) - (9 + 11)",
      "((4 * 11) - 11) - 9",
      "((4 * 11) - 9) - 11",
      "((11 * 4) - 11) - 9",
      "(11 * 4) - (11 + 9)",
      "(4 * 11) - (9 + 11)"
    ]
  },
  "4 9 11 12": {
    "cards": "4 9 11 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((12 / 4) * 11) - 9",
      "12 * ((4 + 9) - 11)",
      "((9 + 4) - 11) * 12",
      "(9 - (11 - 4)) * 12",
      "4 * (12 / (11 - 9))",
      "(12 * (11 / 4)) - 9",
      "12 * (4 + (9 - 11))",
      "((12 * 11) / 4) - 9",
      "((9 - 11) + 4) * 12",
      "(11 * (12 / 4)) - 9",
      "(4 / (11 - 9)) * 12",
      "((11 * 12) / 4) - 9",
      "12 * (9 + (4 - 11))",
      "(9 + (4 - 11)) * 12",
      "(4 * 12) / (11 - 9)",
      "12 * (9 - (11 - 4))",
      "((4 + 9) - 11) * 12",
      "(12 * 4) / (11 - 9)",
      "(12 / (11 - 9)) * 4",
      "(12 / (4 / 11)) - 9",
      "4 / ((11 - 9) / 12)",
      "((11 / 4) * 12) - 9",
      "12 * (4 / (11 - 9))",
      "(4 + (9 - 11)) * 12",
      "((4 - 11) + 9) * 12",
      "12 * (4 - (11 - 9))",
      "(4 - (11 - 9)) * 12",
      "12 / ((11 - 9) / 4)",
      "(11 / (4 / 12)) - 9",
      "12 * ((9 + 4) - 11)",
      "12 * ((9 - 11) + 4)",
      "12 * ((4 - 11) + 9)"
    ]
  },
  "4 9 11 13": {
    "cards": "4 9 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 12 12": {
    "cards": "4 9 12 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(12 + 9) + (12 / 4)",
      "12 + ((12 - 9) * 4)",
      "12 + ((12 / 4) + 9)",
      "(4 - 12) * (9 - 12)",
      "((12 / 4) + 9) + 12",
      "12 + (9 + (12 / 4))",
      "((9 * 12) - 12) / 4",
      "(12 / 4) + (9 + 12)",
      "12 - ((9 - 12) * 4)",
      "9 + ((12 / 4) + 12)",
      "9 + (12 + (12 / 4))",
      "((12 - 9) * 4) + 12",
      "12 + (4 * (12 - 9))",
      "((12 * 9) - 12) / 4",
      "(9 + (12 / 4)) + 12",
      "(9 + 12) + (12 / 4)",
      "(4 * (12 - 9)) + 12",
      "(12 - 4) * (12 - 9)",
      "12 - (4 * (9 - 12))",
      "(12 / 4) + (12 + 9)",
      "(9 - 12) * (4 - 12)",
      "(12 + (12 / 4)) + 9",
      "((12 / 4) + 12) + 9",
      "(12 - 9) * (12 - 4)"
    ]
  },
  "4 9 12 13": {
    "cards": "4 9 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 9 13 13": {
    "cards": "4 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 10 10 10": {
    "cards": "4 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 10 10 11": {
    "cards": "4 10 10 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(4 * 11) - (10 + 10)",
      "((11 * 4) - 10) - 10",
      "((4 * 11) - 10) - 10",
      "(11 * 4) - (10 + 10)"
    ]
  },
  "4 10 10 12": {
    "cards": "4 10 10 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "4 - ((10 - 12) * 10)",
      "((12 - 10) * 10) + 4",
      "4 + ((12 - 10) * 10)",
      "4 - (10 * (10 - 12))",
      "(10 * (12 - 10)) + 4",
      "4 + (10 * (12 - 10))"
    ]
  },
  "4 10 10 13": {
    "cards": "4 10 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 10 11 11": {
    "cards": "4 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 10 11 12": {
    "cards": "4 10 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(10 + (12 / 4)) + 11",
      "10 + ((12 / 4) + 11)",
      "11 + (10 + (12 / 4))",
      "11 + ((12 / 4) + 10)",
      "(12 / 4) + (11 + 10)",
      "((12 / 4) + 10) + 11",
      "(11 + (12 / 4)) + 10",
      "(12 / 4) + (10 + 11)",
      "(10 + 11) + (12 / 4)",
      "(11 + 10) + (12 / 4)",
      "((12 / 4) + 11) + 10",
      "10 + (11 + (12 / 4))"
    ]
  },
  "4 10 11 13": {
    "cards": "4 10 11 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "4 - ((11 - 13) * 10)",
      "4 + (10 * (13 - 11))",
      "((13 - 11) * 10) + 4",
      "4 - (10 * (11 - 13))",
      "(10 * (13 - 11)) + 4",
      "4 + ((13 - 11) * 10)"
    ]
  },
  "4 10 12 12": {
    "cards": "4 10 12 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "(4 / (12 - 10)) * 12",
      "12 / ((10 - 4) / 12)",
      "4 / ((12 - 10) / 12)",
      "((10 + 4) - 12) * 12",
      "(12 / (10 - 4)) * 12",
      "(10 + (4 - 12)) * 12",
      "(12 / (12 - 10)) * 4",
      "(10 - (12 - 4)) * 12",
      "(12 * 4) / (12 - 10)",
      "12 * (4 + (10 - 12))",
      "12 / ((12 - 10) / 4)",
      "(4 - (12 - 10)) * 12",
      "((10 - 12) + 4) * 12",
      "12 * (12 / (10 - 4))",
      "12 * (4 / (12 - 10))",
      "(12 * 12) / (10 - 4)",
      "12 * ((10 - 12) + 4)",
      "12 * ((4 + 10) - 12)",
      "4 * (12 / (12 - 10))",
      "12 * ((10 + 4) - 12)",
      "((4 + 10) - 12) * 12",
      "((4 - 12) + 10) * 12",
      "12 * (10 - (12 - 4))",
      "12 * ((4 - 12) + 10)",
      "(4 + (10 - 12)) * 12",
      "12 * (10 + (4 - 12))",
      "12 * (4 - (12 - 10))",
      "(4 * 12) / (12 - 10)"
    ]
  },
  "4 10 12 13": {
    "cards": "4 10 12 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(4 - 12) * (10 - 13)",
      "12 + (4 * (13 - 10))",
      "(4 * (13 - 10)) + 12",
      "(12 - 4) * (13 - 10)",
      "12 - (4 * (10 - 13))",
      "(13 - 10) * (12 - 4)",
      "12 - ((10 - 13) * 4)",
      "12 + ((13 - 10) * 4)",
      "((13 - 10) * 4) + 12",
      "(10 - 13) * (4 - 12)"
    ]
  },
  "4 10 13 13": {
    "cards": "4 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 11 11 11": {
    "cards": "4 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 11 11 12": {
    "cards": "4 11 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 11 11 13": {
    "cards": "4 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 11 12 12": {
    "cards": "4 11 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 11 12 13": {
    "cards": "4 11 12 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "12 * ((4 - 13) + 11)",
      "((11 + 4) - 13) * 12",
      "12 * (11 + (4 - 13))",
      "(4 * 12) - (13 + 11)",
      "(11 - (13 - 4)) * 12",
      "(4 * 12) / (13 - 11)",
      "((4 * 12) - 11) - 13",
      "4 / ((13 - 11) / 12)",
      "12 * (4 - (13 - 11))",
      "(12 * 4) / (13 - 11)",
      "12 * (4 / (13 - 11))",
      "(4 * 12) - (11 + 13)",
      "((11 - 13) + 4) * 12",
      "(12 * 4) - (11 + 13)",
      "12 * ((11 - 13) + 4)",
      "12 * ((11 + 4) - 13)",
      "((12 * 4) - 13) - 11",
      "(4 - (13 - 11)) * 12",
      "12 * (11 - (13 - 4))",
      "(12 * 4) - (13 + 11)",
      "4 * (12 / (13 - 11))",
      "(12 / (13 - 11)) * 4",
      "12 / ((13 - 11) / 4)",
      "((12 * 4) - 11) - 13",
      "((4 * 12) - 13) - 11",
      "12 * ((4 + 11) - 13)",
      "((4 - 13) + 11) * 12",
      "(4 + (11 - 13)) * 12",
      "(4 / (13 - 11)) * 12",
      "(11 + (4 - 13)) * 12",
      "((4 + 11) - 13) * 12",
      "12 * (4 + (11 - 13))"
    ]
  },
  "4 11 13 13": {
    "cards": "4 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 12 12 12": {
    "cards": "4 12 12 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(4 * 12) - (12 + 12)",
      "((12 * 4) - 12) - 12",
      "((4 * 12) - 12) - 12",
      "((12 / 4) * 12) - 12",
      "(12 * (12 / 4)) - 12",
      "(12 * 4) - (12 + 12)",
      "(12 / (4 / 12)) - 12",
      "((12 * 12) / 4) - 12"
    ]
  },
  "4 12 12 13": {
    "cards": "4 12 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 12 13 13": {
    "cards": "4 12 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "4 13 13 13": {
    "cards": "4 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 5 5": {
    "cards": "5 5 5 5",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (5 / 5)"
    ]
  },
  "5 5 5 6": {
    "cards": "5 5 5 6",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "5 + ((5 * 5) - 6)",
      "((5 * 5) + 5) - 6",
      "(5 * 5) - (6 - 5)",
      "(5 - (5 / 5)) * 6",
      "(5 * 5) + (5 - 6)",
      "((5 * 5) - 6) + 5",
      "5 - (6 - (5 * 5))",
      "(5 + (5 * 5)) - 6",
      "(5 - 6) + (5 * 5)",
      "6 * (5 - (5 / 5))"
    ]
  },
  "5 5 5 7": {
    "cards": "5 5 5 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 5 8": {
    "cards": "5 5 5 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 5 9": {
    "cards": "5 5 5 9",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((5 + 9) + 5) + 5",
      "5 + ((9 + 5) + 5)",
      "(9 + 5) + (5 + 5)",
      "(5 + 9) + (5 + 5)",
      "9 + (5 + (5 + 5))",
      "5 + (5 + (9 + 5))",
      "5 + (5 + (5 + 9))",
      "(9 + (5 + 5)) + 5",
      "5 + ((5 + 5) + 9)",
      "5 + (9 + (5 + 5))",
      "((5 + 5) + 5) + 9",
      "5 + ((5 + 9) + 5)",
      "(5 + 5) + (5 + 9)",
      "(5 + 5) + (9 + 5)",
      "((5 + 5) + 9) + 5",
      "9 + ((5 + 5) + 5)",
      "(5 + (5 + 9)) + 5",
      "((9 + 5) + 5) + 5",
      "(5 + (5 + 5)) + 9",
      "(5 + (9 + 5)) + 5"
    ]
  },
  "5 5 5 10": {
    "cards": "5 5 5 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 5 11": {
    "cards": "5 5 5 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 5 12": {
    "cards": "5 5 5 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 + 5) / (5 / 12)",
      "(12 / 5) * (5 + 5)",
      "(5 + 5) * (12 / 5)",
      "(12 * (5 + 5)) / 5",
      "((5 + 5) * 12) / 5",
      "12 / (5 / (5 + 5))",
      "12 * ((5 + 5) / 5)",
      "((5 + 5) / 5) * 12"
    ]
  },
  "5 5 5 13": {
    "cards": "5 5 5 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 6 6": {
    "cards": "5 5 6 6",
    "has_solution": "Y",
    "num_solutions": 11,
    "solutions": [
      "6 * (5 + (5 - 6))",
      "(5 + (5 - 6)) * 6",
      "(6 - (6 / 5)) * 5",
      "(5 * 5) - (6 / 6)",
      "6 * ((5 + 5) - 6)",
      "6 * ((5 - 6) + 5)",
      "(5 - (6 - 5)) * 6",
      "6 * (5 - (6 - 5))",
      "5 * (6 - (6 / 5))",
      "((5 - 6) + 5) * 6",
      "((5 + 5) - 6) * 6"
    ]
  },
  "5 5 6 7": {
    "cards": "5 5 6 7",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(5 * 7) - (6 + 5)",
      "((7 * 5) - 5) - 6",
      "((5 * 5) + 6) - 7",
      "6 + ((5 * 5) - 7)",
      "((7 * 5) - 6) - 5",
      "(5 * 7) - (5 + 6)",
      "((5 * 7) - 6) - 5",
      "(7 * 5) - (6 + 5)",
      "(5 * 5) - (7 - 6)",
      "(6 - 7) + (5 * 5)",
      "(7 * 5) - (5 + 6)",
      "6 - (7 - (5 * 5))",
      "((5 * 5) - 7) + 6",
      "(5 * 5) + (6 - 7)",
      "(6 + (5 * 5)) - 7",
      "((5 * 7) - 5) - 6"
    ]
  },
  "5 5 6 8": {
    "cards": "5 5 6 8",
    "has_solution": "Y",
    "num_solutions": 60,
    "solutions": [
      "5 + ((5 + 6) + 8)",
      "(8 + (5 + 6)) + 5",
      "6 + ((5 + 5) + 8)",
      "5 + ((8 + 6) + 5)",
      "(5 + 8) + (5 + 6)",
      "(5 + 5) + (8 + 6)",
      "(5 + (5 + 8)) + 6",
      "5 + ((8 + 5) + 6)",
      "(8 + (6 + 5)) + 5",
      "8 + (6 + (5 + 5))",
      "(5 + 5) + (6 + 8)",
      "((8 + 6) + 5) + 5",
      "6 + (5 + (5 + 8))",
      "((5 + 5) + 6) + 8",
      "5 + ((5 + 8) + 6)",
      "5 + (8 + (6 + 5))",
      "8 + (5 + (5 + 6))",
      "(5 + 6) + (8 + 5)",
      "((5 + 6) + 5) + 8",
      "((5 + 8) + 5) + 6",
      "5 + (8 + (5 + 6))",
      "((8 + 5) + 6) + 5",
      "8 + ((5 + 5) + 6)",
      "((5 + 8) + 6) + 5",
      "(8 + 6) + (5 + 5)",
      "5 + (5 + (8 + 6))",
      "(6 + 5) + (5 + 8)",
      "((8 + 5) + 5) + 6",
      "((5 + 5) + 8) + 6",
      "8 + (5 + (6 + 5))",
      "8 + ((5 + 6) + 5)",
      "(5 + (5 + 6)) + 8",
      "(8 + 5) + (5 + 6)",
      "8 + ((6 + 5) + 5)",
      "6 + ((5 + 8) + 5)",
      "(6 + (5 + 5)) + 8",
      "5 + (6 + (8 + 5))",
      "((6 + 8) + 5) + 5",
      "(6 + (8 + 5)) + 5",
      "6 + ((8 + 5) + 5)",
      "(5 + 6) + (5 + 8)",
      "5 + (5 + (6 + 8))",
      "(5 + 8) + (6 + 5)",
      "5 + ((6 + 8) + 5)",
      "(8 + 5) + (6 + 5)",
      "(6 + 8) + (5 + 5)",
      "((6 + 5) + 8) + 5",
      "5 + ((6 + 5) + 8)",
      "(5 + (6 + 8)) + 5",
      "((6 + 5) + 5) + 8",
      "(6 + (5 + 8)) + 5",
      "6 + (8 + (5 + 5))",
      "(5 + (6 + 5)) + 8",
      "5 + (6 + (5 + 8))",
      "(5 + (8 + 6)) + 5",
      "(8 + (5 + 5)) + 6",
      "(5 + (8 + 5)) + 6",
      "((5 + 6) + 8) + 5",
      "(6 + 5) + (8 + 5)",
      "6 + (5 + (8 + 5))"
    ]
  },
  "5 5 6 9": {
    "cards": "5 5 6 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 6 10": {
    "cards": "5 5 6 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 6 11": {
    "cards": "5 5 6 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((5 * 6) + 5) - 11",
      "5 + ((5 * 6) - 11)",
      "5 - (11 - (5 * 6))",
      "((5 * 6) - 11) + 5",
      "(5 * (11 - 5)) - 6",
      "((11 - 5) * 5) - 6",
      "(5 + (6 * 5)) - 11",
      "(6 * 5) - (11 - 5)",
      "5 - (11 - (6 * 5))",
      "(5 - 11) + (6 * 5)",
      "((6 * 5) - 11) + 5",
      "5 + ((6 * 5) - 11)",
      "((6 * 5) + 5) - 11",
      "(6 * 5) + (5 - 11)",
      "(5 * 6) + (5 - 11)",
      "(5 - 11) + (5 * 6)",
      "(5 + (5 * 6)) - 11",
      "(5 * 6) - (11 - 5)"
    ]
  },
  "5 5 6 12": {
    "cards": "5 5 6 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 6 13": {
    "cards": "5 5 6 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 7 7": {
    "cards": "5 5 7 7",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "5 + ((5 + 7) + 7)",
      "7 + (5 + (5 + 7))",
      "5 + ((7 + 7) + 5)",
      "(5 + (5 + 7)) + 7",
      "(5 + 7) + (5 + 7)",
      "((7 + 5) + 7) + 5",
      "(5 + (7 + 5)) + 7",
      "(7 + 7) + (5 + 5)",
      "((5 + 7) + 7) + 5",
      "7 + (7 + (5 + 5))",
      "(7 - 5) * (5 + 7)",
      "7 + ((7 + 5) + 5)",
      "(7 + 5) + (7 + 5)",
      "(7 - 5) * (7 + 5)",
      "(5 * 5) - (7 / 7)",
      "(7 + (5 + 5)) + 7",
      "((5 + 7) + 5) + 7",
      "(7 + 5) + (5 + 7)",
      "5 + ((7 + 5) + 7)",
      "5 + (5 + (7 + 7))",
      "((7 + 5) + 5) + 7",
      "5 + (7 + (7 + 5))",
      "(5 + 7) * (7 - 5)",
      "(5 + 7) + (7 + 5)",
      "((7 + 7) + 5) + 5",
      "(7 + 5) * (7 - 5)",
      "7 + (5 + (7 + 5))",
      "7 + ((5 + 7) + 5)",
      "(5 + (7 + 7)) + 5",
      "(7 + (7 + 5)) + 5",
      "(7 * 7) - (5 * 5)",
      "((5 + 5) + 7) + 7",
      "(7 + (5 + 7)) + 5",
      "(5 + 5) + (7 + 7)",
      "5 + (7 + (5 + 7))",
      "7 + ((5 + 5) + 7)"
    ]
  },
  "5 5 7 8": {
    "cards": "5 5 7 8",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(5 * 5) - (8 - 7)",
      "(5 - (7 - 5)) * 8",
      "(7 - 8) + (5 * 5)",
      "8 * ((5 + 5) - 7)",
      "((5 * 5) + 7) - 8",
      "8 * (5 - (7 - 5))",
      "(5 + (5 - 7)) * 8",
      "((5 - 7) + 5) * 8",
      "8 * ((5 - 7) + 5)",
      "(7 + (5 * 5)) - 8",
      "8 * (5 + (5 - 7))",
      "((5 + 5) - 7) * 8",
      "(5 * 5) + (7 - 8)",
      "((5 * 5) - 8) + 7",
      "7 + ((5 * 5) - 8)",
      "7 - (8 - (5 * 5))"
    ]
  },
  "5 5 7 9": {
    "cards": "5 5 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 7 10": {
    "cards": "5 5 7 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(10 * (5 + 7)) / 5",
      "(7 + 5) * (10 / 5)",
      "((5 + 7) * 10) / 5",
      "(7 + 5) / (5 / 10)",
      "10 * ((5 + 7) / 5)",
      "((7 + 5) / 5) * 10",
      "(5 + 7) / (5 / 10)",
      "(10 / 5) * (7 + 5)",
      "((7 + 5) * 10) / 5",
      "(10 * (7 + 5)) / 5",
      "10 * ((7 + 5) / 5)",
      "10 / (5 / (5 + 7))",
      "((5 + 7) / 5) * 10",
      "(5 + 7) * (10 / 5)",
      "10 / (5 / (7 + 5))",
      "(10 / 5) * (5 + 7)"
    ]
  },
  "5 5 7 11": {
    "cards": "5 5 7 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "5 * (7 - (11 / 5))",
      "(7 - (11 / 5)) * 5"
    ]
  },
  "5 5 7 12": {
    "cards": "5 5 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 7 13": {
    "cards": "5 5 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 8 8": {
    "cards": "5 5 8 8",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (8 / 8)"
    ]
  },
  "5 5 8 9": {
    "cards": "5 5 8 9",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "8 - (9 - (5 * 5))",
      "9 + (5 * (8 - 5))",
      "9 + ((8 - 5) * 5)",
      "(5 * 5) - (9 - 8)",
      "8 + ((5 * 5) - 9)",
      "(8 + (5 * 5)) - 9",
      "(5 * (8 - 5)) + 9",
      "((5 * 5) - 9) + 8",
      "((8 - 5) * 5) + 9",
      "((5 * 5) + 8) - 9",
      "9 - ((5 - 8) * 5)",
      "(5 * 5) + (8 - 9)",
      "(8 - 9) + (5 * 5)",
      "9 - (5 * (5 - 8))"
    ]
  },
  "5 5 8 10": {
    "cards": "5 5 8 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "8 * ((5 + 10) / 5)",
      "(8 * (10 + 5)) / 5",
      "(5 + 10) * (8 / 5)",
      "((5 + 10) * 8) / 5",
      "8 * (5 - (10 / 5))",
      "((10 + 5) / 5) * 8",
      "((10 + 5) * 8) / 5",
      "(8 / 5) * (10 + 5)",
      "8 / (5 / (10 + 5))",
      "((5 + 10) / 5) * 8",
      "(5 + 10) / (5 / 8)",
      "8 / (5 / (5 + 10))",
      "(8 / 5) * (5 + 10)",
      "(10 + 5) * (8 / 5)",
      "(8 * (5 + 10)) / 5",
      "(5 - (10 / 5)) * 8",
      "(10 + 5) / (5 / 8)",
      "8 * ((10 + 5) / 5)"
    ]
  },
  "5 5 8 11": {
    "cards": "5 5 8 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 * 8) - (11 + 5)",
      "((5 * 8) - 11) - 5",
      "(5 * 8) - (5 + 11)",
      "((5 * 8) - 5) - 11",
      "((8 * 5) - 11) - 5",
      "(8 * 5) - (11 + 5)",
      "((8 * 5) - 5) - 11",
      "(8 * 5) - (5 + 11)"
    ]
  },
  "5 5 8 12": {
    "cards": "5 5 8 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 * (5 + (5 - 8))",
      "((5 + 5) - 8) * 12",
      "12 * (5 - (8 - 5))",
      "((5 - 8) + 5) * 12",
      "12 * ((5 - 8) + 5)",
      "12 * ((5 + 5) - 8)",
      "(5 + (5 - 8)) * 12",
      "(5 - (8 - 5)) * 12"
    ]
  },
  "5 5 8 13": {
    "cards": "5 5 8 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(8 - 5) * (13 - 5)",
      "(13 - (5 + 5)) * 8",
      "(13 - 5) * (8 - 5)",
      "(5 - 8) * (5 - 13)",
      "((13 - 5) - 5) * 8",
      "(5 - 13) * (5 - 8)",
      "8 * (13 - (5 + 5))",
      "8 * ((13 - 5) - 5)"
    ]
  },
  "5 5 9 9": {
    "cards": "5 5 9 9",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (9 / 9)"
    ]
  },
  "5 5 9 10": {
    "cards": "5 5 9 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((5 * 5) - 10) + 9",
      "9 + ((5 * 5) - 10)",
      "(9 - 10) + (5 * 5)",
      "9 - (10 - (5 * 5))",
      "((5 * 5) + 9) - 10",
      "(5 * 5) + (9 - 10)",
      "(9 + (5 * 5)) - 10",
      "(5 * 5) - (10 - 9)"
    ]
  },
  "5 5 9 11": {
    "cards": "5 5 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 - 9) * (5 - 11)",
      "(11 - 5) * (9 - 5)",
      "(5 - 11) * (5 - 9)",
      "(9 - 5) * (11 - 5)"
    ]
  },
  "5 5 9 12": {
    "cards": "5 5 9 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 9 13": {
    "cards": "5 5 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 10 10": {
    "cards": "5 5 10 10",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (10 / 10)"
    ]
  },
  "5 5 10 11": {
    "cards": "5 5 10 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((5 * 5) + 10) - 11",
      "(5 * 5) - (11 - 10)",
      "10 + ((5 * 5) - 11)",
      "(10 - 11) + (5 * 5)",
      "((5 * 5) - 11) + 10",
      "(5 * 5) + (10 - 11)",
      "10 - (11 - (5 * 5))",
      "(10 + (5 * 5)) - 11"
    ]
  },
  "5 5 10 12": {
    "cards": "5 5 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 5 10 13": {
    "cards": "5 5 10 13",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(10 + 13) + (5 / 5)",
      "((5 / 5) + 13) + 10",
      "((5 / 5) + 10) + 13",
      "10 + ((5 / 5) + 13)",
      "(5 - (13 / 5)) * 10",
      "10 * (5 - (13 / 5))",
      "13 + ((5 / 5) + 10)",
      "(10 + (5 / 5)) + 13",
      "(13 + (5 / 5)) + 10",
      "(5 / 5) + (10 + 13)",
      "13 + (10 + (5 / 5))",
      "(5 / 5) + (13 + 10)",
      "(13 + 10) + (5 / 5)",
      "10 + (13 + (5 / 5))"
    ]
  },
  "5 5 11 11": {
    "cards": "5 5 11 11",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (11 / 11)"
    ]
  },
  "5 5 11 12": {
    "cards": "5 5 11 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(11 - 12) + (5 * 5)",
      "(11 + (5 / 5)) + 12",
      "12 + (11 + (5 / 5))",
      "(11 + (5 * 5)) - 12",
      "11 - (12 - (5 * 5))",
      "(5 * 5) - (12 - 11)",
      "((5 * 5) + 11) - 12",
      "11 + ((5 / 5) + 12)",
      "((5 / 5) + 12) + 11",
      "(5 * 5) + (11 - 12)",
      "((5 / 5) + 11) + 12",
      "11 + (12 + (5 / 5))",
      "(11 + 12) + (5 / 5)",
      "11 + ((5 * 5) - 12)",
      "((5 * 5) - 12) + 11",
      "((12 - 5) * 5) - 11",
      "(5 * (12 - 5)) - 11",
      "(5 / 5) + (12 + 11)",
      "(12 + (5 / 5)) + 11",
      "12 + ((5 / 5) + 11)",
      "(5 / 5) + (11 + 12)",
      "(12 + 11) + (5 / 5)"
    ]
  },
  "5 5 11 13": {
    "cards": "5 5 11 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "(11 + (13 + 5)) - 5",
      "(5 + 11) + (13 - 5)",
      "((13 - 5) + 11) + 5",
      "13 + (5 * (11 / 5))",
      "((13 + 5) + 11) - 5",
      "((11 + 13) + 5) - 5",
      "((13 * 5) / 5) + 11",
      "((11 + 13) - 5) + 5",
      "(11 - (5 - 5)) + 13",
      "((13 / 5) * 5) + 11",
      "5 - ((5 - 11) - 13)",
      "(5 + 11) - (5 - 13)",
      "(5 / 5) * (11 + 13)",
      "(5 + (11 + 13)) - 5",
      "((11 + 13) * 5) / 5",
      "13 - (5 - (11 + 5))",
      "(5 - (5 - 13)) + 11",
      "13 + ((11 / 5) * 5)",
      "13 + (5 - (5 - 11))",
      "13 - ((5 - 11) - 5)",
      "(11 + (13 - 5)) + 5",
      "5 + (11 - (5 - 13))",
      "(5 + (13 + 11)) - 5",
      "(11 + 13) / (5 / 5)",
      "5 + (13 + (11 - 5))",
      "(13 + 11) * (5 / 5)",
      "5 - (5 - (11 + 13))",
      "((13 + 11) / 5) * 5",
      "(11 + (5 - 5)) + 13",
      "11 + ((13 / 5) * 5)",
      "13 + ((11 * 5) / 5)",
      "13 + (11 - (5 - 5))",
      "11 + (5 + (13 - 5))",
      "13 - (5 - (5 + 11))",
      "(5 * (11 + 13)) / 5",
      "5 + (11 + (13 - 5))",
      "11 + (5 / (5 / 13))",
      "(5 - 5) + (11 + 13)",
      "((11 + 5) - 5) + 13",
      "((5 - 5) + 11) + 13",
      "((5 + 11) - 5) + 13",
      "(13 - (5 - 11)) + 5",
      "(13 / (5 / 5)) + 11",
      "11 + (13 + (5 - 5))",
      "5 * ((11 + 13) / 5)",
      "(13 + 5) + (11 - 5)",
      "((5 / 5) * 11) + 13",
      "(11 + 13) * (5 / 5)",
      "11 + ((5 * 13) / 5)",
      "(5 * (13 / 5)) + 11",
      "11 + (13 * (5 / 5))",
      "((5 * 11) / 5) + 13",
      "11 + ((5 + 13) - 5)",
      "5 / (5 / (11 + 13))",
      "((5 + 13) + 11) - 5",
      "13 + ((11 - 5) + 5)",
      "((11 + 13) / 5) * 5",
      "(5 + (13 - 5)) + 11",
      "5 * ((13 + 11) / 5)",
      "(13 + 11) - (5 - 5)",
      "(11 - (5 - 13)) + 5",
      "11 + ((13 - 5) + 5)",
      "(13 + (11 + 5)) - 5",
      "13 + (11 * (5 / 5))",
      "(11 + 5) + (13 - 5)",
      "5 / (5 / (13 + 11))",
      "((13 + 11) + 5) - 5",
      "(13 - 5) + (5 + 11)",
      "11 + ((5 / 5) * 13)",
      "13 + (5 / (5 / 11))",
      "(13 - (5 - 5)) + 11",
      "(5 / (5 / 13)) + 11",
      "((11 * 5) / 5) + 13",
      "((13 + 11) - 5) + 5",
      "(13 + 11) / (5 / 5)",
      "((13 + 11) * 5) / 5",
      "((13 + 5) - 5) + 11",
      "11 - (5 - (5 + 13))",
      "5 + ((11 - 5) + 13)",
      "(11 - 5) + (5 + 13)",
      "11 + (13 - (5 - 5))",
      "11 + ((13 * 5) / 5)",
      "(13 + (11 - 5)) + 5",
      "13 + ((5 * 11) / 5)",
      "(13 + 11) + (5 - 5)",
      "((11 + 5) + 13) - 5",
      "(13 + (5 + 11)) - 5",
      "((11 / 5) * 5) + 13",
      "13 + (5 + (11 - 5))",
      "11 - ((5 - 13) - 5)",
      "5 + (13 - (5 - 11))",
      "11 + (13 / (5 / 5))",
      "5 - (5 - (13 + 11))",
      "11 + (5 - (5 - 13))",
      "(5 + 13) - (5 - 11)",
      "11 + (5 * (13 / 5))",
      "((11 - 5) + 13) + 5",
      "(5 + 13) + (11 - 5)",
      "11 - ((5 - 5) - 13)",
      "(11 / (5 / 5)) + 13",
      "(11 + 13) - (5 - 5)",
      "((5 + 13) - 5) + 11",
      "13 + (11 / (5 / 5))",
      "(5 + (11 - 5)) + 13",
      "13 + ((5 - 5) + 11)",
      "(13 - 5) + (11 + 5)",
      "(11 + 13) + (5 - 5)",
      "((5 + 11) + 13) - 5",
      "5 + ((11 + 13) - 5)",
      "5 - ((5 - 13) - 11)",
      "(5 / 5) * (13 + 11)",
      "11 - (5 - (13 + 5))",
      "(11 - 5) + (13 + 5)",
      "((5 - 5) + 13) + 11",
      "((5 / 5) * 13) + 11",
      "13 + ((5 + 11) - 5)",
      "((13 - 5) + 5) + 11",
      "(5 - (5 - 11)) + 13",
      "(5 / (5 / 11)) + 13",
      "11 + ((5 - 5) + 13)",
      "(11 + (5 + 13)) - 5",
      "13 + ((5 / 5) * 11)",
      "11 + ((13 + 5) - 5)",
      "5 + ((13 + 11) - 5)",
      "(11 * (5 / 5)) + 13",
      "(13 * (5 / 5)) + 11",
      "(13 + 5) - (5 - 11)",
      "(13 + (5 - 5)) + 11",
      "5 + ((13 - 5) + 11)",
      "(5 * (11 / 5)) + 13",
      "(5 * (13 + 11)) / 5",
      "(11 + 5) - (5 - 13)",
      "(5 - 5) + (13 + 11)",
      "((5 * 13) / 5) + 11",
      "13 + ((11 + 5) - 5)",
      "((11 - 5) + 5) + 13",
      "13 + (11 + (5 - 5))",
      "13 - ((5 - 5) - 11)"
    ]
  },
  "5 5 12 12": {
    "cards": "5 5 12 12",
    "has_solution": "Y",
    "num_solutions": 74,
    "solutions": [
      "((12 + 12) / 5) * 5",
      "(5 + (12 + 12)) - 5",
      "((12 + 5) - 5) + 12",
      "12 + (12 / (5 / 5))",
      "12 - (5 - (5 + 12))",
      "12 + (5 * (12 / 5))",
      "5 - (5 - (12 + 12))",
      "((5 + 12) + 12) - 5",
      "12 - ((5 - 5) - 12)",
      "12 * ((12 - 5) - 5)",
      "12 + (5 + (12 - 5))",
      "12 + ((12 / 5) * 5)",
      "5 * ((12 + 12) / 5)",
      "(5 * (12 + 12)) / 5",
      "12 + ((5 * 12) / 5)",
      "5 - ((5 - 12) - 12)",
      "(12 + (5 + 12)) - 5",
      "5 + (12 + (12 - 5))",
      "12 + (5 - (5 - 12))",
      "((12 + 12) * 5) / 5",
      "(12 + 12) - (5 - 5)",
      "(12 + 12) + (5 - 5)",
      "((5 * 12) / 5) + 12",
      "12 * (12 - (5 + 5))",
      "(5 + (12 - 5)) + 12",
      "((12 + 12) - 5) + 5",
      "(12 + 5) + (12 - 5)",
      "(12 - 5) + (12 + 5)",
      "(5 + 12) + (12 - 5)",
      "(12 - 5) + (5 + 12)",
      "((12 + 5) + 12) - 5",
      "((12 - 5) + 5) + 12",
      "((12 / 5) * 5) + 12",
      "(5 - 5) + (12 + 12)",
      "12 - (5 - (12 + 5))",
      "12 + ((12 * 5) / 5)",
      "(12 + 5) - (5 - 12)",
      "(5 / (5 / 12)) + 12",
      "5 + ((12 + 12) - 5)",
      "((12 - 5) - 5) * 12",
      "(12 - (5 - 5)) + 12",
      "((5 - 5) + 12) + 12",
      "((12 + 12) + 5) - 5",
      "(12 + 12) / (5 / 5)",
      "5 + ((12 - 5) + 12)",
      "(12 - (5 - 12)) + 5",
      "12 + ((12 - 5) + 5)",
      "(12 * (5 / 5)) + 12",
      "(5 - (5 - 12)) + 12",
      "((5 / 5) * 12) + 12",
      "(5 * 5) - (12 / 12)",
      "(12 + (12 + 5)) - 5",
      "5 / (5 / (12 + 12))",
      "(12 + (5 - 5)) + 12",
      "(5 / 5) * (12 + 12)",
      "(5 + 12) - (5 - 12)",
      "((12 * 5) / 5) + 12",
      "(12 + (12 - 5)) + 5",
      "12 + (12 + (5 - 5))",
      "12 + ((5 / 5) * 12)",
      "(5 * (12 / 5)) + 12",
      "((12 - 5) + 12) + 5",
      "5 + (12 - (5 - 12))",
      "12 - ((5 - 12) - 5)",
      "12 + (12 * (5 / 5))",
      "(12 - (5 + 5)) * 12",
      "(12 / (5 / 5)) + 12",
      "12 + (5 / (5 / 12))",
      "12 + ((5 - 5) + 12)",
      "12 + ((5 + 12) - 5)",
      "12 + ((12 + 5) - 5)",
      "((5 + 12) - 5) + 12",
      "12 + (12 - (5 - 5))",
      "(12 + 12) * (5 / 5)"
    ]
  },
  "5 5 12 13": {
    "cards": "5 5 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 - ((5 / 5) - 13)",
      "13 - ((5 / 5) - 12)",
      "12 - (13 - (5 * 5))",
      "(5 * 5) + (12 - 13)",
      "(12 - 13) + (5 * 5)",
      "12 + (13 - (5 / 5))",
      "13 + (12 - (5 / 5))",
      "(12 - (5 / 5)) + 13",
      "(13 + 12) - (5 / 5)",
      "((5 * 5) + 12) - 13",
      "(12 + 13) - (5 / 5)",
      "12 + ((5 * 5) - 13)",
      "(13 - (5 / 5)) + 12",
      "((5 * 5) - 13) + 12",
      "(5 * 5) - (13 - 12)",
      "(12 + (5 * 5)) - 13"
    ]
  },
  "5 5 13 13": {
    "cards": "5 5 13 13",
    "has_solution": "Y",
    "num_solutions": 1,
    "solutions": [
      "(5 * 5) - (13 / 13)"
    ]
  },
  "5 6 6 6": {
    "cards": "5 6 6 6",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(5 - (6 / 6)) * 6",
      "6 * (5 - (6 / 6))"
    ]
  },
  "5 6 6 7": {
    "cards": "5 6 6 7",
    "has_solution": "Y",
    "num_solutions": 82,
    "solutions": [
      "(5 - (7 - 6)) * 6",
      "((5 - 7) + 6) * 6",
      "7 + (5 + (6 + 6))",
      "6 + ((6 + 7) + 5)",
      "(6 + 5) + (6 + 7)",
      "((6 + 6) + 5) + 7",
      "((6 + 7) + 6) + 5",
      "6 + ((5 + 7) + 6)",
      "(6 + (5 - 7)) * 6",
      "(5 + (6 + 6)) + 7",
      "(5 + 6) + (7 + 6)",
      "(6 + 6) * (7 - 5)",
      "6 + ((7 + 6) + 5)",
      "6 * ((5 + 6) - 7)",
      "(7 - 5) * (6 + 6)",
      "6 + (7 + (5 + 6))",
      "6 * (5 - (7 - 6))",
      "(6 * 6) - (7 + 5)",
      "(5 + (6 + 7)) + 6",
      "5 + (7 + (6 + 6))",
      "((5 + 7) + 6) + 6",
      "((6 + 6) + 7) + 5",
      "(7 + (6 + 5)) + 6",
      "7 + ((5 + 6) + 6)",
      "6 * (6 + (5 - 7))",
      "(6 + 6) + (5 + 7)",
      "(6 + 7) + (5 + 6)",
      "6 * ((6 - 7) + 5)",
      "6 + ((7 + 5) + 6)",
      "(6 + (7 + 6)) + 5",
      "(7 + 6) + (6 + 5)",
      "(6 * 6) - (5 + 7)",
      "6 + (5 + (7 + 6))",
      "6 * (6 - (7 - 5))",
      "7 + (6 + (5 + 6))",
      "((6 + 5) + 7) + 6",
      "((7 + 6) + 6) + 5",
      "7 + ((6 + 6) + 5)",
      "6 * ((6 + 5) - 7)",
      "5 + ((6 + 6) + 7)",
      "((6 + 5) - 7) * 6",
      "((7 + 5) + 6) + 6",
      "((6 + 5) + 6) + 7",
      "((5 + 6) + 7) + 6",
      "(6 + 7) + (6 + 5)",
      "(6 + (7 + 5)) + 6",
      "5 + (6 + (7 + 6))",
      "((7 + 6) + 5) + 6",
      "(6 + (5 + 7)) + 6",
      "(5 + 7) + (6 + 6)",
      "5 + ((7 + 6) + 6)",
      "5 + (6 + (6 + 7))",
      "(5 + (7 + 6)) + 6",
      "6 + (6 + (7 + 5))",
      "((6 * 6) - 7) - 5",
      "((5 + 6) - 7) * 6",
      "5 + ((6 + 7) + 6)",
      "6 + (6 + (5 + 7))",
      "(6 + (5 + 6)) + 7",
      "((6 + 7) + 5) + 6",
      "(7 + (6 + 6)) + 5",
      "((6 - 7) + 5) * 6",
      "((5 + 6) + 6) + 7",
      "6 + ((6 + 5) + 7)",
      "6 + (5 + (6 + 7))",
      "6 * (5 + (6 - 7))",
      "(6 + 5) + (7 + 6)",
      "6 + ((5 + 6) + 7)",
      "(6 + (6 + 5)) + 7",
      "(5 + 6) + (6 + 7)",
      "(6 + 6) + (7 + 5)",
      "(7 + (5 + 6)) + 6",
      "6 * ((5 - 7) + 6)",
      "7 + ((6 + 5) + 6)",
      "7 + (6 + (6 + 5))",
      "(6 - (7 - 5)) * 6",
      "6 + (7 + (6 + 5))",
      "(7 + 6) + (5 + 6)",
      "((6 * 6) - 5) - 7",
      "(5 + (6 - 7)) * 6",
      "(7 + 5) + (6 + 6)",
      "(6 + (6 + 7)) + 5"
    ]
  },
  "5 6 6 8": {
    "cards": "5 6 6 8",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "6 - (6 * (5 - 8))",
      "6 + (6 * (8 - 5))",
      "6 + ((8 - 5) * 6)",
      "6 - ((5 - 8) * 6)",
      "((8 - 5) * 6) + 6",
      "(6 * (8 - 5)) + 6"
    ]
  },
  "5 6 6 9": {
    "cards": "5 6 6 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 * 6) - (6 * 5)",
      "(9 * 6) - (5 * 6)",
      "(6 * 9) - (5 * 6)",
      "(6 * 9) - (6 * 5)"
    ]
  },
  "5 6 6 10": {
    "cards": "5 6 6 10",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(10 * (6 + 6)) / 5",
      "(6 * (10 - 5)) - 6",
      "(6 + 6) / (5 / 10)",
      "10 / (5 / (6 + 6))",
      "((10 - 5) * 6) - 6",
      "(6 + 6) * (10 / 5)",
      "(10 / 5) * (6 + 6)",
      "((6 + 6) / 5) * 10",
      "(6 - (10 / 5)) * 6",
      "6 * (6 - (10 / 5))",
      "((6 + 6) * 10) / 5",
      "10 * ((6 + 6) / 5)"
    ]
  },
  "5 6 6 11": {
    "cards": "5 6 6 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 6 6 12": {
    "cards": "5 6 6 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(5 * 12) - (6 * 6)",
      "(6 - 12) + (6 * 5)",
      "(12 * 5) - (6 * 6)",
      "6 + ((6 * 5) - 12)",
      "((6 * 5) - 12) + 6",
      "(6 - 12) + (5 * 6)",
      "((5 * 6) + 6) - 12",
      "(5 * 6) + (6 - 12)",
      "(6 + (6 * 5)) - 12",
      "(6 + (5 * 6)) - 12",
      "6 + ((5 * 6) - 12)",
      "((5 * 6) - 12) + 6",
      "6 - (12 - (6 * 5))",
      "6 - (12 - (5 * 6))",
      "(6 * 5) - (12 - 6)",
      "(5 * (12 - 6)) - 6",
      "((6 * 5) + 6) - 12",
      "(6 * 5) + (6 - 12)",
      "(5 * 6) - (12 - 6)",
      "((12 - 6) * 5) - 6"
    ]
  },
  "5 6 6 13": {
    "cards": "5 6 6 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 6 7 7": {
    "cards": "5 6 7 7",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "6 * (5 - (7 / 7))",
      "(5 - (7 / 7)) * 6"
    ]
  },
  "5 6 7 8": {
    "cards": "5 6 7 8",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "6 / ((7 - 5) / 8)",
      "8 / ((7 - 5) / 6)",
      "6 * ((5 + 7) - 8)",
      "((7 - 8) + 5) * 6",
      "((5 + 7) - 8) * 6",
      "(5 - (8 - 7)) * 6",
      "(6 * 8) / (7 - 5)",
      "(7 + (5 - 8)) * 6",
      "(6 / (7 - 5)) * 8",
      "(5 + 7) * (8 - 6)",
      "(5 + (7 - 8)) * 6",
      "(8 * 6) / (7 - 5)",
      "(8 - 6) * (5 + 7)",
      "6 * ((5 - 8) + 7)",
      "6 * (7 - (8 - 5))",
      "6 * (5 + (7 - 8))",
      "6 * (5 - (8 - 7))",
      "((5 - 8) + 7) * 6",
      "(7 - (8 - 5)) * 6",
      "(8 / (7 - 5)) * 6",
      "(8 - 6) * (7 + 5)",
      "6 * (8 / (7 - 5))",
      "(7 + 5) * (8 - 6)",
      "((7 + 5) - 8) * 6",
      "8 * (6 / (7 - 5))",
      "6 * ((7 + 5) - 8)",
      "6 * ((7 - 8) + 5)",
      "6 * (7 + (5 - 8))"
    ]
  },
  "5 6 7 9": {
    "cards": "5 6 7 9",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(9 * (7 - 5)) + 6",
      "6 + ((7 - 5) * 9)",
      "6 - (9 * (5 - 7))",
      "6 + (9 * (7 - 5))",
      "((7 - 5) * 9) + 6",
      "6 - ((5 - 7) * 9)"
    ]
  },
  "5 6 7 10": {
    "cards": "5 6 7 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 6 7 11": {
    "cards": "5 6 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 6 7 12": {
    "cards": "5 6 7 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "(5 + 7) / (6 / 12)",
      "(12 * (5 + 7)) / 6",
      "12 - ((5 - 7) * 6)",
      "(6 * (7 - 5)) + 12",
      "12 * ((5 + 7) / 6)",
      "12 / (6 / (7 + 5))",
      "12 + ((7 - 5) * 6)",
      "12 * ((7 + 5) / 6)",
      "(5 + 7) * (12 / 6)",
      "((7 + 5) * 12) / 6",
      "12 + (6 * (7 - 5))",
      "((5 + 7) * 12) / 6",
      "(12 / 6) * (5 + 7)",
      "((7 - 5) * 6) + 12",
      "(7 + 5) * (12 / 6)",
      "(7 + 5) / (6 / 12)",
      "(12 * (7 + 5)) / 6",
      "((7 + 5) / 6) * 12",
      "(12 / 6) * (7 + 5)",
      "12 / (6 / (5 + 7))",
      "((5 + 7) / 6) * 12",
      "12 - (6 * (5 - 7))"
    ]
  },
  "5 6 7 13": {
    "cards": "5 6 7 13",
    "has_solution": "Y",
    "num_solutions": 42,
    "solutions": [
      "(6 / 5) * (7 + 13)",
      "(13 + 7) / (5 / 6)",
      "((5 * 6) + 7) - 13",
      "(5 * 6) + (7 - 13)",
      "(7 + 13) / (5 / 6)",
      "(6 * (7 + 13)) / 5",
      "7 - (13 - (5 * 6))",
      "(6 * 5) - (13 - 7)",
      "6 / (5 / (13 + 7))",
      "(7 - 13) + (5 * 6)",
      "((5 * 6) - 13) + 7",
      "6 / (5 / (7 + 13))",
      "6 * ((7 + 13) / 5)",
      "(7 - 13) + (6 * 5)",
      "((6 * 5) - 13) + 7",
      "7 + ((5 * 6) - 13)",
      "((7 + 13) * 6) / 5",
      "(5 * 6) - (13 - 7)",
      "(6 * 7) - (13 + 5)",
      "((13 - 7) * 5) - 6",
      "((7 * 6) - 5) - 13",
      "(7 + (6 * 5)) - 13",
      "((7 * 6) - 13) - 5",
      "(7 * 6) - (5 + 13)",
      "(7 + (5 * 6)) - 13",
      "(5 * (13 - 7)) - 6",
      "7 - (13 - (6 * 5))",
      "((13 + 7) * 6) / 5",
      "((6 * 5) + 7) - 13",
      "(13 + 7) * (6 / 5)",
      "(6 / 5) * (13 + 7)",
      "7 + ((6 * 5) - 13)",
      "((6 * 7) - 5) - 13",
      "(7 * 6) - (13 + 5)",
      "(7 + 13) * (6 / 5)",
      "6 * ((13 + 7) / 5)",
      "(6 * 7) - (5 + 13)",
      "((13 + 7) / 5) * 6",
      "((7 + 13) / 5) * 6",
      "(6 * 5) + (7 - 13)",
      "(6 * (13 + 7)) / 5",
      "((6 * 7) - 13) - 5"
    ]
  },
  "5 6 8 8": {
    "cards": "5 6 8 8",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "8 * (6 - (8 - 5))",
      "8 * (6 + (5 - 8))",
      "8 * (5 - (8 - 6))",
      "8 * ((6 + 5) - 8)",
      "((6 + 5) - 8) * 8",
      "((5 + 6) - 8) * 8",
      "8 * (5 + (6 - 8))",
      "((6 - 8) + 5) * 8",
      "8 * ((5 - 8) + 6)",
      "8 * ((5 + 6) - 8)",
      "8 * ((6 - 8) + 5)",
      "(5 + (6 - 8)) * 8",
      "(6 - (8 - 5)) * 8",
      "((5 - 8) + 6) * 8",
      "(5 - (8 / 8)) * 6",
      "6 * (5 - (8 / 8))",
      "(5 - (8 - 6)) * 8",
      "(6 + (5 - 8)) * 8"
    ]
  },
  "5 6 8 9": {
    "cards": "5 6 8 9",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(9 + 6) / (5 / 8)",
      "(8 / 5) * (9 + 6)",
      "6 * ((5 - 9) + 8)",
      "(8 / 5) * (6 + 9)",
      "(5 + (8 - 9)) * 6",
      "(9 + 6) * (8 / 5)",
      "((8 + 5) - 9) * 6",
      "((5 + 8) - 9) * 6",
      "8 / (5 / (6 + 9))",
      "6 * (5 + (8 - 9))",
      "6 * ((8 - 9) + 5)",
      "8 / (5 / (9 + 6))",
      "((9 + 6) / 5) * 8",
      "(5 - (9 - 8)) * 6",
      "6 * (5 - (9 - 8))",
      "((6 + 9) * 8) / 5",
      "((6 + 9) / 5) * 8",
      "6 * (8 - (9 - 5))",
      "((8 - 9) + 5) * 6",
      "(8 * (6 + 9)) / 5",
      "8 * ((9 + 6) / 5)",
      "(8 + (5 - 9)) * 6",
      "8 * ((6 + 9) / 5)",
      "6 * ((5 + 8) - 9)",
      "6 * ((8 + 5) - 9)",
      "(6 + 9) / (5 / 8)",
      "(8 - (9 - 5)) * 6",
      "((5 - 9) + 8) * 6",
      "(6 + 9) * (8 / 5)",
      "6 * (8 + (5 - 9))",
      "(8 * (9 + 6)) / 5",
      "((9 + 6) * 8) / 5"
    ]
  },
  "5 6 8 10": {
    "cards": "5 6 8 10",
    "has_solution": "Y",
    "num_solutions": 100,
    "solutions": [
      "(6 * (5 * 8)) / 10",
      "8 * ((6 / 10) * 5)",
      "5 * ((6 * 8) / 10)",
      "((5 * 8) * 6) / 10",
      "((8 * 5) - 6) - 10",
      "(6 * (5 / 10)) * 8",
      "(8 * 6) * (5 / 10)",
      "6 * ((5 * 8) / 10)",
      "(6 / 10) * (8 * 5)",
      "(6 * 5) / (10 / 8)",
      "(5 * 8) / (10 / 6)",
      "6 / ((10 / 5) / 8)",
      "5 * (8 / (10 / 6))",
      "5 / ((10 / 8) / 6)",
      "6 * ((8 * 5) / 10)",
      "(5 / 10) * (6 * 8)",
      "5 * ((6 / 10) * 8)",
      "((6 / 10) * 5) * 8",
      "6 * ((5 / 10) * 8)",
      "(5 * 8) * (6 / 10)",
      "5 * (6 / (10 / 8))",
      "(6 * 5) * (8 / 10)",
      "(6 * 8) * (5 / 10)",
      "8 * ((5 * 6) / 10)",
      "(5 * 6) * (8 / 10)",
      "((8 * 6) / 10) * 5",
      "(8 * 5) - (6 + 10)",
      "(8 * (5 * 6)) / 10",
      "5 / (10 / (6 * 8))",
      "(8 / (10 / 5)) * 6",
      "(6 / (10 / 5)) * 8",
      "(8 * 5) - (10 + 6)",
      "(8 * (6 / 10)) * 5",
      "(5 * (8 / 10)) * 6",
      "8 / (10 / (5 * 6))",
      "6 * (8 / (10 / 5))",
      "6 * (8 * (5 / 10))",
      "((5 * 6) * 8) / 10",
      "(6 / (10 / 8)) * 5",
      "(5 * (6 / 10)) * 8",
      "((8 - 5) * 10) - 6",
      "(5 * 8) - (10 + 6)",
      "(10 * (8 - 5)) - 6",
      "5 * ((8 * 6) / 10)",
      "((6 * 8) / 10) * 5",
      "(8 / (10 / 6)) * 5",
      "((8 * 5) / 10) * 6",
      "(6 * (8 * 5)) / 10",
      "8 / ((10 / 6) / 5)",
      "(5 * (6 * 8)) / 10",
      "((5 * 8) - 6) - 10",
      "6 * ((8 / 10) * 5)",
      "((5 * 8) / 10) * 6",
      "8 * (5 / (10 / 6))",
      "8 * (5 * (6 / 10))",
      "5 * (6 * (8 / 10))",
      "(5 / (10 / 8)) * 6",
      "((6 * 5) / 10) * 8",
      "5 / ((10 / 6) / 8)",
      "6 / ((10 / 8) / 5)",
      "5 / (10 / (8 * 6))",
      "((5 / 10) * 8) * 6",
      "((5 / 10) * 6) * 8",
      "((8 * 5) - 10) - 6",
      "((6 * 8) * 5) / 10",
      "(5 / (10 / 6)) * 8",
      "6 * (5 * (8 / 10))",
      "(6 * 8) / (10 / 5)",
      "(5 * (8 * 6)) / 10",
      "((6 / 10) * 8) * 5",
      "(8 * (5 / 10)) * 6",
      "(8 * 5) / (10 / 6)",
      "8 * ((6 * 5) / 10)",
      "6 / (10 / (5 * 8))",
      "8 * ((5 / 10) * 6)",
      "6 / (10 / (8 * 5))",
      "6 * (5 / (10 / 8))",
      "((8 / 10) * 5) * 6",
      "(6 * (8 / 10)) * 5",
      "5 * (8 * (6 / 10))",
      "8 / (10 / (6 * 5))",
      "(5 / 10) * (8 * 6)",
      "((8 * 5) * 6) / 10",
      "((8 / 10) * 6) * 5",
      "(8 * (6 * 5)) / 10",
      "(8 * 6) / (10 / 5)",
      "5 * ((8 / 10) * 6)",
      "(8 / 10) * (5 * 6)",
      "8 / ((10 / 5) / 6)",
      "8 * (6 * (5 / 10))",
      "8 * (6 / (10 / 5))",
      "(5 * 6) / (10 / 8)",
      "((5 * 6) / 10) * 8",
      "(8 / 10) * (6 * 5)",
      "((6 * 5) * 8) / 10",
      "(5 * 8) - (6 + 10)",
      "(6 / 10) * (5 * 8)",
      "((5 * 8) - 10) - 6",
      "((8 * 6) * 5) / 10",
      "(8 * 5) * (6 / 10)"
    ]
  },
  "5 6 8 11": {
    "cards": "5 6 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 6 8 12": {
    "cards": "5 6 8 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((12 + 8) / 5) * 6",
      "6 / (5 / (8 + 12))",
      "6 / (5 / (12 + 8))",
      "(8 + 12) * (6 / 5)",
      "(8 + 12) / (5 / 6)",
      "(6 / 5) * (8 + 12)",
      "(6 * (12 + 8)) / 5",
      "(12 + 8) / (5 / 6)",
      "12 * (6 / (8 - 5))",
      "12 / ((8 - 5) / 6)",
      "(6 / 5) * (12 + 8)",
      "6 * ((8 + 12) / 5)",
      "(12 * 6) / (8 - 5)",
      "6 * (12 / (8 - 5))",
      "((12 + 8) * 6) / 5",
      "6 / ((8 - 5) / 12)",
      "(12 + 8) * (6 / 5)",
      "8 * (5 - (12 / 6))",
      "(5 - (12 / 6)) * 8",
      "6 * ((12 + 8) / 5)",
      "((8 + 12) / 5) * 6",
      "(6 / (8 - 5)) * 12",
      "(6 * (8 + 12)) / 5",
      "(6 * 12) / (8 - 5)",
      "((8 + 12) * 6) / 5",
      "(12 / (8 - 5)) * 6"
    ]
  },
  "5 6 8 13": {
    "cards": "5 6 8 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * ((5 + 13) / 6)",
      "8 / (6 / (13 + 5))",
      "(8 * (5 + 13)) / 6",
      "8 * ((13 + 5) / 6)",
      "(8 / 6) * (13 + 5)",
      "((5 + 13) / 6) * 8",
      "(13 + 5) / (6 / 8)",
      "8 / (6 / (5 + 13))",
      "((5 + 13) * 8) / 6",
      "(5 + 13) / (6 / 8)",
      "(5 + 13) * (8 / 6)",
      "((13 + 5) * 8) / 6",
      "(13 + 5) * (8 / 6)",
      "(8 / 6) * (5 + 13)",
      "(8 * (13 + 5)) / 6",
      "((13 + 5) / 6) * 8"
    ]
  },
  "5 6 9 9": {
    "cards": "5 6 9 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(5 * (9 - 6)) + 9",
      "(5 - (9 / 9)) * 6",
      "((9 - 6) * 5) + 9",
      "9 - ((6 - 9) * 5)",
      "9 + ((9 - 6) * 5)",
      "6 * (5 - (9 / 9))",
      "9 - (5 * (6 - 9))",
      "9 + (5 * (9 - 6))"
    ]
  },
  "5 6 9 10": {
    "cards": "5 6 9 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "6 * (5 + (9 - 10))",
      "(9 / (5 / 10)) + 6",
      "(5 - (10 - 9)) * 6",
      "6 * (5 - (10 - 9))",
      "6 * ((9 + 5) - 10)",
      "((5 + 9) - 10) * 6",
      "6 + (9 * (10 / 5))",
      "6 * ((5 - 10) + 9)",
      "((10 * 9) / 5) + 6",
      "6 + ((9 * 10) / 5)",
      "((9 * 10) / 5) + 6",
      "(10 / (5 / 9)) + 6",
      "(9 * (10 / 5)) + 6",
      "6 * ((5 + 9) - 10)",
      "(10 * (9 / 5)) + 6",
      "((10 / 5) * 9) + 6",
      "6 + (10 / (5 / 9))",
      "6 * (9 + (5 - 10))",
      "6 * (9 - (10 - 5))",
      "6 + ((10 / 5) * 9)",
      "((5 - 10) + 9) * 6",
      "((9 + 5) - 10) * 6",
      "6 + (10 * (9 / 5))",
      "(5 + (9 - 10)) * 6",
      "6 + (9 / (5 / 10))",
      "((9 - 10) + 5) * 6",
      "(9 - (10 - 5)) * 6",
      "6 * ((9 - 10) + 5)",
      "6 + ((10 * 9) / 5)",
      "(9 + (5 - 10)) * 6",
      "6 + ((9 / 5) * 10)",
      "((9 / 5) * 10) + 6"
    ]
  },
  "5 6 9 11": {
    "cards": "5 6 9 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((11 + 5) * 9) / 6",
      "9 / (6 / (5 + 11))",
      "(9 / 6) * (11 + 5)",
      "9 * ((5 + 11) / 6)",
      "(9 * (11 + 5)) / 6",
      "((11 + 5) / 6) * 9",
      "((9 + 11) / 5) * 6",
      "(9 / 6) * (5 + 11)",
      "((9 + 11) * 6) / 5",
      "(9 + 11) / (5 / 6)",
      "((11 + 9) * 6) / 5",
      "((5 + 11) * 9) / 6",
      "(5 + 11) / (6 / 9)",
      "6 / (5 / (9 + 11))",
      "6 / (5 / (11 + 9))",
      "(11 + 9) / (5 / 6)",
      "(6 * (11 + 9)) / 5",
      "(6 / 5) * (9 + 11)",
      "(11 + 9) * (6 / 5)",
      "((11 + 9) / 5) * 6",
      "9 / (6 / (11 + 5))",
      "9 * ((11 + 5) / 6)",
      "6 * ((11 + 9) / 5)",
      "((5 + 11) / 6) * 9",
      "6 * ((9 + 11) / 5)",
      "(6 / 5) * (11 + 9)",
      "(11 + 5) * (9 / 6)",
      "(9 + 11) * (6 / 5)",
      "(11 + 5) / (6 / 9)",
      "(9 * (5 + 11)) / 6",
      "(6 * (9 + 11)) / 5",
      "(5 + 11) * (9 / 6)"
    ]
  },
  "5 6 9 12": {
    "cards": "5 6 9 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(5 + (6 - 9)) * 12",
      "12 * ((6 + 5) - 9)",
      "((5 + 6) - 9) * 12",
      "(6 - 12) * (5 - 9)",
      "12 * (6 - (9 - 5))",
      "((6 + 5) - 9) * 12",
      "12 * (5 + (6 - 9))",
      "((6 - 9) + 5) * 12",
      "12 * (5 - (9 - 6))",
      "(12 - 6) * (9 - 5)",
      "(5 - 9) * (6 - 12)",
      "(6 - (9 - 5)) * 12",
      "(5 - (9 - 6)) * 12",
      "(6 + (5 - 9)) * 12",
      "12 * (6 + (5 - 9))",
      "((5 - 9) + 6) * 12",
      "12 * ((6 - 9) + 5)",
      "12 * ((5 + 6) - 9)",
      "(9 - 5) * (12 - 6)",
      "12 * ((5 - 9) + 6)"
    ]
  },
  "5 6 9 13": {
    "cards": "5 6 9 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 - 13) * (6 - 9)",
      "(6 - 9) * (5 - 13)",
      "(13 - 5) * (9 - 6)",
      "(9 - 6) * (13 - 5)"
    ]
  },
  "5 6 10 10": {
    "cards": "5 6 10 10",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "6 / (5 / (10 + 10))",
      "(10 + 10) * (6 / 5)",
      "(6 / 5) * (10 + 10)",
      "(5 - (10 / 10)) * 6",
      "((10 + 10) * 6) / 5",
      "(10 + 10) / (5 / 6)",
      "(6 * (10 + 10)) / 5",
      "((10 + 10) / 5) * 6",
      "6 * ((10 + 10) / 5)",
      "6 * (5 - (10 / 10))"
    ]
  },
  "5 6 10 11": {
    "cards": "5 6 10 11",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(5 - (11 - 10)) * 6",
      "6 * ((5 - 11) + 10)",
      "(11 - 5) * (10 - 6)",
      "6 * (5 - (11 - 10))",
      "6 * (10 - (11 - 5))",
      "(10 + (5 - 11)) * 6",
      "6 * (10 + (5 - 11))",
      "6 * ((5 + 10) - 11)",
      "(5 + (10 - 11)) * 6",
      "((5 + 10) - 11) * 6",
      "6 * ((10 - 11) + 5)",
      "((10 - 11) + 5) * 6",
      "(5 - 11) * (6 - 10)",
      "(6 - 10) * (5 - 11)",
      "(10 - (11 - 5)) * 6",
      "6 * (5 + (10 - 11))",
      "(10 - 6) * (11 - 5)",
      "((10 + 5) - 11) * 6",
      "((5 - 11) + 10) * 6",
      "6 * ((10 + 5) - 11)"
    ]
  },
  "5 6 10 12": {
    "cards": "5 6 10 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "5 * (6 - (12 / 10))",
      "((6 * 10) / 5) + 12",
      "(6 * (10 / 5)) + 12",
      "((6 / 5) * 10) + 12",
      "((10 / 5) * 6) + 12",
      "((10 * 6) / 5) + 12",
      "12 + (10 / (5 / 6))",
      "12 + (6 * (10 / 5))",
      "12 + ((10 * 6) / 5)",
      "12 + (10 * (6 / 5))",
      "(6 - (12 / 10)) * 5",
      "12 + ((6 * 10) / 5)",
      "(6 / (5 / 10)) + 12",
      "12 + (6 / (5 / 10))",
      "12 + ((6 / 5) * 10)",
      "(10 * (6 / 5)) + 12",
      "(10 / (5 / 6)) + 12",
      "12 + ((10 / 5) * 6)"
    ]
  },
  "5 6 10 13": {
    "cards": "5 6 10 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "(10 + 6) - (5 - 13)",
      "10 + ((6 + 13) - 5)",
      "6 + (13 - (5 - 10))",
      "(6 - 5) + (13 + 10)",
      "10 + (6 - (5 - 13))",
      "((10 + 6) - 5) + 13",
      "(13 + 10) - (5 - 6)",
      "6 - ((5 - 10) - 13)",
      "10 - ((5 - 13) - 6)",
      "(6 + 13) + (10 - 5)",
      "10 - (5 - (13 + 6))",
      "(10 - 5) + (6 + 13)",
      "6 - (5 - (10 + 13))",
      "13 + (10 + (6 - 5))",
      "6 + (10 + (13 - 5))",
      "(6 + (10 - 5)) + 13",
      "(13 - 5) + (6 + 10)",
      "(13 + 10) + (6 - 5)",
      "(6 + 10) + (13 - 5)",
      "((10 - 5) + 6) + 13",
      "13 - (5 - (10 + 6))",
      "10 + ((6 - 5) + 13)",
      "13 - ((5 - 10) - 6)",
      "(6 + 10) - (5 - 13)",
      "6 + ((13 - 5) + 10)",
      "(13 - 5) + (10 + 6)",
      "((6 + 10) - 5) + 13",
      "(10 + (6 - 5)) + 13",
      "((10 + 6) + 13) - 5",
      "(13 - (5 - 6)) + 10",
      "((13 + 6) - 5) + 10",
      "(13 + (6 + 10)) - 5",
      "((6 - 5) + 13) + 10",
      "6 + (13 + (10 - 5))",
      "10 + (13 - (5 - 6))",
      "6 - (5 - (13 + 10))",
      "((13 + 10) + 6) - 5",
      "13 - ((5 - 6) - 10)",
      "(13 + (10 - 5)) + 6",
      "(6 + (13 + 10)) - 5",
      "(10 - (5 - 6)) + 13",
      "6 - ((5 - 13) - 10)",
      "(6 - (5 - 10)) + 13",
      "13 + ((6 + 10) - 5)",
      "(13 + 6) + (10 - 5)",
      "((13 - 5) + 6) + 10",
      "((6 - 5) + 10) + 13",
      "13 + ((10 - 5) + 6)",
      "13 + ((10 + 6) - 5)",
      "(10 + 13) - (5 - 6)",
      "10 + ((13 - 5) + 6)",
      "(10 + (6 + 13)) - 5",
      "((13 + 10) - 5) + 6",
      "(6 - (5 - 13)) + 10",
      "(13 + (6 - 5)) + 10",
      "6 + ((10 - 5) + 13)",
      "13 + ((6 - 5) + 10)",
      "13 + (6 + (10 - 5))",
      "(6 - 5) + (10 + 13)",
      "((6 + 13) - 5) + 10",
      "(10 + 13) + (6 - 5)",
      "10 + (13 + (6 - 5))",
      "(10 + 6) + (13 - 5)",
      "(6 + 13) - (5 - 10)",
      "(10 - 5) + (13 + 6)",
      "(6 + (13 - 5)) + 10",
      "((6 + 10) + 13) - 5",
      "10 + (6 + (13 - 5))",
      "10 - (5 - (6 + 13))",
      "((13 - 5) + 10) + 6",
      "13 - (5 - (6 + 10))",
      "(13 + (10 + 6)) - 5",
      "(13 + 6) - (5 - 10)",
      "13 + (10 - (5 - 6))",
      "((10 + 13) + 6) - 5",
      "((6 + 13) + 10) - 5",
      "((10 - 5) + 13) + 6",
      "(10 + (13 + 6)) - 5",
      "((13 + 6) + 10) - 5",
      "10 - ((5 - 6) - 13)",
      "(10 - (5 - 13)) + 6",
      "10 + ((13 + 6) - 5)",
      "6 + ((10 + 13) - 5)",
      "13 + (6 - (5 - 10))",
      "6 + (10 - (5 - 13))",
      "(13 - (5 - 10)) + 6",
      "(10 + (13 - 5)) + 6",
      "(6 + (10 + 13)) - 5",
      "6 + ((13 + 10) - 5)",
      "((10 + 13) - 5) + 6"
    ]
  },
  "5 6 11 11": {
    "cards": "5 6 11 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(5 - (11 / 11)) * 6",
      "6 * (5 - (11 / 11))"
    ]
  },
  "5 6 11 12": {
    "cards": "5 6 11 12",
    "has_solution": "Y",
    "num_solutions": 108,
    "solutions": [
      "(6 + (12 + 11)) - 5",
      "((6 - 5) + 12) + 11",
      "6 + (11 + (12 - 5))",
      "(6 - 5) + (11 + 12)",
      "(11 + (12 + 6)) - 5",
      "11 - ((5 - 6) - 12)",
      "(6 + (11 - 5)) + 12",
      "(12 + 6) + (11 - 5)",
      "((11 - 5) + 12) + 6",
      "6 + ((11 + 12) - 5)",
      "((11 - 5) + 6) + 12",
      "((12 + 11) + 6) - 5",
      "(11 + 12) - (5 - 6)",
      "6 + (12 + (11 - 5))",
      "((12 - 5) + 6) + 11",
      "6 + (12 - (5 - 11))",
      "(6 + 11) - (5 - 12)",
      "6 + ((12 + 11) - 5)",
      "((11 - 12) + 5) * 6",
      "12 - ((5 - 6) - 11)",
      "((6 + 11) - 5) + 12",
      "11 + ((12 + 6) - 5)",
      "((12 + 6) - 5) + 11",
      "(11 + (6 + 12)) - 5",
      "(11 - 5) + (12 + 6)",
      "6 * (11 - (12 - 5))",
      "(11 + 6) + (12 - 5)",
      "(12 - 5) + (6 + 11)",
      "(12 + 11) + (6 - 5)",
      "(11 + (5 - 12)) * 6",
      "(6 - (5 - 12)) + 11",
      "6 * ((11 - 12) + 5)",
      "6 * (5 - (12 - 11))",
      "(5 - (12 - 11)) * 6",
      "(11 - 5) + (6 + 12)",
      "((6 + 12) - 5) + 11",
      "6 - ((5 - 11) - 12)",
      "(11 - (5 - 6)) + 12",
      "11 + (12 - (5 - 6))",
      "((12 + 11) - 5) + 6",
      "((11 + 5) - 12) * 6",
      "(6 + 11) + (12 - 5)",
      "(6 - 5) + (12 + 11)",
      "12 + (6 + (11 - 5))",
      "11 + ((6 - 5) + 12)",
      "((6 + 12) + 11) - 5",
      "(12 + (6 + 11)) - 5",
      "(12 + (6 - 5)) + 11",
      "(11 + 6) - (5 - 12)",
      "6 - ((5 - 12) - 11)",
      "((5 - 12) + 11) * 6",
      "((12 - 5) + 11) + 6",
      "11 + (6 + (12 - 5))",
      "12 + ((11 + 6) - 5)",
      "12 + (6 - (5 - 11))",
      "(12 + (11 - 5)) + 6",
      "(6 + 12) - (5 - 11)",
      "6 * (11 + (5 - 12))",
      "((6 + 11) + 12) - 5",
      "(11 + (12 - 5)) + 6",
      "((11 + 6) + 12) - 5",
      "(6 + (11 + 12)) - 5",
      "6 + (11 - (5 - 12))",
      "11 - ((5 - 12) - 6)",
      "((11 + 12) + 6) - 5",
      "(11 + (6 - 5)) + 12",
      "6 + ((12 - 5) + 11)",
      "(12 + (11 + 6)) - 5",
      "(12 - (5 - 11)) + 6",
      "(6 + 12) + (11 - 5)",
      "((12 + 6) + 11) - 5",
      "6 - (5 - (11 + 12))",
      "12 - ((5 - 11) - 6)",
      "12 + ((6 - 5) + 11)",
      "(12 - 5) + (11 + 6)",
      "12 + ((6 + 11) - 5)",
      "11 + ((6 + 12) - 5)",
      "((6 - 5) + 11) + 12",
      "11 + ((12 - 5) + 6)",
      "6 * ((5 - 12) + 11)",
      "12 + (11 - (5 - 6))",
      "12 - (5 - (11 + 6))",
      "6 - (5 - (12 + 11))",
      "(12 + 6) - (5 - 11)",
      "(12 - (5 - 6)) + 11",
      "((11 - 5) * 6) - 12",
      "(6 - (5 - 11)) + 12",
      "(11 - (5 - 12)) + 6",
      "(5 + (11 - 12)) * 6",
      "(11 + 12) + (6 - 5)",
      "6 + ((11 - 5) + 12)",
      "12 + ((11 - 5) + 6)",
      "6 * ((5 + 11) - 12)",
      "12 + (11 + (6 - 5))",
      "6 * ((11 + 5) - 12)",
      "11 + (12 + (6 - 5))",
      "(11 - (12 - 5)) * 6",
      "(12 + 11) - (5 - 6)",
      "6 * (5 + (11 - 12))",
      "12 - (5 - (6 + 11))",
      "((5 + 11) - 12) * 6",
      "11 - (5 - (6 + 12))",
      "(6 + (12 - 5)) + 11",
      "((11 + 6) - 5) + 12",
      "11 + (6 - (5 - 12))",
      "((11 + 12) - 5) + 6",
      "(6 * (11 - 5)) - 12",
      "11 - (5 - (12 + 6))"
    ]
  },
  "5 6 11 13": {
    "cards": "5 6 11 13",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(6 - 5) * (11 + 13)",
      "(11 / (6 - 5)) + 13",
      "13 - (11 * (5 - 6))",
      "((13 - 6) * 5) - 11",
      "(13 + 11) / (6 - 5)",
      "11 - ((5 - 6) * 13)",
      "13 - ((5 - 6) * 11)",
      "13 - (11 / (5 - 6))",
      "11 + ((6 - 5) * 13)",
      "(6 - 5) * (13 + 11)",
      "(13 + 11) * (6 - 5)",
      "(11 * (6 - 5)) + 13",
      "(11 + 13) / (6 - 5)",
      "11 - (13 / (5 - 6))",
      "13 + ((6 - 5) * 11)",
      "(13 * (6 - 5)) + 11",
      "((6 - 5) * 11) + 13",
      "11 + (13 / (6 - 5))",
      "11 - (13 * (5 - 6))",
      "13 + (11 / (6 - 5))",
      "13 + (11 * (6 - 5))",
      "11 + (13 * (6 - 5))",
      "(5 * (13 - 6)) - 11",
      "(11 + 13) * (6 - 5)",
      "(13 / (6 - 5)) + 11",
      "((6 - 5) * 13) + 11"
    ]
  },
  "5 6 12 12": {
    "cards": "5 6 12 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "12 - ((5 - 6) * 12)",
      "(12 * (6 - 5)) + 12",
      "(6 - 5) * (12 + 12)",
      "(12 + 12) / (6 - 5)",
      "12 - (12 * (5 - 6))",
      "((6 - 5) * 12) + 12",
      "(12 + 12) * (6 - 5)",
      "6 * (5 - (12 / 12))",
      "12 + ((6 - 5) * 12)",
      "12 - (12 / (5 - 6))",
      "12 + (12 / (6 - 5))",
      "(5 - (12 / 12)) * 6",
      "12 + (12 * (6 - 5))",
      "(12 / (6 - 5)) + 12"
    ]
  },
  "5 6 12 13": {
    "cards": "5 6 12 13",
    "has_solution": "Y",
    "num_solutions": 114,
    "solutions": [
      "6 * (5 + (12 - 13))",
      "5 + (12 + (13 - 6))",
      "((12 + 13) + 5) - 6",
      "(5 - 6) + (12 + 13)",
      "((13 + 12) + 5) - 6",
      "(5 + (12 + 13)) - 6",
      "(12 - (13 - 5)) * 6",
      "(13 + 5) - (6 - 12)",
      "5 + (13 + (12 - 6))",
      "5 - ((6 - 12) - 13)",
      "(12 + 5) - (6 - 13)",
      "(13 + (5 + 12)) - 6",
      "(12 - 6) + (13 + 5)",
      "(5 + 13) + (12 - 6)",
      "13 - (6 - (12 + 5))",
      "13 - ((6 - 12) - 5)",
      "13 + ((5 - 6) + 12)",
      "((13 + 12) - 6) + 5",
      "13 + (5 + (12 - 6))",
      "(13 - (5 + 6)) * 12",
      "5 - (6 - (13 + 12))",
      "13 - (6 - (5 + 12))",
      "((5 - 6) + 12) + 13",
      "(5 - 6) + (13 + 12)",
      "(13 + (12 + 5)) - 6",
      "13 + (12 + (5 - 6))",
      "13 + ((12 - 6) + 5)",
      "(12 - (6 - 5)) + 13",
      "13 + (5 - (6 - 12))",
      "((12 + 13) - 6) + 5",
      "(13 + 12) - (6 - 5)",
      "(12 + (13 - 6)) + 5",
      "(12 - 6) + (5 + 13)",
      "12 + ((13 - 6) + 5)",
      "12 + (5 - (6 - 13))",
      "(12 + (5 + 13)) - 6",
      "12 * ((13 - 6) - 5)",
      "(5 + 13) - (6 - 12)",
      "(5 + 12) + (13 - 6)",
      "((12 + 5) + 13) - 6",
      "(12 + (5 - 13)) * 6",
      "5 + ((13 - 6) + 12)",
      "(13 + 5) + (12 - 6)",
      "((5 + 12) - 6) + 13",
      "((5 + 12) - 13) * 6",
      "13 + ((12 + 5) - 6)",
      "5 + ((12 + 13) - 6)",
      "5 - (6 - (12 + 13))",
      "((13 + 5) + 12) - 6",
      "((13 - 6) + 12) + 5",
      "((5 + 13) - 6) + 12",
      "((12 - 6) + 5) + 13",
      "(13 - 6) + (5 + 12)",
      "6 * ((5 + 12) - 13)",
      "((13 - 5) - 6) * 12",
      "(13 - (6 + 5)) * 12",
      "(12 + 5) + (13 - 6)",
      "((12 + 5) - 13) * 6",
      "(12 + (5 - 6)) + 13",
      "(12 + 13) - (6 - 5)",
      "(13 + (12 - 6)) + 5",
      "(13 - 6) + (12 + 5)",
      "(13 - (6 - 12)) + 5",
      "12 - (6 - (5 + 13))",
      "(5 - (13 - 12)) * 6",
      "((13 + 5) - 6) + 12",
      "((5 + 12) + 13) - 6",
      "5 - ((6 - 13) - 12)",
      "(5 + (12 - 13)) * 6",
      "(12 + 13) + (5 - 6)",
      "6 * ((12 - 13) + 5)",
      "5 + ((13 + 12) - 6)",
      "(13 + 12) + (5 - 6)",
      "(5 + (13 - 6)) + 12",
      "6 * (12 + (5 - 13))",
      "(5 - (6 - 12)) + 13",
      "12 + ((13 + 5) - 6)",
      "(5 + 12) - (6 - 13)",
      "12 * (13 - (5 + 6))",
      "((13 - 6) + 5) + 12",
      "((5 + 13) + 12) - 6",
      "12 + (13 - (6 - 5))",
      "(5 + (12 - 6)) + 13",
      "(5 - (6 - 13)) + 12",
      "(12 - (6 - 13)) + 5",
      "((12 - 6) + 13) + 5",
      "(12 + (13 + 5)) - 6",
      "12 - (6 - (13 + 5))",
      "((13 - 6) - 5) * 12",
      "12 - ((6 - 13) - 5)",
      "((12 + 5) - 6) + 13",
      "12 - ((6 - 5) - 13)",
      "(13 + (5 - 6)) + 12",
      "5 + ((12 - 6) + 13)",
      "6 * (5 - (13 - 12))",
      "13 + ((5 + 12) - 6)",
      "6 * ((12 + 5) - 13)",
      "6 * (12 - (13 - 5))",
      "6 * ((5 - 13) + 12)",
      "((5 - 6) + 13) + 12",
      "12 + ((5 + 13) - 6)",
      "12 + ((5 - 6) + 13)",
      "((5 - 13) + 12) * 6",
      "(13 - (6 - 5)) + 12",
      "13 + (12 - (6 - 5))",
      "12 + (5 + (13 - 6))",
      "5 + (12 - (6 - 13))",
      "12 * ((13 - 5) - 6)",
      "(5 + (13 + 12)) - 6",
      "((12 - 13) + 5) * 6",
      "12 * (13 - (6 + 5))",
      "5 + (13 - (6 - 12))",
      "12 + (13 + (5 - 6))",
      "13 - ((6 - 5) - 12)"
    ]
  },
  "5 6 13 13": {
    "cards": "5 6 13 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "6 * (5 - (13 / 13))",
      "(5 - (13 / 13)) * 6"
    ]
  },
  "5 7 7 7": {
    "cards": "5 7 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 7 8": {
    "cards": "5 7 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 7 9": {
    "cards": "5 7 7 9",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 - 7) * (7 + 5)",
      "(9 - 7) * (5 + 7)",
      "(5 + 7) * (9 - 7)",
      "(7 + 5) * (9 - 7)"
    ]
  },
  "5 7 7 10": {
    "cards": "5 7 7 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "10 + (7 * (7 - 5))",
      "((7 - 5) * 7) + 10",
      "(7 * (7 - 5)) + 10",
      "10 - (7 * (5 - 7))",
      "10 - ((5 - 7) * 7)",
      "10 + ((7 - 5) * 7)"
    ]
  },
  "5 7 7 11": {
    "cards": "5 7 7 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "7 * (5 - (11 / 7))",
      "(5 - (11 / 7)) * 7"
    ]
  },
  "5 7 7 12": {
    "cards": "5 7 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 7 13": {
    "cards": "5 7 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 8 8": {
    "cards": "5 7 8 8",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "8 * ((8 + 7) / 5)",
      "(8 * (7 + 8)) / 5",
      "(8 + 7) * (8 / 5)",
      "((8 + 7) * 8) / 5",
      "8 + ((7 - 5) * 8)",
      "8 * ((7 + 8) / 5)",
      "(7 + 8) / (5 / 8)",
      "8 + (8 * (7 - 5))",
      "8 / (5 / (7 + 8))",
      "((7 - 5) * 8) + 8",
      "8 / (5 / (8 + 7))",
      "((8 + 7) / 5) * 8",
      "((7 + 8) / 5) * 8",
      "8 - (8 * (5 - 7))",
      "(8 * (7 - 5)) + 8",
      "(8 + 7) / (5 / 8)",
      "(8 * (8 + 7)) / 5",
      "(8 / 5) * (7 + 8)",
      "8 - ((5 - 7) * 8)",
      "(7 + 8) * (8 / 5)",
      "((7 + 8) * 8) / 5",
      "(8 / 5) * (8 + 7)"
    ]
  },
  "5 7 8 9": {
    "cards": "5 7 8 9",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((5 * 8) - 9) - 7",
      "8 * (5 + (7 - 9))",
      "8 * ((5 - 9) + 7)",
      "(5 * 8) - (7 + 9)",
      "8 * ((7 - 9) + 5)",
      "((7 + 5) - 9) * 8",
      "((5 - 9) + 7) * 8",
      "(7 - (9 - 5)) * 8",
      "((5 + 7) - 9) * 8",
      "(8 * 5) - (9 + 7)",
      "((7 - 9) + 5) * 8",
      "(8 * 5) - (7 + 9)",
      "(5 + (7 - 9)) * 8",
      "8 * ((7 + 5) - 9)",
      "((8 * 5) - 7) - 9",
      "(7 + (5 - 9)) * 8",
      "((8 * 5) - 9) - 7",
      "8 * (7 + (5 - 9))",
      "(5 * 8) - (9 + 7)",
      "8 * (5 - (9 - 7))",
      "(5 - (9 - 7)) * 8",
      "((5 * 8) - 7) - 9",
      "8 * (7 - (9 - 5))",
      "8 * ((5 + 7) - 9)"
    ]
  },
  "5 7 8 10": {
    "cards": "5 7 8 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(10 - 8) * (7 + 5)",
      "(7 + 5) * (10 - 8)",
      "(10 - 8) * (5 + 7)",
      "(5 + 7) * (10 - 8)"
    ]
  },
  "5 7 8 11": {
    "cards": "5 7 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 8 12": {
    "cards": "5 7 8 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 8 13": {
    "cards": "5 7 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 9 9": {
    "cards": "5 7 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 9 10": {
    "cards": "5 7 9 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(5 * (10 - 7)) + 9",
      "9 + ((10 - 7) * 5)",
      "9 - (5 * (7 - 10))",
      "((10 - 7) * 5) + 9",
      "9 + (5 * (10 - 7))",
      "9 - ((7 - 10) * 5)"
    ]
  },
  "5 7 9 11": {
    "cards": "5 7 9 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(5 + 7) * (11 - 9)",
      "(7 + 5) * (11 - 9)",
      "(11 - 9) * (7 + 5)",
      "(11 - 9) * (5 + 7)"
    ]
  },
  "5 7 9 12": {
    "cards": "5 7 9 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 + 5) / (7 / 12)",
      "(12 / 7) * (9 + 5)",
      "((5 + 9) * 12) / 7",
      "12 / (7 / (5 + 9))",
      "12 / (7 / (9 + 5))",
      "12 * ((5 + 9) / 7)",
      "((9 + 5) / 7) * 12",
      "(12 * (9 + 5)) / 7",
      "((9 + 5) * 12) / 7",
      "12 * ((9 + 5) / 7)",
      "(9 + 5) * (12 / 7)",
      "(5 + 9) * (12 / 7)",
      "(12 / 7) * (5 + 9)",
      "((5 + 9) / 7) * 12",
      "(5 + 9) / (7 / 12)",
      "(12 * (5 + 9)) / 7"
    ]
  },
  "5 7 9 13": {
    "cards": "5 7 9 13",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "(13 - 5) + (7 + 9)",
      "((9 - 5) + 7) + 13",
      "7 + ((13 - 5) + 9)",
      "(9 - (5 - 7)) + 13",
      "(13 - 7) * (9 - 5)",
      "((9 + 13) + 7) - 5",
      "(7 + 9) - (5 - 13)",
      "((9 - 5) + 13) + 7",
      "(7 + 13) - (5 - 9)",
      "((13 - 5) + 7) + 9",
      "13 + ((7 - 5) + 9)",
      "13 - (5 - (7 + 9))",
      "(13 + (7 - 5)) + 9",
      "9 - (5 - (13 + 7))",
      "((9 + 7) - 5) + 13",
      "(9 + (7 + 13)) - 5",
      "(13 + 7) - (5 - 9)",
      "7 + (13 + (9 - 5))",
      "13 + (9 - (5 - 7))",
      "((7 + 13) + 9) - 5",
      "((13 - 5) + 9) + 7",
      "9 + (13 + (7 - 5))",
      "7 + ((13 + 9) - 5)",
      "(7 - 5) + (9 + 13)",
      "(9 + 13) + (7 - 5)",
      "9 + ((13 - 5) + 7)",
      "(13 + (9 + 7)) - 5",
      "13 - ((5 - 9) - 7)",
      "(9 - 5) + (7 + 13)",
      "((7 - 5) + 13) + 9",
      "(13 - (5 - 7)) + 9",
      "9 - ((5 - 13) - 7)",
      "((13 + 9) + 7) - 5",
      "(9 + 7) - (5 - 13)",
      "9 - ((5 - 7) - 13)",
      "(7 - 13) * (5 - 9)",
      "(13 + 9) + (7 - 5)",
      "(13 + 9) - (5 - 7)",
      "13 - (5 - (9 + 7))",
      "(7 - (5 - 13)) + 9",
      "((13 + 9) - 5) + 7",
      "(9 - 5) + (13 + 7)",
      "(13 + (9 - 5)) + 7",
      "(9 + (7 - 5)) + 13",
      "13 - ((5 - 7) - 9)",
      "(7 + (9 - 5)) + 13",
      "13 + ((7 + 9) - 5)",
      "((7 - 5) + 9) + 13",
      "(9 + (13 + 7)) - 5",
      "(9 + (13 - 5)) + 7",
      "((7 + 9) - 5) + 13",
      "(9 - 5) * (13 - 7)",
      "9 + ((7 + 13) - 5)",
      "9 - (5 - (7 + 13))",
      "7 + ((9 + 13) - 5)",
      "13 + (7 + (9 - 5))",
      "(7 + (9 + 13)) - 5",
      "13 + (7 - (5 - 9))",
      "(13 - (5 - 9)) + 7",
      "7 + (13 - (5 - 9))",
      "7 - (5 - (13 + 9))",
      "(9 + 7) + (13 - 5)",
      "9 + ((7 - 5) + 13)",
      "13 + ((9 + 7) - 5)",
      "7 + (9 - (5 - 13))",
      "(7 + (13 + 9)) - 5",
      "((13 + 7) + 9) - 5",
      "((9 + 7) + 13) - 5",
      "13 + (9 + (7 - 5))",
      "(13 - 5) + (9 + 7)",
      "13 + ((9 - 5) + 7)",
      "(7 + 9) + (13 - 5)",
      "(9 + 13) - (5 - 7)",
      "7 - ((5 - 9) - 13)",
      "9 + ((13 + 7) - 5)",
      "(13 + 7) + (9 - 5)",
      "9 + (7 + (13 - 5))",
      "9 + (13 - (5 - 7))",
      "((7 + 9) + 13) - 5",
      "((9 + 13) - 5) + 7",
      "(13 + (7 + 9)) - 5",
      "7 - (5 - (9 + 13))",
      "7 + ((9 - 5) + 13)",
      "(5 - 9) * (7 - 13)",
      "((13 + 7) - 5) + 9",
      "((7 + 13) - 5) + 9",
      "(7 + 13) + (9 - 5)",
      "(9 - (5 - 13)) + 7",
      "7 + (9 + (13 - 5))",
      "(7 - 5) + (13 + 9)",
      "7 - ((5 - 13) - 9)",
      "(7 - (5 - 9)) + 13",
      "(7 + (13 - 5)) + 9",
      "9 + (7 - (5 - 13))"
    ]
  },
  "5 7 10 10": {
    "cards": "5 7 10 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(7 * (10 / 5)) + 10",
      "(10 / (5 / 7)) + 10",
      "10 + ((10 / 5) * 7)",
      "10 + ((10 * 7) / 5)",
      "10 + ((7 / 5) * 10)",
      "(10 * (7 / 5)) + 10",
      "10 + (7 / (5 / 10))",
      "10 + (7 * (10 / 5))",
      "((10 * 7) / 5) + 10",
      "10 + (10 / (5 / 7))",
      "10 + ((7 * 10) / 5)",
      "10 + (10 * (7 / 5))",
      "((7 * 10) / 5) + 10",
      "((7 / 5) * 10) + 10",
      "((10 / 5) * 7) + 10",
      "(7 / (5 / 10)) + 10"
    ]
  },
  "5 7 10 11": {
    "cards": "5 7 10 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(7 * (10 - 5)) - 11",
      "((10 - 5) * 7) - 11"
    ]
  },
  "5 7 10 12": {
    "cards": "5 7 10 12",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(10 - 5) + (7 + 12)",
      "12 + (7 - (5 - 10))",
      "12 - (5 - (7 + 10))",
      "12 * ((7 - 10) + 5)",
      "7 - (5 - (10 + 12))",
      "12 * ((5 + 7) - 10)",
      "12 - (5 - (10 + 7))",
      "(7 - (5 - 12)) + 10",
      "10 + (12 - (5 - 7))",
      "(7 + 10) - (5 - 12)",
      "(5 + (7 - 10)) * 12",
      "(12 - 10) * (5 + 7)",
      "(10 + (12 - 5)) + 7",
      "(10 + 7) + (12 - 5)",
      "((12 + 7) - 5) + 10",
      "(12 - (5 - 10)) + 7",
      "7 + (12 + (10 - 5))",
      "7 - (5 - (12 + 10))",
      "7 + (10 - (5 - 12))",
      "(10 + (12 + 7)) - 5",
      "(12 + (7 + 10)) - 5",
      "((7 + 10) + 12) - 5",
      "(10 + 12) + (7 - 5)",
      "(7 + 12) + (10 - 5)",
      "12 * ((5 - 10) + 7)",
      "(10 + 7) - (5 - 12)",
      "12 + ((7 - 5) + 10)",
      "12 + ((10 - 5) + 7)",
      "((10 + 12) + 7) - 5",
      "12 * (7 - (10 - 5))",
      "12 * (5 + (7 - 10))",
      "((10 + 7) + 12) - 5",
      "(5 - (10 - 7)) * 12",
      "7 - ((5 - 12) - 10)",
      "7 + (10 + (12 - 5))",
      "(7 + (12 + 10)) - 5",
      "(7 + 10) + (12 - 5)",
      "(7 + 12) - (5 - 10)",
      "(12 + 7) + (10 - 5)",
      "((12 + 10) - 5) + 7",
      "(7 + (5 - 10)) * 12",
      "((7 + 12) - 5) + 10",
      "(10 - (5 - 12)) + 7",
      "((7 + 12) + 10) - 5",
      "(10 + 12) - (5 - 7)",
      "7 + (12 - (5 - 10))",
      "(7 + 5) * (12 - 10)",
      "((10 + 7) - 5) + 12",
      "12 + (10 - (5 - 7))",
      "(12 + 10) + (7 - 5)",
      "(10 + (7 + 12)) - 5",
      "(7 - 5) + (10 + 12)",
      "(10 - (5 - 7)) + 12",
      "12 - ((5 - 10) - 7)",
      "12 + (7 + (10 - 5))",
      "((7 - 5) + 10) + 12",
      "((7 - 10) + 5) * 12",
      "((12 - 5) + 10) + 7",
      "(12 - 10) * (7 + 5)",
      "(12 + 10) - (5 - 7)",
      "10 - ((5 - 12) - 7)",
      "10 - ((5 - 7) - 12)",
      "(7 - (10 - 5)) * 12",
      "10 + ((12 + 7) - 5)",
      "10 - (5 - (7 + 12))",
      "((12 + 10) + 7) - 5",
      "((5 + 7) - 10) * 12",
      "((7 - 5) + 12) + 10",
      "10 + ((7 + 12) - 5)",
      "(12 - (5 - 7)) + 10",
      "7 + ((10 - 5) + 12)",
      "10 + (7 + (12 - 5))",
      "((7 + 10) - 5) + 12",
      "(12 + (10 + 7)) - 5",
      "10 + ((7 - 5) + 12)",
      "(7 - (5 - 10)) + 12",
      "12 * (7 + (5 - 10))",
      "((10 - 5) + 12) + 7",
      "7 + ((12 + 10) - 5)",
      "(5 + 7) * (12 - 10)",
      "((7 + 5) - 10) * 12",
      "12 + ((7 + 10) - 5)",
      "(10 - 5) + (12 + 7)",
      "((10 - 5) + 7) + 12",
      "(7 + (10 - 5)) + 12",
      "((12 + 7) + 10) - 5",
      "10 + (12 + (7 - 5))",
      "10 + (7 - (5 - 12))",
      "((5 - 10) + 7) * 12",
      "((12 - 5) + 7) + 10",
      "7 + ((10 + 12) - 5)",
      "(12 - 5) + (10 + 7)",
      "12 + ((10 + 7) - 5)",
      "(7 - 5) + (12 + 10)",
      "(12 + (10 - 5)) + 7",
      "12 * (5 - (10 - 7))",
      "((10 + 12) - 5) + 7",
      "12 - ((5 - 7) - 10)",
      "(12 - 5) + (7 + 10)",
      "10 + ((12 - 5) + 7)",
      "(7 + (10 + 12)) - 5",
      "(12 + 7) - (5 - 10)",
      "(7 + (12 - 5)) + 10",
      "12 + (10 + (7 - 5))",
      "10 - (5 - (12 + 7))",
      "7 + ((12 - 5) + 10)",
      "7 - ((5 - 10) - 12)",
      "12 * ((7 + 5) - 10)",
      "(12 + (7 - 5)) + 10",
      "(10 + (7 - 5)) + 12"
    ]
  },
  "5 7 10 13": {
    "cards": "5 7 10 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 5) * (10 - 7)",
      "(10 - 7) * (13 - 5)",
      "(7 - 10) * (5 - 13)",
      "(5 - 13) * (7 - 10)"
    ]
  },
  "5 7 11 11": {
    "cards": "5 7 11 11",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "(7 - 11) * (5 - 11)",
      "(11 - (5 - 11)) + 7",
      "(5 - 11) * (7 - 11)",
      "((7 + 11) - 5) + 11",
      "(11 + (7 - 5)) + 11",
      "(7 - (5 - 11)) + 11",
      "(11 - 5) * (11 - 7)",
      "(7 + 11) - (5 - 11)",
      "((11 + 7) - 5) + 11",
      "(11 - 5) + (7 + 11)",
      "7 + ((11 + 11) - 5)",
      "(7 + 11) + (11 - 5)",
      "11 + (11 - (5 - 7))",
      "((11 - 5) + 7) + 11",
      "11 + ((7 + 11) - 5)",
      "11 + (11 + (7 - 5))",
      "((11 + 11) - 5) + 7",
      "((7 - 5) + 11) + 11",
      "(11 + 7) - (5 - 11)",
      "((11 + 11) + 7) - 5",
      "(11 - 5) + (11 + 7)",
      "(11 - (5 - 7)) + 11",
      "11 + ((11 - 5) + 7)",
      "11 + ((7 - 5) + 11)",
      "7 + ((11 - 5) + 11)",
      "11 - ((5 - 11) - 7)",
      "(11 + 11) - (5 - 7)",
      "11 - ((5 - 7) - 11)",
      "((11 + 7) + 11) - 5",
      "(7 + (11 - 5)) + 11",
      "11 + (7 - (5 - 11))",
      "((7 + 11) + 11) - 5",
      "7 + (11 - (5 - 11))",
      "(11 + (11 + 7)) - 5",
      "11 - (5 - (7 + 11))",
      "(11 - 7) * (11 - 5)",
      "11 + (7 + (11 - 5))",
      "(7 - 5) + (11 + 11)",
      "(11 + (7 + 11)) - 5",
      "11 - (5 - (11 + 7))",
      "(11 + 11) + (7 - 5)",
      "7 - ((5 - 11) - 11)",
      "11 + ((11 + 7) - 5)",
      "(11 + (11 - 5)) + 7",
      "7 + (11 + (11 - 5))",
      "(7 + (11 + 11)) - 5",
      "(11 + 7) + (11 - 5)",
      "((11 - 5) + 11) + 7",
      "7 - (5 - (11 + 11))"
    ]
  },
  "5 7 11 12": {
    "cards": "5 7 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 11 13": {
    "cards": "5 7 11 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 11) * (5 + 7)",
      "(7 + 5) * (13 - 11)",
      "(5 + 7) * (13 - 11)",
      "(13 - 11) * (7 + 5)"
    ]
  },
  "5 7 12 12": {
    "cards": "5 7 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(12 * 7) - (5 * 12)",
      "(12 * 7) - (12 * 5)",
      "(7 * 12) - (5 * 12)",
      "(7 * 12) - (12 * 5)"
    ]
  },
  "5 7 12 13": {
    "cards": "5 7 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 7 13 13": {
    "cards": "5 7 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(13 + 5) + (13 - 7)",
      "(13 + (13 + 5)) - 7",
      "((13 + 5) - 7) + 13",
      "(13 + 13) - (7 - 5)",
      "5 + (13 + (13 - 7))",
      "((5 + 13) - 7) + 13",
      "(5 + (13 - 7)) + 13",
      "13 - ((7 - 5) - 13)",
      "13 - ((7 - 13) - 5)",
      "(13 + (13 - 7)) + 5",
      "(13 - 7) + (13 + 5)",
      "(13 - 7) + (5 + 13)",
      "(13 + (5 - 7)) + 13",
      "5 + (13 - (7 - 13))",
      "13 + (13 + (5 - 7))",
      "5 - ((7 - 13) - 13)",
      "5 + ((13 + 13) - 7)",
      "((5 + 13) + 13) - 7",
      "((13 + 5) + 13) - 7",
      "13 - (7 - (13 + 5))",
      "(5 + (13 + 13)) - 7",
      "(13 - (7 - 5)) + 13",
      "13 + (13 - (7 - 5))",
      "13 + ((13 + 5) - 7)",
      "(13 + (5 + 13)) - 7",
      "((13 - 7) + 13) + 5",
      "((5 - 7) + 13) + 13",
      "13 - (7 - (5 + 13))",
      "(5 + 13) - (7 - 13)",
      "(5 - (7 - 13)) + 13",
      "(13 + 5) - (7 - 13)",
      "((13 - 7) + 5) + 13",
      "13 + ((5 - 7) + 13)",
      "((13 + 13) + 5) - 7",
      "(13 - (7 - 13)) + 5",
      "13 + (5 + (13 - 7))",
      "13 + (5 - (7 - 13))",
      "13 + ((5 + 13) - 7)",
      "5 - (7 - (13 + 13))",
      "((13 + 13) - 7) + 5",
      "(5 + 13) + (13 - 7)",
      "13 + ((13 - 7) + 5)",
      "(13 + 13) + (5 - 7)",
      "5 + ((13 - 7) + 13)",
      "(5 - 7) + (13 + 13)"
    ]
  },
  "5 8 8 8": {
    "cards": "5 8 8 8",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(5 * 8) - (8 + 8)",
      "(8 * 5) - (8 + 8)",
      "(8 * 8) - (8 * 5)",
      "(8 * 8) - (5 * 8)",
      "((8 * 5) - 8) - 8",
      "((5 * 8) - 8) - 8"
    ]
  },
  "5 8 8 9": {
    "cards": "5 8 8 9",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(8 * 9) / (8 - 5)",
      "(9 * 8) / (8 - 5)",
      "(8 * (9 - 5)) - 8",
      "8 * (9 / (8 - 5))",
      "8 / ((8 - 5) / 9)",
      "9 / ((8 - 5) / 8)",
      "((9 - 5) * 8) - 8",
      "(8 / (8 - 5)) * 9",
      "(9 / (8 - 5)) * 8",
      "9 * (8 / (8 - 5))"
    ]
  },
  "5 8 8 10": {
    "cards": "5 8 8 10",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(8 + (5 - 10)) * 8",
      "(8 * (10 / 5)) + 8",
      "8 + (10 * (8 / 5))",
      "((5 - 10) + 8) * 8",
      "8 + (10 / (5 / 8))",
      "8 * (8 - (10 - 5))",
      "((8 * 10) / 5) + 8",
      "(8 - (10 - 5)) * 8",
      "8 + ((8 * 10) / 5)",
      "8 * ((8 - 10) + 5)",
      "((5 + 8) - 10) * 8",
      "8 * ((5 + 8) - 10)",
      "8 * ((8 + 5) - 10)",
      "((8 + 5) - 10) * 8",
      "(10 / (5 / 8)) + 8",
      "((10 * 8) / 5) + 8",
      "8 + ((8 / 5) * 10)",
      "8 * ((5 - 10) + 8)",
      "8 * (8 + (5 - 10))",
      "(5 - (10 - 8)) * 8",
      "(8 / (5 / 10)) + 8",
      "8 * (5 + (8 - 10))",
      "8 * (5 - (10 - 8))",
      "8 + (8 / (5 / 10))",
      "8 + ((10 / 5) * 8)",
      "8 + (8 * (10 / 5))",
      "8 + ((10 * 8) / 5)",
      "((8 - 10) + 5) * 8",
      "((10 / 5) * 8) + 8",
      "(5 + (8 - 10)) * 8",
      "((8 / 5) * 10) + 8",
      "(10 * (8 / 5)) + 8"
    ]
  },
  "5 8 8 11": {
    "cards": "5 8 8 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 8 12": {
    "cards": "5 8 8 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 8 13": {
    "cards": "5 8 8 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(8 + 8) + (13 - 5)",
      "(8 - (5 - 8)) + 13",
      "(8 + (13 + 8)) - 5",
      "8 + (8 + (13 - 5))",
      "8 - ((5 - 8) - 13)",
      "8 + ((8 - 5) + 13)",
      "13 + ((8 + 8) - 5)",
      "(13 + (8 + 8)) - 5",
      "(8 + 13) + (8 - 5)",
      "(13 + 8) + (8 - 5)",
      "((8 + 13) - 5) + 8",
      "(8 + 13) - (5 - 8)",
      "8 + ((13 + 8) - 5)",
      "8 - (5 - (8 + 13))",
      "(13 - (5 - 8)) + 8",
      "13 + (8 - (5 - 8))",
      "((13 + 8) - 5) + 8",
      "((8 + 8) - 5) + 13",
      "(8 + (13 - 5)) + 8",
      "(13 + (8 - 5)) + 8",
      "(8 - 5) + (8 + 13)",
      "(8 + 8) - (5 - 13)",
      "(13 + 8) - (5 - 8)",
      "8 + (8 - (5 - 13))",
      "8 + (13 + (8 - 5))",
      "8 - ((5 - 13) - 8)",
      "13 + (8 + (8 - 5))",
      "8 + ((8 + 13) - 5)",
      "(8 + (8 + 13)) - 5",
      "8 + (13 - (5 - 8))",
      "((13 + 8) + 8) - 5",
      "(8 - (5 - 13)) + 8",
      "((13 - 5) + 8) + 8",
      "8 + ((13 - 5) + 8)",
      "((8 - 5) + 8) + 13",
      "(8 + (8 - 5)) + 13",
      "13 + ((8 - 5) + 8)",
      "13 - (5 - (8 + 8))",
      "((8 - 5) + 13) + 8",
      "(13 - 5) + (8 + 8)",
      "((8 + 8) + 13) - 5",
      "(8 - 5) + (13 + 8)",
      "((8 + 13) + 8) - 5",
      "13 - ((5 - 8) - 8)",
      "8 - (5 - (13 + 8))"
    ]
  },
  "5 8 9 9": {
    "cards": "5 8 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 9 10": {
    "cards": "5 8 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 9 11": {
    "cards": "5 8 9 11",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "8 * (9 + (5 - 11))",
      "8 * (5 - (11 - 9))",
      "8 * (5 + (9 - 11))",
      "8 * ((5 - 11) + 9)",
      "(11 * (8 - 5)) - 9",
      "(5 - (11 - 9)) * 8",
      "(9 + (5 - 11)) * 8",
      "8 * (9 - (11 - 5))",
      "((11 - 8) * 5) + 9",
      "9 - ((8 - 11) * 5)",
      "9 - (5 * (8 - 11))",
      "((9 - 11) + 5) * 8",
      "8 * ((5 + 9) - 11)",
      "((8 - 5) * 11) - 9",
      "8 * ((9 - 11) + 5)",
      "8 * ((9 + 5) - 11)",
      "9 + ((11 - 8) * 5)",
      "(9 - (11 - 5)) * 8",
      "((9 + 5) - 11) * 8",
      "9 + (5 * (11 - 8))",
      "((5 + 9) - 11) * 8",
      "(5 + (9 - 11)) * 8",
      "(5 * (11 - 8)) + 9",
      "((5 - 11) + 9) * 8"
    ]
  },
  "5 8 9 12": {
    "cards": "5 8 9 12",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "(8 - 5) + (12 + 9)",
      "(8 - (5 - 9)) + 12",
      "(9 + 8) + (12 - 5)",
      "(9 + 8) - (5 - 12)",
      "((12 + 8) + 9) - 5",
      "8 / ((9 - 5) / 12)",
      "(9 + (12 - 5)) + 8",
      "((12 + 9) + 8) - 5",
      "8 - (5 - (12 + 9))",
      "(12 + (9 - 5)) + 8",
      "(9 + (8 + 12)) - 5",
      "(8 + (9 + 12)) - 5",
      "12 - ((5 - 9) - 8)",
      "(8 * 12) / (9 - 5)",
      "8 + ((9 + 12) - 5)",
      "(9 - (5 - 8)) + 12",
      "(8 + (9 - 5)) + 12",
      "(12 * 8) / (9 - 5)",
      "(8 / (9 - 5)) * 12",
      "(8 - (5 - 12)) + 9",
      "9 + ((8 - 5) + 12)",
      "9 - ((5 - 12) - 8)",
      "(9 - 5) + (12 + 8)",
      "(9 + 12) + (8 - 5)",
      "8 - ((5 - 9) - 12)",
      "8 + (12 + (9 - 5))",
      "8 + ((12 - 5) + 9)",
      "8 + (12 - (5 - 9))",
      "((8 + 12) - 5) + 9",
      "((9 + 8) - 5) + 12",
      "(8 + 9) + (12 - 5)",
      "12 - ((5 - 8) - 9)",
      "(12 - 5) + (9 + 8)",
      "((8 - 5) + 9) + 12",
      "((9 + 8) + 12) - 5",
      "12 + (8 + (9 - 5))",
      "(12 + 8) - (5 - 9)",
      "(9 - (5 - 12)) + 8",
      "(12 + 9) + (8 - 5)",
      "(9 + (8 - 5)) + 12",
      "(8 + 9) - (5 - 12)",
      "9 + (12 - (5 - 8))",
      "((12 - 5) + 8) + 9",
      "8 + ((12 + 9) - 5)",
      "12 + (9 - (5 - 8))",
      "(8 - 5) + (9 + 12)",
      "12 + ((8 + 9) - 5)",
      "12 + ((8 - 5) + 9)",
      "(12 - (5 - 9)) + 8",
      "9 - ((5 - 8) - 12)",
      "(8 + (12 - 5)) + 9",
      "12 - (5 - (8 + 9))",
      "9 + (8 - (5 - 12))",
      "((12 - 5) + 9) + 8",
      "9 + ((12 + 8) - 5)",
      "12 + ((9 + 8) - 5)",
      "(12 + 8) + (9 - 5)",
      "8 + ((9 - 5) + 12)",
      "9 - (5 - (12 + 8))",
      "(8 + (12 + 9)) - 5",
      "12 / ((9 - 5) / 8)",
      "12 - (5 - (9 + 8))",
      "9 - (5 - (8 + 12))",
      "12 * (8 / (9 - 5))",
      "(12 + (8 - 5)) + 9",
      "((9 - 5) + 12) + 8",
      "(12 + 9) - (5 - 8)",
      "((12 + 8) - 5) + 9",
      "(9 + 12) - (5 - 8)",
      "(12 - (5 - 8)) + 9",
      "9 + (8 + (12 - 5))",
      "8 + (9 + (12 - 5))",
      "12 + (9 + (8 - 5))",
      "(12 + (8 + 9)) - 5",
      "((9 - 5) + 8) + 12",
      "(12 - 5) + (8 + 9)",
      "9 + ((8 + 12) - 5)",
      "8 * (12 / (9 - 5))",
      "(9 + (12 + 8)) - 5",
      "(12 + (9 + 8)) - 5",
      "((8 + 12) + 9) - 5",
      "((9 + 12) - 5) + 8",
      "12 + (8 - (5 - 9))",
      "(8 + 12) + (9 - 5)",
      "8 + (9 - (5 - 12))",
      "12 + ((9 - 5) + 8)",
      "9 + ((12 - 5) + 8)",
      "((9 + 12) + 8) - 5",
      "(8 + 12) - (5 - 9)",
      "((12 + 9) - 5) + 8",
      "8 - (5 - (9 + 12))",
      "((8 + 9) + 12) - 5",
      "(9 - 5) + (8 + 12)",
      "9 + (12 + (8 - 5))",
      "8 - ((5 - 12) - 9)",
      "((8 + 9) - 5) + 12",
      "(12 / (9 - 5)) * 8",
      "((8 - 5) + 12) + 9"
    ]
  },
  "5 8 9 13": {
    "cards": "5 8 9 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((9 * 5) - 13) - 8",
      "((5 * 9) - 8) - 13",
      "(9 * 5) - (8 + 13)",
      "((9 * 5) - 8) - 13",
      "((5 * 9) - 13) - 8",
      "(5 * 9) - (8 + 13)",
      "(9 * 5) - (13 + 8)",
      "(5 * 9) - (13 + 8)"
    ]
  },
  "5 8 10 10": {
    "cards": "5 8 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 10 11": {
    "cards": "5 8 10 11",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "11 - (5 - (8 + 10))",
      "11 + (10 + (8 - 5))",
      "10 - ((5 - 11) - 8)",
      "((8 + 10) - 5) + 11",
      "11 - (5 - (10 + 8))",
      "((10 + 11) + 8) - 5",
      "(10 - (5 - 8)) + 11",
      "(8 + (10 - 5)) + 11",
      "((10 - 5) + 8) + 11",
      "(10 - (5 - 11)) + 8",
      "11 + (8 + (10 - 5))",
      "(8 + 10) - (5 - 11)",
      "((10 - 5) + 11) + 8",
      "11 + (8 - (5 - 10))",
      "8 - ((5 - 11) - 10)",
      "(11 + (10 - 5)) + 8",
      "10 + ((11 + 8) - 5)",
      "(8 + (11 + 10)) - 5",
      "(10 + 11) - (5 - 8)",
      "10 - ((5 - 8) - 11)",
      "(10 + 8) - (5 - 11)",
      "((11 + 8) - 5) + 10",
      "(10 + (8 + 11)) - 5",
      "(11 + 10) - (5 - 8)",
      "(10 - 5) + (11 + 8)",
      "(11 + (8 + 10)) - 5",
      "((8 - 5) + 11) + 10",
      "(11 - 5) + (10 + 8)",
      "11 + ((10 + 8) - 5)",
      "(11 + (10 + 8)) - 5",
      "((11 - 5) + 8) + 10",
      "((10 + 8) + 11) - 5",
      "11 - ((5 - 10) - 8)",
      "((10 + 8) - 5) + 11",
      "(10 + (11 + 8)) - 5",
      "8 + ((11 - 5) + 10)",
      "(10 + 8) + (11 - 5)",
      "8 + (10 - (5 - 11))",
      "10 + (8 - (5 - 11))",
      "10 + ((11 - 5) + 8)",
      "10 + ((8 + 11) - 5)",
      "11 + ((8 + 10) - 5)",
      "((11 + 10) - 5) + 8",
      "((11 + 8) + 10) - 5",
      "(11 + 8) - (5 - 10)",
      "8 - (5 - (11 + 10))",
      "10 + (8 + (11 - 5))",
      "10 - (5 - (11 + 8))",
      "11 + (10 - (5 - 8))",
      "(11 - (5 - 8)) + 10",
      "11 + ((8 - 5) + 10)",
      "11 - ((5 - 8) - 10)",
      "8 - (5 - (10 + 11))",
      "10 + (11 + (8 - 5))",
      "8 + (10 + (11 - 5))",
      "((8 - 5) + 10) + 11",
      "8 + (11 - (5 - 10))",
      "((11 + 10) + 8) - 5",
      "(8 + (10 + 11)) - 5",
      "8 + ((10 - 5) + 11)",
      "(8 - 5) + (10 + 11)",
      "(10 + 11) + (8 - 5)",
      "10 - (5 - (8 + 11))",
      "8 + ((10 + 11) - 5)",
      "(10 + (11 - 5)) + 8",
      "(8 + (11 - 5)) + 10",
      "((8 + 10) + 11) - 5",
      "(11 - (5 - 10)) + 8",
      "((8 + 11) - 5) + 10",
      "8 - ((5 - 10) - 11)",
      "10 + ((8 - 5) + 11)",
      "(8 + 10) + (11 - 5)",
      "10 + (11 - (5 - 8))",
      "(10 - 5) + (8 + 11)",
      "(8 - 5) + (11 + 10)",
      "(8 + 11) - (5 - 10)",
      "8 + (11 + (10 - 5))",
      "(11 + 10) + (8 - 5)",
      "(8 - (5 - 10)) + 11",
      "(11 + (8 - 5)) + 10",
      "(8 - (5 - 11)) + 10",
      "11 + ((10 - 5) + 8)",
      "8 + ((11 + 10) - 5)",
      "(8 + 11) + (10 - 5)",
      "((11 - 5) + 10) + 8",
      "(10 + (8 - 5)) + 11",
      "((10 + 11) - 5) + 8",
      "(11 + 8) + (10 - 5)",
      "((8 + 11) + 10) - 5",
      "(11 - 5) + (8 + 10)"
    ]
  },
  "5 8 10 12": {
    "cards": "5 8 10 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((10 - 12) + 5) * 8",
      "8 * ((5 - 12) + 10)",
      "8 * ((10 - 12) + 5)",
      "((10 + 5) - 12) * 8",
      "8 * ((10 + 5) - 12)",
      "8 * (10 + (5 - 12))",
      "(5 + (10 - 12)) * 8",
      "8 * (5 + (10 - 12))",
      "8 * ((5 + 10) - 12)",
      "8 * (5 - (12 - 10))",
      "(10 - (12 - 5)) * 8",
      "(10 + (5 - 12)) * 8",
      "(5 - (12 - 10)) * 8",
      "8 * (10 - (12 - 5))",
      "((5 - 12) + 10) * 8",
      "((5 + 10) - 12) * 8"
    ]
  },
  "5 8 10 13": {
    "cards": "5 8 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 11 11": {
    "cards": "5 8 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 11 12": {
    "cards": "5 8 11 12",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "12 * ((8 - 11) + 5)",
      "(12 * (5 + 11)) / 8",
      "12 * ((8 + 5) - 11)",
      "((5 + 8) - 11) * 12",
      "(11 + 5) / (8 / 12)",
      "(8 - (11 - 5)) * 12",
      "((5 + 11) / 8) * 12",
      "12 * ((5 + 11) / 8)",
      "(5 + 11) / (8 / 12)",
      "(8 + (5 - 11)) * 12",
      "(8 - 12) * (5 - 11)",
      "(12 / 8) * (11 + 5)",
      "12 / (8 / (11 + 5))",
      "(5 + (8 - 11)) * 12",
      "(5 - 11) * (8 - 12)",
      "12 / (8 / (5 + 11))",
      "(12 * (11 + 5)) / 8",
      "((8 - 11) + 5) * 12",
      "12 * ((5 + 8) - 11)",
      "12 * (5 - (11 - 8))",
      "12 * (8 + (5 - 11))",
      "(11 + 5) * (12 / 8)",
      "(5 - (11 - 8)) * 12",
      "(5 + 11) * (12 / 8)",
      "12 * ((5 - 11) + 8)",
      "12 * ((11 + 5) / 8)",
      "12 * (8 - (11 - 5))",
      "(12 / 8) * (5 + 11)",
      "(11 - 5) * (12 - 8)",
      "((11 + 5) / 8) * 12",
      "12 * (5 + (8 - 11))",
      "((5 + 11) * 12) / 8",
      "((5 - 11) + 8) * 12",
      "((11 + 5) * 12) / 8",
      "((8 + 5) - 11) * 12",
      "(12 - 8) * (11 - 5)"
    ]
  },
  "5 8 11 13": {
    "cards": "5 8 11 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(11 - 8) * (13 - 5)",
      "8 * ((5 - 13) + 11)",
      "8 * (11 - (13 - 5))",
      "((11 + 5) - 13) * 8",
      "(11 - (13 - 5)) * 8",
      "(5 + (11 - 13)) * 8",
      "(5 - 13) * (8 - 11)",
      "8 * (5 + (11 - 13))",
      "((5 - 13) + 11) * 8",
      "8 * ((11 - 13) + 5)",
      "((11 - 13) + 5) * 8",
      "8 * (11 + (5 - 13))",
      "(13 - 5) * (11 - 8)",
      "((5 + 11) - 13) * 8",
      "8 * ((11 + 5) - 13)",
      "8 * ((5 + 11) - 13)",
      "(5 - (13 - 11)) * 8",
      "(8 - 11) * (5 - 13)",
      "8 * (5 - (13 - 11))",
      "(11 + (5 - 13)) * 8"
    ]
  },
  "5 8 12 12": {
    "cards": "5 8 12 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((8 - 5) * 12) - 12",
      "(12 * (8 - 5)) - 12"
    ]
  },
  "5 8 12 13": {
    "cards": "5 8 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 8 13 13": {
    "cards": "5 8 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 9 9": {
    "cards": "5 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 9 10": {
    "cards": "5 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 9 11": {
    "cards": "5 9 9 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "9 + (11 - (5 - 9))",
      "11 + (9 + (9 - 5))",
      "(9 + 9) - (5 - 11)",
      "9 - (5 - (9 + 11))",
      "9 + ((9 + 11) - 5)",
      "(9 + 9) + (11 - 5)",
      "(11 - 5) + (9 + 9)",
      "((9 - 5) + 11) + 9",
      "9 + (11 + (9 - 5))",
      "9 - ((5 - 9) - 11)",
      "(9 + (11 - 5)) + 9",
      "11 - ((5 - 9) - 9)",
      "(9 - 5) + (9 + 11)",
      "11 - (5 - (9 + 9))",
      "9 + (9 + (11 - 5))",
      "((11 + 9) - 5) + 9",
      "(9 - (5 - 9)) + 11",
      "(11 + 9) - (5 - 9)",
      "(9 + 11) + (9 - 5)",
      "(11 - (5 - 9)) + 9",
      "9 - ((5 - 11) - 9)",
      "(9 + (9 + 11)) - 5",
      "9 + ((11 - 5) + 9)",
      "(11 + 9) + (9 - 5)",
      "((9 + 9) + 11) - 5",
      "11 + ((9 + 9) - 5)",
      "((9 + 11) - 5) + 9",
      "(11 + (9 - 5)) + 9",
      "((11 - 5) + 9) + 9",
      "(11 + (9 + 9)) - 5",
      "((11 + 9) + 9) - 5",
      "(9 - (5 - 11)) + 9",
      "9 + ((9 - 5) + 11)",
      "9 - (5 - (11 + 9))",
      "9 + (9 - (5 - 11))",
      "((9 + 9) - 5) + 11",
      "((9 - 5) + 9) + 11",
      "((9 + 11) + 9) - 5",
      "9 + ((11 + 9) - 5)",
      "11 + (9 - (5 - 9))",
      "11 + ((9 - 5) + 9)",
      "(9 - 5) + (11 + 9)",
      "(9 + (11 + 9)) - 5",
      "(9 + (9 - 5)) + 11",
      "(9 + 11) - (5 - 9)"
    ]
  },
  "5 9 9 12": {
    "cards": "5 9 9 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((5 * 9) - 12) - 9",
      "(5 * 9) - (12 + 9)",
      "(9 * (9 - 5)) - 12",
      "((9 * 5) - 9) - 12",
      "(5 * 9) - (9 + 12)",
      "(9 * 5) - (12 + 9)",
      "9 - (5 * (9 - 12))",
      "((12 - 9) * 5) + 9",
      "((5 * 9) - 9) - 12",
      "9 + (5 * (12 - 9))",
      "(5 * (12 - 9)) + 9",
      "((9 * 5) - 12) - 9",
      "(9 * 5) - (9 + 12)",
      "9 - ((9 - 12) * 5)",
      "9 + ((12 - 9) * 5)",
      "((9 - 5) * 9) - 12"
    ]
  },
  "5 9 9 13": {
    "cards": "5 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 10 10": {
    "cards": "5 9 10 10",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "10 - (5 - (9 + 10))",
      "((10 + 10) - 5) + 9",
      "(10 - 5) + (10 + 9)",
      "10 + ((9 + 10) - 5)",
      "10 + (9 + (10 - 5))",
      "((10 + 9) + 10) - 5",
      "((9 + 10) - 5) + 10",
      "10 + (9 - (5 - 10))",
      "(10 + (9 - 5)) + 10",
      "(9 - 5) + (10 + 10)",
      "10 - (5 - (10 + 9))",
      "10 - ((5 - 10) - 9)",
      "((10 - 5) + 9) + 10",
      "9 + ((10 - 5) + 10)",
      "((9 - 5) + 10) + 10",
      "9 + (10 + (10 - 5))",
      "9 + (10 - (5 - 10))",
      "(10 - (5 - 10)) + 9",
      "((10 + 10) + 9) - 5",
      "(10 + (10 - 5)) + 9",
      "(9 + (10 + 10)) - 5",
      "((9 + 10) + 10) - 5",
      "(10 + (9 + 10)) - 5",
      "9 - ((5 - 10) - 10)",
      "(9 - (5 - 10)) + 10",
      "((10 - 5) + 10) + 9",
      "(9 + (10 - 5)) + 10",
      "(10 - (5 - 9)) + 10",
      "10 - ((5 - 9) - 10)",
      "10 + (10 - (5 - 9))",
      "10 + (10 + (9 - 5))",
      "10 + ((10 + 9) - 5)",
      "(10 + 10) + (9 - 5)",
      "(9 + 10) + (10 - 5)",
      "(10 + 9) - (5 - 10)",
      "(10 - 5) + (9 + 10)",
      "(10 + (10 + 9)) - 5",
      "9 - (5 - (10 + 10))",
      "((10 + 9) - 5) + 10",
      "(9 + 10) - (5 - 10)",
      "10 + ((10 - 5) + 9)",
      "9 + ((10 + 10) - 5)",
      "(10 + 9) + (10 - 5)",
      "(10 + 10) - (5 - 9)",
      "10 + ((9 - 5) + 10)"
    ]
  },
  "5 9 10 11": {
    "cards": "5 9 10 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(9 * 5) - (11 + 10)",
      "((5 * 9) - 11) - 10",
      "((5 * 9) - 10) - 11",
      "((9 * 5) - 10) - 11",
      "(9 * 5) - (10 + 11)",
      "(5 * 9) - (11 + 10)",
      "((9 * 5) - 11) - 10",
      "(5 * 9) - (10 + 11)"
    ]
  },
  "5 9 10 12": {
    "cards": "5 9 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 10 13": {
    "cards": "5 9 10 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "13 + ((10 / 5) + 9)",
      "(5 * (13 - 10)) + 9",
      "(10 / 5) + (9 + 13)",
      "(13 + (10 / 5)) + 9",
      "9 - ((10 - 13) * 5)",
      "((10 / 5) + 9) + 13",
      "9 + ((13 - 10) * 5)",
      "(9 + 13) + (10 / 5)",
      "9 - (5 * (10 - 13))",
      "9 + ((10 / 5) + 13)",
      "((10 / 5) + 13) + 9",
      "9 + (5 * (13 - 10))",
      "(13 + 9) + (10 / 5)",
      "13 + (9 + (10 / 5))",
      "9 + (13 + (10 / 5))",
      "((13 - 10) * 5) + 9",
      "(9 + (10 / 5)) + 13",
      "(10 / 5) + (13 + 9)"
    ]
  },
  "5 9 11 11": {
    "cards": "5 9 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 11 12": {
    "cards": "5 9 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 9 11 13": {
    "cards": "5 9 11 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(13 - 9) * (11 - 5)",
      "(11 - 5) * (13 - 9)",
      "(9 - 13) * (5 - 11)",
      "(5 - 11) * (9 - 13)"
    ]
  },
  "5 9 12 12": {
    "cards": "5 9 12 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "12 * (5 - (12 - 9))",
      "((9 - 12) + 5) * 12",
      "((9 * 12) + 12) / 5",
      "12 * ((9 + 5) - 12)",
      "(9 - (12 - 5)) * 12",
      "(9 + (5 - 12)) * 12",
      "12 * ((5 - 12) + 9)",
      "((12 * 9) + 12) / 5",
      "(5 - (12 - 9)) * 12",
      "(12 + (9 * 12)) / 5",
      "(5 + (9 - 12)) * 12",
      "12 * (5 + (9 - 12))",
      "((9 + 5) - 12) * 12",
      "12 * ((9 - 12) + 5)",
      "(12 + (12 * 9)) / 5",
      "12 * (9 - (12 - 5))",
      "12 * (9 + (5 - 12))",
      "12 * ((5 + 9) - 12)",
      "((5 + 9) - 12) * 12",
      "((5 - 12) + 9) * 12"
    ]
  },
  "5 9 12 13": {
    "cards": "5 9 12 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(5 - 13) * (9 - 12)",
      "(12 * (5 + 13)) / 9",
      "(5 + 13) * (12 / 9)",
      "(13 + 5) / (9 / 12)",
      "(9 - 12) * (5 - 13)",
      "(12 - 9) * (13 - 5)",
      "(13 - 5) * (12 - 9)",
      "(12 * (13 + 5)) / 9",
      "((13 + 5) / 9) * 12",
      "((13 + 5) * 12) / 9",
      "12 * ((13 + 5) / 9)",
      "12 * ((5 + 13) / 9)",
      "12 / (9 / (13 + 5))",
      "((5 + 13) / 9) * 12",
      "(13 + 5) * (12 / 9)",
      "12 / (9 / (5 + 13))",
      "((5 + 13) * 12) / 9",
      "(12 / 9) * (13 + 5)",
      "(5 + 13) / (9 / 12)",
      "(12 / 9) * (5 + 13)"
    ]
  },
  "5 9 13 13": {
    "cards": "5 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 10 10 10": {
    "cards": "5 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 10 10 11": {
    "cards": "5 10 10 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((10 * 11) + 10) / 5",
      "(10 + (11 * 10)) / 5",
      "(10 + (10 * 11)) / 5",
      "((11 * 10) + 10) / 5"
    ]
  },
  "5 10 10 12": {
    "cards": "5 10 10 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "10 / ((10 - 5) / 12)",
      "((10 / 5) + 10) + 12",
      "(12 + 10) + (10 / 5)",
      "10 + ((10 / 5) + 12)",
      "(10 + 12) + (10 / 5)",
      "((10 / 5) + 12) + 10",
      "12 + (10 + (10 / 5))",
      "(10 + (10 / 5)) + 12",
      "10 * (12 / (10 - 5))",
      "(10 / 5) + (12 + 10)",
      "(12 + (10 / 5)) + 10",
      "12 * (10 / (10 - 5))",
      "(10 / 5) + (10 + 12)",
      "12 + ((10 / 5) + 10)",
      "(12 / (10 - 5)) * 10",
      "12 / ((10 - 5) / 10)",
      "(10 * 12) / (10 - 5)",
      "10 + (12 + (10 / 5))",
      "(12 * 10) / (10 - 5)",
      "(10 / (10 - 5)) * 12"
    ]
  },
  "5 10 10 13": {
    "cards": "5 10 10 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((13 * 10) - 10) / 5",
      "((10 * 13) - 10) / 5"
    ]
  },
  "5 10 11 11": {
    "cards": "5 10 11 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "11 + ((10 / 5) + 11)",
      "((10 / 5) + 11) + 11",
      "(11 + (10 / 5)) + 11",
      "(11 + 11) + (10 / 5)",
      "11 + (11 + (10 / 5))",
      "(10 / 5) + (11 + 11)"
    ]
  },
  "5 10 11 12": {
    "cards": "5 10 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 10 11 13": {
    "cards": "5 10 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 10 12 12": {
    "cards": "5 10 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 10 12 13": {
    "cards": "5 10 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * (5 + (10 - 13))",
      "((5 + 10) - 13) * 12",
      "((10 + 5) - 13) * 12",
      "((10 - 13) + 5) * 12",
      "(10 - (13 - 5)) * 12",
      "(5 - (13 - 10)) * 12",
      "(5 + (10 - 13)) * 12",
      "12 * (10 + (5 - 13))",
      "12 * ((5 + 10) - 13)",
      "((5 - 13) + 10) * 12",
      "(10 + (5 - 13)) * 12",
      "12 * ((10 + 5) - 13)",
      "12 * ((10 - 13) + 5)",
      "12 * ((5 - 13) + 10)",
      "12 * (5 - (13 - 10))",
      "12 * (10 - (13 - 5))"
    ]
  },
  "5 10 13 13": {
    "cards": "5 10 13 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(13 - 10) * (13 - 5)",
      "(5 * 10) - (13 + 13)",
      "13 - ((10 / 5) - 13)",
      "(13 - 5) * (13 - 10)",
      "(10 - 13) * (5 - 13)",
      "(5 - 13) * (10 - 13)",
      "(13 - (10 / 5)) + 13",
      "((5 * 10) - 13) - 13",
      "(13 + 13) - (10 / 5)",
      "13 + (13 - (10 / 5))",
      "(10 * 5) - (13 + 13)",
      "((10 * 5) - 13) - 13"
    ]
  },
  "5 11 11 11": {
    "cards": "5 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 11 11 12": {
    "cards": "5 11 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 11 11 13": {
    "cards": "5 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 11 12 12": {
    "cards": "5 11 12 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(12 * 12) / (11 - 5)",
      "(12 / (11 - 5)) * 12",
      "((12 * 11) - 12) / 5",
      "12 * (12 / (11 - 5))",
      "12 / ((11 - 5) / 12)",
      "((11 * 12) - 12) / 5"
    ]
  },
  "5 11 12 13": {
    "cards": "5 11 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 11 13 13": {
    "cards": "5 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 12 12 12": {
    "cards": "5 12 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 12 12 13": {
    "cards": "5 12 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 12 13 13": {
    "cards": "5 12 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "5 13 13 13": {
    "cards": "5 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 6 6": {
    "cards": "6 6 6 6",
    "has_solution": "Y",
    "num_solutions": 7,
    "solutions": [
      "6 + (6 + (6 + 6))",
      "((6 + 6) + 6) + 6",
      "(6 + 6) + (6 + 6)",
      "6 + ((6 + 6) + 6)",
      "(6 + (6 + 6)) + 6",
      "(6 * 6) - (6 + 6)",
      "((6 * 6) - 6) - 6"
    ]
  },
  "6 6 6 7": {
    "cards": "6 6 6 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 6 8": {
    "cards": "6 6 6 8",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "6 * (6 + (6 - 8))",
      "(6 - (8 - 6)) * 6",
      "((6 + 6) - 8) * 6",
      "((6 - 8) + 6) * 6",
      "(6 + (6 - 8)) * 6",
      "(8 - 6) * (6 + 6)",
      "6 * ((6 - 8) + 6)",
      "(6 + 6) * (8 - 6)",
      "6 * (6 - (8 - 6))",
      "6 * ((6 + 6) - 8)"
    ]
  },
  "6 6 6 9": {
    "cards": "6 6 6 9",
    "has_solution": "Y",
    "num_solutions": 21,
    "solutions": [
      "6 - ((6 - 9) * 6)",
      "((9 - 6) * 6) + 6",
      "6 / ((9 / 6) / 6)",
      "((6 * 6) / 9) * 6",
      "6 * ((6 * 6) / 9)",
      "6 - (6 * (6 - 9))",
      "6 + ((9 - 6) * 6)",
      "(6 * 6) * (6 / 9)",
      "((6 * 6) * 6) / 9",
      "(6 * (6 * 6)) / 9",
      "(6 * 6) / (9 / 6)",
      "6 / (9 / (6 * 6))",
      "(6 / (9 / 6)) * 6",
      "((6 / 9) * 6) * 6",
      "(6 / 9) * (6 * 6)",
      "6 * ((6 / 9) * 6)",
      "6 * (6 * (6 / 9))",
      "(6 * (6 / 9)) * 6",
      "(6 * (9 - 6)) + 6",
      "6 * (6 / (9 / 6))",
      "6 + (6 * (9 - 6))"
    ]
  },
  "6 6 6 10": {
    "cards": "6 6 6 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(6 * 10) - (6 * 6)",
      "(10 * 6) - (6 * 6)"
    ]
  },
  "6 6 6 11": {
    "cards": "6 6 6 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(6 * (11 - 6)) - 6",
      "((11 - 6) * 6) - 6"
    ]
  },
  "6 6 6 12": {
    "cards": "6 6 6 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((6 + 6) * 12) / 6",
      "12 / (6 / (6 + 6))",
      "12 * ((6 + 6) / 6)",
      "(12 * (6 + 6)) / 6",
      "(12 / 6) * (6 + 6)",
      "((6 + 6) / 6) * 12",
      "(6 + 6) / (6 / 12)",
      "(6 + 6) * (12 / 6)",
      "6 * (6 - (12 / 6))",
      "(6 - (12 / 6)) * 6"
    ]
  },
  "6 6 6 13": {
    "cards": "6 6 6 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 7 7": {
    "cards": "6 6 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 7 8": {
    "cards": "6 6 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 7 9": {
    "cards": "6 6 7 9",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(6 - (9 - 7)) * 6",
      "6 * (6 + (7 - 9))",
      "6 * (7 - (9 - 6))",
      "(7 + (6 - 9)) * 6",
      "6 * (6 - (9 - 7))",
      "((6 + 7) - 9) * 6",
      "((7 + 6) - 9) * 6",
      "6 * ((6 - 9) + 7)",
      "(6 + (7 - 9)) * 6",
      "(9 - 7) * (6 + 6)",
      "((6 - 9) + 7) * 6",
      "((7 - 9) + 6) * 6",
      "6 * ((7 - 9) + 6)",
      "6 * (7 + (6 - 9))",
      "6 * ((7 + 6) - 9)",
      "(6 + 6) * (9 - 7)",
      "6 * ((6 + 7) - 9)",
      "(7 - (9 - 6)) * 6"
    ]
  },
  "6 6 7 10": {
    "cards": "6 6 7 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "6 + (6 * (10 - 7))",
      "6 - (6 * (7 - 10))",
      "(6 * (10 - 7)) + 6",
      "6 - ((7 - 10) * 6)",
      "((10 - 7) * 6) + 6",
      "6 + ((10 - 7) * 6)"
    ]
  },
  "6 6 7 11": {
    "cards": "6 6 7 11",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(6 * 11) - (6 * 7)",
      "(6 * 11) - (7 * 6)",
      "(11 * 6) - (6 * 7)",
      "(11 * 6) - (7 * 6)"
    ]
  },
  "6 6 7 12": {
    "cards": "6 6 7 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((7 * 6) - 12) - 6",
      "(6 * 7) - (12 + 6)",
      "(7 * 6) - (12 + 6)",
      "((6 * 7) - 6) - 12",
      "((6 * 7) - 12) - 6",
      "(7 * 6) - (6 + 12)",
      "((7 * 6) - 6) - 12",
      "(6 * (12 - 7)) - 6",
      "((12 - 7) * 6) - 6",
      "(6 * 7) - (6 + 12)"
    ]
  },
  "6 6 7 13": {
    "cards": "6 6 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 8 8": {
    "cards": "6 6 8 8",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(6 / (8 - 6)) * 8",
      "(6 * 8) / (8 - 6)",
      "6 / ((8 - 6) / 8)",
      "6 * (8 / (8 - 6))",
      "(8 / (8 - 6)) * 6",
      "8 * (6 / (8 - 6))",
      "8 / ((8 - 6) / 6)",
      "(8 * 6) / (8 - 6)"
    ]
  },
  "6 6 8 9": {
    "cards": "6 6 8 9",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "6 + (9 * (8 - 6))",
      "(6 + (6 - 9)) * 8",
      "((6 - 9) + 6) * 8",
      "(9 * (8 - 6)) + 6",
      "8 * ((6 + 6) - 9)",
      "(6 - (9 - 6)) * 8",
      "8 * (6 - (9 - 6))",
      "8 * (6 + (6 - 9))",
      "((6 + 6) - 9) * 8",
      "6 - (9 * (6 - 8))",
      "8 * ((6 - 9) + 6)",
      "((8 - 6) * 9) + 6",
      "6 - ((6 - 8) * 9)",
      "6 + ((8 - 6) * 9)"
    ]
  },
  "6 6 8 10": {
    "cards": "6 6 8 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(6 + 6) * (10 - 8)",
      "(6 - (10 - 8)) * 6",
      "6 * (6 - (10 - 8))",
      "(10 - 8) * (6 + 6)",
      "(8 - (10 - 6)) * 6",
      "((8 + 6) - 10) * 6",
      "(8 + (6 - 10)) * 6",
      "((6 + 8) - 10) * 6",
      "6 * (8 + (6 - 10))",
      "((8 - 10) + 6) * 6",
      "6 * ((6 + 8) - 10)",
      "6 * ((8 + 6) - 10)",
      "6 * (8 - (10 - 6))",
      "(6 + (8 - 10)) * 6",
      "6 * ((8 - 10) + 6)",
      "6 * (6 + (8 - 10))",
      "((6 - 10) + 8) * 6",
      "6 * ((6 - 10) + 8)"
    ]
  },
  "6 6 8 11": {
    "cards": "6 6 8 11",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(6 * (11 - 8)) + 6",
      "((11 - 8) * 6) + 6",
      "6 + (6 * (11 - 8))",
      "6 + ((11 - 8) * 6)",
      "6 - ((8 - 11) * 6)",
      "6 - (6 * (8 - 11))"
    ]
  },
  "6 6 8 12": {
    "cards": "6 6 8 12",
    "has_solution": "Y",
    "num_solutions": 71,
    "solutions": [
      "(12 * 6) - (6 * 8)",
      "((6 + 12) * 8) / 6",
      "((8 - 6) * 6) + 12",
      "(6 + 12) / (6 / 8)",
      "6 / ((12 / 8) / 6)",
      "8 * (6 * (6 / 12))",
      "((6 * 8) * 6) / 12",
      "(8 / 6) * (6 + 12)",
      "8 / (6 / (12 + 6))",
      "6 / (12 / (6 * 8))",
      "((6 / 12) * 8) * 6",
      "12 - ((6 - 8) * 6)",
      "(8 * 6) / (12 / 6)",
      "((6 * 6) / 12) * 8",
      "((12 + 6) / 6) * 8",
      "((6 * 6) * 8) / 12",
      "((8 * 6) * 6) / 12",
      "(6 * (6 * 8)) / 12",
      "12 + (6 * (8 - 6))",
      "((6 / 12) * 6) * 8",
      "(6 * 8) * (6 / 12)",
      "6 * (6 / (12 / 8))",
      "(8 / (12 / 6)) * 6",
      "(8 / 12) * (6 * 6)",
      "(8 * (6 * 6)) / 12",
      "6 * ((8 * 6) / 12)",
      "((6 * 8) / 12) * 6",
      "((8 / 12) * 6) * 6",
      "8 * ((6 / 12) * 6)",
      "6 / (12 / (8 * 6))",
      "(6 * 6) * (8 / 12)",
      "(8 * (6 / 12)) * 6",
      "(8 * (6 + 12)) / 6",
      "(6 / (12 / 6)) * 8",
      "(6 * (8 / 12)) * 6",
      "8 / (6 / (6 + 12))",
      "(6 / 12) * (8 * 6)",
      "(6 + 12) * (8 / 6)",
      "(6 * 8) / (12 / 6)",
      "8 / ((12 / 6) / 6)",
      "6 * (8 * (6 / 12))",
      "((12 + 6) * 8) / 6",
      "(6 * 12) - (6 * 8)",
      "(8 * 6) * (6 / 12)",
      "6 / ((12 / 6) / 8)",
      "(6 / (12 / 8)) * 6",
      "6 * (6 * (8 / 12))",
      "8 / (12 / (6 * 6))",
      "8 * ((6 * 6) / 12)",
      "6 * (8 / (12 / 6))",
      "((6 + 12) / 6) * 8",
      "6 * ((6 / 12) * 8)",
      "(6 * (6 / 12)) * 8",
      "6 * ((6 * 8) / 12)",
      "12 + ((8 - 6) * 6)",
      "(8 * (12 + 6)) / 6",
      "(12 + 6) * (8 / 6)",
      "((8 * 6) / 12) * 6",
      "(12 * 6) - (8 * 6)",
      "12 - (6 * (6 - 8))",
      "6 * ((8 / 12) * 6)",
      "(6 * (8 * 6)) / 12",
      "(6 * 6) / (12 / 8)",
      "(12 + 6) / (6 / 8)",
      "8 * (6 / (12 / 6))",
      "(6 / 12) * (6 * 8)",
      "(6 * (8 - 6)) + 12",
      "(6 * 12) - (8 * 6)",
      "(8 / 6) * (12 + 6)",
      "8 * ((12 + 6) / 6)",
      "8 * ((6 + 12) / 6)"
    ]
  },
  "6 6 8 13": {
    "cards": "6 6 8 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(6 * (13 - 8)) - 6",
      "((13 - 8) * 6) - 6"
    ]
  },
  "6 6 9 9": {
    "cards": "6 6 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 9 10": {
    "cards": "6 6 9 10",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(10 + 6) / (6 / 9)",
      "(10 + 6) * (9 / 6)",
      "((6 + 10) * 9) / 6",
      "9 * ((6 + 10) / 6)",
      "9 / (6 / (6 + 10))",
      "(9 / 6) * (6 + 10)",
      "(10 * (9 - 6)) - 6",
      "((9 - 6) * 10) - 6",
      "(9 * (6 + 10)) / 6",
      "((10 + 6) * 9) / 6",
      "(9 * (10 + 6)) / 6",
      "(9 / 6) * (10 + 6)",
      "9 * ((10 + 6) / 6)",
      "((6 + 10) / 6) * 9",
      "(6 + 10) / (6 / 9)",
      "((10 + 6) / 6) * 9",
      "9 / (6 / (10 + 6))",
      "(6 + 10) * (9 / 6)"
    ]
  },
  "6 6 9 11": {
    "cards": "6 6 9 11",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "6 * (9 + (6 - 11))",
      "6 * ((9 - 11) + 6)",
      "6 * ((9 + 6) - 11)",
      "(9 + (6 - 11)) * 6",
      "((9 + 6) - 11) * 6",
      "(9 - (11 - 6)) * 6",
      "((6 - 11) + 9) * 6",
      "6 * ((6 - 11) + 9)",
      "(6 - (11 - 9)) * 6",
      "6 * ((6 + 9) - 11)",
      "((9 - 11) + 6) * 6",
      "(6 + 6) * (11 - 9)",
      "6 * (9 - (11 - 6))",
      "((6 + 9) - 11) * 6",
      "6 * (6 - (11 - 9))",
      "(11 - 9) * (6 + 6)",
      "6 * (6 + (9 - 11))",
      "(6 + (9 - 11)) * 6"
    ]
  },
  "6 6 9 12": {
    "cards": "6 6 9 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "6 + (9 * (12 / 6))",
      "6 + (12 * (9 / 6))",
      "(12 / (6 / 9)) + 6",
      "((9 * 12) / 6) + 6",
      "6 + ((9 * 12) / 6)",
      "(6 / (9 - 6)) * 12",
      "6 + ((12 - 9) * 6)",
      "(12 * 6) / (9 - 6)",
      "(6 * 12) / (9 - 6)",
      "12 * (6 / (9 - 6))",
      "((9 / 6) * 12) + 6",
      "6 + (12 / (6 / 9))",
      "(12 / (9 - 6)) * 6",
      "6 + (9 / (6 / 12))",
      "((12 * 9) / 6) + 6",
      "(12 * (9 / 6)) + 6",
      "6 - ((9 - 12) * 6)",
      "6 + ((12 / 6) * 9)",
      "6 / ((9 - 6) / 12)",
      "6 + (6 * (12 - 9))",
      "(9 / (6 / 12)) + 6",
      "6 * (12 / (9 - 6))",
      "6 + ((12 * 9) / 6)",
      "12 / ((9 - 6) / 6)",
      "6 - (6 * (9 - 12))",
      "6 + ((9 / 6) * 12)",
      "(9 * (12 / 6)) + 6",
      "((12 - 9) * 6) + 6",
      "(6 * (12 - 9)) + 6",
      "((12 / 6) * 9) + 6"
    ]
  },
  "6 6 9 13": {
    "cards": "6 6 9 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(6 * 13) - (6 * 9)",
      "(13 * 6) - (9 * 6)",
      "(13 * 6) - (6 * 9)",
      "(6 * 13) - (9 * 6)"
    ]
  },
  "6 6 10 10": {
    "cards": "6 6 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 10 11": {
    "cards": "6 6 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 10 12": {
    "cards": "6 6 10 12",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "(6 + (6 - 10)) * 12",
      "(6 + (10 - 12)) * 6",
      "12 * (6 + (6 - 10))",
      "((10 + 6) - 12) * 6",
      "6 * ((6 - 12) + 10)",
      "6 * (6 - (12 - 10))",
      "6 * (10 + (6 - 12))",
      "((6 - 12) + 10) * 6",
      "12 * (6 - (10 - 6))",
      "(12 - 6) * (10 - 6)",
      "6 * ((10 + 6) - 12)",
      "(10 - (12 - 6)) * 6",
      "6 * ((10 - 12) + 6)",
      "((6 - 10) + 6) * 12",
      "(6 - 12) * (6 - 10)",
      "(6 - 10) * (6 - 12)",
      "12 * ((6 - 10) + 6)",
      "(6 - (12 - 10)) * 6",
      "6 * (6 + (10 - 12))",
      "(10 + (6 - 12)) * 6",
      "(6 + 6) * (12 - 10)",
      "12 * ((6 + 6) - 10)",
      "6 * ((6 + 10) - 12)",
      "(6 - (10 - 6)) * 12",
      "((6 + 6) - 10) * 12",
      "((6 + 10) - 12) * 6",
      "((10 - 12) + 6) * 6",
      "6 * (10 - (12 - 6))",
      "(10 - 6) * (12 - 6)",
      "(12 - 10) * (6 + 6)"
    ]
  },
  "6 6 10 13": {
    "cards": "6 6 10 13",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "(13 + 10) + (6 / 6)",
      "((13 - 10) * 6) + 6",
      "((6 / 6) + 10) + 13",
      "(10 + (6 / 6)) + 13",
      "(6 / 6) + (10 + 13)",
      "(10 + 13) + (6 / 6)",
      "10 + (13 + (6 / 6))",
      "6 + ((13 - 10) * 6)",
      "(6 * (13 - 10)) + 6",
      "((6 / 6) + 13) + 10",
      "(6 / 6) + (13 + 10)",
      "(13 + (6 / 6)) + 10",
      "13 + (10 + (6 / 6))",
      "6 + (6 * (13 - 10))",
      "13 + ((6 / 6) + 10)",
      "6 - (6 * (10 - 13))",
      "6 - ((10 - 13) * 6)",
      "10 + ((6 / 6) + 13)"
    ]
  },
  "6 6 11 11": {
    "cards": "6 6 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 6 11 12": {
    "cards": "6 6 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "11 + (12 + (6 / 6))",
      "11 + ((6 / 6) + 12)",
      "12 + (11 + (6 / 6))",
      "12 + ((6 / 6) + 11)",
      "(11 + 12) + (6 / 6)",
      "((6 / 6) + 11) + 12",
      "(6 / 6) + (12 + 11)",
      "(12 + (6 / 6)) + 11",
      "(6 / 6) + (11 + 12)",
      "(11 + (6 / 6)) + 12",
      "((6 / 6) + 12) + 11",
      "(12 + 11) + (6 / 6)"
    ]
  },
  "6 6 11 13": {
    "cards": "6 6 11 13",
    "has_solution": "Y",
    "num_solutions": 156,
    "solutions": [
      "6 + (11 - (6 - 13))",
      "(13 + (6 - 6)) + 11",
      "(11 + (6 - 13)) * 6",
      "11 + ((6 - 6) + 13)",
      "(11 * (6 / 6)) + 13",
      "13 + (6 * (11 / 6))",
      "11 - (6 - (6 + 13))",
      "(13 * (6 / 6)) + 11",
      "11 - (6 - (13 + 6))",
      "(13 - 6) + (11 + 6)",
      "13 - ((6 - 11) - 6)",
      "(13 - 11) * (6 + 6)",
      "(11 + (6 + 13)) - 6",
      "(6 - 6) + (13 + 11)",
      "6 * (6 + (11 - 13))",
      "(6 + (11 + 13)) - 6",
      "((13 - 6) + 6) + 11",
      "(6 - (13 - 11)) * 6",
      "(11 - (6 - 13)) + 6",
      "13 + ((11 + 6) - 6)",
      "((6 / 6) * 11) + 13",
      "11 + ((6 + 13) - 6)",
      "6 + (11 + (13 - 6))",
      "13 + ((11 - 6) + 6)",
      "((13 + 6) - 6) + 11",
      "(6 / (6 / 13)) + 11",
      "(6 + (11 - 13)) * 6",
      "((13 * 6) / 6) + 11",
      "((13 + 11) / 6) * 6",
      "11 + ((13 / 6) * 6)",
      "((6 + 11) - 6) + 13",
      "(13 + 6) + (11 - 6)",
      "6 * ((11 + 13) / 6)",
      "(6 + (13 + 11)) - 6",
      "6 * ((13 + 11) / 6)",
      "(13 + 11) / (6 / 6)",
      "(6 * (13 / 6)) + 11",
      "((6 * 11) / 6) + 13",
      "13 + (6 - (6 - 11))",
      "13 + (11 / (6 / 6))",
      "(11 - (13 - 6)) * 6",
      "(6 + 11) + (13 - 6)",
      "11 + ((13 * 6) / 6)",
      "(11 + 13) + (6 - 6)",
      "11 + (6 + (13 - 6))",
      "((13 / 6) * 6) + 11",
      "11 + (13 + (6 - 6))",
      "6 / (6 / (11 + 13))",
      "6 + (13 - (6 - 11))",
      "((6 - 13) + 11) * 6",
      "13 - ((6 - 6) - 11)",
      "13 + (6 + (11 - 6))",
      "(6 + (13 - 6)) + 11",
      "(6 * (11 + 13)) / 6",
      "(11 - 6) + (6 + 13)",
      "11 + (6 / (6 / 13))",
      "11 - ((6 - 13) - 6)",
      "(13 + (11 - 6)) + 6",
      "((6 / 6) * 13) + 11",
      "11 + ((6 * 13) / 6)",
      "11 + ((13 + 6) - 6)",
      "(6 * (11 / 6)) + 13",
      "((11 + 13) + 6) - 6",
      "(11 + (13 - 6)) + 6",
      "6 + ((13 + 11) - 6)",
      "13 + ((11 / 6) * 6)",
      "((11 + 13) * 6) / 6",
      "(6 / (6 / 11)) + 13",
      "11 + (13 - (6 - 6))",
      "((13 - 6) + 11) + 6",
      "13 + (11 - (6 - 6))",
      "13 + ((11 * 6) / 6)",
      "((11 * 6) / 6) + 13",
      "((6 * 13) / 6) + 11",
      "(6 / 6) * (11 + 13)",
      "(6 * (13 + 11)) / 6",
      "((13 + 11) + 6) - 6",
      "(6 / 6) * (13 + 11)",
      "(13 - 6) + (6 + 11)",
      "6 - (6 - (13 + 11))",
      "((11 + 13) - 6) + 6",
      "13 + ((6 * 11) / 6)",
      "((6 + 11) - 13) * 6",
      "((6 + 13) - 6) + 11",
      "(13 + 11) - (6 - 6)",
      "13 - (6 - (6 + 11))",
      "((11 / 6) * 6) + 13",
      "6 + (13 + (11 - 6))",
      "(13 - (6 - 6)) + 11",
      "11 + (6 * (13 / 6))",
      "(11 + (6 - 6)) + 13",
      "((11 - 6) + 13) + 6",
      "(11 + 13) - (6 - 6)",
      "6 * ((6 + 11) - 13)",
      "(13 / (6 / 6)) + 11",
      "((6 - 6) + 11) + 13",
      "(13 - (6 - 11)) + 6",
      "((6 + 11) + 13) - 6",
      "13 + (11 + (6 - 6))",
      "((13 + 11) - 6) + 6",
      "6 + ((11 + 13) - 6)",
      "13 - (6 - (11 + 6))",
      "6 * (11 - (13 - 6))",
      "(6 + (11 - 6)) + 13",
      "(11 / (6 / 6)) + 13",
      "6 / (6 / (13 + 11))",
      "(6 - 6) + (11 + 13)",
      "(11 + 13) / (6 / 6)",
      "(6 + 6) * (13 - 11)",
      "11 - ((6 - 6) - 13)",
      "((11 + 6) + 13) - 6",
      "6 + ((11 - 6) + 13)",
      "13 + ((6 + 11) - 6)",
      "6 * ((11 - 13) + 6)",
      "(11 - 6) + (13 + 6)",
      "6 + ((13 - 6) + 11)",
      "((6 - 6) + 13) + 11",
      "((13 + 11) * 6) / 6",
      "(11 + (13 + 6)) - 6",
      "((11 - 6) + 6) + 13",
      "(6 - (6 - 11)) + 13",
      "13 + ((6 - 6) + 11)",
      "13 + ((6 / 6) * 11)",
      "6 - ((6 - 13) - 11)",
      "(11 + 6) + (13 - 6)",
      "(6 + 13) + (11 - 6)",
      "(13 + 11) * (6 / 6)",
      "11 + (6 - (6 - 13))",
      "13 + (6 / (6 / 11))",
      "(6 - (6 - 13)) + 11",
      "(13 + 11) + (6 - 6)",
      "((13 + 6) + 11) - 6",
      "13 + (11 * (6 / 6))",
      "(11 + 6) - (6 - 13)",
      "((6 + 13) + 11) - 6",
      "((11 + 6) - 13) * 6",
      "6 * ((6 - 13) + 11)",
      "((11 - 13) + 6) * 6",
      "(13 + (6 + 11)) - 6",
      "(13 + 6) - (6 - 11)",
      "6 * ((11 + 6) - 13)",
      "6 * (11 + (6 - 13))",
      "((11 + 13) / 6) * 6",
      "11 + (13 / (6 / 6))",
      "11 + ((13 - 6) + 6)",
      "(6 + 11) - (6 - 13)",
      "6 - ((6 - 11) - 13)",
      "6 * (6 - (13 - 11))",
      "(6 + 13) - (6 - 11)",
      "(11 - (6 - 6)) + 13",
      "((11 + 6) - 6) + 13",
      "6 - (6 - (11 + 13))",
      "11 + (13 * (6 / 6))",
      "11 + ((6 / 6) * 13)",
      "(11 + 13) * (6 / 6)",
      "(13 + (11 + 6)) - 6"
    ]
  },
  "6 6 12 12": {
    "cards": "6 6 12 12",
    "has_solution": "Y",
    "num_solutions": 71,
    "solutions": [
      "(6 - (6 - 12)) + 12",
      "6 * ((12 + 12) / 6)",
      "((6 / 6) * 12) + 12",
      "(6 - 6) + (12 + 12)",
      "12 + ((12 / 6) * 6)",
      "(12 - 6) + (12 + 6)",
      "(6 + (12 + 12)) - 6",
      "((12 + 12) * 6) / 6",
      "((12 + 6) + 12) - 6",
      "12 + (6 / (6 / 12))",
      "12 - ((6 - 6) - 12)",
      "((6 + 12) - 6) + 12",
      "(12 + 6) - (6 - 12)",
      "(12 - (6 - 6)) + 12",
      "(6 * (12 + 12)) / 6",
      "((12 + 12) - 6) + 6",
      "6 - (6 - (12 + 12))",
      "12 + ((6 * 12) / 6)",
      "12 - (6 - (12 + 6))",
      "(12 + (6 - 6)) + 12",
      "(12 + (12 + 6)) - 6",
      "12 + (6 - (6 - 12))",
      "12 + ((12 + 6) - 6)",
      "6 + ((12 - 6) + 12)",
      "(6 + (12 - 6)) + 12",
      "(12 + 6) + (12 - 6)",
      "(6 + 12) + (12 - 6)",
      "12 + ((12 * 6) / 6)",
      "12 + (6 * (12 / 6))",
      "((12 / 6) * 6) + 12",
      "(12 * (6 / 6)) + 12",
      "((12 + 6) - 6) + 12",
      "12 + (12 * (6 / 6))",
      "(6 + 12) - (6 - 12)",
      "((6 * 12) / 6) + 12",
      "((12 * 6) / 6) + 12",
      "12 - ((6 - 12) - 6)",
      "12 + (12 + (6 - 6))",
      "((6 + 12) + 12) - 6",
      "((12 - 6) + 6) + 12",
      "12 - (6 - (6 + 12))",
      "((6 - 6) + 12) + 12",
      "(12 / (6 / 6)) + 12",
      "(6 * (12 / 6)) + 12",
      "((12 - 6) + 12) + 6",
      "(12 + 12) + (6 - 6)",
      "12 + (12 - (6 - 6))",
      "6 / (6 / (12 + 12))",
      "((12 + 12) + 6) - 6",
      "12 + ((6 + 12) - 6)",
      "((12 - 6) * 6) - 12",
      "6 + ((12 + 12) - 6)",
      "(12 + 12) - (6 - 6)",
      "12 + ((12 - 6) + 6)",
      "6 + (12 + (12 - 6))",
      "12 + ((6 - 6) + 12)",
      "(12 - (6 - 12)) + 6",
      "(6 / (6 / 12)) + 12",
      "6 - ((6 - 12) - 12)",
      "(12 + 12) / (6 / 6)",
      "((12 + 12) / 6) * 6",
      "(12 - 6) + (6 + 12)",
      "(12 + (6 + 12)) - 6",
      "(6 / 6) * (12 + 12)",
      "(12 + 12) * (6 / 6)",
      "(6 * (12 - 6)) - 12",
      "12 + ((6 / 6) * 12)",
      "12 + (12 / (6 / 6))",
      "12 + (6 + (12 - 6))",
      "(12 + (12 - 6)) + 6",
      "6 + (12 - (6 - 12))"
    ]
  },
  "6 6 12 13": {
    "cards": "6 6 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 - (6 / 6)) + 13",
      "(13 - (6 / 6)) + 12",
      "(13 + 12) - (6 / 6)",
      "13 + (12 - (6 / 6))",
      "(12 + 13) - (6 / 6)",
      "12 - ((6 / 6) - 13)",
      "13 - ((6 / 6) - 12)",
      "12 + (13 - (6 / 6))"
    ]
  },
  "6 6 13 13": {
    "cards": "6 6 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 7 7": {
    "cards": "6 7 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 7 8": {
    "cards": "6 7 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 7 9": {
    "cards": "6 7 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 7 10": {
    "cards": "6 7 7 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "6 * ((7 + 7) - 10)",
      "6 * (7 - (10 - 7))",
      "6 * ((7 - 10) + 7)",
      "(7 + (7 - 10)) * 6",
      "((7 + 7) - 10) * 6",
      "((7 - 10) + 7) * 6",
      "(7 - (10 - 7)) * 6",
      "6 * (7 + (7 - 10))"
    ]
  },
  "6 7 7 11": {
    "cards": "6 7 7 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 * 6) - (11 + 7)",
      "(6 * 7) - (7 + 11)",
      "((7 * 6) - 7) - 11",
      "((6 * 7) - 11) - 7",
      "((7 * 6) - 11) - 7",
      "(7 * 6) - (7 + 11)",
      "(6 * 7) - (11 + 7)",
      "((6 * 7) - 7) - 11"
    ]
  },
  "6 7 7 12": {
    "cards": "6 7 7 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 7 13": {
    "cards": "6 7 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 8 8": {
    "cards": "6 7 8 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 8 9": {
    "cards": "6 7 8 9",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(8 * 6) / (9 - 7)",
      "(6 / (9 - 7)) * 8",
      "6 * (8 / (9 - 7))",
      "(8 / (9 - 7)) * 6",
      "6 / ((9 - 7) / 8)",
      "(6 * 8) / (9 - 7)",
      "8 * (6 / (9 - 7))",
      "8 / ((9 - 7) / 6)"
    ]
  },
  "6 7 8 10": {
    "cards": "6 7 8 10",
    "has_solution": "Y",
    "num_solutions": 30,
    "solutions": [
      "10 - (7 * (6 - 8))",
      "(6 * 7) - (8 + 10)",
      "(7 + (6 - 10)) * 8",
      "8 * ((6 - 10) + 7)",
      "((6 * 7) - 8) - 10",
      "(7 - (10 - 6)) * 8",
      "8 * ((7 - 10) + 6)",
      "(6 * 7) - (10 + 8)",
      "10 + (7 * (8 - 6))",
      "((7 + 6) - 10) * 8",
      "8 * (7 + (6 - 10))",
      "8 * (7 - (10 - 6))",
      "((7 - 10) + 6) * 8",
      "10 - ((6 - 8) * 7)",
      "10 + ((8 - 6) * 7)",
      "8 * (6 - (10 - 7))",
      "(7 * 6) - (8 + 10)",
      "((7 * 6) - 8) - 10",
      "((6 - 10) + 7) * 8",
      "((7 * 6) - 10) - 8",
      "((8 - 6) * 7) + 10",
      "8 * ((6 + 7) - 10)",
      "(7 * (8 - 6)) + 10",
      "8 * (6 + (7 - 10))",
      "((6 + 7) - 10) * 8",
      "8 * ((7 + 6) - 10)",
      "(6 - (10 - 7)) * 8",
      "(6 + (7 - 10)) * 8",
      "((6 * 7) - 10) - 8",
      "(7 * 6) - (10 + 8)"
    ]
  },
  "6 7 8 11": {
    "cards": "6 7 8 11",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(7 + (8 - 11)) * 6",
      "(7 + 11) / (6 / 8)",
      "8 / (6 / (7 + 11))",
      "(8 + (7 - 11)) * 6",
      "((7 + 11) / 6) * 8",
      "6 * (7 - (11 - 8))",
      "(8 - (11 - 7)) * 6",
      "((8 + 7) - 11) * 6",
      "6 * (8 + (7 - 11))",
      "8 * ((7 + 11) / 6)",
      "(8 / 6) * (7 + 11)",
      "(8 * (7 + 11)) / 6",
      "8 / (6 / (11 + 7))",
      "8 * ((11 + 7) / 6)",
      "((7 + 8) - 11) * 6",
      "((7 + 11) * 8) / 6",
      "(11 + 7) / (6 / 8)",
      "((11 + 7) / 6) * 8",
      "((8 - 11) + 7) * 6",
      "6 * (8 - (11 - 7))",
      "6 * ((8 - 11) + 7)",
      "(7 + 11) * (8 / 6)",
      "((7 - 11) + 8) * 6",
      "(8 / 6) * (11 + 7)",
      "6 * (7 + (8 - 11))",
      "6 * ((7 + 8) - 11)",
      "(11 + 7) * (8 / 6)",
      "6 * ((8 + 7) - 11)",
      "(7 - (11 - 8)) * 6",
      "(8 * (11 + 7)) / 6",
      "6 * ((7 - 11) + 8)",
      "((11 + 7) * 8) / 6"
    ]
  },
  "6 7 8 12": {
    "cards": "6 7 8 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "12 * ((6 + 8) / 7)",
      "(12 / 7) * (8 + 6)",
      "((8 + 6) / 7) * 12",
      "12 * ((8 + 6) / 7)",
      "12 / (7 / (6 + 8))",
      "(6 + 8) / (7 / 12)",
      "((6 + 8) / 7) * 12",
      "(8 + 6) * (12 / 7)",
      "(12 * (8 + 6)) / 7",
      "(6 + 8) * (12 / 7)",
      "((6 + 8) * 12) / 7",
      "((8 + 6) * 12) / 7",
      "(8 + 6) / (7 / 12)",
      "(12 / 7) * (6 + 8)",
      "12 / (7 / (8 + 6))",
      "(12 * (6 + 8)) / 7"
    ]
  },
  "6 7 8 13": {
    "cards": "6 7 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 9 9": {
    "cards": "6 7 9 9",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "9 / (6 / (9 + 7))",
      "(9 / 6) * (9 + 7)",
      "((9 + 7) / 6) * 9",
      "6 + ((9 - 7) * 9)",
      "(6 * 7) - (9 + 9)",
      "9 * ((7 + 9) / 6)",
      "(7 + 9) / (6 / 9)",
      "((7 + 9) / 6) * 9",
      "6 - ((7 - 9) * 9)",
      "9 * ((9 + 7) / 6)",
      "((7 + 9) * 9) / 6",
      "(9 + 7) / (6 / 9)",
      "(7 * 6) - (9 + 9)",
      "((9 + 7) * 9) / 6",
      "6 + (9 * (9 - 7))",
      "(7 + 9) * (9 / 6)",
      "(9 + 7) * (9 / 6)",
      "(9 * (7 + 9)) / 6",
      "9 / (6 / (7 + 9))",
      "(9 * (9 + 7)) / 6",
      "((9 - 7) * 9) + 6",
      "(9 * (9 - 7)) + 6",
      "(9 / 6) * (7 + 9)",
      "((6 * 7) - 9) - 9",
      "((7 * 6) - 9) - 9",
      "6 - (9 * (7 - 9))"
    ]
  },
  "6 7 9 10": {
    "cards": "6 7 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 9 11": {
    "cards": "6 7 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 9 12": {
    "cards": "6 7 9 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "((9 - 7) * 6) + 12",
      "6 * ((7 - 12) + 9)",
      "6 * ((9 - 12) + 7)",
      "((9 - 12) + 7) * 6",
      "((7 - 12) + 9) * 6",
      "(7 + (9 - 12)) * 6",
      "6 * (7 - (12 - 9))",
      "12 - (6 * (7 - 9))",
      "6 * (7 + (9 - 12))",
      "6 * ((9 + 7) - 12)",
      "((9 + 7) - 12) * 6",
      "(6 * (9 - 7)) + 12",
      "(9 + (7 - 12)) * 6",
      "12 + ((9 - 7) * 6)",
      "(7 - (12 - 9)) * 6",
      "12 - ((7 - 9) * 6)",
      "((7 + 9) - 12) * 6",
      "6 * (9 + (7 - 12))",
      "6 * (9 - (12 - 7))",
      "12 + (6 * (9 - 7))",
      "(9 - (12 - 7)) * 6",
      "6 * ((7 + 9) - 12)"
    ]
  },
  "6 7 9 13": {
    "cards": "6 7 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 10 10": {
    "cards": "6 7 10 10",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((10 - 7) * 10) - 6",
      "(10 * (10 - 7)) - 6"
    ]
  },
  "6 7 10 11": {
    "cards": "6 7 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 7 10 12": {
    "cards": "6 7 10 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "10 + (12 / (6 / 7))",
      "(6 * 12) / (10 - 7)",
      "(12 * 7) - (6 * 10)",
      "10 + (7 / (6 / 12))",
      "(7 * 12) - (10 * 6)",
      "(12 * (7 / 6)) + 10",
      "(12 / (6 / 7)) + 10",
      "((12 / 6) * 7) + 10",
      "(7 / (6 / 12)) + 10",
      "((7 / 6) * 12) + 10",
      "(7 * (12 / 6)) + 10",
      "(12 * 6) / (10 - 7)",
      "(7 * 12) - (6 * 10)",
      "(12 / (10 - 7)) * 6",
      "(12 * 7) - (10 * 6)",
      "((7 * 12) / 6) + 10",
      "10 + ((7 * 12) / 6)",
      "(6 / (10 - 7)) * 12",
      "10 + (7 * (12 / 6))",
      "10 + (12 * (7 / 6))",
      "6 / ((10 - 7) / 12)",
      "12 / ((10 - 7) / 6)",
      "6 * (12 / (10 - 7))",
      "12 * (6 / (10 - 7))",
      "((12 * 7) / 6) + 10",
      "10 + ((7 / 6) * 12)",
      "10 + ((12 / 6) * 7)",
      "10 + ((12 * 7) / 6)"
    ]
  },
  "6 7 10 13": {
    "cards": "6 7 10 13",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "10 - (6 - (7 + 13))",
      "(7 + (13 + 10)) - 6",
      "(10 + (7 - 13)) * 6",
      "(7 + (10 - 6)) + 13",
      "((13 + 10) - 6) + 7",
      "10 + (7 - (6 - 13))",
      "(13 - 6) + (7 + 10)",
      "10 + ((13 - 6) + 7)",
      "13 - ((6 - 10) - 7)",
      "13 + ((10 + 7) - 6)",
      "(10 - 6) * (13 - 7)",
      "6 * (10 - (13 - 7))",
      "((7 - 6) + 13) + 10",
      "(7 + (10 + 13)) - 6",
      "((7 - 13) + 10) * 6",
      "(7 - 6) + (13 + 10)",
      "7 - (6 - (13 + 10))",
      "(7 + (10 - 13)) * 6",
      "(13 + (10 - 6)) + 7",
      "((10 + 7) + 13) - 6",
      "(13 - 6) + (10 + 7)",
      "13 + (7 + (10 - 6))",
      "10 + ((13 + 7) - 6)",
      "(7 + 10) + (13 - 6)",
      "13 + (10 + (7 - 6))",
      "(7 - 6) + (10 + 13)",
      "(13 + 7) - (6 - 10)",
      "(13 + 10) + (7 - 6)",
      "13 + ((7 - 6) + 10)",
      "10 - ((6 - 13) - 7)",
      "(7 - (13 - 10)) * 6",
      "((10 + 13) - 6) + 7",
      "7 + ((13 + 10) - 6)",
      "7 + (13 + (10 - 6))",
      "(13 + (10 + 7)) - 6",
      "((10 - 6) + 7) + 13",
      "13 - ((6 - 7) - 10)",
      "10 - (6 - (13 + 7))",
      "10 + ((7 + 13) - 6)",
      "((7 + 10) - 6) + 13",
      "(10 - (6 - 7)) + 13",
      "13 + (10 - (6 - 7))",
      "(7 - 13) * (6 - 10)",
      "((10 + 13) + 7) - 6",
      "6 * ((7 - 13) + 10)",
      "(10 - 6) + (7 + 13)",
      "(10 + 7) - (6 - 13)",
      "(10 + 7) + (13 - 6)",
      "10 + ((7 - 6) + 13)",
      "13 + ((10 - 6) + 7)",
      "13 + (7 - (6 - 10))",
      "7 + (10 + (13 - 6))",
      "6 * ((10 + 7) - 13)",
      "6 * ((10 - 13) + 7)",
      "6 * ((7 + 10) - 13)",
      "13 + ((7 + 10) - 6)",
      "(10 + (7 + 13)) - 6",
      "(10 + (13 + 7)) - 6",
      "10 + (7 + (13 - 6))",
      "(10 - 6) + (13 + 7)",
      "(13 + 10) - (6 - 7)",
      "((10 - 13) + 7) * 6",
      "(7 + (13 - 6)) + 10",
      "7 - ((6 - 10) - 13)",
      "((10 + 7) - 6) + 13",
      "((13 - 6) + 10) + 7",
      "10 - ((6 - 7) - 13)",
      "((10 + 7) - 13) * 6",
      "(7 + 10) - (6 - 13)",
      "(13 - (6 - 7)) + 10",
      "((13 + 7) + 10) - 6",
      "7 + ((10 - 6) + 13)",
      "7 + ((13 - 6) + 10)",
      "6 * (7 + (10 - 13))",
      "(13 + (7 - 6)) + 10",
      "(7 - (6 - 10)) + 13",
      "7 - ((6 - 13) - 10)",
      "((13 - 6) + 7) + 10",
      "(6 - 10) * (7 - 13)",
      "((7 + 10) - 13) * 6",
      "7 + (13 - (6 - 10))",
      "(7 - (6 - 13)) + 10",
      "((7 - 6) + 10) + 13",
      "(13 - 7) * (10 - 6)",
      "10 + (13 - (6 - 7))",
      "(13 + 7) + (10 - 6)",
      "7 + (10 - (6 - 13))",
      "6 * (10 + (7 - 13))",
      "(10 + 13) + (7 - 6)",
      "((7 + 13) - 6) + 10",
      "(13 + (7 + 10)) - 6",
      "10 + (13 + (7 - 6))",
      "(10 - (13 - 7)) * 6",
      "(10 + (7 - 6)) + 13",
      "(10 + (13 - 6)) + 7",
      "(7 + 13) - (6 - 10)",
      "((13 + 7) - 6) + 10",
      "(10 + 13) - (6 - 7)",
      "((10 - 6) + 13) + 7",
      "6 * (7 - (13 - 10))",
      "(13 - (6 - 10)) + 7",
      "13 - (6 - (10 + 7))",
      "((7 + 13) + 10) - 6",
      "(7 + 13) + (10 - 6)",
      "(10 - (6 - 13)) + 7",
      "7 + ((10 + 13) - 6)",
      "7 - (6 - (10 + 13))",
      "((13 + 10) + 7) - 6",
      "((7 + 10) + 13) - 6",
      "13 - (6 - (7 + 10))"
    ]
  },
  "6 7 11 11": {
    "cards": "6 7 11 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(7 * (11 - 6)) - 11",
      "((11 - 6) * 7) - 11"
    ]
  },
  "6 7 11 12": {
    "cards": "6 7 11 12",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "(11 - (6 - 7)) + 12",
      "(7 + (12 - 6)) + 11",
      "12 - (6 - (7 + 11))",
      "11 - (6 - (12 + 7))",
      "12 + ((7 + 11) - 6)",
      "((12 + 7) + 11) - 6",
      "12 * (6 + (7 - 11))",
      "((7 - 6) + 11) + 12",
      "(7 + 11) - (6 - 12)",
      "(7 + 12) + (11 - 6)",
      "(11 + (7 + 12)) - 6",
      "(7 - (11 - 6)) * 12",
      "(7 + 11) + (12 - 6)",
      "(6 - 12) * (7 - 11)",
      "7 - (6 - (11 + 12))",
      "((11 + 7) + 12) - 6",
      "12 * ((6 - 11) + 7)",
      "((12 + 7) - 6) + 11",
      "7 + (12 + (11 - 6))",
      "(7 + (6 - 11)) * 12",
      "11 + (7 + (12 - 6))",
      "((12 + 11) - 6) + 7",
      "(12 - 6) + (11 + 7)",
      "(12 + 7) - (6 - 11)",
      "11 - ((6 - 12) - 7)",
      "(7 - 6) + (12 + 11)",
      "12 + ((11 + 7) - 6)",
      "((7 + 11) - 6) + 12",
      "12 + ((7 - 6) + 11)",
      "11 - ((6 - 7) - 12)",
      "(11 + (7 - 6)) + 12",
      "(7 + 12) - (6 - 11)",
      "(7 + (12 + 11)) - 6",
      "((7 + 11) + 12) - 6",
      "7 + (12 - (6 - 11))",
      "7 + ((11 - 6) + 12)",
      "(12 + 11) - (6 - 7)",
      "(7 - 11) * (6 - 12)",
      "(12 + 11) + (7 - 6)",
      "7 - (6 - (12 + 11))",
      "(6 - (11 - 7)) * 12",
      "7 + ((11 + 12) - 6)",
      "(7 - 6) + (11 + 12)",
      "12 - ((6 - 7) - 11)",
      "(11 - (6 - 12)) + 7",
      "(7 - (6 - 12)) + 11",
      "((6 + 7) - 11) * 12",
      "((6 - 11) + 7) * 12",
      "12 + (7 + (11 - 6))",
      "12 - ((6 - 11) - 7)",
      "((7 + 12) - 6) + 11",
      "(11 - 7) * (12 - 6)",
      "12 * (6 - (11 - 7))",
      "(11 + (12 + 7)) - 6",
      "12 * ((7 - 11) + 6)",
      "(11 - 6) + (7 + 12)",
      "((11 + 12) + 7) - 6",
      "((12 - 6) + 7) + 11",
      "7 + (11 + (12 - 6))",
      "(12 - (6 - 7)) + 11",
      "(12 + 7) + (11 - 6)",
      "11 + (12 + (7 - 6))",
      "(7 - (6 - 11)) + 12",
      "(12 + (11 - 6)) + 7",
      "12 * (7 + (6 - 11))",
      "12 * (7 - (11 - 6))",
      "(12 - (6 - 11)) + 7",
      "((11 + 12) - 6) + 7",
      "((12 + 11) + 7) - 6",
      "((11 - 6) + 12) + 7",
      "((7 - 6) + 12) + 11",
      "(12 - 6) * (11 - 7)",
      "12 + (11 - (6 - 7))",
      "((11 - 6) + 7) + 12",
      "11 + ((7 - 6) + 12)",
      "12 + (11 + (7 - 6))",
      "(11 + (12 - 6)) + 7",
      "7 + (11 - (6 - 12))",
      "11 + ((12 - 6) + 7)",
      "12 - (6 - (11 + 7))",
      "(12 - 6) + (7 + 11)",
      "7 - ((6 - 11) - 12)",
      "11 + ((7 + 12) - 6)",
      "(12 + (7 - 6)) + 11",
      "11 - (6 - (7 + 12))",
      "(12 + (11 + 7)) - 6",
      "((11 + 7) - 6) + 12",
      "(11 - 6) + (12 + 7)",
      "((7 + 12) + 11) - 6",
      "11 + (12 - (6 - 7))",
      "((7 + 6) - 11) * 12",
      "((7 - 11) + 6) * 12",
      "7 - ((6 - 12) - 11)",
      "(11 + 7) - (6 - 12)",
      "(11 + 7) + (12 - 6)",
      "(12 + (7 + 11)) - 6",
      "(11 + 12) + (7 - 6)",
      "12 * ((6 + 7) - 11)",
      "(6 + (7 - 11)) * 12",
      "7 + ((12 - 6) + 11)",
      "11 + ((12 + 7) - 6)",
      "7 + ((12 + 11) - 6)",
      "11 + (7 - (6 - 12))",
      "(11 + 12) - (6 - 7)",
      "(7 + (11 + 12)) - 6",
      "12 + ((11 - 6) + 7)",
      "12 * ((7 + 6) - 11)",
      "((12 - 6) + 11) + 7",
      "(7 + (11 - 6)) + 12",
      "12 + (7 - (6 - 11))"
    ]
  },
  "6 7 11 13": {
    "cards": "6 7 11 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "11 - (13 * (6 - 7))",
      "(11 * (7 - 6)) + 13",
      "(11 + 13) * (7 - 6)",
      "13 + (11 * (7 - 6))",
      "(11 / (7 - 6)) + 13",
      "((7 - 6) * 11) + 13",
      "13 + (11 / (7 - 6))",
      "11 + (13 * (7 - 6))",
      "(7 - 6) * (13 + 11)",
      "11 - ((6 - 7) * 13)",
      "(11 + 13) / (7 - 6)",
      "(13 + 11) * (7 - 6)",
      "11 + ((7 - 6) * 13)",
      "(7 - 6) * (11 + 13)",
      "13 - (11 * (6 - 7))",
      "(13 + 11) / (7 - 6)",
      "13 - (11 / (6 - 7))",
      "11 + (13 / (7 - 6))",
      "(13 * (7 - 6)) + 11",
      "13 - ((6 - 7) * 11)",
      "11 - (13 / (6 - 7))",
      "(13 / (7 - 6)) + 11",
      "13 + ((7 - 6) * 11)",
      "((7 - 6) * 13) + 11"
    ]
  },
  "6 7 12 12": {
    "cards": "6 7 12 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(12 + 12) / (7 - 6)",
      "12 + ((7 - 6) * 12)",
      "(12 + 12) * (7 - 6)",
      "12 - (12 / (6 - 7))",
      "(12 / (7 - 6)) + 12",
      "(7 - 6) * (12 + 12)",
      "12 - ((6 - 7) * 12)",
      "12 - (12 * (6 - 7))",
      "12 + (12 / (7 - 6))",
      "(12 * (7 - 6)) + 12",
      "((7 - 6) * 12) + 12",
      "12 + (12 * (7 - 6))"
    ]
  },
  "6 7 12 13": {
    "cards": "6 7 12 13",
    "has_solution": "Y",
    "num_solutions": 92,
    "solutions": [
      "12 - ((7 - 6) - 13)",
      "((12 + 6) + 13) - 7",
      "13 + ((6 + 12) - 7)",
      "12 - (7 - (13 + 6))",
      "(6 + (12 + 13)) - 7",
      "((12 - 7) + 6) + 13",
      "((6 + 12) + 13) - 7",
      "(13 + (6 - 7)) + 12",
      "(13 - 7) + (12 + 6)",
      "((13 - 7) * 6) - 12",
      "(6 - (7 - 12)) + 13",
      "(6 - 7) + (12 + 13)",
      "((13 - 7) + 6) + 12",
      "13 - (7 - (12 + 6))",
      "12 + ((13 + 6) - 7)",
      "((12 + 13) - 7) + 6",
      "(12 + (6 - 7)) + 13",
      "(6 * (13 - 7)) - 12",
      "(12 + (6 + 13)) - 7",
      "6 - (7 - (12 + 13))",
      "(13 + (12 + 6)) - 7",
      "12 + ((6 - 7) + 13)",
      "6 + (13 - (7 - 12))",
      "(13 + 12) - (7 - 6)",
      "13 + ((6 - 7) + 12)",
      "((13 + 6) - 7) + 12",
      "(6 - 7) + (13 + 12)",
      "12 + (13 + (6 - 7))",
      "13 - ((7 - 6) - 12)",
      "6 - ((7 - 12) - 13)",
      "6 + (12 + (13 - 7))",
      "((6 - 7) + 13) + 12",
      "((12 - 7) + 13) + 6",
      "6 - ((7 - 13) - 12)",
      "13 + ((12 + 6) - 7)",
      "6 - (7 - (13 + 12))",
      "((12 + 6) - 7) + 13",
      "12 + (13 - (7 - 6))",
      "6 + (13 + (12 - 7))",
      "13 - ((7 - 12) - 6)",
      "12 + ((6 + 13) - 7)",
      "(6 + 12) + (13 - 7)",
      "6 + ((12 + 13) - 7)",
      "((6 + 13) - 7) + 12",
      "13 + (12 + (6 - 7))",
      "((12 + 13) + 6) - 7",
      "(6 + 13) - (7 - 12)",
      "(12 - 7) + (6 + 13)",
      "(13 - 7) + (6 + 12)",
      "13 - (7 - (6 + 12))",
      "12 - ((7 - 13) - 6)",
      "(13 + (6 + 12)) - 7",
      "((13 - 7) + 12) + 6",
      "(12 - (7 - 13)) + 6",
      "((6 - 7) + 12) + 13",
      "(6 + (12 - 7)) + 13",
      "(13 + (12 - 7)) + 6",
      "12 + ((13 - 7) + 6)",
      "(13 - (7 - 12)) + 6",
      "(6 - (7 - 13)) + 12",
      "((13 + 12) + 6) - 7",
      "(12 + (13 - 7)) + 6",
      "(13 + 6) - (7 - 12)",
      "(12 + 6) + (13 - 7)",
      "13 + (6 + (12 - 7))",
      "12 - (7 - (6 + 13))",
      "(12 + 13) + (6 - 7)",
      "13 + (6 - (7 - 12))",
      "6 + (12 - (7 - 13))",
      "6 + ((13 - 7) + 12)",
      "13 + (12 - (7 - 6))",
      "(13 + 12) + (6 - 7)",
      "(13 - (7 - 6)) + 12",
      "(6 + (13 - 7)) + 12",
      "6 + ((12 - 7) + 13)",
      "((13 + 6) + 12) - 7",
      "12 + (6 + (13 - 7))",
      "12 + (6 - (7 - 13))",
      "(6 + (13 + 12)) - 7",
      "(6 + 13) + (12 - 7)",
      "((13 + 12) - 7) + 6",
      "(6 + 12) - (7 - 13)",
      "13 + ((12 - 7) + 6)",
      "((6 + 13) + 12) - 7",
      "(12 - 7) + (13 + 6)",
      "(12 + 13) - (7 - 6)",
      "(13 + 6) + (12 - 7)",
      "6 + ((13 + 12) - 7)",
      "(12 + 6) - (7 - 13)",
      "(12 - (7 - 6)) + 13",
      "((6 + 12) - 7) + 13",
      "(12 + (13 + 6)) - 7"
    ]
  },
  "6 7 13 13": {
    "cards": "6 7 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 8 8 8": {
    "cards": "6 8 8 8",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(8 * (8 - 6)) + 8",
      "8 + (8 * (8 - 6))",
      "((8 - 6) * 8) + 8",
      "8 - ((6 - 8) * 8)",
      "8 - (8 * (6 - 8))",
      "8 + ((8 - 6) * 8)"
    ]
  },
  "6 8 8 9": {
    "cards": "6 8 8 9",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "9 / (6 / (8 + 8))",
      "9 * ((8 + 8) / 6)",
      "(9 / 6) * (8 + 8)",
      "(8 * 9) - (8 * 6)",
      "(8 * 9) - (6 * 8)",
      "(9 * (8 + 8)) / 6",
      "((8 + 8) / 6) * 9",
      "(8 + 8) * (9 / 6)",
      "(9 * 8) - (6 * 8)",
      "(8 + 8) / (6 / 9)",
      "(9 * 8) - (8 * 6)",
      "((8 + 8) * 9) / 6"
    ]
  },
  "6 8 8 10": {
    "cards": "6 8 8 10",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "((8 + 10) / 6) * 8",
      "8 * ((10 + 8) / 6)",
      "8 / (6 / (10 + 8))",
      "(6 / (10 - 8)) * 8",
      "((10 + 8) * 8) / 6",
      "(8 / 6) * (8 + 10)",
      "6 * (8 / (10 - 8))",
      "6 / ((10 - 8) / 8)",
      "(8 * (8 + 10)) / 6",
      "(8 + 10) * (8 / 6)",
      "((10 + 8) / 6) * 8",
      "8 / (6 / (8 + 10))",
      "8 * ((8 + 10) / 6)",
      "8 * (6 / (10 - 8))",
      "((8 + 10) * 8) / 6",
      "(10 + 8) / (6 / 8)",
      "(6 * 8) / (10 - 8)",
      "(8 * 6) / (10 - 8)",
      "((10 - 6) * 8) - 8",
      "(10 + 8) * (8 / 6)",
      "(8 * (10 - 6)) - 8",
      "(8 * (10 + 8)) / 6",
      "(8 / (10 - 8)) * 6",
      "(8 / 6) * (10 + 8)",
      "8 / ((10 - 8) / 6)",
      "(8 + 10) / (6 / 8)"
    ]
  },
  "6 8 8 11": {
    "cards": "6 8 8 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * (8 - (11 - 6))",
      "((8 - 11) + 6) * 8",
      "8 * ((6 - 11) + 8)",
      "((6 + 8) - 11) * 8",
      "(6 - (11 - 8)) * 8",
      "(6 + (8 - 11)) * 8",
      "((6 - 11) + 8) * 8",
      "8 * ((6 + 8) - 11)",
      "8 * (6 - (11 - 8))",
      "(8 + (6 - 11)) * 8",
      "8 * (8 + (6 - 11))",
      "(8 - (11 - 6)) * 8",
      "8 * ((8 - 11) + 6)",
      "8 * ((8 + 6) - 11)",
      "((8 + 6) - 11) * 8",
      "8 * (6 + (8 - 11))"
    ]
  },
  "6 8 8 12": {
    "cards": "6 8 8 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "((12 / 6) * 8) + 8",
      "8 + (8 * (12 / 6))",
      "6 * ((8 + 8) - 12)",
      "((8 + 8) - 12) * 6",
      "(12 * (8 / 6)) + 8",
      "(12 / (6 / 8)) + 8",
      "((8 * 12) / 6) + 8",
      "8 + ((8 / 6) * 12)",
      "(8 + (8 - 12)) * 6",
      "((8 - 12) + 8) * 6",
      "(8 - (12 - 8)) * 6",
      "8 + ((8 * 12) / 6)",
      "(8 / (6 / 12)) + 8",
      "6 * ((8 - 12) + 8)",
      "8 + (12 / (6 / 8))",
      "((8 / 6) * 12) + 8",
      "8 + (12 * (8 / 6))",
      "6 * (8 + (8 - 12))",
      "8 + ((12 * 8) / 6)",
      "8 + (8 / (6 / 12))",
      "6 * (8 - (12 - 8))",
      "(8 * (12 / 6)) + 8",
      "8 + ((12 / 6) * 8)",
      "((12 * 8) / 6) + 8"
    ]
  },
  "6 8 8 13": {
    "cards": "6 8 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 8 9 9": {
    "cards": "6 8 9 9",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(9 + 9) / (6 / 8)",
      "(8 / (9 - 6)) * 9",
      "(8 * 9) / (9 - 6)",
      "(9 * 8) / (9 - 6)",
      "9 * (8 / (9 - 6))",
      "(8 / 6) * (9 + 9)",
      "((9 + 9) * 8) / 6",
      "(9 / (9 - 6)) * 8",
      "8 / (6 / (9 + 9))",
      "(9 + 9) * (8 / 6)",
      "8 * ((9 + 9) / 6)",
      "9 / ((9 - 6) / 8)",
      "(8 * (9 + 9)) / 6",
      "((9 + 9) / 6) * 8",
      "8 / ((9 - 6) / 9)",
      "8 * (9 / (9 - 6))"
    ]
  },
  "6 8 9 10": {
    "cards": "6 8 9 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(9 * (10 - 8)) + 6",
      "6 - ((8 - 10) * 9)",
      "6 - (9 * (8 - 10))",
      "6 + (9 * (10 - 8))",
      "6 + ((10 - 8) * 9)",
      "((10 - 8) * 9) + 6"
    ]
  },
  "6 8 9 11": {
    "cards": "6 8 9 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "8 / ((11 - 9) / 6)",
      "(6 * 8) / (11 - 9)",
      "(8 * 6) / (11 - 9)",
      "(6 / (11 - 9)) * 8",
      "6 / ((11 - 9) / 8)",
      "6 * (8 / (11 - 9))",
      "8 * (6 / (11 - 9))",
      "(8 / (11 - 9)) * 6"
    ]
  },
  "6 8 9 12": {
    "cards": "6 8 9 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "8 * ((6 - 12) + 9)",
      "(6 - (12 - 9)) * 8",
      "12 + ((9 * 8) / 6)",
      "12 + ((8 / 6) * 9)",
      "12 + (9 * (8 / 6))",
      "(8 * (9 / 6)) + 12",
      "12 + ((8 * 9) / 6)",
      "((9 + 6) - 12) * 8",
      "((6 - 12) + 9) * 8",
      "((9 / 6) * 8) + 12",
      "(9 - (12 - 6)) * 8",
      "(9 + (6 - 12)) * 8",
      "8 * ((9 - 12) + 6)",
      "((9 - 12) + 6) * 8",
      "((8 * 9) / 6) + 12",
      "8 * (6 + (9 - 12))",
      "12 + (9 / (6 / 8))",
      "((9 * 8) / 6) + 12",
      "8 * ((6 + 9) - 12)",
      "8 * (9 - (12 - 6))",
      "12 + (8 * (9 / 6))",
      "(9 * (8 / 6)) + 12",
      "(8 / (6 / 9)) + 12",
      "((6 + 9) - 12) * 8",
      "8 * (9 + (6 - 12))",
      "(6 + (9 - 12)) * 8",
      "12 + (8 / (6 / 9))",
      "((8 / 6) * 9) + 12",
      "8 * ((9 + 6) - 12)",
      "12 + ((9 / 6) * 8)",
      "(9 / (6 / 8)) + 12",
      "8 * (6 - (12 - 9))"
    ]
  },
  "6 8 9 13": {
    "cards": "6 8 9 13",
    "has_solution": "Y",
    "num_solutions": 106,
    "solutions": [
      "(9 + 13) + (8 - 6)",
      "((9 + 8) - 6) + 13",
      "(8 + 9) - (6 - 13)",
      "(8 - (6 - 13)) + 9",
      "(8 + 13) - (6 - 9)",
      "9 - ((6 - 13) - 8)",
      "8 + (9 - (6 - 13))",
      "6 * (9 + (8 - 13))",
      "(8 + 13) + (9 - 6)",
      "9 + (13 + (8 - 6))",
      "((13 + 8) - 6) + 9",
      "6 * (9 - (13 - 8))",
      "(13 + (8 - 6)) + 9",
      "(9 + (13 - 6)) + 8",
      "(13 + 9) - (6 - 8)",
      "(9 + 13) - (6 - 8)",
      "9 + ((8 + 13) - 6)",
      "13 - ((6 - 9) - 8)",
      "((9 + 8) + 13) - 6",
      "9 + (8 + (13 - 6))",
      "(8 + 9) + (13 - 6)",
      "13 + (9 + (8 - 6))",
      "(9 + 8) + (13 - 6)",
      "((13 + 8) + 9) - 6",
      "(13 + 9) + (8 - 6)",
      "((13 - 6) + 8) + 9",
      "(8 + (13 + 9)) - 6",
      "8 + (13 - (6 - 9))",
      "13 + (8 - (6 - 9))",
      "13 + ((8 + 9) - 6)",
      "((13 - 6) + 9) + 8",
      "9 - (6 - (13 + 8))",
      "(13 + 8) - (6 - 9)",
      "(8 + (9 - 13)) * 6",
      "(9 - 6) + (8 + 13)",
      "(13 - (6 - 8)) + 9",
      "13 + ((9 + 8) - 6)",
      "(9 + (8 - 6)) + 13",
      "(8 - 6) + (9 + 13)",
      "((9 - 13) + 8) * 6",
      "((8 + 9) - 6) + 13",
      "9 + ((13 - 6) + 8)",
      "9 - ((6 - 8) - 13)",
      "8 - ((6 - 9) - 13)",
      "((8 - 13) + 9) * 6",
      "((8 - 6) + 13) + 9",
      "(8 - (6 - 9)) + 13",
      "(9 - (13 - 8)) * 6",
      "((9 - 6) + 8) + 13",
      "9 + (8 - (6 - 13))",
      "(9 - (6 - 13)) + 8",
      "8 - (6 - (13 + 9))",
      "((9 - 6) + 13) + 8",
      "(13 + (9 - 6)) + 8",
      "(8 + (9 - 6)) + 13",
      "6 * ((8 - 13) + 9)",
      "(13 - 6) + (8 + 9)",
      "(9 + (8 + 13)) - 6",
      "8 + (9 + (13 - 6))",
      "(8 - 6) + (13 + 9)",
      "(8 - (13 - 9)) * 6",
      "(9 + (13 + 8)) - 6",
      "(8 + (13 - 6)) + 9",
      "6 * (8 + (9 - 13))",
      "((8 + 13) - 6) + 9",
      "13 + ((8 - 6) + 9)",
      "(13 - 6) + (9 + 8)",
      "13 + ((9 - 6) + 8)",
      "8 - ((6 - 13) - 9)",
      "8 + (13 + (9 - 6))",
      "8 + ((9 - 6) + 13)",
      "13 - (6 - (8 + 9))",
      "(13 + 8) + (9 - 6)",
      "8 + ((13 + 9) - 6)",
      "((13 + 9) - 6) + 8",
      "((8 - 6) + 9) + 13",
      "(9 + (8 - 13)) * 6",
      "6 * ((9 - 13) + 8)",
      "13 + (9 - (6 - 8))",
      "8 + ((9 + 13) - 6)",
      "((13 + 9) + 8) - 6",
      "9 + (13 - (6 - 8))",
      "((9 + 13) - 6) + 8",
      "((8 + 9) - 13) * 6",
      "(13 + (9 + 8)) - 6",
      "8 - (6 - (9 + 13))",
      "13 - (6 - (9 + 8))",
      "9 + ((8 - 6) + 13)",
      "8 + ((13 - 6) + 9)",
      "(13 - (6 - 9)) + 8",
      "9 - (6 - (8 + 13))",
      "13 - ((6 - 8) - 9)",
      "6 * (8 - (13 - 9))",
      "(13 + (8 + 9)) - 6",
      "6 * ((9 + 8) - 13)",
      "((9 + 8) - 13) * 6",
      "(9 - 6) + (13 + 8)",
      "((8 + 13) + 9) - 6",
      "9 + ((13 + 8) - 6)",
      "(9 + 8) - (6 - 13)",
      "6 * ((8 + 9) - 13)",
      "((8 + 9) + 13) - 6",
      "(8 + (9 + 13)) - 6",
      "(9 - (6 - 8)) + 13",
      "((9 + 13) + 8) - 6",
      "13 + (8 + (9 - 6))"
    ]
  },
  "6 8 10 10": {
    "cards": "6 8 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 8 10 11": {
    "cards": "6 8 10 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((11 - 8) * 10) - 6",
      "(10 * (11 - 8)) - 6"
    ]
  },
  "6 8 10 12": {
    "cards": "6 8 10 12",
    "has_solution": "Y",
    "num_solutions": 128,
    "solutions": [
      "8 + ((12 + 10) - 6)",
      "10 + ((12 + 8) - 6)",
      "(8 + (10 + 12)) - 6",
      "(12 + 8) - (6 - 10)",
      "((10 + 12) - 6) + 8",
      "(12 * (10 + 6)) / 8",
      "(8 + 10) - (6 - 12)",
      "10 + (8 - (6 - 12))",
      "6 * (8 / (12 - 10))",
      "((8 + 12) - 6) + 10",
      "12 - (6 - (8 + 10))",
      "10 - (6 - (12 + 8))",
      "(12 - (6 - 8)) + 10",
      "(12 + (8 - 6)) + 10",
      "(8 * 12) / (10 - 6)",
      "(10 + 8) - (6 - 12)",
      "(12 * (6 + 10)) / 8",
      "(10 + (12 + 8)) - 6",
      "10 + (12 - (6 - 8))",
      "10 - ((6 - 8) - 12)",
      "12 / (8 / (6 + 10))",
      "(8 * 6) / (12 - 10)",
      "12 / ((10 - 6) / 8)",
      "12 - (6 - (10 + 8))",
      "12 + (10 - (6 - 8))",
      "12 + ((8 + 10) - 6)",
      "10 + (12 + (8 - 6))",
      "(6 * 8) / (12 - 10)",
      "(12 + 10) + (8 - 6)",
      "12 + (8 - (6 - 10))",
      "12 + ((10 - 8) * 6)",
      "(10 - 6) + (8 + 12)",
      "(8 / (10 - 6)) * 12",
      "(12 / 8) * (10 + 6)",
      "(10 + (12 - 6)) + 8",
      "(10 + 8) + (12 - 6)",
      "(12 + (8 + 10)) - 6",
      "((10 + 8) + 12) - 6",
      "((12 - 6) + 8) + 10",
      "8 - (6 - (12 + 10))",
      "12 * ((10 + 6) / 8)",
      "(12 - 6) + (10 + 8)",
      "12 * (8 / (10 - 6))",
      "(12 + 10) - (6 - 8)",
      "((10 + 12) + 8) - 6",
      "((12 + 10) - 6) + 8",
      "12 / (8 / (10 + 6))",
      "((12 + 8) + 10) - 6",
      "(8 + 12) + (10 - 6)",
      "12 + ((10 - 6) + 8)",
      "(10 - (6 - 8)) + 12",
      "12 - ((6 - 8) - 10)",
      "(8 - (6 - 12)) + 10",
      "((10 + 6) * 12) / 8",
      "10 + ((8 - 6) + 12)",
      "6 / ((12 - 10) / 8)",
      "(10 + (8 + 12)) - 6",
      "((10 + 6) / 8) * 12",
      "8 * (12 / (10 - 6))",
      "(12 + (10 - 6)) + 8",
      "(8 - 6) + (12 + 10)",
      "(8 + (12 + 10)) - 6",
      "((12 - 6) + 10) + 8",
      "(6 * (10 - 8)) + 12",
      "(8 - 6) + (10 + 12)",
      "8 - ((6 - 10) - 12)",
      "8 / ((12 - 10) / 6)",
      "12 + (6 * (10 - 8))",
      "(10 - (6 - 12)) + 8",
      "(12 * 8) / (10 - 6)",
      "10 - ((6 - 12) - 8)",
      "8 + ((10 + 12) - 6)",
      "((10 - 6) + 8) + 12",
      "8 + (10 + (12 - 6))",
      "(8 + (12 - 6)) + 10",
      "10 - (6 - (8 + 12))",
      "(12 / (10 - 6)) * 8",
      "12 - ((8 - 10) * 6)",
      "(8 + 12) - (6 - 10)",
      "8 / ((10 - 6) / 12)",
      "(8 + (10 - 6)) + 12",
      "(10 + (8 - 6)) + 12",
      "(12 - 6) + (8 + 10)",
      "(12 + (10 + 8)) - 6",
      "((8 + 12) + 10) - 6",
      "((12 + 10) + 8) - 6",
      "((12 + 8) - 6) + 10",
      "10 + (8 + (12 - 6))",
      "((8 + 10) - 6) + 12",
      "12 + ((10 + 8) - 6)",
      "8 + (10 - (6 - 12))",
      "12 + ((8 - 6) + 10)",
      "(12 + 8) + (10 - 6)",
      "8 + ((10 - 6) + 12)",
      "12 - ((6 - 10) - 8)",
      "8 * (6 / (12 - 10))",
      "(10 - 6) + (12 + 8)",
      "(8 / (12 - 10)) * 6",
      "12 - (6 * (8 - 10))",
      "((8 - 6) + 12) + 10",
      "8 + (12 + (10 - 6))",
      "(6 + 10) * (12 / 8)",
      "(6 + 10) / (8 / 12)",
      "(10 + 12) + (8 - 6)",
      "(10 + 6) * (12 / 8)",
      "((6 + 10) * 12) / 8",
      "((8 - 6) + 10) + 12",
      "8 + ((12 - 6) + 10)",
      "(8 + 10) + (12 - 6)",
      "(10 + 6) / (8 / 12)",
      "((10 + 8) - 6) + 12",
      "8 + (12 - (6 - 10))",
      "8 - (6 - (10 + 12))",
      "((6 + 10) / 8) * 12",
      "((10 - 8) * 6) + 12",
      "(8 - (6 - 10)) + 12",
      "12 + (10 + (8 - 6))",
      "(6 / (12 - 10)) * 8",
      "12 * ((6 + 10) / 8)",
      "12 + (8 + (10 - 6))",
      "(10 + 12) - (6 - 8)",
      "10 + ((12 - 6) + 8)",
      "(12 - (6 - 10)) + 8",
      "((10 - 6) + 12) + 8",
      "8 - ((6 - 12) - 10)",
      "((8 + 10) + 12) - 6",
      "(12 / 8) * (6 + 10)",
      "10 + ((8 + 12) - 6)"
    ]
  },
  "6 8 10 13": {
    "cards": "6 8 10 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * (6 - (13 - 10))",
      "8 * ((10 + 6) - 13)",
      "8 * (10 + (6 - 13))",
      "8 * ((10 - 13) + 6)",
      "8 * (6 + (10 - 13))",
      "(10 + (6 - 13)) * 8",
      "(6 + (10 - 13)) * 8",
      "8 * (10 - (13 - 6))",
      "(10 - (13 - 6)) * 8",
      "((10 + 6) - 13) * 8",
      "(6 - (13 - 10)) * 8",
      "8 * ((6 - 13) + 10)",
      "((6 + 10) - 13) * 8",
      "((6 - 13) + 10) * 8",
      "((10 - 13) + 6) * 8",
      "8 * ((6 + 10) - 13)"
    ]
  },
  "6 8 11 11": {
    "cards": "6 8 11 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "((11 + 8) + 11) - 6",
      "11 + ((11 + 8) - 6)",
      "(11 + (8 + 11)) - 6",
      "11 - ((6 - 8) - 11)",
      "(11 + (11 - 6)) + 8",
      "(8 + 11) + (11 - 6)",
      "(11 + (11 + 8)) - 6",
      "((8 + 11) - 6) + 11",
      "8 - (6 - (11 + 11))",
      "((11 - 6) + 8) + 11",
      "((8 + 11) + 11) - 6",
      "(11 - 6) + (11 + 8)",
      "((11 + 11) - 6) + 8",
      "(11 + (8 - 6)) + 11",
      "8 + ((11 - 6) + 11)",
      "(8 - 6) + (11 + 11)",
      "8 + (11 - (6 - 11))",
      "(8 - (6 - 11)) + 11",
      "8 + (11 + (11 - 6))",
      "11 - (6 - (11 + 8))",
      "11 - ((6 - 11) - 8)",
      "(8 + (11 - 6)) + 11",
      "(8 + 11) - (6 - 11)",
      "(11 + 8) + (11 - 6)",
      "((11 - 6) + 11) + 8",
      "((11 + 8) - 6) + 11",
      "(11 - (6 - 8)) + 11",
      "((8 - 6) + 11) + 11",
      "8 + ((11 + 11) - 6)",
      "(11 + 11) - (6 - 8)",
      "(11 - (6 - 11)) + 8",
      "11 - (6 - (8 + 11))",
      "11 + ((11 - 6) + 8)",
      "11 + (11 - (6 - 8))",
      "11 + (8 - (6 - 11))",
      "11 + ((8 + 11) - 6)",
      "11 + (11 + (8 - 6))",
      "((11 + 11) + 8) - 6",
      "(11 + 11) + (8 - 6)",
      "(11 - 6) + (8 + 11)",
      "8 - ((6 - 11) - 11)",
      "11 + ((8 - 6) + 11)",
      "(11 + 8) - (6 - 11)",
      "11 + (8 + (11 - 6))",
      "(8 + (11 + 11)) - 6"
    ]
  },
  "6 8 11 12": {
    "cards": "6 8 11 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 * 6) / (11 - 8)",
      "12 / ((11 - 8) / 6)",
      "(6 / (11 - 8)) * 12",
      "(6 * 12) / (11 - 8)",
      "12 * (6 / (11 - 8))",
      "6 * (12 / (11 - 8))",
      "(12 / (11 - 8)) * 6",
      "6 / ((11 - 8) / 12)"
    ]
  },
  "6 8 11 13": {
    "cards": "6 8 11 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(6 * 8) - (11 + 13)",
      "6 / ((13 - 11) / 8)",
      "((6 * 8) - 11) - 13",
      "(8 * 6) - (11 + 13)",
      "((8 * 6) - 13) - 11",
      "(8 * 6) / (13 - 11)",
      "8 * (6 / (13 - 11))",
      "((8 * 6) - 11) - 13",
      "(6 * 8) - (13 + 11)",
      "(8 * 6) - (13 + 11)",
      "6 * (8 / (13 - 11))",
      "8 / ((13 - 11) / 6)",
      "(6 / (13 - 11)) * 8",
      "((6 * 8) - 13) - 11",
      "(6 * 8) / (13 - 11)",
      "(8 / (13 - 11)) * 6"
    ]
  },
  "6 8 12 12": {
    "cards": "6 8 12 12",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "((6 + 8) - 12) * 12",
      "(12 - 6) * (12 - 8)",
      "12 * (8 - (12 - 6))",
      "((8 + 6) - 12) * 12",
      "12 * ((6 + 8) - 12)",
      "(12 * 8) - (12 * 6)",
      "6 + ((12 / 8) * 12)",
      "(6 - 12) * (8 - 12)",
      "((8 - 12) + 6) * 12",
      "((6 * 8) - 12) - 12",
      "6 + ((12 * 12) / 8)",
      "(12 * 8) - (6 * 12)",
      "(6 * 8) - (12 + 12)",
      "(8 + (6 - 12)) * 12",
      "((12 / 8) * 12) + 6",
      "12 * ((6 - 12) + 8)",
      "12 * (6 - (12 - 8))",
      "(6 - (12 - 8)) * 12",
      "((12 * 12) / 8) + 6",
      "(12 / (8 / 12)) + 6",
      "(8 - (12 - 6)) * 12",
      "(8 * 12) - (6 * 12)",
      "(6 + (8 - 12)) * 12",
      "12 * ((8 - 12) + 6)",
      "12 * ((8 + 6) - 12)",
      "(8 - 12) * (6 - 12)",
      "(12 * (12 / 8)) + 6",
      "(12 - 8) * (12 - 6)",
      "(8 * 12) - (12 * 6)",
      "((6 - 12) + 8) * 12",
      "6 + (12 * (12 / 8))",
      "12 * (6 + (8 - 12))",
      "(8 * 6) - (12 + 12)",
      "6 + (12 / (8 / 12))",
      "((8 * 6) - 12) - 12",
      "12 * (8 + (6 - 12))"
    ]
  },
  "6 8 12 13": {
    "cards": "6 8 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 8 13 13": {
    "cards": "6 8 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "13 + ((13 + 6) - 8)",
      "6 + (13 + (13 - 8))",
      "13 - ((8 - 6) - 13)",
      "13 - (8 - (6 + 13))",
      "(13 - (8 - 6)) + 13",
      "13 - ((8 - 13) - 6)",
      "13 + (13 + (6 - 8))",
      "(13 + (6 - 8)) + 13",
      "(6 + (13 + 13)) - 8",
      "(6 + 13) + (13 - 8)",
      "13 + (6 + (13 - 8))",
      "6 - (8 - (13 + 13))",
      "13 + (6 - (8 - 13))",
      "13 + (13 - (8 - 6))",
      "6 + (13 - (8 - 13))",
      "(13 + (6 + 13)) - 8",
      "((13 - 8) + 6) + 13",
      "((6 - 8) + 13) + 13",
      "6 - ((8 - 13) - 13)",
      "(6 + 13) - (8 - 13)",
      "((13 + 13) + 6) - 8",
      "((13 + 6) - 8) + 13",
      "((13 + 13) - 8) + 6",
      "13 + ((6 - 8) + 13)",
      "13 - (8 - (13 + 6))",
      "13 + ((6 + 13) - 8)",
      "(13 + 13) + (6 - 8)",
      "((13 - 8) + 13) + 6",
      "((6 + 13) - 8) + 13",
      "(6 - (8 - 13)) + 13",
      "(13 + 13) - (8 - 6)",
      "6 + ((13 - 8) + 13)",
      "(13 - 8) + (13 + 6)",
      "(6 + (13 - 8)) + 13",
      "6 + ((13 + 13) - 8)",
      "(6 - 8) + (13 + 13)",
      "((13 + 6) + 13) - 8",
      "(13 - 8) + (6 + 13)",
      "(13 + (13 + 6)) - 8",
      "(13 + 6) + (13 - 8)",
      "(13 + (13 - 8)) + 6",
      "(13 - (8 - 13)) + 6",
      "(13 + 6) - (8 - 13)",
      "13 + ((13 - 8) + 6)",
      "((6 + 13) + 13) - 8"
    ]
  },
  "6 9 9 9": {
    "cards": "6 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 9 9 10": {
    "cards": "6 9 9 10",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((9 / 6) * 10) + 9",
      "9 + ((9 / 6) * 10)",
      "9 + (10 * (9 / 6))",
      "9 + ((9 * 10) / 6)",
      "9 + (9 / (6 / 10))",
      "((10 * 9) / 6) + 9",
      "((9 * 10) / 6) + 9",
      "(10 * (9 / 6)) + 9",
      "9 + ((10 * 9) / 6)",
      "((10 / 6) * 9) + 9",
      "(9 / (6 / 10)) + 9",
      "9 + (10 / (6 / 9))",
      "(10 / (6 / 9)) + 9",
      "(9 * (10 / 6)) + 9",
      "9 + ((10 / 6) * 9)",
      "9 + (9 * (10 / 6))"
    ]
  },
  "6 9 9 11": {
    "cards": "6 9 9 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "6 + (9 * (11 - 9))",
      "6 - (9 * (9 - 11))",
      "((9 - 6) * 11) - 9",
      "6 + ((11 - 9) * 9)",
      "6 - ((9 - 11) * 9)",
      "(11 * (9 - 6)) - 9",
      "(9 * (11 - 9)) + 6",
      "((11 - 9) * 9) + 6"
    ]
  },
  "6 9 9 12": {
    "cards": "6 9 9 12",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(12 - (6 - 9)) + 9",
      "(9 - (6 - 9)) + 12",
      "((12 - 6) + 9) + 9",
      "9 + ((9 - 6) + 12)",
      "9 - ((6 - 9) - 12)",
      "(9 + 9) + (12 - 6)",
      "(9 + 12) - (6 - 9)",
      "9 + (12 - (6 - 9))",
      "9 + (9 - (6 - 12))",
      "(12 + (9 + 9)) - 6",
      "9 - (6 - (9 + 12))",
      "((9 - 6) + 12) + 9",
      "(12 + (9 - 6)) + 9",
      "(12 + 9) + (9 - 6)",
      "9 + ((12 + 9) - 6)",
      "(9 + (12 - 6)) + 9",
      "12 + ((9 - 6) + 9)",
      "12 + ((9 + 9) - 6)",
      "9 - (6 - (12 + 9))",
      "((9 - 6) + 9) + 12",
      "(9 + 12) + (9 - 6)",
      "(9 - 6) + (9 + 12)",
      "9 + ((12 - 6) + 9)",
      "12 + (9 - (6 - 9))",
      "(9 + 9) - (6 - 12)",
      "9 + (9 + (12 - 6))",
      "(12 + 9) - (6 - 9)",
      "(9 + (12 + 9)) - 6",
      "(9 + (9 + 12)) - 6",
      "(9 - (6 - 12)) + 9",
      "((9 + 9) + 12) - 6",
      "9 + (12 + (9 - 6))",
      "((9 + 12) - 6) + 9",
      "((9 + 12) + 9) - 6",
      "(9 - 6) + (12 + 9)",
      "(12 - 6) + (9 + 9)",
      "(9 + (9 - 6)) + 12",
      "12 - (6 - (9 + 9))",
      "9 - ((6 - 12) - 9)",
      "12 + (9 + (9 - 6))",
      "((9 + 9) - 6) + 12",
      "9 + ((9 + 12) - 6)",
      "((12 + 9) + 9) - 6",
      "((12 + 9) - 6) + 9",
      "12 - ((6 - 9) - 9)"
    ]
  },
  "6 9 9 13": {
    "cards": "6 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 9 10 10": {
    "cards": "6 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 9 10 11": {
    "cards": "6 9 10 11",
    "has_solution": "Y",
    "num_solutions": 94,
    "solutions": [
      "9 + (10 - (6 - 11))",
      "((11 - 6) + 9) + 10",
      "((9 + 10) - 6) + 11",
      "(10 - 6) + (9 + 11)",
      "((11 + 9) + 10) - 6",
      "((9 - 6) + 11) + 10",
      "((11 + 9) - 6) + 10",
      "(9 - 6) + (11 + 10)",
      "((9 + 10) + 11) - 6",
      "(9 - (6 - 10)) + 11",
      "((11 + 10) + 9) - 6",
      "(9 + 11) - (6 - 10)",
      "(11 + 9) - (6 - 10)",
      "10 + ((9 + 11) - 6)",
      "((11 - 6) + 10) + 9",
      "11 + ((10 + 9) - 6)",
      "9 - (6 - (11 + 10))",
      "(9 + 11) + (10 - 6)",
      "9 + ((11 - 6) + 10)",
      "((9 + 11) + 10) - 6",
      "(10 + (9 + 11)) - 6",
      "9 - ((6 - 11) - 10)",
      "(11 + 10) + (9 - 6)",
      "9 + ((11 + 10) - 6)",
      "10 + (11 + (9 - 6))",
      "(9 + 10) - (6 - 11)",
      "((10 - 6) + 11) + 9",
      "(10 + 11) + (9 - 6)",
      "11 + ((9 - 6) + 10)",
      "((10 + 11) + 9) - 6",
      "10 - (6 - (9 + 11))",
      "(10 + 9) + (11 - 6)",
      "(11 - 6) + (9 + 10)",
      "10 + ((11 + 9) - 6)",
      "((10 - 6) + 9) + 11",
      "(11 - 6) + (10 + 9)",
      "((10 + 11) - 6) + 9",
      "(11 - (6 - 9)) + 10",
      "(11 - (6 - 10)) + 9",
      "(10 - (6 - 9)) + 11",
      "(10 * 9) - (11 * 6)",
      "10 + (9 + (11 - 6))",
      "11 - (6 - (10 + 9))",
      "10 - ((6 - 9) - 11)",
      "10 - (6 - (11 + 9))",
      "(11 + (9 + 10)) - 6",
      "(9 + (10 + 11)) - 6",
      "((9 + 11) - 6) + 10",
      "11 + (10 - (6 - 9))",
      "10 - ((6 - 11) - 9)",
      "9 + (11 - (6 - 10))",
      "11 + (9 - (6 - 10))",
      "(10 + 9) - (6 - 11)",
      "(10 - (6 - 11)) + 9",
      "11 + (10 + (9 - 6))",
      "(10 - 6) + (11 + 9)",
      "10 + ((9 - 6) + 11)",
      "11 + ((9 + 10) - 6)",
      "((10 + 9) - 6) + 11",
      "(9 - (6 - 11)) + 10",
      "(9 - 6) + (10 + 11)",
      "(9 * 10) - (6 * 11)",
      "(9 + (11 + 10)) - 6",
      "11 - ((6 - 10) - 9)",
      "(9 + (11 - 6)) + 10",
      "(11 + (9 - 6)) + 10",
      "((11 + 10) - 6) + 9",
      "(11 + (10 + 9)) - 6",
      "11 + (9 + (10 - 6))",
      "(10 * 9) - (6 * 11)",
      "10 + (9 - (6 - 11))",
      "(11 + 9) + (10 - 6)",
      "11 - (6 - (9 + 10))",
      "(11 + (10 - 6)) + 9",
      "((9 - 6) + 10) + 11",
      "9 - (6 - (10 + 11))",
      "((10 + 9) + 11) - 6",
      "(11 + 10) - (6 - 9)",
      "(9 * 10) - (11 * 6)",
      "(10 + (11 + 9)) - 6",
      "11 - ((6 - 9) - 10)",
      "(9 + (10 - 6)) + 11",
      "10 + (11 - (6 - 9))",
      "10 + ((11 - 6) + 9)",
      "9 + (10 + (11 - 6))",
      "(9 + 10) + (11 - 6)",
      "9 + ((10 - 6) + 11)",
      "9 - ((6 - 10) - 11)",
      "9 + (11 + (10 - 6))",
      "9 + ((10 + 11) - 6)",
      "(10 + 11) - (6 - 9)",
      "(10 + (11 - 6)) + 9",
      "11 + ((10 - 6) + 9)",
      "(10 + (9 - 6)) + 11"
    ]
  },
  "6 9 10 12": {
    "cards": "6 9 10 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "((10 - 6) * 9) - 12",
      "6 - (9 * (10 - 12))",
      "6 + (9 * (12 - 10))",
      "6 + ((12 - 10) * 9)",
      "((12 - 9) * 10) - 6",
      "((12 - 10) * 9) + 6",
      "(9 * (12 - 10)) + 6",
      "6 - ((10 - 12) * 9)",
      "(10 * (12 - 9)) - 6",
      "(9 * (10 - 6)) - 12"
    ]
  },
  "6 9 10 13": {
    "cards": "6 9 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 9 11 11": {
    "cards": "6 9 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 9 11 12": {
    "cards": "6 9 11 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((11 - 9) * 6) + 12",
      "(6 * (11 - 9)) + 12",
      "12 + ((11 - 9) * 6)",
      "12 - (6 * (9 - 11))",
      "12 - ((9 - 11) * 6)",
      "12 + (6 * (11 - 9))"
    ]
  },
  "6 9 11 13": {
    "cards": "6 9 11 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((13 - 11) * 9) + 6",
      "6 - ((11 - 13) * 9)",
      "6 - (9 * (11 - 13))",
      "6 + (9 * (13 - 11))",
      "6 + ((13 - 11) * 9)",
      "(9 * (13 - 11)) + 6"
    ]
  },
  "6 9 12 12": {
    "cards": "6 9 12 12",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "12 / (9 / (6 + 12))",
      "6 / ((12 - 9) / 12)",
      "(12 * (9 - 6)) - 12",
      "((6 + 12) * 12) / 9",
      "((12 + 6) / 9) * 12",
      "12 * ((6 + 12) / 9)",
      "(6 / (12 - 9)) * 12",
      "((12 + 6) * 12) / 9",
      "(12 + 6) * (12 / 9)",
      "(12 / (12 - 9)) * 6",
      "(12 * 6) / (12 - 9)",
      "((9 - 6) * 12) - 12",
      "12 / (9 / (12 + 6))",
      "(6 + 12) * (12 / 9)",
      "6 * (12 / (12 - 9))",
      "(12 / 9) * (12 + 6)",
      "(6 + 12) / (9 / 12)",
      "(12 / 9) * (6 + 12)",
      "(6 * 12) / (12 - 9)",
      "12 * ((12 + 6) / 9)",
      "((6 + 12) / 9) * 12",
      "12 * (6 / (12 - 9))",
      "(12 * (6 + 12)) / 9",
      "12 / ((12 - 9) / 6)",
      "(12 * (12 + 6)) / 9",
      "(12 + 6) / (9 / 12)"
    ]
  },
  "6 9 12 13": {
    "cards": "6 9 12 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "(12 - 6) * (13 - 9)",
      "13 + ((12 / 6) + 9)",
      "12 * ((9 - 13) + 6)",
      "(13 + 9) + (12 / 6)",
      "9 + (13 + (12 / 6))",
      "12 * (6 - (13 - 9))",
      "13 + (9 + (12 / 6))",
      "(13 - 9) * (12 - 6)",
      "(9 - (13 - 6)) * 12",
      "(12 / 6) + (13 + 9)",
      "((12 / 6) + 9) + 13",
      "(6 - (13 - 9)) * 12",
      "(13 + (12 / 6)) + 9",
      "(9 + (12 / 6)) + 13",
      "12 * (9 - (13 - 6))",
      "((12 / 6) + 13) + 9",
      "((6 + 9) - 13) * 12",
      "12 * ((6 - 13) + 9)",
      "(6 + (9 - 13)) * 12",
      "(9 + 13) + (12 / 6)",
      "12 * ((9 + 6) - 13)",
      "((9 + 6) - 13) * 12",
      "12 * (9 + (6 - 13))",
      "(6 - 12) * (9 - 13)",
      "12 * (6 + (9 - 13))",
      "(12 / 6) + (9 + 13)",
      "9 + ((12 / 6) + 13)",
      "((9 - 13) + 6) * 12",
      "(9 - 13) * (6 - 12)",
      "(9 + (6 - 13)) * 12",
      "12 * ((6 + 9) - 13)",
      "((6 - 13) + 9) * 12"
    ]
  },
  "6 9 13 13": {
    "cards": "6 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 10 10 10": {
    "cards": "6 10 10 10",
    "has_solution": "Y",
    "num_solutions": 15,
    "solutions": [
      "(10 + (10 - 6)) + 10",
      "10 - (6 - (10 + 10))",
      "(10 + 10) + (10 - 6)",
      "((10 + 10) - 6) + 10",
      "10 + ((10 - 6) + 10)",
      "(10 + 10) - (6 - 10)",
      "10 + (10 + (10 - 6))",
      "10 - ((6 - 10) - 10)",
      "10 + (10 - (6 - 10))",
      "(10 + (10 + 10)) - 6",
      "10 + ((10 + 10) - 6)",
      "(10 - (6 - 10)) + 10",
      "((10 + 10) + 10) - 6",
      "(10 - 6) + (10 + 10)",
      "((10 - 6) + 10) + 10"
    ]
  },
  "6 10 10 11": {
    "cards": "6 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 10 10 12": {
    "cards": "6 10 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 10 10 13": {
    "cards": "6 10 10 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((13 - 10) * 10) - 6",
      "(10 * (13 - 10)) - 6"
    ]
  },
  "6 10 11 11": {
    "cards": "6 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 10 11 12": {
    "cards": "6 10 11 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "10 / ((11 - 6) / 12)",
      "(12 * 10) / (11 - 6)",
      "12 / ((11 - 6) / 10)",
      "12 * (10 / (11 - 6))",
      "(10 / (11 - 6)) * 12",
      "(12 / (11 - 6)) * 10",
      "10 * (12 / (11 - 6))",
      "(10 * 12) / (11 - 6)"
    ]
  },
  "6 10 11 13": {
    "cards": "6 10 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 10 12 12": {
    "cards": "6 10 12 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((12 / 6) + 12) + 10",
      "12 - (6 * (10 - 12))",
      "(12 / 6) + (10 + 12)",
      "(6 * (12 - 10)) + 12",
      "12 + (10 + (12 / 6))",
      "12 + ((12 - 10) * 6)",
      "10 + (12 + (12 / 6))",
      "((12 - 10) * 6) + 12",
      "(10 + (12 / 6)) + 12",
      "12 + (6 * (12 - 10))",
      "(12 / 6) + (12 + 10)",
      "((12 / 6) + 10) + 12",
      "12 - ((10 - 12) * 6)",
      "(12 + 10) + (12 / 6)",
      "10 + ((12 / 6) + 12)",
      "(12 + (12 / 6)) + 10",
      "12 + ((12 / 6) + 10)",
      "(10 + 12) + (12 / 6)"
    ]
  },
  "6 10 12 13": {
    "cards": "6 10 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(6 * 12) / (13 - 10)",
      "6 * (12 / (13 - 10))",
      "12 * (6 / (13 - 10))",
      "(12 / (13 - 10)) * 6",
      "12 / ((13 - 10) / 6)",
      "(6 / (13 - 10)) * 12",
      "6 / ((13 - 10) / 12)",
      "(12 * 6) / (13 - 10)"
    ]
  },
  "6 10 13 13": {
    "cards": "6 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 11 11 11": {
    "cards": "6 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 11 11 12": {
    "cards": "6 11 11 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(11 + 11) + (12 / 6)",
      "((12 / 6) + 11) + 11",
      "(12 / 6) + (11 + 11)",
      "(11 + (12 / 6)) + 11",
      "11 + (11 + (12 / 6))",
      "11 + ((12 / 6) + 11)"
    ]
  },
  "6 11 11 13": {
    "cards": "6 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 11 12 12": {
    "cards": "6 11 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "((11 * 12) + 12) / 6",
      "(12 + (12 * 11)) / 6",
      "((12 * 11) + 12) / 6",
      "(12 + (11 * 12)) / 6"
    ]
  },
  "6 11 12 13": {
    "cards": "6 11 12 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((13 - 11) * 6) + 12",
      "12 + ((13 - 11) * 6)",
      "(6 * (13 - 11)) + 12",
      "12 + (6 * (13 - 11))",
      "12 - ((11 - 13) * 6)",
      "12 - (6 * (11 - 13))"
    ]
  },
  "6 11 13 13": {
    "cards": "6 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "6 12 12 12": {
    "cards": "6 12 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "12 * (12 / (12 - 6))",
      "(12 * 12) / (12 - 6)",
      "12 / ((12 - 6) / 12)",
      "(12 / (12 - 6)) * 12"
    ]
  },
  "6 12 12 13": {
    "cards": "6 12 12 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((12 * 13) - 12) / 6",
      "((13 * 12) - 12) / 6"
    ]
  },
  "6 12 13 13": {
    "cards": "6 12 13 13",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "13 + (13 - (12 / 6))",
      "(13 + 13) - (12 / 6)",
      "13 - ((12 / 6) - 13)",
      "(13 - (12 / 6)) + 13"
    ]
  },
  "6 13 13 13": {
    "cards": "6 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 7": {
    "cards": "7 7 7 7",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 8": {
    "cards": "7 7 7 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 9": {
    "cards": "7 7 7 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 10": {
    "cards": "7 7 7 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 11": {
    "cards": "7 7 7 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 7 12": {
    "cards": "7 7 7 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 * ((7 + 7) / 7)",
      "12 / (7 / (7 + 7))",
      "(12 * (7 + 7)) / 7",
      "(7 + 7) * (12 / 7)",
      "((7 + 7) / 7) * 12",
      "((7 + 7) * 12) / 7",
      "(12 / 7) * (7 + 7)",
      "(7 + 7) / (7 / 12)"
    ]
  },
  "7 7 7 13": {
    "cards": "7 7 7 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 8 8": {
    "cards": "7 7 8 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 8 9": {
    "cards": "7 7 8 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 8 10": {
    "cards": "7 7 8 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 8 11": {
    "cards": "7 7 8 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((7 - 11) + 7) * 8",
      "8 * (7 - (11 - 7))",
      "8 * (7 + (7 - 11))",
      "(7 + (7 - 11)) * 8",
      "8 * ((7 + 7) - 11)",
      "((7 + 7) - 11) * 8",
      "(7 - (11 - 7)) * 8",
      "8 * ((7 - 11) + 7)"
    ]
  },
  "7 7 8 12": {
    "cards": "7 7 8 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 8 13": {
    "cards": "7 7 8 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 9 9": {
    "cards": "7 7 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 9 10": {
    "cards": "7 7 9 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(7 * (9 - 7)) + 10",
      "((9 - 7) * 7) + 10",
      "10 - ((7 - 9) * 7)",
      "10 + ((9 - 7) * 7)",
      "10 + (7 * (9 - 7))",
      "10 - (7 * (7 - 9))"
    ]
  },
  "7 7 9 11": {
    "cards": "7 7 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 9 12": {
    "cards": "7 7 9 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 9 13": {
    "cards": "7 7 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 10 10": {
    "cards": "7 7 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 10 11": {
    "cards": "7 7 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 10 12": {
    "cards": "7 7 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 10 13": {
    "cards": "7 7 10 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(13 + 10) + (7 / 7)",
      "13 + ((7 / 7) + 10)",
      "(7 / 7) + (13 + 10)",
      "((7 / 7) + 10) + 13",
      "((7 / 7) + 13) + 10",
      "10 + ((7 / 7) + 13)",
      "10 + (13 + (7 / 7))",
      "13 + (10 + (7 / 7))",
      "(7 / 7) + (10 + 13)",
      "(10 + (7 / 7)) + 13",
      "(13 + (7 / 7)) + 10",
      "(10 + 13) + (7 / 7)"
    ]
  },
  "7 7 11 11": {
    "cards": "7 7 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 7 11 12": {
    "cards": "7 7 11 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(12 + 11) + (7 / 7)",
      "(7 * (12 - 7)) - 11",
      "12 + ((7 / 7) + 11)",
      "(11 + 12) + (7 / 7)",
      "(11 + (7 / 7)) + 12",
      "11 + (12 + (7 / 7))",
      "(7 / 7) + (12 + 11)",
      "(7 / 7) + (11 + 12)",
      "(12 + (7 / 7)) + 11",
      "12 + (11 + (7 / 7))",
      "((7 / 7) + 12) + 11",
      "((12 - 7) * 7) - 11",
      "11 + ((7 / 7) + 12)",
      "((7 / 7) + 11) + 12"
    ]
  },
  "7 7 11 13": {
    "cards": "7 7 11 13",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "((11 + 7) - 7) + 13",
      "11 + ((13 + 7) - 7)",
      "7 + ((13 + 11) - 7)",
      "11 + ((7 + 13) - 7)",
      "11 + (7 - (7 - 13))",
      "11 + ((13 - 7) + 7)",
      "(7 + (13 + 11)) - 7",
      "((13 + 11) - 7) + 7",
      "(11 + 7) - (7 - 13)",
      "7 + (13 - (7 - 11))",
      "(11 + (13 - 7)) + 7",
      "11 + (7 * (13 / 7))",
      "(7 + (11 + 13)) - 7",
      "7 / (7 / (11 + 13))",
      "(13 + (7 - 7)) + 11",
      "13 + (7 - (7 - 11))",
      "(7 * (13 + 11)) / 7",
      "11 - (7 - (13 + 7))",
      "11 + ((13 / 7) * 7)",
      "(13 - 7) + (11 + 7)",
      "(7 + (11 - 7)) + 13",
      "((13 + 11) * 7) / 7",
      "(11 * (7 / 7)) + 13",
      "(11 + (13 + 7)) - 7",
      "(7 / (7 / 13)) + 11",
      "13 + (7 * (11 / 7))",
      "(7 + (13 - 7)) + 11",
      "(7 + 13) + (11 - 7)",
      "7 + (13 + (11 - 7))",
      "(11 - (7 - 13)) + 7",
      "11 + ((7 - 7) + 13)",
      "13 - (7 - (11 + 7))",
      "7 - ((7 - 13) - 11)",
      "((7 + 13) - 7) + 11",
      "(7 / 7) * (13 + 11)",
      "7 + ((13 - 7) + 11)",
      "((7 + 13) + 11) - 7",
      "7 + ((11 - 7) + 13)",
      "11 + (13 * (7 / 7))",
      "((11 + 13) * 7) / 7",
      "13 + (11 + (7 - 7))",
      "(7 * (13 / 7)) + 11",
      "7 * ((13 + 11) / 7)",
      "(7 - 13) * (7 - 11)",
      "(11 + (7 - 7)) + 13",
      "7 + ((11 + 13) - 7)",
      "(11 + 13) - (7 - 7)",
      "13 - ((7 - 11) - 7)",
      "((11 + 13) + 7) - 7",
      "(13 - 7) + (7 + 11)",
      "((11 + 13) - 7) + 7",
      "(13 + (7 + 11)) - 7",
      "13 - ((7 - 7) - 11)",
      "(13 + 7) + (11 - 7)",
      "((7 + 11) + 13) - 7",
      "13 + (7 / (7 / 11))",
      "(11 + 7) + (13 - 7)",
      "((11 * 7) / 7) + 13",
      "((13 + 7) - 7) + 11",
      "(11 + 13) * (7 / 7)",
      "(11 + 13) + (7 - 7)",
      "13 + ((7 + 11) - 7)",
      "13 - (7 - (7 + 11))",
      "7 * ((11 + 13) / 7)",
      "13 + ((11 / 7) * 7)",
      "((13 / 7) * 7) + 11",
      "11 + ((7 * 13) / 7)",
      "(13 + 11) - (7 - 7)",
      "11 + (7 / (7 / 13))",
      "(7 - 7) + (11 + 13)",
      "11 + (7 + (13 - 7))",
      "((7 / 7) * 11) + 13",
      "((13 + 11) + 7) - 7",
      "13 + (11 - (7 - 7))",
      "13 + (11 * (7 / 7))",
      "(13 / (7 / 7)) + 11",
      "11 - (7 - (7 + 13))",
      "(13 + (11 + 7)) - 7",
      "(11 / (7 / 7)) + 13",
      "((11 - 7) + 13) + 7",
      "((7 * 11) / 7) + 13",
      "7 + (11 + (13 - 7))",
      "(13 + 7) - (7 - 11)",
      "((13 - 7) + 11) + 7",
      "(7 - (7 - 11)) + 13",
      "((13 + 11) / 7) * 7",
      "7 - (7 - (13 + 11))",
      "(13 - 7) * (11 - 7)",
      "7 + (11 - (7 - 13))",
      "((7 * 13) / 7) + 11",
      "11 + ((7 / 7) * 13)",
      "(11 + (7 + 13)) - 7",
      "((11 - 7) + 7) + 13",
      "(13 * (7 / 7)) + 11",
      "7 - ((7 - 11) - 13)",
      "11 + (13 - (7 - 7))",
      "13 + ((7 / 7) * 11)",
      "(7 - 11) * (7 - 13)",
      "((13 * 7) / 7) + 11",
      "((11 + 7) + 13) - 7",
      "11 - ((7 - 7) - 13)",
      "(7 / 7) * (11 + 13)",
      "(7 - 7) + (13 + 11)",
      "((7 - 7) + 11) + 13",
      "(7 + 11) - (7 - 13)",
      "11 + (13 / (7 / 7))",
      "(13 - (7 - 11)) + 7",
      "((11 + 13) / 7) * 7",
      "(13 + 11) * (7 / 7)",
      "(7 + 13) - (7 - 11)",
      "(7 - (7 - 13)) + 11",
      "11 - ((7 - 13) - 7)",
      "11 + ((13 * 7) / 7)",
      "(7 / (7 / 11)) + 13",
      "((7 + 11) - 7) + 13",
      "13 + ((11 * 7) / 7)",
      "(13 + 11) + (7 - 7)",
      "13 + (11 / (7 / 7))",
      "((11 / 7) * 7) + 13",
      "(13 + 11) / (7 / 7)",
      "13 + ((11 + 7) - 7)",
      "(11 - 7) + (7 + 13)",
      "13 + ((11 - 7) + 7)",
      "(13 - (7 - 7)) + 11",
      "((7 - 7) + 13) + 11",
      "(7 * (11 + 13)) / 7",
      "13 + (7 + (11 - 7))",
      "(11 - (7 - 7)) + 13",
      "7 - (7 - (11 + 13))",
      "(11 + 13) / (7 / 7)",
      "(7 + 11) + (13 - 7)",
      "(11 - 7) + (13 + 7)",
      "13 + ((7 * 11) / 7)",
      "((13 - 7) + 7) + 11",
      "7 / (7 / (13 + 11))",
      "((13 + 7) + 11) - 7",
      "(11 - 7) * (13 - 7)",
      "((7 / 7) * 13) + 11",
      "11 + (13 + (7 - 7))",
      "13 + ((7 - 7) + 11)",
      "(7 * (11 / 7)) + 13",
      "(13 + (11 - 7)) + 7"
    ]
  },
  "7 7 12 12": {
    "cards": "7 7 12 12",
    "has_solution": "Y",
    "num_solutions": 77,
    "solutions": [
      "(12 + 7) + (12 - 7)",
      "(12 + (7 + 12)) - 7",
      "12 + (12 / (7 / 7))",
      "(12 - (7 - 7)) + 12",
      "(12 / (7 / 7)) + 12",
      "12 + ((12 / 7) * 7)",
      "7 + ((12 + 12) - 7)",
      "(7 * (12 + 12)) / 7",
      "(12 * (7 / 7)) + 12",
      "(12 + 12) - (7 - 7)",
      "12 + (7 - (7 - 12))",
      "12 + ((7 * 12) / 7)",
      "(12 - 7) + (12 + 7)",
      "12 + (7 * (12 / 7))",
      "(7 + 12) - (7 - 12)",
      "(12 + (12 - 7)) + 7",
      "12 + ((12 - 7) + 7)",
      "12 + (12 + (7 - 7))",
      "((7 + 12) + 12) - 7",
      "7 / (7 / (12 + 12))",
      "(12 + 12) * (7 / 7)",
      "(7 + (12 - 7)) + 12",
      "(12 + 12) / (7 / 7)",
      "(7 * (12 / 7)) + 12",
      "12 - ((7 - 7) - 12)",
      "((12 * 7) / 7) + 12",
      "(7 / (7 / 12)) + 12",
      "(7 + (12 + 12)) - 7",
      "12 - ((7 - 12) - 7)",
      "7 + (12 + (12 - 7))",
      "(7 - (7 - 12)) + 12",
      "(12 + 12) + (7 - 7)",
      "12 * ((7 - 12) + 7)",
      "(12 + 7) - (7 - 12)",
      "(7 - 7) + (12 + 12)",
      "((12 + 12) - 7) + 7",
      "(7 / 7) * (12 + 12)",
      "((12 - 7) + 12) + 7",
      "(12 - (7 - 12)) + 7",
      "((7 + 7) - 12) * 12",
      "((7 - 12) + 7) * 12",
      "12 - (7 - (12 + 7))",
      "(12 + (7 - 7)) + 12",
      "((12 / 7) * 7) + 12",
      "7 * ((12 + 12) / 7)",
      "12 * (7 + (7 - 12))",
      "(7 + 12) + (12 - 7)",
      "12 + (12 * (7 / 7))",
      "((7 / 7) * 12) + 12",
      "((12 + 12) + 7) - 7",
      "7 - ((7 - 12) - 12)",
      "12 + (7 / (7 / 12))",
      "((7 + 12) - 7) + 12",
      "7 - (7 - (12 + 12))",
      "7 + ((12 - 7) + 12)",
      "((12 - 7) + 7) + 12",
      "12 + ((7 + 12) - 7)",
      "((7 * 12) / 7) + 12",
      "((12 + 12) * 7) / 7",
      "12 + ((7 - 7) + 12)",
      "((12 + 12) / 7) * 7",
      "12 * (7 - (12 - 7))",
      "((12 + 7) - 7) + 12",
      "12 + ((12 * 7) / 7)",
      "((7 - 7) + 12) + 12",
      "12 + ((12 + 7) - 7)",
      "7 + (12 - (7 - 12))",
      "12 * ((7 + 7) - 12)",
      "12 + ((7 / 7) * 12)",
      "(7 + (7 - 12)) * 12",
      "12 - (7 - (7 + 12))",
      "(12 + (12 + 7)) - 7",
      "12 + (7 + (12 - 7))",
      "(7 - (12 - 7)) * 12",
      "12 + (12 - (7 - 7))",
      "((12 + 7) + 12) - 7",
      "(12 - 7) + (7 + 12)"
    ]
  },
  "7 7 12 13": {
    "cards": "7 7 12 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(7 * 7) - (13 + 12)",
      "(12 - (7 / 7)) + 13",
      "13 + (12 - (7 / 7))",
      "(7 * 7) - (12 + 13)",
      "12 - ((7 / 7) - 13)",
      "((7 * 7) - 12) - 13",
      "(13 + 12) - (7 / 7)",
      "((7 * 7) - 13) - 12",
      "13 - ((7 / 7) - 12)",
      "(13 - (7 / 7)) + 12",
      "12 + (13 - (7 / 7))",
      "(12 + 13) - (7 / 7)"
    ]
  },
  "7 7 13 13": {
    "cards": "7 7 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 8 8": {
    "cards": "7 8 8 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 8 9": {
    "cards": "7 8 8 9",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((9 - 7) * 8) + 8",
      "(8 * (9 - 7)) + 8",
      "8 + (8 * (9 - 7))",
      "8 - ((7 - 9) * 8)",
      "8 - (8 * (7 - 9))",
      "8 + ((9 - 7) * 8)"
    ]
  },
  "7 8 8 10": {
    "cards": "7 8 8 10",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(8 * 10) - (8 * 7)",
      "(10 * 8) - (7 * 8)",
      "(10 * 8) - (8 * 7)",
      "(8 * 10) - (7 * 8)"
    ]
  },
  "7 8 8 11": {
    "cards": "7 8 8 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((11 - 7) * 8) - 8",
      "(8 * (11 - 7)) - 8"
    ]
  },
  "7 8 8 12": {
    "cards": "7 8 8 12",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "8 * (8 - (12 - 7))",
      "((7 + 8) - 12) * 8",
      "8 * (7 - (12 - 8))",
      "8 * (8 + (7 - 12))",
      "(7 + (8 - 12)) * 8",
      "(8 + (7 - 12)) * 8",
      "((8 + 7) - 12) * 8",
      "8 * (7 + (8 - 12))",
      "8 * ((8 - 12) + 7)",
      "8 * ((7 + 8) - 12)",
      "((8 - 12) + 7) * 8",
      "8 * ((8 + 7) - 12)",
      "((7 - 12) + 8) * 8",
      "(7 - (12 - 8)) * 8",
      "8 * ((7 - 12) + 8)",
      "(8 - (12 - 7)) * 8"
    ]
  },
  "7 8 8 13": {
    "cards": "7 8 8 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(8 * (8 + 13)) / 7",
      "(8 / 7) * (8 + 13)",
      "((8 + 13) / 7) * 8",
      "(8 * (13 + 8)) / 7",
      "(8 + 13) / (7 / 8)",
      "8 / (7 / (13 + 8))",
      "((13 + 8) * 8) / 7",
      "(8 / 7) * (13 + 8)",
      "8 * ((13 + 8) / 7)",
      "((13 + 8) / 7) * 8",
      "((8 + 13) * 8) / 7",
      "8 * ((8 + 13) / 7)",
      "(13 + 8) / (7 / 8)",
      "(8 + 13) * (8 / 7)",
      "(13 + 8) * (8 / 7)",
      "8 / (7 / (8 + 13))"
    ]
  },
  "7 8 9 9": {
    "cards": "7 8 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 9 10": {
    "cards": "7 8 9 10",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "8 / ((10 - 7) / 9)",
      "8 * (9 / (10 - 7))",
      "9 / ((10 - 7) / 8)",
      "(9 * 8) / (10 - 7)",
      "9 * (8 / (10 - 7))",
      "(8 * 9) / (10 - 7)",
      "(9 / (10 - 7)) * 8",
      "(8 / (10 - 7)) * 9"
    ]
  },
  "7 8 9 11": {
    "cards": "7 8 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 9 12": {
    "cards": "7 8 9 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((7 + 9) * 12) / 8",
      "12 / (8 / (9 + 7))",
      "(7 + 9) / (8 / 12)",
      "(12 * (9 + 7)) / 8",
      "((12 + 9) / 7) * 8",
      "12 * ((9 + 7) / 8)",
      "8 * ((9 + 12) / 7)",
      "12 * ((7 + 9) / 8)",
      "12 / (8 / (7 + 9))",
      "((7 + 9) / 8) * 12",
      "(9 + 7) / (8 / 12)",
      "(8 / 7) * (12 + 9)",
      "((9 + 7) / 8) * 12",
      "8 * ((12 + 9) / 7)",
      "8 / (7 / (12 + 9))",
      "(12 + 9) / (7 / 8)",
      "(9 + 12) * (8 / 7)",
      "(8 * (9 + 12)) / 7",
      "(12 + 9) * (8 / 7)",
      "(7 + 9) * (12 / 8)",
      "((9 + 12) / 7) * 8",
      "(9 + 7) * (12 / 8)",
      "(8 / 7) * (9 + 12)",
      "(12 / 8) * (7 + 9)",
      "(9 + 12) / (7 / 8)",
      "(8 * (12 + 9)) / 7",
      "((9 + 12) * 8) / 7",
      "((9 + 7) * 12) / 8",
      "8 / (7 / (9 + 12))",
      "(12 * (7 + 9)) / 8",
      "((12 + 9) * 8) / 7",
      "(12 / 8) * (9 + 7)"
    ]
  },
  "7 8 9 13": {
    "cards": "7 8 9 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(7 + (9 - 13)) * 8",
      "8 * (7 + (9 - 13))",
      "(9 + (7 - 13)) * 8",
      "8 * (9 - (13 - 7))",
      "8 * ((9 - 13) + 7)",
      "((7 - 13) + 9) * 8",
      "(7 - (13 - 9)) * 8",
      "8 * ((7 + 9) - 13)",
      "8 * (7 - (13 - 9))",
      "8 * ((7 - 13) + 9)",
      "((9 - 13) + 7) * 8",
      "(9 - (13 - 7)) * 8",
      "8 * (9 + (7 - 13))",
      "8 * ((9 + 7) - 13)",
      "((7 + 9) - 13) * 8",
      "((9 + 7) - 13) * 8"
    ]
  },
  "7 8 10 10": {
    "cards": "7 8 10 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "10 + (7 * (10 - 8))",
      "10 - (7 * (8 - 10))",
      "10 - ((8 - 10) * 7)",
      "10 + ((10 - 8) * 7)",
      "((10 - 8) * 7) + 10",
      "(7 * (10 - 8)) + 10"
    ]
  },
  "7 8 10 11": {
    "cards": "7 8 10 11",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((11 + 10) / 7) * 8",
      "(8 / 7) * (11 + 10)",
      "(11 + 10) / (7 / 8)",
      "((10 + 11) * 8) / 7",
      "(8 * (11 + 10)) / 7",
      "8 * ((10 + 11) / 7)",
      "(10 + 11) / (7 / 8)",
      "(11 + 10) * (8 / 7)",
      "(8 * (10 + 11)) / 7",
      "(8 / 7) * (10 + 11)",
      "8 / (7 / (10 + 11))",
      "((10 + 11) / 7) * 8",
      "8 * ((11 + 10) / 7)",
      "((11 + 10) * 8) / 7",
      "(10 + 11) * (8 / 7)",
      "8 / (7 / (11 + 10))"
    ]
  },
  "7 8 10 12": {
    "cards": "7 8 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 10 13": {
    "cards": "7 8 10 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "(13 - 7) + (10 + 8)",
      "(8 - 7) + (10 + 13)",
      "((10 + 13) - 7) + 8",
      "13 + ((8 + 10) - 7)",
      "8 - (7 - (10 + 13))",
      "13 + ((10 + 8) - 7)",
      "13 + (10 - (7 - 8))",
      "(10 + 8) - (7 - 13)",
      "((8 - 7) + 13) + 10",
      "((13 + 8) + 10) - 7",
      "(13 + 8) + (10 - 7)",
      "8 + (10 - (7 - 13))",
      "8 + ((10 + 13) - 7)",
      "8 - ((7 - 10) - 13)",
      "(10 + 13) + (8 - 7)",
      "13 + ((10 - 7) + 8)",
      "(13 - (7 - 10)) + 8",
      "(13 + 10) + (8 - 7)",
      "8 - ((7 - 13) - 10)",
      "(10 + (13 - 7)) + 8",
      "10 - (7 - (13 + 8))",
      "10 + (8 - (7 - 13))",
      "(13 + 10) - (7 - 8)",
      "(13 + 8) - (7 - 10)",
      "(13 - (7 - 8)) + 10",
      "((13 - 7) + 8) + 10",
      "13 - (7 - (10 + 8))",
      "10 + (8 + (13 - 7))",
      "8 + (13 - (7 - 10))",
      "((8 + 13) - 7) + 10",
      "(10 + (8 - 7)) + 13",
      "((10 - 7) + 8) + 13",
      "(13 + (10 + 8)) - 7",
      "(8 + (13 + 10)) - 7",
      "(8 + 13) - (7 - 10)",
      "(10 - 7) + (8 + 13)",
      "(13 - 7) + (8 + 10)",
      "8 + ((13 - 7) + 10)",
      "13 + (8 + (10 - 7))",
      "(10 + 13) - (7 - 8)",
      "10 + (13 + (8 - 7))",
      "10 - (7 - (8 + 13))",
      "8 + (10 + (13 - 7))",
      "13 + ((8 - 7) + 10)",
      "10 - ((7 - 8) - 13)",
      "((8 + 10) + 13) - 7",
      "10 - ((7 - 13) - 8)",
      "((13 + 8) - 7) + 10",
      "8 - (7 - (13 + 10))",
      "(13 + (8 + 10)) - 7",
      "13 - ((7 - 8) - 10)",
      "13 + (10 + (8 - 7))",
      "(10 - (7 - 8)) + 13",
      "8 + ((13 + 10) - 7)",
      "((10 - 7) + 13) + 8",
      "(8 + (10 + 13)) - 7",
      "(8 + 10) + (13 - 7)",
      "(8 + 10) - (7 - 13)",
      "(10 + 8) + (13 - 7)",
      "(10 - (7 - 13)) + 8",
      "13 + (8 - (7 - 10))",
      "((8 + 10) - 7) + 13",
      "10 + ((8 + 13) - 7)",
      "((10 + 13) + 8) - 7",
      "(8 - (7 - 10)) + 13",
      "(10 + (13 + 8)) - 7",
      "(8 - 7) + (13 + 10)",
      "((8 + 13) + 10) - 7",
      "(8 + 13) + (10 - 7)",
      "((13 + 10) + 8) - 7",
      "((8 - 7) + 10) + 13",
      "((13 - 7) + 10) + 8",
      "10 + ((8 - 7) + 13)",
      "8 + ((10 - 7) + 13)",
      "10 + (13 - (7 - 8))",
      "(8 + (10 - 7)) + 13",
      "((13 + 10) - 7) + 8",
      "10 + ((13 + 8) - 7)",
      "((10 + 8) - 7) + 13",
      "((10 + 8) + 13) - 7",
      "(10 + (8 + 13)) - 7",
      "8 + (13 + (10 - 7))",
      "(8 + (13 - 7)) + 10",
      "13 - (7 - (8 + 10))",
      "(13 + (10 - 7)) + 8",
      "(10 - 7) + (13 + 8)",
      "13 - ((7 - 10) - 8)",
      "(8 - (7 - 13)) + 10",
      "10 + ((13 - 7) + 8)",
      "(13 + (8 - 7)) + 10"
    ]
  },
  "7 8 11 11": {
    "cards": "7 8 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 8 11 12": {
    "cards": "7 8 11 12",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "(8 + (12 - 7)) + 11",
      "(11 + (8 + 12)) - 7",
      "((11 + 8) - 7) + 12",
      "((11 + 12) - 7) + 8",
      "(11 + 12) + (8 - 7)",
      "12 - ((7 - 11) - 8)",
      "(11 + 12) - (7 - 8)",
      "(12 + (11 + 8)) - 7",
      "12 - (7 - (8 + 11))",
      "(12 + 8) - (7 - 11)",
      "((12 - 7) + 11) + 8",
      "11 - ((7 - 12) - 8)",
      "((12 + 8) + 11) - 7",
      "(12 / (11 - 7)) * 8",
      "((11 - 7) + 8) + 12",
      "(12 * 8) / (11 - 7)",
      "(12 + 8) + (11 - 7)",
      "(8 + 11) - (7 - 12)",
      "((8 + 12) - 7) + 11",
      "12 + ((8 + 11) - 7)",
      "(12 + 11) - (7 - 8)",
      "12 + ((8 - 7) + 11)",
      "12 + (11 + (8 - 7))",
      "11 + (12 + (8 - 7))",
      "((8 + 12) + 11) - 7",
      "12 - (7 - (11 + 8))",
      "8 - ((7 - 11) - 12)",
      "(12 + (8 + 11)) - 7",
      "12 + (11 - (7 - 8))",
      "8 + (12 + (11 - 7))",
      "((8 - 7) + 12) + 11",
      "(12 + 11) + (8 - 7)",
      "12 + ((11 + 8) - 7)",
      "8 - ((7 - 12) - 11)",
      "(8 - 7) + (12 + 11)",
      "11 + ((12 - 7) + 8)",
      "((8 + 11) - 7) + 12",
      "(11 + (12 - 7)) + 8",
      "8 + ((12 - 7) + 11)",
      "12 / ((11 - 7) / 8)",
      "(12 - 7) + (11 + 8)",
      "12 + (8 + (11 - 7))",
      "8 * (12 / (11 - 7))",
      "(12 - (7 - 11)) + 8",
      "(11 + 8) + (12 - 7)",
      "8 + ((11 + 12) - 7)",
      "((11 - 7) + 12) + 8",
      "((12 + 11) - 7) + 8",
      "(8 + 11) + (12 - 7)",
      "(8 - (7 - 11)) + 12",
      "8 + (12 - (7 - 11))",
      "(8 - 7) + (11 + 12)",
      "11 + ((8 - 7) + 12)",
      "12 - ((7 - 8) - 11)",
      "(8 + (12 + 11)) - 7",
      "((12 + 11) + 8) - 7",
      "(11 + (8 - 7)) + 12",
      "(11 - 7) + (12 + 8)",
      "11 + (8 + (12 - 7))",
      "11 + ((8 + 12) - 7)",
      "((11 + 12) + 8) - 7",
      "8 + (11 - (7 - 12))",
      "11 + ((12 + 8) - 7)",
      "(11 + 8) - (7 - 12)",
      "((8 - 7) + 11) + 12",
      "8 / ((11 - 7) / 12)",
      "11 + (8 - (7 - 12))",
      "((8 + 11) + 12) - 7",
      "8 + (11 + (12 - 7))",
      "(8 + (11 - 7)) + 12",
      "(12 + (11 - 7)) + 8",
      "((11 + 8) + 12) - 7",
      "12 * (8 / (11 - 7))",
      "(11 - (7 - 12)) + 8",
      "11 + (12 - (7 - 8))",
      "12 + (8 - (7 - 11))",
      "(8 / (11 - 7)) * 12",
      "(12 - 7) + (8 + 11)",
      "(8 * 12) / (11 - 7)",
      "11 - (7 - (8 + 12))",
      "((12 + 8) - 7) + 11",
      "(8 - (7 - 12)) + 11",
      "(11 - 7) + (8 + 12)",
      "(8 + (11 + 12)) - 7",
      "(12 - (7 - 8)) + 11",
      "(11 + (12 + 8)) - 7",
      "(12 + (8 - 7)) + 11",
      "8 + ((11 - 7) + 12)",
      "(8 + 12) - (7 - 11)",
      "8 + ((12 + 11) - 7)",
      "((12 - 7) + 8) + 11",
      "(8 + 12) + (11 - 7)",
      "11 - (7 - (12 + 8))",
      "12 + ((11 - 7) + 8)",
      "8 - (7 - (12 + 11))",
      "(11 - (7 - 8)) + 12",
      "11 - ((7 - 8) - 12)",
      "8 - (7 - (11 + 12))"
    ]
  },
  "7 8 11 13": {
    "cards": "7 8 11 13",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(8 - 7) * (13 + 11)",
      "(11 + 13) / (8 - 7)",
      "(7 * (13 - 8)) - 11",
      "13 + ((8 - 7) * 11)",
      "11 + (13 * (8 - 7))",
      "((8 - 7) * 11) + 13",
      "(11 + 13) * (8 - 7)",
      "13 - (11 / (7 - 8))",
      "(13 * (8 - 7)) + 11",
      "13 + (11 / (8 - 7))",
      "(13 + 11) * (8 - 7)",
      "11 + (13 / (8 - 7))",
      "((8 - 7) * 13) + 11",
      "11 - ((7 - 8) * 13)",
      "13 - (11 * (7 - 8))",
      "11 - (13 / (7 - 8))",
      "(13 + 11) / (8 - 7)",
      "13 + (11 * (8 - 7))",
      "(11 * (8 - 7)) + 13",
      "(11 / (8 - 7)) + 13",
      "13 - ((7 - 8) * 11)",
      "11 + ((8 - 7) * 13)",
      "(13 / (8 - 7)) + 11",
      "11 - (13 * (7 - 8))",
      "(8 - 7) * (11 + 13)",
      "((13 - 8) * 7) - 11"
    ]
  },
  "7 8 12 12": {
    "cards": "7 8 12 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "12 + (12 * (8 - 7))",
      "12 - (12 / (7 - 8))",
      "(12 * (8 - 7)) + 12",
      "12 + (12 / (8 - 7))",
      "12 - ((7 - 8) * 12)",
      "12 - (12 * (7 - 8))",
      "(8 - 7) * (12 + 12)",
      "((8 - 7) * 12) + 12",
      "(12 + 12) / (8 - 7)",
      "(12 + 12) * (8 - 7)",
      "12 + ((8 - 7) * 12)",
      "(12 / (8 - 7)) + 12"
    ]
  },
  "7 8 12 13": {
    "cards": "7 8 12 13",
    "has_solution": "Y",
    "num_solutions": 110,
    "solutions": [
      "12 * (7 - (13 - 8))",
      "12 + (13 + (7 - 8))",
      "(13 + 7) - (8 - 12)",
      "12 * ((7 - 13) + 8)",
      "(7 + (13 + 12)) - 8",
      "(12 + (7 + 13)) - 8",
      "(8 - 12) * (7 - 13)",
      "(13 - (8 - 7)) + 12",
      "12 * (8 + (7 - 13))",
      "13 - (8 - (7 + 12))",
      "13 + ((7 - 8) + 12)",
      "(7 + (12 - 8)) + 13",
      "((13 - 8) + 7) + 12",
      "(7 - 8) + (12 + 13)",
      "7 + (12 + (13 - 8))",
      "(7 + 13) + (12 - 8)",
      "(12 + 7) - (8 - 13)",
      "((12 + 13) + 7) - 8",
      "((12 + 7) + 13) - 8",
      "(7 - 13) * (8 - 12)",
      "(13 + 12) - (8 - 7)",
      "13 - (8 - (12 + 7))",
      "(13 + (12 - 8)) + 7",
      "12 + ((7 - 8) + 13)",
      "(13 - (8 - 12)) + 7",
      "((7 - 13) + 8) * 12",
      "((7 - 8) + 13) + 12",
      "(7 + (13 - 8)) + 12",
      "((13 + 12) + 7) - 8",
      "(13 + 7) + (12 - 8)",
      "7 - ((8 - 12) - 13)",
      "12 * ((8 + 7) - 13)",
      "(13 + (7 + 12)) - 8",
      "(7 + 12) - (8 - 13)",
      "7 + ((12 - 8) + 13)",
      "(13 - 8) + (12 + 7)",
      "12 + ((7 + 13) - 8)",
      "7 + ((12 + 13) - 8)",
      "12 * ((7 + 8) - 13)",
      "(13 - 8) + (7 + 12)",
      "(12 - 8) + (13 + 7)",
      "12 * ((8 - 13) + 7)",
      "(12 - 8) + (7 + 13)",
      "((12 - 8) + 7) + 13",
      "13 + (7 + (12 - 8))",
      "7 - (8 - (13 + 12))",
      "(7 - (8 - 13)) + 12",
      "(12 + (7 - 8)) + 13",
      "(13 - 7) * (12 - 8)",
      "((7 + 13) - 8) + 12",
      "(12 - (8 - 13)) + 7",
      "(7 - (8 - 12)) + 13",
      "12 + ((13 - 8) + 7)",
      "(7 - 8) + (13 + 12)",
      "12 + ((13 + 7) - 8)",
      "7 + (13 + (12 - 8))",
      "(7 + 12) + (13 - 8)",
      "((13 + 7) + 12) - 8",
      "((12 + 7) - 8) + 13",
      "((7 + 8) - 13) * 12",
      "12 + (7 - (8 - 13))",
      "((13 + 7) - 8) + 12",
      "(13 + 12) + (7 - 8)",
      "12 * (7 + (8 - 13))",
      "(7 + (8 - 13)) * 12",
      "12 - ((8 - 7) - 13)",
      "(7 - (13 - 8)) * 12",
      "12 + (13 - (8 - 7))",
      "(12 + (13 - 8)) + 7",
      "12 * (8 - (13 - 7))",
      "((13 - 8) + 12) + 7",
      "((8 - 13) + 7) * 12",
      "((12 + 13) - 8) + 7",
      "(13 + (12 + 7)) - 8",
      "((12 - 8) + 13) + 7",
      "13 + (7 - (8 - 12))",
      "13 - ((8 - 12) - 7)",
      "(13 + (7 - 8)) + 12",
      "(7 + (12 + 13)) - 8",
      "13 - ((8 - 7) - 12)",
      "(8 - (13 - 7)) * 12",
      "((8 + 7) - 13) * 12",
      "(12 + 13) + (7 - 8)",
      "((7 - 8) + 12) + 13",
      "13 + ((7 + 12) - 8)",
      "(12 + (13 + 7)) - 8",
      "(7 + 13) - (8 - 12)",
      "(12 + 13) - (8 - 7)",
      "13 + ((12 + 7) - 8)",
      "12 - (8 - (7 + 13))",
      "12 - ((8 - 13) - 7)",
      "12 + (7 + (13 - 8))",
      "7 + (12 - (8 - 13))",
      "7 + ((13 - 8) + 12)",
      "7 + ((13 + 12) - 8)",
      "((13 + 12) - 8) + 7",
      "(12 + 7) + (13 - 8)",
      "((7 + 12) + 13) - 8",
      "13 + (12 + (7 - 8))",
      "(8 + (7 - 13)) * 12",
      "((7 + 13) + 12) - 8",
      "7 - ((8 - 13) - 12)",
      "7 + (13 - (8 - 12))",
      "((7 + 12) - 8) + 13",
      "12 - (8 - (13 + 7))",
      "13 + (12 - (8 - 7))",
      "(12 - 8) * (13 - 7)",
      "(12 - (8 - 7)) + 13",
      "13 + ((12 - 8) + 7)",
      "7 - (8 - (12 + 13))"
    ]
  },
  "7 8 13 13": {
    "cards": "7 8 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 9 9": {
    "cards": "7 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 9 10": {
    "cards": "7 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 9 11": {
    "cards": "7 9 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 9 12": {
    "cards": "7 9 9 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 9 13": {
    "cards": "7 9 9 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(9 - 7) + (9 + 13)",
      "((9 + 13) - 7) + 9",
      "(13 + 9) - (7 - 9)",
      "(9 + (13 - 7)) + 9",
      "(9 + 9) + (13 - 7)",
      "9 + (9 - (7 - 13))",
      "13 + ((9 - 7) + 9)",
      "(9 - (7 - 9)) + 13",
      "9 - ((7 - 9) - 13)",
      "9 + (13 - (7 - 9))",
      "((9 + 9) - 7) + 13",
      "(13 - (7 - 9)) + 9",
      "(9 + 13) + (9 - 7)",
      "13 + (9 - (7 - 9))",
      "(9 + 9) - (7 - 13)",
      "((9 - 7) + 13) + 9",
      "9 + ((13 + 9) - 7)",
      "(13 + 9) + (9 - 7)",
      "(9 - (7 - 13)) + 9",
      "9 + (13 + (9 - 7))",
      "((9 - 7) + 9) + 13",
      "13 + ((9 + 9) - 7)",
      "(13 + (9 - 7)) + 9",
      "13 - ((7 - 9) - 9)",
      "(9 - 7) + (13 + 9)",
      "9 + ((9 - 7) + 13)",
      "((9 + 9) + 13) - 7",
      "((9 + 13) + 9) - 7",
      "13 + (9 + (9 - 7))",
      "9 - (7 - (13 + 9))",
      "9 - ((7 - 13) - 9)",
      "((13 - 7) + 9) + 9",
      "(9 + (9 + 13)) - 7",
      "(13 + (9 + 9)) - 7",
      "(9 + (13 + 9)) - 7",
      "13 - (7 - (9 + 9))",
      "((13 + 9) - 7) + 9",
      "(9 + 13) - (7 - 9)",
      "((13 + 9) + 9) - 7",
      "9 + ((9 + 13) - 7)",
      "9 + ((13 - 7) + 9)",
      "9 - (7 - (9 + 13))",
      "9 + (9 + (13 - 7))",
      "(9 + (9 - 7)) + 13",
      "(13 - 7) + (9 + 9)"
    ]
  },
  "7 9 10 10": {
    "cards": "7 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 10 11": {
    "cards": "7 9 10 11",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(7 * (11 - 9)) + 10",
      "(11 * (10 - 7)) - 9",
      "((10 - 7) * 11) - 9",
      "10 + (7 * (11 - 9))",
      "((11 - 9) * 7) + 10",
      "10 - ((9 - 11) * 7)",
      "10 + ((11 - 9) * 7)",
      "10 - (7 * (9 - 11))"
    ]
  },
  "7 9 10 12": {
    "cards": "7 9 10 12",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "((9 - 7) + 10) + 12",
      "((9 - 7) + 12) + 10",
      "(9 - 7) + (12 + 10)",
      "10 + (9 + (12 - 7))",
      "(9 + 10) + (12 - 7)",
      "((12 + 10) - 7) + 9",
      "((9 + 12) + 10) - 7",
      "(12 + (10 + 9)) - 7",
      "12 - ((7 - 9) - 10)",
      "(12 + (9 + 10)) - 7",
      "(10 + (12 + 9)) - 7",
      "(10 + (9 + 12)) - 7",
      "((12 + 9) + 10) - 7",
      "((12 - 7) + 10) + 9",
      "12 - ((7 - 10) - 9)",
      "(10 + (12 - 7)) + 9",
      "(12 + (9 - 7)) + 10",
      "10 + (9 - (7 - 12))",
      "10 - ((7 - 9) - 12)",
      "12 + ((10 - 7) + 9)",
      "10 - ((7 - 12) - 9)",
      "10 + ((12 + 9) - 7)",
      "((9 + 10) - 7) + 12",
      "(12 + (10 - 7)) + 9",
      "(10 - (7 - 12)) + 9",
      "(12 - 7) + (10 + 9)",
      "(9 + (10 + 12)) - 7",
      "12 + ((10 + 9) - 7)",
      "10 + ((12 - 7) + 9)",
      "10 + (12 - (7 - 9))",
      "10 + ((9 - 7) + 12)",
      "((12 - 7) + 9) + 10",
      "(10 + 12) - (7 - 9)",
      "((10 + 9) + 12) - 7",
      "12 + (9 + (10 - 7))",
      "12 + (9 - (7 - 10))",
      "9 - (7 - (10 + 12))",
      "(10 + (9 - 7)) + 12",
      "((10 + 12) + 9) - 7",
      "(9 + (10 - 7)) + 12",
      "(9 + 12) + (10 - 7)",
      "(10 - (7 - 9)) + 12",
      "12 - (7 - (9 + 10))",
      "(10 + 12) + (9 - 7)",
      "9 + (12 - (7 - 10))",
      "(12 + 9) - (7 - 10)",
      "10 + ((9 + 12) - 7)",
      "(9 - (7 - 10)) + 12",
      "9 + ((12 - 7) + 10)",
      "(12 - (7 - 9)) + 10",
      "((10 + 12) - 7) + 9",
      "(12 + 10) + (9 - 7)",
      "9 + (10 - (7 - 12))",
      "((12 + 9) - 7) + 10",
      "9 - ((7 - 12) - 10)",
      "(12 + 9) + (10 - 7)",
      "(12 + 10) - (7 - 9)",
      "((10 + 9) - 7) + 12",
      "9 + ((10 + 12) - 7)",
      "((10 - 7) + 12) + 9",
      "9 + (12 + (10 - 7))",
      "(9 + 12) - (7 - 10)",
      "12 + (10 + (9 - 7))",
      "(9 + 10) - (7 - 12)",
      "10 - (7 - (12 + 9))",
      "12 - (7 - (10 + 9))",
      "(9 + (12 - 7)) + 10",
      "(12 - (7 - 10)) + 9",
      "9 + ((12 + 10) - 7)",
      "(10 - 7) + (12 + 9)",
      "(10 - 7) + (9 + 12)",
      "9 - ((7 - 10) - 12)",
      "((12 + 10) + 9) - 7",
      "((9 + 12) - 7) + 10",
      "(12 - 7) + (9 + 10)",
      "9 - (7 - (12 + 10))",
      "9 + ((10 - 7) + 12)",
      "9 + (10 + (12 - 7))",
      "12 + (10 - (7 - 9))",
      "(10 + 9) + (12 - 7)",
      "10 + (12 + (9 - 7))",
      "(10 + 9) - (7 - 12)",
      "12 + ((9 - 7) + 10)",
      "(9 + (12 + 10)) - 7",
      "(9 - 7) + (10 + 12)",
      "((10 - 7) + 9) + 12",
      "12 + ((9 + 10) - 7)",
      "(9 - (7 - 12)) + 10",
      "10 - (7 - (9 + 12))",
      "((9 + 10) + 12) - 7"
    ]
  },
  "7 9 10 13": {
    "cards": "7 9 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 11 11": {
    "cards": "7 9 11 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "11 + (11 - (7 - 9))",
      "(9 + 11) + (11 - 7)",
      "(11 - (7 - 9)) + 11",
      "9 - ((7 - 11) - 11)",
      "((11 + 11) + 9) - 7",
      "(11 + (11 + 9)) - 7",
      "9 + ((11 + 11) - 7)",
      "(11 - (7 - 11)) + 9",
      "11 - ((7 - 11) - 9)",
      "(11 + (11 - 7)) + 9",
      "(11 + (9 - 7)) + 11",
      "11 + (9 - (7 - 11))",
      "11 - ((7 - 9) - 11)",
      "((9 - 7) + 11) + 11",
      "11 - (7 - (11 + 9))",
      "(11 + 9) + (11 - 7)",
      "(11 + 11) + (9 - 7)",
      "11 + ((11 + 9) - 7)",
      "((11 - 7) + 9) + 11",
      "(11 - 7) + (11 + 9)",
      "9 + ((11 - 7) + 11)",
      "9 + (11 - (7 - 11))",
      "(11 + 11) - (7 - 9)",
      "(11 - 7) + (9 + 11)",
      "(9 + (11 + 11)) - 7",
      "11 + ((9 + 11) - 7)",
      "11 + ((9 - 7) + 11)",
      "(9 - 7) + (11 + 11)",
      "9 - (7 - (11 + 11))",
      "(11 + 9) - (7 - 11)",
      "(9 + 11) - (7 - 11)",
      "((11 + 11) - 7) + 9",
      "11 + (9 + (11 - 7))",
      "(9 + (11 - 7)) + 11",
      "11 + ((11 - 7) + 9)",
      "((9 + 11) + 11) - 7",
      "(9 - (7 - 11)) + 11",
      "(11 + (9 + 11)) - 7",
      "((11 + 9) - 7) + 11",
      "11 - (7 - (9 + 11))",
      "((11 + 9) + 11) - 7",
      "11 + (11 + (9 - 7))",
      "((11 - 7) + 11) + 9",
      "((9 + 11) - 7) + 11",
      "9 + (11 + (11 - 7))"
    ]
  },
  "7 9 11 12": {
    "cards": "7 9 11 12",
    "has_solution": "Y",
    "num_solutions": 18,
    "solutions": [
      "((7 + 11) / 9) * 12",
      "12 * ((11 + 7) / 9)",
      "((11 + 7) * 12) / 9",
      "12 / (9 / (7 + 11))",
      "(11 + 7) * (12 / 9)",
      "((7 + 11) * 12) / 9",
      "(9 * (11 - 7)) - 12",
      "12 / (9 / (11 + 7))",
      "(12 / 9) * (11 + 7)",
      "12 * ((7 + 11) / 9)",
      "(7 + 11) * (12 / 9)",
      "((11 - 7) * 9) - 12",
      "(11 + 7) / (9 / 12)",
      "(12 * (11 + 7)) / 9",
      "((11 + 7) / 9) * 12",
      "(7 + 11) / (9 / 12)",
      "(12 * (7 + 11)) / 9",
      "(12 / 9) * (7 + 11)"
    ]
  },
  "7 9 11 13": {
    "cards": "7 9 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 12 12": {
    "cards": "7 9 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(9 * 12) - (7 * 12)",
      "(9 * 12) - (12 * 7)",
      "(12 * 9) - (12 * 7)",
      "(12 * 9) - (7 * 12)"
    ]
  },
  "7 9 12 13": {
    "cards": "7 9 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 9 13 13": {
    "cards": "7 9 13 13",
    "has_solution": "Y",
    "num_solutions": 49,
    "solutions": [
      "(7 - 9) + (13 + 13)",
      "7 + (13 - (9 - 13))",
      "7 - (9 - (13 + 13))",
      "(13 + (7 - 9)) + 13",
      "13 + ((7 - 9) + 13)",
      "(13 + (13 - 9)) + 7",
      "(7 + 13) + (13 - 9)",
      "13 + (7 + (13 - 9))",
      "(13 + 13) + (7 - 9)",
      "((13 - 9) + 13) + 7",
      "(13 - 9) + (7 + 13)",
      "13 - (9 - (7 + 13))",
      "13 + ((13 + 7) - 9)",
      "7 - ((9 - 13) - 13)",
      "(7 - 13) * (9 - 13)",
      "13 - (9 - (13 + 7))",
      "(9 - 13) * (7 - 13)",
      "13 - ((9 - 7) - 13)",
      "((13 - 9) + 7) + 13",
      "(13 + 7) - (9 - 13)",
      "7 + ((13 - 9) + 13)",
      "7 + ((13 + 13) - 9)",
      "13 + ((7 + 13) - 9)",
      "((7 - 9) + 13) + 13",
      "(13 - (9 - 7)) + 13",
      "(13 + 7) + (13 - 9)",
      "(7 + 13) - (9 - 13)",
      "(13 - 9) * (13 - 7)",
      "13 + (7 - (9 - 13))",
      "13 + (13 + (7 - 9))",
      "((7 + 13) - 9) + 13",
      "((13 + 7) + 13) - 9",
      "7 + (13 + (13 - 9))",
      "((13 + 13) - 9) + 7",
      "13 - ((9 - 13) - 7)",
      "13 + (13 - (9 - 7))",
      "(13 - 7) * (13 - 9)",
      "(7 - (9 - 13)) + 13",
      "((13 + 7) - 9) + 13",
      "(7 + (13 + 13)) - 9",
      "(13 + 13) - (9 - 7)",
      "((13 + 13) + 7) - 9",
      "(13 - 9) + (13 + 7)",
      "(13 + (7 + 13)) - 9",
      "(13 - (9 - 13)) + 7",
      "((7 + 13) + 13) - 9",
      "(13 + (13 + 7)) - 9",
      "(7 + (13 - 9)) + 13",
      "13 + ((13 - 9) + 7)"
    ]
  },
  "7 10 10 10": {
    "cards": "7 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 10 10 11": {
    "cards": "7 10 10 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "10 + (11 + (10 - 7))",
      "11 + ((10 + 10) - 7)",
      "(10 + 11) + (10 - 7)",
      "((10 + 10) - 7) + 11",
      "(11 - (7 - 10)) + 10",
      "10 + (10 - (7 - 11))",
      "11 - ((7 - 10) - 10)",
      "(10 + 10) - (7 - 11)",
      "11 - (7 - (10 + 10))",
      "(10 + (10 - 7)) + 11",
      "10 - ((7 - 10) - 11)",
      "((10 - 7) + 11) + 10",
      "11 + ((10 - 7) + 10)",
      "((10 - 7) + 10) + 11",
      "(10 + 11) - (7 - 10)",
      "10 + (10 + (11 - 7))",
      "((11 + 10) - 7) + 10",
      "11 + (10 - (7 - 10))",
      "(10 - 7) + (10 + 11)",
      "10 - (7 - (10 + 11))",
      "(11 - 7) + (10 + 10)",
      "((10 + 11) - 7) + 10",
      "(11 + 10) - (7 - 10)",
      "10 + ((11 - 7) + 10)",
      "(10 + (11 + 10)) - 7",
      "(10 + (11 - 7)) + 10",
      "((11 - 7) + 10) + 10",
      "((10 + 11) + 10) - 7",
      "((10 + 10) + 11) - 7",
      "10 + ((10 + 11) - 7)",
      "(10 + (10 + 11)) - 7",
      "11 + (10 + (10 - 7))",
      "10 + ((11 + 10) - 7)",
      "(11 + (10 + 10)) - 7",
      "(11 + (10 - 7)) + 10",
      "10 - (7 - (11 + 10))",
      "(10 - 7) + (11 + 10)",
      "10 + ((10 - 7) + 11)",
      "(10 - (7 - 11)) + 10",
      "(10 + 10) + (11 - 7)",
      "10 - ((7 - 11) - 10)",
      "(10 - (7 - 10)) + 11",
      "((11 + 10) + 10) - 7",
      "(11 + 10) + (10 - 7)",
      "10 + (11 - (7 - 10))"
    ]
  },
  "7 10 10 12": {
    "cards": "7 10 10 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(7 * (12 - 10)) + 10",
      "10 + ((12 - 10) * 7)",
      "10 - (7 * (10 - 12))",
      "10 + (7 * (12 - 10))",
      "10 - ((10 - 12) * 7)",
      "((12 - 10) * 7) + 10"
    ]
  },
  "7 10 10 13": {
    "cards": "7 10 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 10 11 11": {
    "cards": "7 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 10 11 12": {
    "cards": "7 10 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 10 11 13": {
    "cards": "7 10 11 13",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "((13 - 11) * 7) + 10",
      "10 + ((13 - 11) * 7)",
      "(7 * (13 - 11)) + 10",
      "10 - ((11 - 13) * 7)",
      "10 + (7 * (13 - 11))",
      "10 - (7 * (11 - 13))"
    ]
  },
  "7 10 12 12": {
    "cards": "7 10 12 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "12 * (10 / (12 - 7))",
      "(10 * 12) / (12 - 7)",
      "((10 - 7) * 12) - 12",
      "(12 * (10 - 7)) - 12",
      "(12 * 10) / (12 - 7)",
      "(12 / (12 - 7)) * 10",
      "10 * (12 / (12 - 7))",
      "10 / ((12 - 7) / 12)",
      "12 / ((12 - 7) / 10)",
      "(10 / (12 - 7)) * 12"
    ]
  },
  "7 10 12 13": {
    "cards": "7 10 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(12 * (7 + 13)) / 10",
      "((13 + 7) * 12) / 10",
      "((13 + 7) / 10) * 12",
      "(12 / 10) * (7 + 13)",
      "12 / (10 / (7 + 13))",
      "(12 / 10) * (13 + 7)",
      "((7 + 13) * 12) / 10",
      "(7 + 13) * (12 / 10)",
      "(7 + 13) / (10 / 12)",
      "12 * ((7 + 13) / 10)",
      "(13 + 7) / (10 / 12)",
      "(12 * (13 + 7)) / 10",
      "((7 + 13) / 10) * 12",
      "12 * ((13 + 7) / 10)",
      "(13 + 7) * (12 / 10)",
      "12 / (10 / (13 + 7))"
    ]
  },
  "7 10 13 13": {
    "cards": "7 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 11 11": {
    "cards": "7 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 11 12": {
    "cards": "7 11 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 11 13": {
    "cards": "7 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 12 12": {
    "cards": "7 11 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 12 13": {
    "cards": "7 11 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 11 13 13": {
    "cards": "7 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 12 12 12": {
    "cards": "7 12 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 12 12 13": {
    "cards": "7 12 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "((13 * 12) + 12) / 7",
      "(12 + (13 * 12)) / 7",
      "12 * (12 / (13 - 7))",
      "12 / ((13 - 7) / 12)",
      "(12 + (12 * 13)) / 7",
      "(12 / (13 - 7)) * 12",
      "((12 * 13) + 12) / 7",
      "(12 * 12) / (13 - 7)"
    ]
  },
  "7 12 13 13": {
    "cards": "7 12 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "7 13 13 13": {
    "cards": "7 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 8 8": {
    "cards": "8 8 8 8",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 8 9": {
    "cards": "8 8 8 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 8 10": {
    "cards": "8 8 8 10",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "(8 * (10 - 8)) + 8",
      "8 - (8 * (8 - 10))",
      "8 + (8 * (10 - 8))",
      "((10 - 8) * 8) + 8",
      "8 + ((10 - 8) * 8)",
      "8 - ((8 - 10) * 8)"
    ]
  },
  "8 8 8 11": {
    "cards": "8 8 8 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(8 * 11) - (8 * 8)",
      "(11 * 8) - (8 * 8)"
    ]
  },
  "8 8 8 12": {
    "cards": "8 8 8 12",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(8 * (12 - 8)) - 8",
      "((8 + 8) * 12) / 8",
      "(12 / 8) * (8 + 8)",
      "((12 - 8) * 8) - 8",
      "12 * ((8 + 8) / 8)",
      "((8 + 8) / 8) * 12",
      "12 / (8 / (8 + 8))",
      "(8 + 8) * (12 / 8)",
      "(12 * (8 + 8)) / 8",
      "(8 + 8) / (8 / 12)"
    ]
  },
  "8 8 8 13": {
    "cards": "8 8 8 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(8 - (13 - 8)) * 8",
      "((8 - 13) + 8) * 8",
      "8 * ((8 + 8) - 13)",
      "(8 + (8 - 13)) * 8",
      "((8 + 8) - 13) * 8",
      "8 * (8 + (8 - 13))",
      "8 * (8 - (13 - 8))",
      "8 * ((8 - 13) + 8)"
    ]
  },
  "8 8 9 9": {
    "cards": "8 8 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 9 10": {
    "cards": "8 8 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 9 11": {
    "cards": "8 8 9 11",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(8 / (11 - 8)) * 9",
      "(8 * 9) / (11 - 8)",
      "8 / ((11 - 8) / 9)",
      "8 + (8 * (11 - 9))",
      "8 - (8 * (9 - 11))",
      "(9 * 8) / (11 - 8)",
      "8 - ((9 - 11) * 8)",
      "(8 * (11 - 9)) + 8",
      "((11 - 9) * 8) + 8",
      "9 * (8 / (11 - 8))",
      "8 * (9 / (11 - 8))",
      "9 / ((11 - 8) / 8)",
      "(9 / (11 - 8)) * 8",
      "8 + ((11 - 9) * 8)"
    ]
  },
  "8 8 9 12": {
    "cards": "8 8 9 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(12 * 8) - (8 * 9)",
      "(12 * 8) - (9 * 8)",
      "(8 * 12) - (8 * 9)",
      "(8 * 12) - (9 * 8)"
    ]
  },
  "8 8 9 13": {
    "cards": "8 8 9 13",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(8 * (13 - 9)) - 8",
      "((13 - 9) * 8) - 8"
    ]
  },
  "8 8 10 10": {
    "cards": "8 8 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 10 11": {
    "cards": "8 8 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 10 12": {
    "cards": "8 8 10 12",
    "has_solution": "Y",
    "num_solutions": 6,
    "solutions": [
      "8 - ((10 - 12) * 8)",
      "8 + ((12 - 10) * 8)",
      "8 - (8 * (10 - 12))",
      "(8 * (12 - 10)) + 8",
      "((12 - 10) * 8) + 8",
      "8 + (8 * (12 - 10))"
    ]
  },
  "8 8 10 13": {
    "cards": "8 8 10 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "(10 + 13) + (8 / 8)",
      "(8 * 13) - (8 * 10)",
      "((8 / 8) + 13) + 10",
      "10 + ((8 / 8) + 13)",
      "13 + (10 + (8 / 8))",
      "(13 * 8) - (10 * 8)",
      "(13 + (8 / 8)) + 10",
      "10 + (13 + (8 / 8))",
      "(10 + (8 / 8)) + 13",
      "(8 / 8) + (10 + 13)",
      "(8 * 13) - (10 * 8)",
      "(13 + 10) + (8 / 8)",
      "((8 / 8) + 10) + 13",
      "(8 / 8) + (13 + 10)",
      "(13 * 8) - (8 * 10)",
      "13 + ((8 / 8) + 10)"
    ]
  },
  "8 8 11 11": {
    "cards": "8 8 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 8 11 12": {
    "cards": "8 8 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(8 / 8) + (11 + 12)",
      "(12 + 11) + (8 / 8)",
      "(11 + 12) + (8 / 8)",
      "11 + ((8 / 8) + 12)",
      "((8 / 8) + 12) + 11",
      "(11 + (8 / 8)) + 12",
      "(8 / 8) + (12 + 11)",
      "11 + (12 + (8 / 8))",
      "12 + (11 + (8 / 8))",
      "(12 + (8 / 8)) + 11",
      "((8 / 8) + 11) + 12",
      "12 + ((8 / 8) + 11)"
    ]
  },
  "8 8 11 13": {
    "cards": "8 8 11 13",
    "has_solution": "Y",
    "num_solutions": 144,
    "solutions": [
      "8 + (13 + (11 - 8))",
      "(11 / (8 / 8)) + 13",
      "(11 * (8 / 8)) + 13",
      "11 - (8 - (13 + 8))",
      "13 + (11 - (8 - 8))",
      "(8 * (13 - 11)) + 8",
      "(8 / 8) * (11 + 13)",
      "11 + (8 + (13 - 8))",
      "11 - ((8 - 13) - 8)",
      "8 - ((8 - 11) - 13)",
      "11 + (8 * (13 / 8))",
      "11 + ((8 / 8) * 13)",
      "(8 - 8) + (13 + 11)",
      "(8 + 11) - (8 - 13)",
      "(13 / (8 / 8)) + 11",
      "8 - ((8 - 13) - 11)",
      "(11 + 8) + (13 - 8)",
      "13 + (8 - (8 - 11))",
      "(11 - (8 - 13)) + 8",
      "(13 + 8) + (11 - 8)",
      "(13 + (11 - 8)) + 8",
      "13 + ((11 - 8) + 8)",
      "13 + ((11 * 8) / 8)",
      "11 + ((8 + 13) - 8)",
      "8 - (8 - (13 + 11))",
      "((8 + 13) + 11) - 8",
      "((8 + 13) - 8) + 11",
      "((8 / 8) * 13) + 11",
      "(11 + 13) - (8 - 8)",
      "8 + (13 - (8 - 11))",
      "8 + ((13 - 8) + 11)",
      "((11 - 8) + 8) + 13",
      "11 + (8 - (8 - 13))",
      "(8 + 13) + (11 - 8)",
      "11 + ((13 + 8) - 8)",
      "(11 - (8 - 8)) + 13",
      "((11 + 13) / 8) * 8",
      "((13 - 11) * 8) + 8",
      "8 + (8 * (13 - 11))",
      "(13 - (8 - 11)) + 8",
      "8 * ((11 + 13) / 8)",
      "8 + (11 - (8 - 13))",
      "13 + ((8 * 11) / 8)",
      "(8 * (13 / 8)) + 11",
      "8 * ((13 + 11) / 8)",
      "11 - (8 - (8 + 13))",
      "(11 + 13) * (8 / 8)",
      "(13 - 8) + (11 + 8)",
      "(11 + (13 + 8)) - 8",
      "(8 + (13 + 11)) - 8",
      "((11 + 13) - 8) + 8",
      "11 + ((13 / 8) * 8)",
      "(8 + (13 - 8)) + 11",
      "8 + ((11 + 13) - 8)",
      "((13 - 8) + 8) + 11",
      "((13 + 11) - 8) + 8",
      "(8 + 13) - (8 - 11)",
      "((11 + 13) * 8) / 8",
      "((13 - 8) + 11) + 8",
      "((13 + 11) + 8) - 8",
      "((8 / 8) * 11) + 13",
      "(11 - 8) + (13 + 8)",
      "((11 - 8) + 13) + 8",
      "13 - (8 - (8 + 11))",
      "13 - (8 - (11 + 8))",
      "(8 / 8) * (13 + 11)",
      "8 + ((11 - 8) + 13)",
      "((8 - 8) + 13) + 11",
      "8 - (8 - (11 + 13))",
      "8 / (8 / (13 + 11))",
      "((13 + 8) + 11) - 8",
      "13 + ((8 / 8) * 11)",
      "13 + (8 * (11 / 8))",
      "(8 + 11) + (13 - 8)",
      "(8 - (8 - 11)) + 13",
      "(8 - 8) + (11 + 13)",
      "((13 + 11) * 8) / 8",
      "(13 - 8) + (8 + 11)",
      "(11 + 13) + (8 - 8)",
      "8 - (8 * (11 - 13))",
      "(8 / (8 / 11)) + 13",
      "11 + ((8 - 8) + 13)",
      "13 + ((8 + 11) - 8)",
      "11 + (13 + (8 - 8))",
      "11 + (13 * (8 / 8))",
      "(11 + (13 - 8)) + 8",
      "11 + (8 / (8 / 13))",
      "13 - ((8 - 11) - 8)",
      "11 + ((13 * 8) / 8)",
      "(8 - (8 - 13)) + 11",
      "(11 + 8) - (8 - 13)",
      "13 + (8 + (11 - 8))",
      "((13 / 8) * 8) + 11",
      "(13 + 11) - (8 - 8)",
      "8 + ((13 + 11) - 8)",
      "13 + (11 * (8 / 8))",
      "13 + (8 / (8 / 11))",
      "13 - ((8 - 8) - 11)",
      "(13 + 8) - (8 - 11)",
      "13 + ((11 + 8) - 8)",
      "(13 + (11 + 8)) - 8",
      "13 + ((8 - 8) + 11)",
      "(8 + (11 - 8)) + 13",
      "(8 * (13 + 11)) / 8",
      "(8 + (11 + 13)) - 8",
      "(13 + (8 + 11)) - 8",
      "(8 * (11 + 13)) / 8",
      "((11 / 8) * 8) + 13",
      "(13 + (8 - 8)) + 11",
      "8 - ((11 - 13) * 8)",
      "(8 * (11 / 8)) + 13",
      "(13 + 11) / (8 / 8)",
      "((8 + 11) + 13) - 8",
      "11 + ((8 * 13) / 8)",
      "8 + ((13 - 11) * 8)",
      "(13 * (8 / 8)) + 11",
      "8 + (11 + (13 - 8))",
      "11 + (13 - (8 - 8))",
      "((11 + 8) - 8) + 13",
      "(13 + 11) * (8 / 8)",
      "(11 + 13) / (8 / 8)",
      "13 + ((11 / 8) * 8)",
      "((11 + 8) + 13) - 8",
      "((11 * 8) / 8) + 13",
      "(13 + 11) + (8 - 8)",
      "13 + (11 + (8 - 8))",
      "(11 + (8 - 8)) + 13",
      "((8 - 8) + 11) + 13",
      "((13 * 8) / 8) + 11",
      "11 - ((8 - 8) - 13)",
      "11 + ((13 - 8) + 8)",
      "((8 * 13) / 8) + 11",
      "(11 + (8 + 13)) - 8",
      "((13 + 11) / 8) * 8",
      "((8 * 11) / 8) + 13",
      "((13 + 8) - 8) + 11",
      "((11 + 13) + 8) - 8",
      "((8 + 11) - 8) + 13",
      "13 + (11 / (8 / 8))",
      "(11 - 8) + (8 + 13)",
      "(8 / (8 / 13)) + 11",
      "8 / (8 / (11 + 13))",
      "11 + (13 / (8 / 8))",
      "(13 - (8 - 8)) + 11"
    ]
  },
  "8 8 12 12": {
    "cards": "8 8 12 12",
    "has_solution": "Y",
    "num_solutions": 77,
    "solutions": [
      "8 + (12 + (12 - 8))",
      "((12 + 12) - 8) + 8",
      "((8 / 8) * 12) + 12",
      "((12 + 12) / 8) * 8",
      "(12 + (8 + 12)) - 8",
      "(12 - 8) + (12 + 8)",
      "((12 + 12) * 8) / 8",
      "12 + ((8 * 12) / 8)",
      "8 + ((12 + 12) - 8)",
      "12 + (12 * (8 / 8))",
      "(12 + (12 - 8)) + 8",
      "8 - (8 - (12 + 12))",
      "((12 * 8) / 8) + 12",
      "(12 - 8) + (8 + 12)",
      "(12 + 12) / (8 / 8)",
      "12 + ((12 * 8) / 8)",
      "((12 - 8) + 12) + 8",
      "(12 / (12 - 8)) * 8",
      "12 * (8 / (12 - 8))",
      "(8 * (12 / 8)) + 12",
      "8 + (12 - (8 - 12))",
      "12 + ((8 + 12) - 8)",
      "((12 + 8) + 12) - 8",
      "(12 * (8 / 8)) + 12",
      "(12 * 8) / (12 - 8)",
      "12 + (12 - (8 - 8))",
      "(8 - 8) + (12 + 12)",
      "12 + ((8 / 8) * 12)",
      "(12 - (8 - 8)) + 12",
      "(12 + (12 + 8)) - 8",
      "(12 + 12) * (8 / 8)",
      "(12 + 8) + (12 - 8)",
      "((8 + 12) - 8) + 12",
      "12 + (8 * (12 / 8))",
      "12 + (12 / (8 / 8))",
      "(8 / (12 - 8)) * 12",
      "12 + ((12 - 8) + 8)",
      "8 - ((8 - 12) - 12)",
      "((12 / 8) * 8) + 12",
      "(12 / (8 / 8)) + 12",
      "12 + ((12 / 8) * 8)",
      "(12 + (8 - 8)) + 12",
      "12 - ((8 - 12) - 8)",
      "12 - ((8 - 8) - 12)",
      "8 * (12 / (12 - 8))",
      "8 / ((12 - 8) / 12)",
      "12 - (8 - (8 + 12))",
      "12 / ((12 - 8) / 8)",
      "(8 + (12 + 12)) - 8",
      "(12 + 12) + (8 - 8)",
      "(8 + 12) - (8 - 12)",
      "12 + ((12 + 8) - 8)",
      "12 + (12 + (8 - 8))",
      "(12 + 12) - (8 - 8)",
      "(12 - (8 - 12)) + 8",
      "(8 + (12 - 8)) + 12",
      "(12 + 8) - (8 - 12)",
      "(8 * 12) / (12 - 8)",
      "12 + (8 - (8 - 12))",
      "((12 - 8) + 8) + 12",
      "8 * ((12 + 12) / 8)",
      "((8 + 12) + 12) - 8",
      "(8 / (8 / 12)) + 12",
      "12 + (8 / (8 / 12))",
      "((12 + 12) + 8) - 8",
      "8 + ((12 - 8) + 12)",
      "(8 * (12 + 12)) / 8",
      "((12 + 8) - 8) + 12",
      "((8 * 12) / 8) + 12",
      "(8 / 8) * (12 + 12)",
      "12 + ((8 - 8) + 12)",
      "(8 + 12) + (12 - 8)",
      "12 + (8 + (12 - 8))",
      "((8 - 8) + 12) + 12",
      "(8 - (8 - 12)) + 12",
      "8 / (8 / (12 + 12))",
      "12 - (8 - (12 + 8))"
    ]
  },
  "8 8 12 13": {
    "cards": "8 8 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 - (8 / 8)) + 13",
      "12 - ((8 / 8) - 13)",
      "13 + (12 - (8 / 8))",
      "(13 - (8 / 8)) + 12",
      "13 - ((8 / 8) - 12)",
      "(12 + 13) - (8 / 8)",
      "(13 + 12) - (8 / 8)",
      "12 + (13 - (8 / 8))"
    ]
  },
  "8 8 13 13": {
    "cards": "8 8 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 9 9": {
    "cards": "8 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 9 10": {
    "cards": "8 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 9 11": {
    "cards": "8 9 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 9 12": {
    "cards": "8 9 9 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "9 * (8 / (12 - 9))",
      "8 / ((12 - 9) / 9)",
      "(9 / (12 - 9)) * 8",
      "9 / ((12 - 9) / 8)",
      "8 * (9 / (12 - 9))",
      "(9 * 8) / (12 - 9)",
      "(8 * 9) / (12 - 9)",
      "(8 / (12 - 9)) * 9"
    ]
  },
  "8 9 9 13": {
    "cards": "8 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 10 10": {
    "cards": "8 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 10 11": {
    "cards": "8 9 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 9 10 12": {
    "cards": "8 9 10 12",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "((12 / 8) * 10) + 9",
      "(12 / (8 / 10)) + 9",
      "12 * ((10 + 8) / 9)",
      "9 + (10 * (12 / 8))",
      "9 + ((10 * 12) / 8)",
      "9 + ((12 * 10) / 8)",
      "12 * ((8 + 10) / 9)",
      "((10 / 8) * 12) + 9",
      "((12 * 10) / 8) + 9",
      "(10 * (12 / 8)) + 9",
      "((8 + 10) * 12) / 9",
      "((10 + 8) / 9) * 12",
      "12 / (9 / (10 + 8))",
      "9 + ((10 / 8) * 12)",
      "12 / (9 / (8 + 10))",
      "((10 + 8) * 12) / 9",
      "(12 * (10 / 8)) + 9",
      "(8 + 10) * (12 / 9)",
      "(12 * (8 + 10)) / 9",
      "((8 + 10) / 9) * 12",
      "(8 + 10) / (9 / 12)",
      "(10 / (8 / 12)) + 9",
      "9 + (10 / (8 / 12))",
      "(10 + 8) / (9 / 12)",
      "9 + (12 * (10 / 8))",
      "9 + (12 / (8 / 10))",
      "(12 / 9) * (8 + 10)",
      "(12 * (10 + 8)) / 9",
      "((10 * 12) / 8) + 9",
      "9 + ((12 / 8) * 10)",
      "(10 + 8) * (12 / 9)",
      "(12 / 9) * (10 + 8)"
    ]
  },
  "8 9 10 13": {
    "cards": "8 9 10 13",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "9 - ((8 - 10) - 13)",
      "(10 + 13) - (8 - 9)",
      "(9 + 10) - (8 - 13)",
      "((9 - 8) + 13) + 10",
      "9 * (8 / (13 - 10))",
      "(10 - 8) + (13 + 9)",
      "(13 + (9 - 8)) + 10",
      "(9 - 8) + (10 + 13)",
      "(13 - (8 - 9)) + 10",
      "((13 + 9) - 8) + 10",
      "((10 + 13) - 8) + 9",
      "13 - (8 - (9 + 10))",
      "(9 + (13 + 10)) - 8",
      "(13 - 8) + (9 + 10)",
      "(9 * 8) / (13 - 10)",
      "10 + (13 + (9 - 8))",
      "(10 + (9 + 13)) - 8",
      "(9 + (13 - 8)) + 10",
      "(13 + (10 - 8)) + 9",
      "9 + ((10 - 8) + 13)",
      "(10 + (13 + 9)) - 8",
      "(8 / (13 - 10)) * 9",
      "((9 + 10) - 8) + 13",
      "13 - ((8 - 10) - 9)",
      "(10 + 9) + (13 - 8)",
      "9 + (10 - (8 - 13))",
      "(9 - (8 - 13)) + 10",
      "8 / ((13 - 10) / 9)",
      "9 + ((10 + 13) - 8)",
      "(9 + 13) + (10 - 8)",
      "(13 + 9) - (8 - 10)",
      "(13 - 8) + (10 + 9)",
      "(9 - 8) + (13 + 10)",
      "(13 + 10) + (9 - 8)",
      "((9 - 8) + 10) + 13",
      "(13 + 9) + (10 - 8)",
      "9 + (13 - (8 - 10))",
      "((13 - 8) + 10) + 9",
      "8 * (9 / (13 - 10))",
      "13 - ((8 - 9) - 10)",
      "((9 + 13) - 8) + 10",
      "10 + (13 - (8 - 9))",
      "10 + ((13 - 8) + 9)",
      "(9 + 10) + (13 - 8)",
      "(13 + 10) - (8 - 9)",
      "9 + (10 + (13 - 8))",
      "9 / ((13 - 10) / 8)",
      "(13 + (9 + 10)) - 8",
      "(9 + (10 - 8)) + 13",
      "((10 + 13) + 9) - 8",
      "10 + (9 - (8 - 13))",
      "9 - ((8 - 13) - 10)",
      "10 + ((9 - 8) + 13)",
      "9 - (8 - (13 + 10))",
      "(10 - 8) + (9 + 13)",
      "(9 / (13 - 10)) * 8",
      "10 + (9 + (13 - 8))",
      "10 + ((13 + 9) - 8)",
      "((10 + 9) + 13) - 8",
      "10 - (8 - (9 + 13))",
      "13 - (8 - (10 + 9))",
      "13 + ((10 - 8) + 9)",
      "(13 - (8 - 10)) + 9",
      "9 - (8 - (10 + 13))",
      "(10 + (13 - 8)) + 9",
      "(10 + (9 - 8)) + 13",
      "((10 - 8) + 13) + 9",
      "((9 + 13) + 10) - 8",
      "9 + ((13 - 8) + 10)",
      "13 + (9 + (10 - 8))",
      "9 + ((13 + 10) - 8)",
      "13 + ((9 - 8) + 10)",
      "10 - ((8 - 9) - 13)",
      "(9 + 13) - (8 - 10)",
      "(10 + 9) - (8 - 13)",
      "(8 * 9) / (13 - 10)",
      "13 + (10 - (8 - 9))",
      "((10 - 8) + 9) + 13",
      "(9 + (10 + 13)) - 8",
      "10 - (8 - (13 + 9))",
      "(13 + (10 + 9)) - 8",
      "((13 + 10) + 9) - 8",
      "(9 - (8 - 10)) + 13",
      "((9 + 10) + 13) - 8",
      "13 + ((10 + 9) - 8)",
      "10 - ((8 - 13) - 9)",
      "(10 + 13) + (9 - 8)",
      "((10 + 9) - 8) + 13",
      "(10 - (8 - 13)) + 9",
      "13 + (10 + (9 - 8))",
      "13 + (9 - (8 - 10))",
      "((13 - 8) + 9) + 10",
      "9 + (13 + (10 - 8))",
      "(10 - (8 - 9)) + 13",
      "13 + ((9 + 10) - 8)",
      "((13 + 10) - 8) + 9",
      "10 + ((9 + 13) - 8)",
      "((13 + 9) + 10) - 8"
    ]
  },
  "8 9 11 11": {
    "cards": "8 9 11 11",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(11 * (11 - 8)) - 9",
      "((11 - 8) * 11) - 9"
    ]
  },
  "8 9 11 12": {
    "cards": "8 9 11 12",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "((9 + 11) + 12) - 8",
      "11 - (8 - (9 + 12))",
      "((9 - 8) + 12) + 11",
      "9 + ((11 - 8) + 12)",
      "(12 + 9) - (8 - 11)",
      "((9 + 12) - 8) + 11",
      "11 + ((9 - 8) + 12)",
      "12 + ((11 - 8) + 9)",
      "(9 + 12) - (8 - 11)",
      "12 - ((8 - 9) - 11)",
      "9 + (11 + (12 - 8))",
      "11 + (12 - (8 - 9))",
      "11 - ((8 - 9) - 12)",
      "9 + ((12 - 8) + 11)",
      "11 - (8 - (12 + 9))",
      "((11 + 9) + 12) - 8",
      "(9 + 12) + (11 - 8)",
      "(9 - (8 - 12)) + 11",
      "((12 - 8) + 11) + 9",
      "9 - (8 - (11 + 12))",
      "9 + ((11 + 12) - 8)",
      "(11 - 8) + (12 + 9)",
      "(11 + 9) - (8 - 12)",
      "12 + (11 + (9 - 8))",
      "((11 - 8) + 12) + 9",
      "9 - (8 - (12 + 11))",
      "((11 + 12) + 9) - 8",
      "(11 - (8 - 9)) + 12",
      "11 + (9 - (8 - 12))",
      "(11 + (9 + 12)) - 8",
      "(11 + (12 + 9)) - 8",
      "((12 + 9) - 8) + 11",
      "11 + (9 + (12 - 8))",
      "(9 + (11 + 12)) - 8",
      "9 + ((12 + 11) - 8)",
      "(11 + 9) + (12 - 8)",
      "11 + ((12 + 9) - 8)",
      "((12 + 11) + 9) - 8",
      "((12 + 11) - 8) + 9",
      "((9 + 12) + 11) - 8",
      "(11 + (12 - 8)) + 9",
      "12 - (8 - (9 + 11))",
      "((12 - 8) + 9) + 11",
      "(12 + (11 - 8)) + 9",
      "12 - (8 - (11 + 9))",
      "(12 + 11) - (8 - 9)",
      "((11 + 9) - 8) + 12",
      "9 - ((8 - 12) - 11)",
      "(12 - 8) + (11 + 9)",
      "(11 + 12) + (9 - 8)",
      "12 + (9 - (8 - 11))",
      "(9 - (8 - 11)) + 12",
      "(12 + (9 + 11)) - 8",
      "12 + (9 + (11 - 8))",
      "11 + ((12 - 8) + 9)",
      "((9 + 11) - 8) + 12",
      "12 + ((9 - 8) + 11)",
      "(12 - (8 - 9)) + 11",
      "9 + (12 - (8 - 11))",
      "(9 + (12 - 8)) + 11",
      "((11 + 12) - 8) + 9",
      "(12 + 9) + (11 - 8)",
      "(9 + 11) + (12 - 8)",
      "9 - ((8 - 11) - 12)",
      "(11 - 8) + (9 + 12)",
      "(12 + 11) + (9 - 8)",
      "(11 + 12) - (8 - 9)",
      "11 + (12 + (9 - 8))",
      "((12 + 9) + 11) - 8",
      "(11 + (9 - 8)) + 12",
      "((9 - 8) + 11) + 12",
      "12 - ((8 - 11) - 9)",
      "9 + (11 - (8 - 12))",
      "(12 - (8 - 11)) + 9",
      "11 + ((9 + 12) - 8)",
      "(12 + (9 - 8)) + 11",
      "(12 + (11 + 9)) - 8",
      "(9 + (12 + 11)) - 8",
      "(9 - 8) + (12 + 11)",
      "12 + (11 - (8 - 9))",
      "(12 - 8) + (9 + 11)",
      "(9 + 11) - (8 - 12)",
      "(11 - (8 - 12)) + 9",
      "12 + ((9 + 11) - 8)",
      "(9 - 8) + (11 + 12)",
      "9 + (12 + (11 - 8))",
      "(9 + (11 - 8)) + 12",
      "11 - ((8 - 12) - 9)",
      "12 + ((11 + 9) - 8)",
      "((11 - 8) + 9) + 12"
    ]
  },
  "8 9 11 13": {
    "cards": "8 9 11 13",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(13 + 11) * (9 - 8)",
      "(9 - 8) * (11 + 13)",
      "(11 / (9 - 8)) + 13",
      "11 - (13 * (8 - 9))",
      "(11 + 13) * (9 - 8)",
      "11 - (13 / (8 - 9))",
      "(11 * (9 - 8)) + 13",
      "11 - ((8 - 9) * 13)",
      "(13 + 11) / (9 - 8)",
      "13 - (11 * (8 - 9))",
      "(13 / (9 - 8)) + 11",
      "11 + (13 / (9 - 8))",
      "(13 * (9 - 8)) + 11",
      "13 + (11 / (9 - 8))",
      "13 + (11 * (9 - 8))",
      "11 + (13 * (9 - 8))",
      "11 + ((9 - 8) * 13)",
      "((9 - 8) * 11) + 13",
      "13 + ((9 - 8) * 11)",
      "13 - (11 / (8 - 9))",
      "13 - ((8 - 9) * 11)",
      "(11 + 13) / (9 - 8)",
      "(9 - 8) * (13 + 11)",
      "((9 - 8) * 13) + 11"
    ]
  },
  "8 9 12 12": {
    "cards": "8 9 12 12",
    "has_solution": "Y",
    "num_solutions": 22,
    "solutions": [
      "8 + ((12 * 12) / 9)",
      "(9 - 8) * (12 + 12)",
      "((9 - 8) * 12) + 12",
      "(12 + 12) * (9 - 8)",
      "12 + ((9 - 8) * 12)",
      "12 - (12 / (8 - 9))",
      "8 + ((12 / 9) * 12)",
      "(12 + 12) / (9 - 8)",
      "(12 / (9 - 8)) + 12",
      "(12 * (12 / 9)) + 8",
      "12 - ((8 - 9) * 12)",
      "12 - (12 * (8 - 9))",
      "12 + (12 * (9 - 8))",
      "(12 / (9 / 12)) + 8",
      "((12 - 8) * 9) - 12",
      "((12 / 9) * 12) + 8",
      "8 + (12 / (9 / 12))",
      "12 + (12 / (9 - 8))",
      "(9 * (12 - 8)) - 12",
      "8 + (12 * (12 / 9))",
      "(12 * (9 - 8)) + 12",
      "((12 * 12) / 9) + 8"
    ]
  },
  "8 9 12 13": {
    "cards": "8 9 12 13",
    "has_solution": "Y",
    "num_solutions": 98,
    "solutions": [
      "8 + (13 - (9 - 12))",
      "((8 + 12) + 13) - 9",
      "13 + ((12 + 8) - 9)",
      "12 + ((13 - 9) + 8)",
      "(12 + 13) - (9 - 8)",
      "13 + (12 - (9 - 8))",
      "12 - ((9 - 8) - 13)",
      "(13 + 12) + (8 - 9)",
      "(12 * 8) / (13 - 9)",
      "(8 - (9 - 12)) + 13",
      "12 + (13 - (9 - 8))",
      "((13 + 8) + 12) - 9",
      "((13 - 9) + 12) + 8",
      "(12 + (13 - 9)) + 8",
      "(12 - 9) + (13 + 8)",
      "(8 + (12 + 13)) - 9",
      "13 - ((9 - 8) - 12)",
      "((8 - 9) + 13) + 12",
      "8 + (12 - (9 - 13))",
      "8 - ((9 - 13) - 12)",
      "(12 - (9 - 8)) + 13",
      "8 + (13 + (12 - 9))",
      "(8 * 12) / (13 - 9)",
      "8 + ((12 - 9) + 13)",
      "(8 + (13 - 9)) + 12",
      "13 + ((8 + 12) - 9)",
      "8 * (12 / (13 - 9))",
      "(8 + (13 + 12)) - 9",
      "(13 + (12 + 8)) - 9",
      "(8 / (13 - 9)) * 12",
      "(13 + 8) + (12 - 9)",
      "8 + ((13 - 9) + 12)",
      "13 - ((9 - 12) - 8)",
      "((13 + 8) - 9) + 12",
      "((13 + 12) - 9) + 8",
      "((8 + 13) - 9) + 12",
      "(13 + 8) - (9 - 12)",
      "(12 - 9) + (8 + 13)",
      "12 + (8 + (13 - 9))",
      "13 - (9 - (12 + 8))",
      "(13 - (9 - 8)) + 12",
      "12 + (8 - (9 - 13))",
      "12 + ((8 - 9) + 13)",
      "(8 - 9) + (13 + 12)",
      "((12 - 9) + 8) + 13",
      "13 + ((12 - 9) + 8)",
      "((8 - 9) + 12) + 13",
      "(12 + (8 - 9)) + 13",
      "13 - (9 - (8 + 12))",
      "(13 + (8 + 12)) - 9",
      "(8 - 9) + (12 + 13)",
      "((12 + 13) - 9) + 8",
      "(8 + 12) - (9 - 13)",
      "(13 + (12 - 9)) + 8",
      "13 + ((8 - 9) + 12)",
      "8 - (9 - (12 + 13))",
      "(13 - 9) + (12 + 8)",
      "(13 + 12) - (9 - 8)",
      "12 / ((13 - 9) / 8)",
      "(8 + 13) - (9 - 12)",
      "8 - (9 - (13 + 12))",
      "((12 + 8) + 13) - 9",
      "(13 + (8 - 9)) + 12",
      "12 * (8 / (13 - 9))",
      "(8 - (9 - 13)) + 12",
      "(13 - (9 - 12)) + 8",
      "(8 + (12 - 9)) + 13",
      "((8 + 13) + 12) - 9",
      "(12 + (8 + 13)) - 9",
      "(12 + 8) + (13 - 9)",
      "12 + ((13 + 8) - 9)",
      "((8 + 12) - 9) + 13",
      "12 - (9 - (13 + 8))",
      "12 - (9 - (8 + 13))",
      "(12 / (13 - 9)) * 8",
      "(12 + (13 + 8)) - 9",
      "8 / ((13 - 9) / 12)",
      "((13 + 12) + 8) - 9",
      "(8 + 12) + (13 - 9)",
      "8 + (12 + (13 - 9))",
      "13 + (12 + (8 - 9))",
      "((12 - 9) + 13) + 8",
      "8 - ((9 - 12) - 13)",
      "8 + ((13 + 12) - 9)",
      "(12 + 13) + (8 - 9)",
      "(12 - (9 - 13)) + 8",
      "12 + (13 + (8 - 9))",
      "(8 + 13) + (12 - 9)",
      "((13 - 9) + 8) + 12",
      "13 + (8 + (12 - 9))",
      "12 + ((8 + 13) - 9)",
      "((12 + 8) - 9) + 13",
      "12 - ((9 - 13) - 8)",
      "((12 + 13) + 8) - 9",
      "(12 + 8) - (9 - 13)",
      "13 + (8 - (9 - 12))",
      "(13 - 9) + (8 + 12)",
      "8 + ((12 + 13) - 9)"
    ]
  },
  "8 9 13 13": {
    "cards": "8 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 10 10": {
    "cards": "8 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 10 11": {
    "cards": "8 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 10 12": {
    "cards": "8 10 10 12",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(10 - 8) + (10 + 12)",
      "(10 + (12 + 10)) - 8",
      "10 - ((8 - 12) - 10)",
      "(10 + 12) + (10 - 8)",
      "12 - (8 - (10 + 10))",
      "10 + (12 - (8 - 10))",
      "((10 + 12) + 10) - 8",
      "(10 - (8 - 10)) + 12",
      "((12 - 8) + 10) + 10",
      "10 + ((10 + 12) - 8)",
      "10 - (8 - (12 + 10))",
      "(10 + 10) - (8 - 12)",
      "10 + ((10 - 8) + 12)",
      "10 + ((12 - 8) + 10)",
      "((10 + 12) - 8) + 10",
      "(10 + 12) - (8 - 10)",
      "(10 + (12 - 8)) + 10",
      "10 - (8 - (10 + 12))",
      "(12 + (10 - 8)) + 10",
      "(12 + 10) - (8 - 10)",
      "((10 - 8) + 12) + 10",
      "10 - ((8 - 10) - 12)",
      "(12 + (10 + 10)) - 8",
      "(10 + 10) + (12 - 8)",
      "(12 - (8 - 10)) + 10",
      "(10 + (10 - 8)) + 12",
      "(12 + 10) + (10 - 8)",
      "10 + (10 + (12 - 8))",
      "((10 - 8) + 10) + 12",
      "((12 + 10) + 10) - 8",
      "12 + ((10 + 10) - 8)",
      "10 + (10 - (8 - 12))",
      "(10 - 8) + (12 + 10)",
      "12 + ((10 - 8) + 10)",
      "(12 - 8) + (10 + 10)",
      "10 + (12 + (10 - 8))",
      "(10 + (10 + 12)) - 8",
      "((10 + 10) + 12) - 8",
      "12 - ((8 - 10) - 10)",
      "((10 + 10) - 8) + 12",
      "(10 - (8 - 12)) + 10",
      "((12 + 10) - 8) + 10",
      "10 + ((12 + 10) - 8)",
      "12 + (10 + (10 - 8))",
      "12 + (10 - (8 - 10))"
    ]
  },
  "8 10 10 13": {
    "cards": "8 10 10 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 11 11": {
    "cards": "8 10 11 11",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(11 - (8 - 11)) + 10",
      "((11 - 8) + 11) + 10",
      "11 + (10 - (8 - 11))",
      "(11 + 11) - (8 - 10)",
      "11 - (8 - (11 + 10))",
      "11 + ((10 + 11) - 8)",
      "((10 + 11) + 11) - 8",
      "(11 + 11) + (10 - 8)",
      "((11 - 8) + 10) + 11",
      "10 + (11 + (11 - 8))",
      "(11 + 10) + (11 - 8)",
      "10 + ((11 - 8) + 11)",
      "(11 + (10 + 11)) - 8",
      "11 + (11 - (8 - 10))",
      "10 - (8 - (11 + 11))",
      "(11 + (10 - 8)) + 11",
      "((11 + 10) + 11) - 8",
      "(11 + (11 - 8)) + 10",
      "10 + (11 - (8 - 11))",
      "(11 - 8) + (11 + 10)",
      "(10 - (8 - 11)) + 11",
      "(10 + 11) - (8 - 11)",
      "(11 - (8 - 10)) + 11",
      "11 + ((11 - 8) + 10)",
      "11 + (10 + (11 - 8))",
      "11 + (11 + (10 - 8))",
      "(11 + 10) - (8 - 11)",
      "((11 + 11) + 10) - 8",
      "(10 - 8) + (11 + 11)",
      "(11 - 8) + (10 + 11)",
      "((11 + 10) - 8) + 11",
      "((10 - 8) + 11) + 11",
      "11 - ((8 - 11) - 10)",
      "11 + ((11 + 10) - 8)",
      "((10 + 11) - 8) + 11",
      "(10 + 11) + (11 - 8)",
      "(10 + (11 - 8)) + 11",
      "10 - ((8 - 11) - 11)",
      "(10 + (11 + 11)) - 8",
      "((11 + 11) - 8) + 10",
      "10 + ((11 + 11) - 8)",
      "11 - ((8 - 10) - 11)",
      "(11 + (11 + 10)) - 8",
      "11 + ((10 - 8) + 11)",
      "11 - (8 - (10 + 11))"
    ]
  },
  "8 10 11 12": {
    "cards": "8 10 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 11 13": {
    "cards": "8 10 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 10 12 12": {
    "cards": "8 10 12 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "(12 + 8) * (12 / 10)",
      "(10 * 12) - (8 * 12)",
      "((8 + 12) / 10) * 12",
      "(12 * 10) - (8 * 12)",
      "((8 + 12) * 12) / 10",
      "(10 * 12) - (12 * 8)",
      "12 / (10 / (8 + 12))",
      "(8 + 12) * (12 / 10)",
      "12 / (10 / (12 + 8))",
      "(12 / 10) * (12 + 8)",
      "(12 * (8 + 12)) / 10",
      "((12 + 8) / 10) * 12",
      "((12 + 8) * 12) / 10",
      "(12 / 10) * (8 + 12)",
      "12 * ((8 + 12) / 10)",
      "12 * ((12 + 8) / 10)",
      "(12 + 8) / (10 / 12)",
      "(8 + 12) / (10 / 12)",
      "(12 * 10) - (12 * 8)",
      "(12 * (12 + 8)) / 10"
    ]
  },
  "8 10 12 13": {
    "cards": "8 10 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "12 / ((13 - 8) / 10)",
      "(12 * 10) / (13 - 8)",
      "10 / ((13 - 8) / 12)",
      "12 * (10 / (13 - 8))",
      "10 * (12 / (13 - 8))",
      "(10 * 12) / (13 - 8)",
      "(12 / (13 - 8)) * 10",
      "(10 / (13 - 8)) * 12"
    ]
  },
  "8 10 13 13": {
    "cards": "8 10 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "13 + ((8 - 10) + 13)",
      "((13 + 8) - 10) + 13",
      "13 - ((10 - 8) - 13)",
      "(13 + (13 + 8)) - 10",
      "13 - ((10 - 13) - 8)",
      "((8 + 13) + 13) - 10",
      "(8 - (10 - 13)) + 13",
      "(8 + (13 - 10)) + 13",
      "13 - (10 - (13 + 8))",
      "(8 + 13) - (10 - 13)",
      "8 + (13 + (13 - 10))",
      "(13 + 8) + (13 - 10)",
      "13 + (8 + (13 - 10))",
      "((13 - 10) + 8) + 13",
      "(13 - (10 - 8)) + 13",
      "(13 + (13 - 10)) + 8",
      "((8 + 13) - 10) + 13",
      "13 + (13 - (10 - 8))",
      "13 + ((8 + 13) - 10)",
      "(8 + (13 + 13)) - 10",
      "(13 + (8 - 10)) + 13",
      "((13 + 13) - 10) + 8",
      "((13 - 10) + 13) + 8",
      "8 + (13 - (10 - 13))",
      "(13 - 10) + (8 + 13)",
      "8 - ((10 - 13) - 13)",
      "(13 + 13) + (8 - 10)",
      "13 + (13 + (8 - 10))",
      "(13 - (10 - 13)) + 8",
      "(13 - 10) + (13 + 8)",
      "(13 + (8 + 13)) - 10",
      "13 + ((13 + 8) - 10)",
      "13 + ((13 - 10) + 8)",
      "(8 + 13) + (13 - 10)",
      "8 + ((13 - 10) + 13)",
      "8 + ((13 + 13) - 10)",
      "(8 - 10) + (13 + 13)",
      "8 - (10 - (13 + 13))",
      "((8 - 10) + 13) + 13",
      "((13 + 8) + 13) - 10",
      "13 + (8 - (10 - 13))",
      "13 - (10 - (8 + 13))",
      "(13 + 8) - (10 - 13)",
      "((13 + 13) + 8) - 10",
      "(13 + 13) - (10 - 8)"
    ]
  },
  "8 11 11 11": {
    "cards": "8 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 11 11 12": {
    "cards": "8 11 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 11 11 13": {
    "cards": "8 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 11 12 12": {
    "cards": "8 11 12 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "((11 - 8) * 12) - 12",
      "(12 * (11 - 8)) - 12"
    ]
  },
  "8 11 12 13": {
    "cards": "8 11 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 11 13 13": {
    "cards": "8 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 12 12 12": {
    "cards": "8 12 12 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 12 12 13": {
    "cards": "8 12 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 12 13 13": {
    "cards": "8 12 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "8 13 13 13": {
    "cards": "8 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 9 9": {
    "cards": "9 9 9 9",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 9 10": {
    "cards": "9 9 9 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 9 11": {
    "cards": "9 9 9 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 9 12": {
    "cards": "9 9 9 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 * (9 + 9)) / 9",
      "(9 + 9) / (9 / 12)",
      "((9 + 9) * 12) / 9",
      "((9 + 9) / 9) * 12",
      "12 * ((9 + 9) / 9)",
      "12 / (9 / (9 + 9))",
      "(12 / 9) * (9 + 9)",
      "(9 + 9) * (12 / 9)"
    ]
  },
  "9 9 9 13": {
    "cards": "9 9 9 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 10 10": {
    "cards": "9 9 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 10 11": {
    "cards": "9 9 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 10 12": {
    "cards": "9 9 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 10 13": {
    "cards": "9 9 10 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "10 + (13 + (9 / 9))",
      "(9 / 9) + (10 + 13)",
      "13 + ((9 / 9) + 10)",
      "(9 / 9) + (13 + 10)",
      "(13 + 10) + (9 / 9)",
      "13 + (10 + (9 / 9))",
      "(10 + (9 / 9)) + 13",
      "((9 / 9) + 10) + 13",
      "10 + ((9 / 9) + 13)",
      "(13 + (9 / 9)) + 10",
      "(10 + 13) + (9 / 9)",
      "((9 / 9) + 13) + 10"
    ]
  },
  "9 9 11 11": {
    "cards": "9 9 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 9 11 12": {
    "cards": "9 9 11 12",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(9 / 9) + (11 + 12)",
      "12 + (11 + (9 / 9))",
      "(11 + (9 / 9)) + 12",
      "((12 - 9) * 11) - 9",
      "(9 / 9) + (12 + 11)",
      "11 + ((9 / 9) + 12)",
      "12 + ((9 / 9) + 11)",
      "(12 + 11) + (9 / 9)",
      "((9 / 9) + 11) + 12",
      "(11 * (12 - 9)) - 9",
      "11 + (12 + (9 / 9))",
      "(12 + (9 / 9)) + 11",
      "(11 + 12) + (9 / 9)",
      "((9 / 9) + 12) + 11"
    ]
  },
  "9 9 11 13": {
    "cards": "9 9 11 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "((9 + 11) + 13) - 9",
      "((9 - 9) + 13) + 11",
      "((9 / 9) * 11) + 13",
      "11 + (9 - (9 - 13))",
      "(11 - (9 - 9)) + 13",
      "13 + (11 - (9 - 9))",
      "(11 + 13) - (9 - 9)",
      "((11 + 13) - 9) + 9",
      "(9 + 13) - (9 - 11)",
      "((11 + 9) - 9) + 13",
      "((9 * 13) / 9) + 11",
      "(9 * (11 / 9)) + 13",
      "((9 + 11) - 9) + 13",
      "9 - ((9 - 13) - 11)",
      "(11 + 9) + (13 - 9)",
      "11 + (9 / (9 / 13))",
      "(11 * (9 / 9)) + 13",
      "11 + ((13 + 9) - 9)",
      "11 - (9 - (13 + 9))",
      "(9 * (11 + 13)) / 9",
      "(13 / (9 / 9)) + 11",
      "(11 - 9) + (13 + 9)",
      "((11 + 13) + 9) - 9",
      "(11 + (9 + 13)) - 9",
      "11 + ((13 - 9) + 9)",
      "13 - (9 - (9 + 11))",
      "9 * ((11 + 13) / 9)",
      "11 + (9 + (13 - 9))",
      "11 + ((9 / 9) * 13)",
      "((11 / 9) * 9) + 13",
      "((11 * 9) / 9) + 13",
      "9 / (9 / (13 + 11))",
      "13 + ((9 + 11) - 9)",
      "11 - (9 - (9 + 13))",
      "9 + ((13 + 11) - 9)",
      "(11 + (13 - 9)) + 9",
      "((11 + 13) * 9) / 9",
      "13 + (11 / (9 / 9))",
      "(9 * (13 / 9)) + 11",
      "((13 + 11) * 9) / 9",
      "13 - ((9 - 11) - 9)",
      "(9 / (9 / 11)) + 13",
      "(11 + (9 - 9)) + 13",
      "(11 + 9) - (9 - 13)",
      "(9 - (9 - 13)) + 11",
      "(9 / 9) * (13 + 11)",
      "(13 + 9) + (11 - 9)",
      "11 + ((9 * 13) / 9)",
      "11 + (13 * (9 / 9))",
      "13 + ((11 * 9) / 9)",
      "((11 + 13) / 9) * 9",
      "(13 - 9) + (11 + 9)",
      "(13 + (9 - 9)) + 11",
      "(9 + (13 - 9)) + 11",
      "9 + (11 - (9 - 13))",
      "(9 + (13 + 11)) - 9",
      "((11 - 9) + 13) + 9",
      "((13 + 11) / 9) * 9",
      "((13 / 9) * 9) + 11",
      "11 + ((9 + 13) - 9)",
      "13 + ((9 - 9) + 11)",
      "((9 + 13) - 9) + 11",
      "(13 + 9) - (9 - 11)",
      "13 - ((9 - 9) - 11)",
      "((13 + 9) - 9) + 11",
      "((9 / 9) * 13) + 11",
      "((9 - 9) + 11) + 13",
      "(11 + 13) + (9 - 9)",
      "(13 * (9 / 9)) + 11",
      "(9 / 9) * (11 + 13)",
      "9 + (13 + (11 - 9))",
      "(9 - 9) + (13 + 11)",
      "((11 - 9) + 9) + 13",
      "((13 + 11) + 9) - 9",
      "(13 + (11 - 9)) + 9",
      "(9 * (13 + 11)) / 9",
      "9 + (11 + (13 - 9))",
      "(9 + 11) - (9 - 13)",
      "((13 - 9) + 11) + 9",
      "(9 - (9 - 11)) + 13",
      "(13 + 11) / (9 / 9)",
      "(11 + 13) * (9 / 9)",
      "11 + ((13 * 9) / 9)",
      "13 + ((9 * 11) / 9)",
      "13 + ((11 / 9) * 9)",
      "(13 + (11 + 9)) - 9",
      "9 * ((13 + 11) / 9)",
      "((11 + 9) + 13) - 9",
      "9 - ((9 - 11) - 13)",
      "11 + ((13 / 9) * 9)",
      "(13 - (9 - 11)) + 9",
      "11 - ((9 - 13) - 9)",
      "11 - ((9 - 9) - 13)",
      "13 + (11 * (9 / 9))",
      "((9 * 11) / 9) + 13",
      "13 + (9 / (9 / 11))",
      "11 + (13 + (9 - 9))",
      "(13 - (9 - 9)) + 11",
      "11 + (9 * (13 / 9))",
      "((13 + 11) - 9) + 9",
      "9 + (13 - (9 - 11))",
      "(9 / (9 / 13)) + 11",
      "(13 + 11) + (9 - 9)",
      "((13 * 9) / 9) + 11",
      "(13 + 11) * (9 / 9)",
      "((9 + 13) + 11) - 9",
      "(11 - 9) + (9 + 13)",
      "(11 + (13 + 9)) - 9",
      "((13 - 9) + 9) + 11",
      "13 + (11 + (9 - 9))",
      "13 + (9 - (9 - 11))",
      "13 + (9 * (11 / 9))",
      "9 + ((13 - 9) + 11)",
      "13 + ((11 - 9) + 9)",
      "(9 + 11) + (13 - 9)",
      "(9 + (11 - 9)) + 13",
      "13 + (9 + (11 - 9))",
      "11 + (13 / (9 / 9))",
      "11 + ((9 - 9) + 13)",
      "(13 + 11) - (9 - 9)",
      "13 + ((11 + 9) - 9)",
      "(9 + (11 + 13)) - 9",
      "((13 + 9) + 11) - 9",
      "(11 - (9 - 13)) + 9",
      "9 / (9 / (11 + 13))",
      "9 - (9 - (11 + 13))",
      "9 + ((11 - 9) + 13)",
      "(13 + (9 + 11)) - 9",
      "(9 + 13) + (11 - 9)",
      "(9 - 9) + (11 + 13)",
      "9 + ((11 + 13) - 9)",
      "9 - (9 - (13 + 11))",
      "(11 + 13) / (9 / 9)",
      "(11 / (9 / 9)) + 13",
      "11 + (13 - (9 - 9))",
      "13 - (9 - (11 + 9))",
      "13 + ((9 / 9) * 11)",
      "(13 - 9) + (9 + 11)"
    ]
  },
  "9 9 12 12": {
    "cards": "9 9 12 12",
    "has_solution": "Y",
    "num_solutions": 69,
    "solutions": [
      "((12 + 9) + 12) - 9",
      "(12 + 9) - (9 - 12)",
      "12 - (9 - (9 + 12))",
      "9 / (9 / (12 + 12))",
      "12 - ((9 - 9) - 12)",
      "12 + ((12 / 9) * 9)",
      "12 - ((9 - 12) - 9)",
      "(9 + (12 + 12)) - 9",
      "12 + (12 + (9 - 9))",
      "9 + (12 + (12 - 9))",
      "(9 + (12 - 9)) + 12",
      "(9 / 9) * (12 + 12)",
      "(9 - (9 - 12)) + 12",
      "((9 - 9) + 12) + 12",
      "9 - (9 - (12 + 12))",
      "(12 + 12) * (9 / 9)",
      "(12 + (9 - 9)) + 12",
      "12 + (12 * (9 / 9))",
      "(12 + 9) + (12 - 9)",
      "(9 + 12) + (12 - 9)",
      "((12 + 9) - 9) + 12",
      "12 - (9 - (12 + 9))",
      "12 + ((12 - 9) + 9)",
      "12 + (9 - (9 - 12))",
      "(12 + (12 - 9)) + 9",
      "12 + (12 / (9 / 9))",
      "9 + (12 - (9 - 12))",
      "12 + (9 * (12 / 9))",
      "(12 + (9 + 12)) - 9",
      "((9 * 12) / 9) + 12",
      "9 * ((12 + 12) / 9)",
      "12 + ((9 + 12) - 9)",
      "((12 * 9) / 9) + 12",
      "(12 / (9 / 9)) + 12",
      "(12 - 9) + (12 + 9)",
      "9 + ((12 - 9) + 12)",
      "(9 / (9 / 12)) + 12",
      "((12 + 12) - 9) + 9",
      "(12 - (9 - 9)) + 12",
      "12 + ((9 - 9) + 12)",
      "(9 - 9) + (12 + 12)",
      "(12 + 12) / (9 / 9)",
      "((9 + 12) + 12) - 9",
      "((9 / 9) * 12) + 12",
      "12 + (9 / (9 / 12))",
      "((12 + 12) + 9) - 9",
      "(12 - 9) + (9 + 12)",
      "(12 - (9 - 12)) + 9",
      "((12 + 12) / 9) * 9",
      "(12 + 12) - (9 - 9)",
      "((12 + 12) * 9) / 9",
      "12 + ((9 * 12) / 9)",
      "(12 + 12) + (9 - 9)",
      "(9 + 12) - (9 - 12)",
      "((12 - 9) + 12) + 9",
      "((12 - 9) + 9) + 12",
      "(9 * (12 + 12)) / 9",
      "(12 + (12 + 9)) - 9",
      "12 + ((9 / 9) * 12)",
      "12 + (9 + (12 - 9))",
      "((12 / 9) * 9) + 12",
      "((9 + 12) - 9) + 12",
      "9 - ((9 - 12) - 12)",
      "12 + (12 - (9 - 9))",
      "9 + ((12 + 12) - 9)",
      "12 + ((12 + 9) - 9)",
      "12 + ((12 * 9) / 9)",
      "(12 * (9 / 9)) + 12",
      "(9 * (12 / 9)) + 12"
    ]
  },
  "9 9 12 13": {
    "cards": "9 9 12 13",
    "has_solution": "Y",
    "num_solutions": 10,
    "solutions": [
      "(13 + 12) - (9 / 9)",
      "(12 + 13) - (9 / 9)",
      "13 + (12 - (9 / 9))",
      "((13 - 9) * 9) - 12",
      "(12 - (9 / 9)) + 13",
      "(9 * (13 - 9)) - 12",
      "13 - ((9 / 9) - 12)",
      "12 + (13 - (9 / 9))",
      "(13 - (9 / 9)) + 12",
      "12 - ((9 / 9) - 13)"
    ]
  },
  "9 9 13 13": {
    "cards": "9 9 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 10 10 10": {
    "cards": "9 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 10 10 11": {
    "cards": "9 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 10 10 12": {
    "cards": "9 10 10 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 10 10 13": {
    "cards": "9 10 10 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "((10 - 9) + 10) + 13",
      "13 - (9 - (10 + 10))",
      "10 + ((13 + 10) - 9)",
      "((13 + 10) - 9) + 10",
      "(13 + (10 + 10)) - 9",
      "(10 + 10) - (9 - 13)",
      "10 + (13 + (10 - 9))",
      "13 + ((10 + 10) - 9)",
      "10 + ((10 + 13) - 9)",
      "13 - ((9 - 10) - 10)",
      "13 + (10 - (9 - 10))",
      "((10 + 10) - 9) + 13",
      "((13 - 9) + 10) + 10",
      "(13 + (10 - 9)) + 10",
      "(10 + (10 - 9)) + 13",
      "13 + ((10 - 9) + 10)",
      "10 + ((10 - 9) + 13)",
      "10 - ((9 - 13) - 10)",
      "10 + (10 - (9 - 13))",
      "(10 + 13) - (9 - 10)",
      "(10 - (9 - 13)) + 10",
      "10 - ((9 - 10) - 13)",
      "10 - (9 - (13 + 10))",
      "10 - (9 - (10 + 13))",
      "(10 + 10) + (13 - 9)",
      "((13 + 10) + 10) - 9",
      "(10 + (13 - 9)) + 10",
      "(10 - 9) + (10 + 13)",
      "(13 + 10) - (9 - 10)",
      "(10 - (9 - 10)) + 13",
      "((10 - 9) + 13) + 10",
      "(13 + 10) + (10 - 9)",
      "((10 + 10) + 13) - 9",
      "((10 + 13) + 10) - 9",
      "10 + (10 + (13 - 9))",
      "(10 + (10 + 13)) - 9",
      "(10 + 13) + (10 - 9)",
      "((10 + 13) - 9) + 10",
      "10 + ((13 - 9) + 10)",
      "(13 - (9 - 10)) + 10",
      "(10 - 9) + (13 + 10)",
      "13 + (10 + (10 - 9))",
      "(13 - 9) + (10 + 10)",
      "(10 + (13 + 10)) - 9",
      "10 + (13 - (9 - 10))"
    ]
  },
  "9 10 11 11": {
    "cards": "9 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 10 11 12": {
    "cards": "9 10 11 12",
    "has_solution": "Y",
    "num_solutions": 106,
    "solutions": [
      "12 + ((10 + 11) - 9)",
      "((12 + 11) - 9) + 10",
      "((9 + 11) / 10) * 12",
      "((10 - 9) + 11) + 12",
      "12 + ((11 + 10) - 9)",
      "10 + ((11 + 12) - 9)",
      "(10 + (12 - 9)) + 11",
      "((12 - 9) + 11) + 10",
      "(10 - 9) + (12 + 11)",
      "12 + (10 - (9 - 11))",
      "((11 + 12) + 10) - 9",
      "((11 + 12) - 9) + 10",
      "(12 + 10) - (9 - 11)",
      "(10 - (9 - 11)) + 12",
      "(10 + 12) - (9 - 11)",
      "(10 - (9 - 12)) + 11",
      "12 - (9 - (11 + 10))",
      "10 + (11 + (12 - 9))",
      "(12 + (10 + 11)) - 9",
      "11 + (12 + (10 - 9))",
      "11 + ((10 + 12) - 9)",
      "(12 - (9 - 11)) + 10",
      "((10 + 11) - 9) + 12",
      "12 - ((9 - 10) - 11)",
      "((12 + 10) + 11) - 9",
      "12 / (10 / (11 + 9))",
      "(12 + (10 - 9)) + 11",
      "11 + (10 + (12 - 9))",
      "((10 + 11) + 12) - 9",
      "11 - (9 - (12 + 10))",
      "((11 + 9) / 10) * 12",
      "(12 * (11 + 9)) / 10",
      "12 + ((11 - 9) + 10)",
      "10 + (12 - (9 - 11))",
      "(12 / 10) * (11 + 9)",
      "(11 + (12 - 9)) + 10",
      "10 + (11 - (9 - 12))",
      "11 - ((9 - 10) - 12)",
      "12 / (10 / (9 + 11))",
      "(11 + 12) + (10 - 9)",
      "(9 + 11) * (12 / 10)",
      "10 - (9 - (12 + 11))",
      "(12 * (9 + 11)) / 10",
      "(10 + 12) + (11 - 9)",
      "12 + (11 - (9 - 10))",
      "11 - (9 - (10 + 12))",
      "((11 + 10) - 9) + 12",
      "10 + ((12 - 9) + 11)",
      "10 - ((9 - 12) - 11)",
      "(10 + 11) - (9 - 12)",
      "(12 - 9) + (10 + 11)",
      "((11 - 9) + 10) + 12",
      "11 + (12 - (9 - 10))",
      "(11 + 12) - (9 - 10)",
      "12 - ((9 - 11) - 10)",
      "12 - (9 - (10 + 11))",
      "(11 + (12 + 10)) - 9",
      "(10 + (12 + 11)) - 9",
      "(11 + 10) + (12 - 9)",
      "((11 - 9) + 12) + 10",
      "(10 + (11 - 9)) + 12",
      "(11 - (9 - 12)) + 10",
      "(11 + 9) * (12 / 10)",
      "11 + (10 - (9 - 12))",
      "10 + ((12 + 11) - 9)",
      "(11 + (10 + 12)) - 9",
      "((12 + 10) - 9) + 11",
      "(11 - 9) + (10 + 12)",
      "10 + ((11 - 9) + 12)",
      "(12 / 10) * (9 + 11)",
      "(11 + 9) / (10 / 12)",
      "(10 - 9) + (11 + 12)",
      "(9 + 11) / (10 / 12)",
      "10 - ((9 - 11) - 12)",
      "(10 + (11 + 12)) - 9",
      "11 + ((10 - 9) + 12)",
      "((12 - 9) + 10) + 11",
      "(12 + (11 - 9)) + 10",
      "11 + ((12 - 9) + 10)",
      "10 - (9 - (11 + 12))",
      "12 * ((11 + 9) / 10)",
      "(12 - (9 - 10)) + 11",
      "11 - ((9 - 12) - 10)",
      "(12 + (11 + 10)) - 9",
      "((11 + 9) * 12) / 10",
      "12 + (10 + (11 - 9))",
      "((10 + 12) + 11) - 9",
      "11 + ((12 + 10) - 9)",
      "(10 + 11) + (12 - 9)",
      "(12 + 10) + (11 - 9)",
      "((11 + 10) + 12) - 9",
      "((9 + 11) * 12) / 10",
      "10 + (12 + (11 - 9))",
      "((12 + 11) + 10) - 9",
      "(11 - 9) + (12 + 10)",
      "(11 - (9 - 10)) + 12",
      "(11 + (10 - 9)) + 12",
      "(12 + 11) - (9 - 10)",
      "(11 + 10) - (9 - 12)",
      "(12 + 11) + (10 - 9)",
      "12 + (11 + (10 - 9))",
      "((10 - 9) + 12) + 11",
      "12 + ((10 - 9) + 11)",
      "((10 + 12) - 9) + 11",
      "12 * ((9 + 11) / 10)",
      "(12 - 9) + (11 + 10)"
    ]
  },
  "9 10 11 13": {
    "cards": "9 10 11 13",
    "has_solution": "Y",
    "num_solutions": 26,
    "solutions": [
      "(11 + 13) * (10 - 9)",
      "(11 + 13) / (10 - 9)",
      "(11 * (13 - 10)) - 9",
      "13 + (11 * (10 - 9))",
      "(13 * (10 - 9)) + 11",
      "11 - (13 * (9 - 10))",
      "11 - (13 / (9 - 10))",
      "((10 - 9) * 13) + 11",
      "11 + ((10 - 9) * 13)",
      "(10 - 9) * (13 + 11)",
      "13 + ((10 - 9) * 11)",
      "11 + (13 * (10 - 9))",
      "13 - (11 * (9 - 10))",
      "13 - (11 / (9 - 10))",
      "((10 - 9) * 11) + 13",
      "11 - ((9 - 10) * 13)",
      "(10 - 9) * (11 + 13)",
      "((13 - 10) * 11) - 9",
      "11 + (13 / (10 - 9))",
      "(11 / (10 - 9)) + 13",
      "(13 / (10 - 9)) + 11",
      "13 - ((9 - 10) * 11)",
      "(11 * (10 - 9)) + 13",
      "13 + (11 / (10 - 9))",
      "(13 + 11) * (10 - 9)",
      "(13 + 11) / (10 - 9)"
    ]
  },
  "9 10 12 12": {
    "cards": "9 10 12 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "12 - (12 * (9 - 10))",
      "(12 + 12) * (10 - 9)",
      "12 + ((10 - 9) * 12)",
      "12 - (12 / (9 - 10))",
      "12 - ((9 - 10) * 12)",
      "(12 / (10 - 9)) + 12",
      "((10 - 9) * 12) + 12",
      "12 + (12 * (10 - 9))",
      "(12 * (10 - 9)) + 12",
      "(12 + 12) / (10 - 9)",
      "(10 - 9) * (12 + 12)",
      "12 + (12 / (10 - 9))"
    ]
  },
  "9 10 12 13": {
    "cards": "9 10 12 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "12 + (13 - (10 - 9))",
      "((9 + 13) - 10) + 12",
      "9 - (10 - (12 + 13))",
      "(9 + 13) - (10 - 12)",
      "12 + ((13 - 10) + 9)",
      "((13 + 9) + 12) - 10",
      "13 + ((12 - 10) + 9)",
      "((12 + 9) - 10) + 13",
      "9 + (12 + (13 - 10))",
      "9 + ((12 - 10) + 13)",
      "(9 + (13 + 12)) - 10",
      "13 + (12 + (9 - 10))",
      "13 + (12 - (10 - 9))",
      "9 + (13 - (10 - 12))",
      "12 + (13 + (9 - 10))",
      "(12 + (9 - 10)) + 13",
      "(9 + (12 - 10)) + 13",
      "((9 - 10) + 13) + 12",
      "(13 + (12 + 9)) - 10",
      "((13 + 12) + 9) - 10",
      "13 + ((9 - 10) + 12)",
      "9 - (10 - (13 + 12))",
      "((13 - 10) + 9) + 12",
      "(9 - (10 - 12)) + 13",
      "9 + (13 + (12 - 10))",
      "12 - ((10 - 13) - 9)",
      "((13 - 10) + 12) + 9",
      "12 - ((10 - 9) - 13)",
      "(13 + 12) - (10 - 9)",
      "13 - ((10 - 12) - 9)",
      "12 + ((9 + 13) - 10)",
      "(9 + (13 - 10)) + 12",
      "(13 + 9) + (12 - 10)",
      "13 + (9 + (12 - 10))",
      "(9 + (12 + 13)) - 10",
      "12 + (9 - (10 - 13))",
      "(12 + 9) - (10 - 13)",
      "(9 - (10 - 13)) + 12",
      "(13 - 10) + (12 + 9)",
      "(12 + (13 + 9)) - 10",
      "(12 - (10 - 9)) + 13",
      "(12 - 10) + (13 + 9)",
      "12 - (10 - (9 + 13))",
      "((9 - 10) + 12) + 13",
      "(13 + (9 + 12)) - 10",
      "(12 + 9) + (13 - 10)",
      "(13 + (12 - 10)) + 9",
      "12 + ((13 + 9) - 10)",
      "(9 - 10) + (12 + 13)",
      "((9 + 13) + 12) - 10",
      "9 + ((13 - 10) + 12)",
      "13 - (10 - (12 + 9))",
      "((9 + 12) + 13) - 10",
      "13 - ((10 - 9) - 12)",
      "(13 - (10 - 12)) + 9",
      "(12 + 13) - (10 - 9)",
      "13 + ((9 + 12) - 10)",
      "(12 + (13 - 10)) + 9",
      "((12 - 10) + 9) + 13",
      "12 + (9 + (13 - 10))",
      "((12 + 9) + 13) - 10",
      "9 + ((13 + 12) - 10)",
      "((13 + 12) - 10) + 9",
      "(9 + 13) + (12 - 10)",
      "(12 - 10) + (9 + 13)",
      "(9 + 12) + (13 - 10)",
      "(9 - 10) + (13 + 12)",
      "12 - (10 - (13 + 9))",
      "(13 + 9) - (10 - 12)",
      "((12 - 10) + 13) + 9",
      "13 + ((12 + 9) - 10)",
      "(12 + (9 + 13)) - 10",
      "(13 - (10 - 9)) + 12",
      "(13 + 12) + (9 - 10)",
      "((13 + 9) - 10) + 12",
      "((9 + 12) - 10) + 13",
      "(12 - (10 - 13)) + 9",
      "((12 + 13) - 10) + 9",
      "9 + (12 - (10 - 13))",
      "9 - ((10 - 13) - 12)",
      "((12 + 13) + 9) - 10",
      "13 + (9 - (10 - 12))",
      "9 - ((10 - 12) - 13)",
      "9 + ((12 + 13) - 10)",
      "(13 - 10) + (9 + 12)",
      "(9 + 12) - (10 - 13)",
      "13 - (10 - (9 + 12))",
      "(12 + 13) + (9 - 10)",
      "12 + ((9 - 10) + 13)",
      "(13 + (9 - 10)) + 12"
    ]
  },
  "9 10 13 13": {
    "cards": "9 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 11 11 11": {
    "cards": "9 11 11 11",
    "has_solution": "Y",
    "num_solutions": 15,
    "solutions": [
      "(11 - 9) + (11 + 11)",
      "11 + ((11 + 11) - 9)",
      "(11 + 11) + (11 - 9)",
      "11 + (11 - (9 - 11))",
      "(11 - (9 - 11)) + 11",
      "((11 - 9) + 11) + 11",
      "(11 + (11 - 9)) + 11",
      "((11 + 11) - 9) + 11",
      "((11 + 11) + 11) - 9",
      "(11 + (11 + 11)) - 9",
      "11 + (11 + (11 - 9))",
      "11 - ((9 - 11) - 11)",
      "11 + ((11 - 9) + 11)",
      "(11 + 11) - (9 - 11)",
      "11 - (9 - (11 + 11))"
    ]
  },
  "9 11 11 12": {
    "cards": "9 11 11 12",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 11 11 13": {
    "cards": "9 11 11 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 11 12 12": {
    "cards": "9 11 12 12",
    "has_solution": "Y",
    "num_solutions": 4,
    "solutions": [
      "(11 * 12) - (12 * 9)",
      "(11 * 12) - (9 * 12)",
      "(12 * 11) - (9 * 12)",
      "(12 * 11) - (12 * 9)"
    ]
  },
  "9 11 12 13": {
    "cards": "9 11 12 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "((9 + 13) * 12) / 11",
      "(13 + 9) / (11 / 12)",
      "(13 + 9) * (12 / 11)",
      "12 * ((13 + 9) / 11)",
      "(9 + 13) / (11 / 12)",
      "(12 / 11) * (13 + 9)",
      "12 * ((9 + 13) / 11)",
      "((9 + 13) / 11) * 12",
      "((13 + 9) * 12) / 11",
      "(12 / 11) * (9 + 13)",
      "(12 * (9 + 13)) / 11",
      "(12 * (13 + 9)) / 11",
      "(9 + 13) * (12 / 11)",
      "12 / (11 / (9 + 13))",
      "12 / (11 / (13 + 9))",
      "((13 + 9) / 11) * 12"
    ]
  },
  "9 11 13 13": {
    "cards": "9 11 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(9 + (13 + 13)) - 11",
      "((9 - 11) + 13) + 13",
      "(13 + (9 - 11)) + 13",
      "13 - ((11 - 9) - 13)",
      "9 - ((11 - 13) - 13)",
      "13 + ((13 + 9) - 11)",
      "13 - (11 - (9 + 13))",
      "(9 + (13 - 11)) + 13",
      "((13 + 9) + 13) - 11",
      "(13 + 9) + (13 - 11)",
      "((9 + 13) + 13) - 11",
      "(13 + 9) - (11 - 13)",
      "9 + (13 - (11 - 13))",
      "(13 - (11 - 13)) + 9",
      "(9 + 13) + (13 - 11)",
      "(13 + 13) - (11 - 9)",
      "13 + ((9 + 13) - 11)",
      "(9 - (11 - 13)) + 13",
      "(13 + (13 + 9)) - 11",
      "13 - (11 - (13 + 9))",
      "(9 + 13) - (11 - 13)",
      "9 + (13 + (13 - 11))",
      "((13 - 11) + 9) + 13",
      "((13 - 11) + 13) + 9",
      "(13 + 13) + (9 - 11)",
      "((13 + 13) + 9) - 11",
      "9 + ((13 + 13) - 11)",
      "9 - (11 - (13 + 13))",
      "13 + ((13 - 11) + 9)",
      "9 + ((13 - 11) + 13)",
      "(13 + (13 - 11)) + 9",
      "13 + (9 + (13 - 11))",
      "((13 + 9) - 11) + 13",
      "((9 + 13) - 11) + 13",
      "(9 - 11) + (13 + 13)",
      "(13 + (9 + 13)) - 11",
      "((13 + 13) - 11) + 9",
      "13 + ((9 - 11) + 13)",
      "(13 - 11) + (9 + 13)",
      "13 + (13 - (11 - 9))",
      "13 + (13 + (9 - 11))",
      "(13 - 11) + (13 + 9)",
      "13 - ((11 - 13) - 9)",
      "13 + (9 - (11 - 13))",
      "(13 - (11 - 9)) + 13"
    ]
  },
  "9 12 12 12": {
    "cards": "9 12 12 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(12 * (12 - 9)) - 12",
      "((12 - 9) * 12) - 12"
    ]
  },
  "9 12 12 13": {
    "cards": "9 12 12 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 12 13 13": {
    "cards": "9 12 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "9 13 13 13": {
    "cards": "9 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 10 10 10": {
    "cards": "10 10 10 10",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 10 10 11": {
    "cards": "10 10 10 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 10 10 12": {
    "cards": "10 10 10 12",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(10 + 10) * (12 / 10)",
      "(12 / 10) * (10 + 10)",
      "12 * ((10 + 10) / 10)",
      "((10 + 10) / 10) * 12",
      "(10 + 10) / (10 / 12)",
      "12 / (10 / (10 + 10))",
      "(12 * (10 + 10)) / 10",
      "((10 + 10) * 12) / 10"
    ]
  },
  "10 10 10 13": {
    "cards": "10 10 10 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(10 + (10 / 10)) + 13",
      "(10 / 10) + (10 + 13)",
      "(13 + (10 / 10)) + 10",
      "13 + ((10 / 10) + 10)",
      "13 + (10 + (10 / 10))",
      "(10 / 10) + (13 + 10)",
      "10 + (13 + (10 / 10))",
      "(13 + 10) + (10 / 10)",
      "((10 / 10) + 10) + 13",
      "(10 + 13) + (10 / 10)",
      "10 + ((10 / 10) + 13)",
      "((10 / 10) + 13) + 10"
    ]
  },
  "10 10 11 11": {
    "cards": "10 10 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 10 11 12": {
    "cards": "10 10 11 12",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(12 + (10 / 10)) + 11",
      "(11 + (10 / 10)) + 12",
      "(10 / 10) + (11 + 12)",
      "12 + (11 + (10 / 10))",
      "((10 / 10) + 12) + 11",
      "(10 / 10) + (12 + 11)",
      "11 + (12 + (10 / 10))",
      "(12 + 11) + (10 / 10)",
      "((10 / 10) + 11) + 12",
      "(11 + 12) + (10 / 10)",
      "11 + ((10 / 10) + 12)",
      "12 + ((10 / 10) + 11)"
    ]
  },
  "10 10 11 13": {
    "cards": "10 10 11 13",
    "has_solution": "Y",
    "num_solutions": 138,
    "solutions": [
      "((11 + 13) + 10) - 10",
      "13 + ((11 + 10) - 10)",
      "10 + ((11 + 13) - 10)",
      "((10 / 10) * 13) + 11",
      "((13 + 10) - 10) + 11",
      "11 + (10 * (13 / 10))",
      "11 + (10 / (10 / 13))",
      "(11 / (10 / 10)) + 13",
      "10 + (13 - (10 - 11))",
      "(11 + 13) / (10 / 10)",
      "10 + ((11 - 10) + 13)",
      "(10 * (11 + 13)) / 10",
      "(10 + 11) + (13 - 10)",
      "11 + (13 * (10 / 10))",
      "((11 - 10) + 13) + 10",
      "((10 + 13) + 11) - 10",
      "(10 * (13 + 11)) / 10",
      "(10 - 10) + (11 + 13)",
      "(13 * (10 / 10)) + 11",
      "(13 + 10) - (10 - 11)",
      "(13 + (11 - 10)) + 10",
      "((10 - 10) + 13) + 11",
      "11 + ((10 + 13) - 10)",
      "(13 - 10) + (11 + 10)",
      "(10 - (10 - 11)) + 13",
      "(13 + 11) - (10 - 10)",
      "(11 + (13 - 10)) + 10",
      "(10 + (11 - 10)) + 13",
      "11 + (10 + (13 - 10))",
      "(10 / 10) * (13 + 11)",
      "(13 + 10) + (11 - 10)",
      "13 + ((11 - 10) + 10)",
      "(11 + (10 + 13)) - 10",
      "13 + ((11 * 10) / 10)",
      "((10 + 11) + 13) - 10",
      "(10 + 13) - (10 - 11)",
      "11 + ((13 * 10) / 10)",
      "((13 + 11) / 10) * 10",
      "11 + ((13 + 10) - 10)",
      "10 * ((13 + 11) / 10)",
      "11 - (10 - (13 + 10))",
      "(11 + (10 - 10)) + 13",
      "(13 - (10 - 10)) + 11",
      "10 * ((11 + 13) / 10)",
      "((13 / 10) * 10) + 11",
      "((10 * 13) / 10) + 11",
      "((13 + 11) * 10) / 10",
      "((11 - 10) + 10) + 13",
      "(10 * (11 / 10)) + 13",
      "(13 + (10 - 10)) + 11",
      "((10 - 10) + 11) + 13",
      "11 - ((10 - 10) - 13)",
      "(13 / (10 / 10)) + 11",
      "((11 + 13) * 10) / 10",
      "(11 + 10) + (13 - 10)",
      "(13 + 11) / (10 / 10)",
      "11 + (13 - (10 - 10))",
      "11 - ((10 - 13) - 10)",
      "13 - ((10 - 11) - 10)",
      "(11 - 10) + (10 + 13)",
      "((13 + 11) - 10) + 10",
      "10 - (10 - (13 + 11))",
      "13 - ((10 - 10) - 11)",
      "10 + (11 - (10 - 13))",
      "((11 / 10) * 10) + 13",
      "10 - ((10 - 13) - 11)",
      "((13 - 10) + 11) + 10",
      "13 + (11 / (10 / 10))",
      "13 - (10 - (10 + 11))",
      "((10 * 11) / 10) + 13",
      "(10 / (10 / 13)) + 11",
      "(11 + (13 + 10)) - 10",
      "(10 + (11 + 13)) - 10",
      "13 + (11 - (10 - 10))",
      "((10 + 11) - 10) + 13",
      "(13 - (10 - 11)) + 10",
      "11 + (10 - (10 - 13))",
      "((11 * 10) / 10) + 13",
      "(10 / (10 / 11)) + 13",
      "13 + (10 / (10 / 11))",
      "10 / (10 / (11 + 13))",
      "13 + (11 * (10 / 10))",
      "((11 + 13) - 10) + 10",
      "11 + ((13 - 10) + 10)",
      "(11 - (10 - 10)) + 13",
      "(13 - 10) + (10 + 11)",
      "10 + ((13 + 11) - 10)",
      "(10 / 10) * (11 + 13)",
      "((11 + 13) / 10) * 10",
      "11 + (13 + (10 - 10))",
      "(10 + 13) + (11 - 10)",
      "(11 + 13) * (10 / 10)",
      "13 - (10 - (11 + 10))",
      "13 + (10 + (11 - 10))",
      "13 + (10 - (10 - 11))",
      "((13 * 10) / 10) + 11",
      "11 + ((13 / 10) * 10)",
      "11 - (10 - (10 + 13))",
      "((13 + 11) + 10) - 10",
      "(11 - 10) + (13 + 10)",
      "10 / (10 / (13 + 11))",
      "(10 + 11) - (10 - 13)",
      "(13 + 11) + (10 - 10)",
      "13 + ((10 / 10) * 11)",
      "((10 + 13) - 10) + 11",
      "(10 + (13 - 10)) + 11",
      "(13 + 11) * (10 / 10)",
      "13 + ((10 + 11) - 10)",
      "(11 + 13) - (10 - 10)",
      "(11 - (10 - 13)) + 10",
      "11 + ((10 * 13) / 10)",
      "13 + (10 * (11 / 10))",
      "(11 + 13) + (10 - 10)",
      "11 + ((10 - 10) + 13)",
      "((13 + 10) + 11) - 10",
      "(13 + (10 + 11)) - 10",
      "(10 - (10 - 13)) + 11",
      "10 + ((13 - 10) + 11)",
      "13 + ((10 * 11) / 10)",
      "(11 + 10) - (10 - 13)",
      "11 + (13 / (10 / 10))",
      "11 + ((10 / 10) * 13)",
      "13 + (11 + (10 - 10))",
      "13 + ((10 - 10) + 11)",
      "((11 + 10) - 10) + 13",
      "10 + (13 + (11 - 10))",
      "10 - (10 - (11 + 13))",
      "(13 + (11 + 10)) - 10",
      "((11 + 10) + 13) - 10",
      "10 - ((10 - 11) - 13)",
      "(10 - 10) + (13 + 11)",
      "((10 / 10) * 11) + 13",
      "10 + (11 + (13 - 10))",
      "(10 * (13 / 10)) + 11",
      "(11 * (10 / 10)) + 13",
      "((13 - 10) + 10) + 11",
      "(10 + (13 + 11)) - 10",
      "13 + ((11 / 10) * 10)"
    ]
  },
  "10 10 12 12": {
    "cards": "10 10 12 12",
    "has_solution": "Y",
    "num_solutions": 69,
    "solutions": [
      "((12 / 10) * 10) + 12",
      "12 - (10 - (12 + 10))",
      "12 + (10 - (10 - 12))",
      "12 + (10 / (10 / 12))",
      "((12 * 10) / 10) + 12",
      "((10 / 10) * 12) + 12",
      "(10 / 10) * (12 + 12)",
      "((12 + 10) - 10) + 12",
      "((12 + 12) / 10) * 10",
      "((12 - 10) + 12) + 10",
      "12 - ((10 - 10) - 12)",
      "((12 - 10) + 10) + 12",
      "12 + (12 * (10 / 10))",
      "12 + ((12 / 10) * 10)",
      "(12 + 12) + (10 - 10)",
      "(12 - (10 - 10)) + 12",
      "(10 - 10) + (12 + 12)",
      "12 + ((12 - 10) + 10)",
      "((10 + 12) + 12) - 10",
      "10 + (12 + (12 - 10))",
      "(12 - (10 - 12)) + 10",
      "12 - (10 - (10 + 12))",
      "(12 - 10) + (10 + 12)",
      "12 + ((12 * 10) / 10)",
      "(12 + 12) / (10 / 10)",
      "10 / (10 / (12 + 12))",
      "(12 + (10 - 10)) + 12",
      "12 + ((10 - 10) + 12)",
      "((10 + 12) - 10) + 12",
      "(10 + 12) - (10 - 12)",
      "12 - ((10 - 12) - 10)",
      "((12 + 10) + 12) - 10",
      "(10 * (12 + 12)) / 10",
      "(10 + 12) + (12 - 10)",
      "(12 * (10 / 10)) + 12",
      "(12 - 10) + (12 + 10)",
      "12 + (10 * (12 / 10))",
      "((10 * 12) / 10) + 12",
      "((12 + 12) * 10) / 10",
      "12 + (12 / (10 / 10))",
      "10 + (12 - (10 - 12))",
      "(12 + 12) * (10 / 10)",
      "12 + ((10 + 12) - 10)",
      "12 + (12 - (10 - 10))",
      "10 + ((12 + 12) - 10)",
      "((10 - 10) + 12) + 12",
      "10 - (10 - (12 + 12))",
      "(12 / (10 / 10)) + 12",
      "10 * ((12 + 12) / 10)",
      "12 + ((10 / 10) * 12)",
      "(12 + 10) - (10 - 12)",
      "10 + ((12 - 10) + 12)",
      "(12 + (12 + 10)) - 10",
      "(10 - (10 - 12)) + 12",
      "12 + (10 + (12 - 10))",
      "(12 + (10 + 12)) - 10",
      "(10 * (12 / 10)) + 12",
      "((12 + 12) - 10) + 10",
      "(10 / (10 / 12)) + 12",
      "10 - ((10 - 12) - 12)",
      "(12 + 10) + (12 - 10)",
      "((12 + 12) + 10) - 10",
      "(10 + (12 + 12)) - 10",
      "(12 + 12) - (10 - 10)",
      "12 + (12 + (10 - 10))",
      "12 + ((12 + 10) - 10)",
      "(12 + (12 - 10)) + 10",
      "12 + ((10 * 12) / 10)",
      "(10 + (12 - 10)) + 12"
    ]
  },
  "10 10 12 13": {
    "cards": "10 10 12 13",
    "has_solution": "Y",
    "num_solutions": 8,
    "solutions": [
      "(12 - (10 / 10)) + 13",
      "13 - ((10 / 10) - 12)",
      "(13 - (10 / 10)) + 12",
      "12 + (13 - (10 / 10))",
      "12 - ((10 / 10) - 13)",
      "13 + (12 - (10 / 10))",
      "(12 + 13) - (10 / 10)",
      "(13 + 12) - (10 / 10)"
    ]
  },
  "10 10 13 13": {
    "cards": "10 10 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 11 11 11": {
    "cards": "10 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 11 11 12": {
    "cards": "10 11 11 12",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "12 + (11 + (11 - 10))",
      "12 + (11 - (10 - 11))",
      "((11 - 10) + 11) + 12",
      "11 + (12 + (11 - 10))",
      "11 + (11 - (10 - 12))",
      "11 + (11 + (12 - 10))",
      "(12 - (10 - 11)) + 11",
      "(11 + (12 - 10)) + 11",
      "11 + ((12 + 11) - 10)",
      "(11 + 12) - (10 - 11)",
      "(11 + (11 + 12)) - 10",
      "11 + ((11 - 10) + 12)",
      "(12 - 10) + (11 + 11)",
      "((11 + 12) - 10) + 11",
      "(11 - (10 - 11)) + 12",
      "(11 + 11) - (10 - 12)",
      "(11 + (12 + 11)) - 10",
      "((11 + 12) + 11) - 10",
      "11 - ((10 - 12) - 11)",
      "(12 + 11) + (11 - 10)",
      "((12 + 11) - 10) + 11",
      "11 - ((10 - 11) - 12)",
      "((12 + 11) + 11) - 10",
      "12 + ((11 - 10) + 11)",
      "(12 + (11 + 11)) - 10",
      "((12 - 10) + 11) + 11",
      "((11 + 11) - 10) + 12",
      "11 + (12 - (10 - 11))",
      "(11 - 10) + (12 + 11)",
      "(12 + (11 - 10)) + 11",
      "((11 + 11) + 12) - 10",
      "(11 - (10 - 12)) + 11",
      "(11 - 10) + (11 + 12)",
      "12 + ((11 + 11) - 10)",
      "((11 - 10) + 12) + 11",
      "(11 + (11 - 10)) + 12",
      "(11 + 12) + (11 - 10)",
      "(12 + 11) - (10 - 11)",
      "(11 + 11) + (12 - 10)",
      "12 - (10 - (11 + 11))",
      "12 - ((10 - 11) - 11)",
      "11 + ((11 + 12) - 10)",
      "11 - (10 - (11 + 12))",
      "11 + ((12 - 10) + 11)",
      "11 - (10 - (12 + 11))"
    ]
  },
  "10 11 11 13": {
    "cards": "10 11 11 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "11 - (13 * (10 - 11))",
      "11 - (13 / (10 - 11))",
      "((11 - 10) * 13) + 11",
      "10 + ((11 / 11) + 13)",
      "10 + (13 + (11 / 11))",
      "(11 - 10) * (11 + 13)",
      "((11 - 10) * 11) + 13",
      "((11 / 11) + 13) + 10",
      "(13 + 11) * (11 - 10)",
      "11 + ((11 - 10) * 13)",
      "(13 + 10) + (11 / 11)",
      "13 + ((11 / 11) + 10)",
      "13 + ((11 - 10) * 11)",
      "11 + (13 / (11 - 10))",
      "11 - ((10 - 11) * 13)",
      "(11 + 13) * (11 - 10)",
      "13 - ((10 - 11) * 11)",
      "(11 * (11 - 10)) + 13",
      "13 + (11 * (11 - 10))",
      "(10 + (11 / 11)) + 13",
      "13 - (11 / (10 - 11))",
      "(11 / 11) + (10 + 13)",
      "(13 / (11 - 10)) + 11",
      "13 - (11 * (10 - 11))",
      "(11 - 10) * (13 + 11)",
      "(13 + 11) / (11 - 10)",
      "(11 / (11 - 10)) + 13",
      "(11 + 13) / (11 - 10)",
      "(13 * (11 - 10)) + 11",
      "(11 / 11) + (13 + 10)",
      "(10 + 13) + (11 / 11)",
      "13 + (10 + (11 / 11))",
      "13 + (11 / (11 - 10))",
      "((11 / 11) + 10) + 13",
      "11 + (13 * (11 - 10))",
      "(13 + (11 / 11)) + 10"
    ]
  },
  "10 11 12 12": {
    "cards": "10 11 12 12",
    "has_solution": "Y",
    "num_solutions": 28,
    "solutions": [
      "((12 + 10) / 11) * 12",
      "(11 - 10) * (12 + 12)",
      "12 + ((11 - 10) * 12)",
      "(12 * (11 - 10)) + 12",
      "(12 + 10) * (12 / 11)",
      "((12 + 10) * 12) / 11",
      "12 - (12 / (10 - 11))",
      "(10 + 12) / (11 / 12)",
      "12 * ((12 + 10) / 11)",
      "12 - ((10 - 11) * 12)",
      "12 + (12 / (11 - 10))",
      "(10 + 12) * (12 / 11)",
      "(12 + 12) * (11 - 10)",
      "(12 + 10) / (11 / 12)",
      "(12 / 11) * (10 + 12)",
      "12 + (12 * (11 - 10))",
      "(12 * (10 + 12)) / 11",
      "12 / (11 / (10 + 12))",
      "(12 / (11 - 10)) + 12",
      "(12 * (12 + 10)) / 11",
      "(12 / 11) * (12 + 10)",
      "12 / (11 / (12 + 10))",
      "12 * ((10 + 12) / 11)",
      "((10 + 12) / 11) * 12",
      "12 - (12 * (10 - 11))",
      "(12 + 12) / (11 - 10)",
      "((10 + 12) * 12) / 11",
      "((11 - 10) * 12) + 12"
    ]
  },
  "10 11 12 13": {
    "cards": "10 11 12 13",
    "has_solution": "Y",
    "num_solutions": 90,
    "solutions": [
      "13 + (10 + (12 - 11))",
      "((10 - 11) + 12) + 13",
      "13 - ((11 - 10) - 12)",
      "(12 + 10) + (13 - 11)",
      "((12 + 13) + 10) - 11",
      "(12 + (13 + 10)) - 11",
      "(12 + 10) - (11 - 13)",
      "((10 + 12) - 11) + 13",
      "10 + ((13 + 12) - 11)",
      "10 + ((12 + 13) - 11)",
      "12 + ((10 - 11) + 13)",
      "((13 + 10) - 11) + 12",
      "10 + (13 + (12 - 11))",
      "(10 - (11 - 13)) + 12",
      "12 + ((10 + 13) - 11)",
      "(13 + 10) + (12 - 11)",
      "(13 - (11 - 12)) + 10",
      "(13 + 10) - (11 - 12)",
      "(13 + (12 + 10)) - 11",
      "(13 - 11) + (10 + 12)",
      "10 + (12 - (11 - 13))",
      "(13 + 12) - (11 - 10)",
      "(12 + (10 + 13)) - 11",
      "13 + (12 - (11 - 10))",
      "((10 + 13) - 11) + 12",
      "12 + (10 - (11 - 13))",
      "(10 + 12) - (11 - 13)",
      "(13 + (10 - 11)) + 12",
      "12 + (10 + (13 - 11))",
      "(10 - 11) + (12 + 13)",
      "((12 + 10) - 11) + 13",
      "13 + (10 - (11 - 12))",
      "(12 - 11) + (10 + 13)",
      "(10 - 11) + (13 + 12)",
      "(13 - (11 - 10)) + 12",
      "(10 + 13) + (12 - 11)",
      "((13 - 11) + 10) + 12",
      "(10 + 12) + (13 - 11)",
      "((12 + 13) - 11) + 10",
      "13 - ((11 - 12) - 10)",
      "10 + ((13 - 11) + 12)",
      "((10 + 13) + 12) - 11",
      "12 - (11 - (10 + 13))",
      "10 - (11 - (13 + 12))",
      "12 + (13 - (11 - 10))",
      "12 + ((13 - 11) + 10)",
      "(13 - 11) + (12 + 10)",
      "(10 - (11 - 12)) + 13",
      "12 + ((13 + 10) - 11)",
      "((13 - 11) + 12) + 10",
      "13 - (11 - (12 + 10))",
      "((10 - 11) + 13) + 12",
      "13 + ((10 - 11) + 12)",
      "(12 + (13 - 11)) + 10",
      "(12 - 11) + (13 + 10)",
      "12 + (13 + (10 - 11))",
      "((12 - 11) + 10) + 13",
      "(10 + (12 - 11)) + 13",
      "12 - (11 - (13 + 10))",
      "(12 + 13) + (10 - 11)",
      "((13 + 12) + 10) - 11",
      "(10 + 13) - (11 - 12)",
      "10 - ((11 - 12) - 13)",
      "12 - ((11 - 10) - 13)",
      "(12 - (11 - 13)) + 10",
      "(13 + (12 - 11)) + 10",
      "(13 + (10 + 12)) - 11",
      "10 + (13 - (11 - 12))",
      "10 + (12 + (13 - 11))",
      "(12 - (11 - 10)) + 13",
      "12 - ((11 - 13) - 10)",
      "(10 + (12 + 13)) - 11",
      "10 - (11 - (12 + 13))",
      "((13 + 10) + 12) - 11",
      "((10 + 12) + 13) - 11",
      "13 - (11 - (10 + 12))",
      "13 + ((10 + 12) - 11)",
      "10 - ((11 - 13) - 12)",
      "(12 + (10 - 11)) + 13",
      "10 + ((12 - 11) + 13)",
      "13 + (12 + (10 - 11))",
      "(10 + (13 - 11)) + 12",
      "(10 + (13 + 12)) - 11",
      "13 + ((12 - 11) + 10)",
      "((12 + 10) + 13) - 11",
      "(12 + 13) - (11 - 10)",
      "((13 + 12) - 11) + 10",
      "(13 + 12) + (10 - 11)",
      "13 + ((12 + 10) - 11)",
      "((12 - 11) + 13) + 10"
    ]
  },
  "10 11 13 13": {
    "cards": "10 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "10 12 12 12": {
    "cards": "10 12 12 12",
    "has_solution": "Y",
    "num_solutions": 2,
    "solutions": [
      "(12 * 12) - (12 * 10)",
      "(12 * 12) - (10 * 12)"
    ]
  },
  "10 12 12 13": {
    "cards": "10 12 12 13",
    "has_solution": "Y",
    "num_solutions": 14,
    "solutions": [
      "(10 + (12 / 12)) + 13",
      "(12 / 12) + (13 + 10)",
      "10 + (13 + (12 / 12))",
      "10 + ((12 / 12) + 13)",
      "13 + ((12 / 12) + 10)",
      "(13 + 10) + (12 / 12)",
      "(12 / 12) + (10 + 13)",
      "13 + (10 + (12 / 12))",
      "((12 / 12) + 10) + 13",
      "(10 + 13) + (12 / 12)",
      "(13 + (12 / 12)) + 10",
      "((13 - 10) * 12) - 12",
      "((12 / 12) + 13) + 10",
      "(12 * (13 - 10)) - 12"
    ]
  },
  "10 12 13 13": {
    "cards": "10 12 13 13",
    "has_solution": "Y",
    "num_solutions": 45,
    "solutions": [
      "(10 - (12 - 13)) + 13",
      "((10 - 12) + 13) + 13",
      "(13 - 12) + (13 + 10)",
      "((13 - 12) + 10) + 13",
      "13 + ((13 + 10) - 12)",
      "13 + ((10 + 13) - 12)",
      "13 + ((10 - 12) + 13)",
      "(13 + 13) - (12 - 10)",
      "13 - (12 - (13 + 10))",
      "10 + ((13 + 13) - 12)",
      "(10 + (13 + 13)) - 12",
      "(10 + (13 - 12)) + 13",
      "(13 + (13 - 12)) + 10",
      "10 + (13 + (13 - 12))",
      "((13 + 10) - 12) + 13",
      "13 + ((13 - 12) + 10)",
      "(13 + 10) + (13 - 12)",
      "((10 + 13) - 12) + 13",
      "10 + ((13 - 12) + 13)",
      "(13 - 12) + (10 + 13)",
      "(13 + 13) + (10 - 12)",
      "(10 + 13) + (13 - 12)",
      "(13 + 10) - (12 - 13)",
      "(13 - (12 - 10)) + 13",
      "(10 - 12) + (13 + 13)",
      "((13 + 13) + 10) - 12",
      "(13 + (10 + 13)) - 12",
      "13 + (13 + (10 - 12))",
      "13 + (13 - (12 - 10))",
      "13 + (10 + (13 - 12))",
      "10 + (13 - (12 - 13))",
      "13 - (12 - (10 + 13))",
      "13 + (10 - (12 - 13))",
      "(13 + (13 + 10)) - 12",
      "13 - ((12 - 13) - 10)",
      "((13 + 10) + 13) - 12",
      "10 - ((12 - 13) - 13)",
      "10 - (12 - (13 + 13))",
      "13 - ((12 - 10) - 13)",
      "((10 + 13) + 13) - 12",
      "(13 - (12 - 13)) + 10",
      "(13 + (10 - 12)) + 13",
      "((13 - 12) + 13) + 10",
      "((13 + 13) - 12) + 10",
      "(10 + 13) - (12 - 13)"
    ]
  },
  "10 13 13 13": {
    "cards": "10 13 13 13",
    "has_solution": "Y",
    "num_solutions": 12,
    "solutions": [
      "(10 + 13) + (13 / 13)",
      "10 + (13 + (13 / 13))",
      "(13 + 10) + (13 / 13)",
      "(13 / 13) + (13 + 10)",
      "((13 / 13) + 13) + 10",
      "13 + ((13 / 13) + 10)",
      "13 + (10 + (13 / 13))",
      "(13 / 13) + (10 + 13)",
      "((13 / 13) + 10) + 13",
      "(10 + (13 / 13)) + 13",
      "(13 + (13 / 13)) + 10",
      "10 + ((13 / 13) + 13)"
    ]
  },
  "11 11 11 11": {
    "cards": "11 11 11 11",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "11 11 11 12": {
    "cards": "11 11 11 12",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "((11 + 11) / 11) * 12",
      "(12 / 11) * (11 + 11)",
      "(11 / 11) + (11 + 12)",
      "11 + ((11 / 11) + 12)",
      "(11 / 11) + (12 + 11)",
      "11 + (12 + (11 / 11))",
      "((11 + 11) * 12) / 11",
      "(11 + 11) * (12 / 11)",
      "(11 + 12) + (11 / 11)",
      "12 + ((11 / 11) + 11)",
      "(12 + 11) + (11 / 11)",
      "(12 * (11 + 11)) / 11",
      "(12 + (11 / 11)) + 11",
      "12 * ((11 + 11) / 11)",
      "(11 + (11 / 11)) + 12",
      "12 + (11 + (11 / 11))",
      "((11 / 11) + 12) + 11",
      "((11 / 11) + 11) + 12",
      "(11 + 11) / (11 / 12)",
      "12 / (11 / (11 + 11))"
    ]
  },
  "11 11 11 13": {
    "cards": "11 11 11 13",
    "has_solution": "Y",
    "num_solutions": 85,
    "solutions": [
      "(13 - 11) + (11 + 11)",
      "13 + (11 / (11 / 11))",
      "(11 / (11 / 13)) + 11",
      "13 + ((11 * 11) / 11)",
      "13 + (11 * (11 / 11))",
      "11 + ((11 + 13) - 11)",
      "((11 + 13) + 11) - 11",
      "11 + ((11 * 13) / 11)",
      "(11 + (11 - 11)) + 13",
      "((11 + 11) + 13) - 11",
      "11 - ((11 - 11) - 13)",
      "(11 - 11) + (13 + 11)",
      "11 + ((13 / 11) * 11)",
      "((13 / 11) * 11) + 11",
      "11 - (11 - (13 + 11))",
      "13 + ((11 - 11) + 11)",
      "11 + (13 * (11 / 11))",
      "11 + (13 + (11 - 11))",
      "11 + ((13 - 11) + 11)",
      "11 * ((13 + 11) / 11)",
      "(11 / 11) * (13 + 11)",
      "13 + (11 - (11 - 11))",
      "(11 - (11 - 13)) + 11",
      "((13 * 11) / 11) + 11",
      "(13 + 11) + (11 - 11)",
      "13 - ((11 - 11) - 11)",
      "(11 + 13) * (11 / 11)",
      "11 + ((13 * 11) / 11)",
      "((11 + 11) - 11) + 13",
      "(13 + 11) - (11 - 11)",
      "11 + ((11 - 11) + 13)",
      "(11 - 11) + (11 + 13)",
      "((11 * 13) / 11) + 11",
      "11 / (11 / (13 + 11))",
      "((11 + 13) * 11) / 11",
      "13 + ((11 / 11) * 11)",
      "((13 + 11) - 11) + 11",
      "(11 / 11) * (11 + 13)",
      "(11 + 11) - (11 - 13)",
      "((13 - 11) + 11) + 11",
      "(11 + 13) / (11 / 11)",
      "11 * ((11 + 13) / 11)",
      "(11 + 11) + (13 - 11)",
      "11 + ((11 / 11) * 13)",
      "((11 - 11) + 11) + 13",
      "11 + (13 / (11 / 11))",
      "(11 + (13 + 11)) - 11",
      "((11 - 11) + 13) + 11",
      "(13 + (11 + 11)) - 11",
      "(13 + 11) / (11 / 11)",
      "(11 + (13 - 11)) + 11",
      "(11 - (11 - 11)) + 13",
      "11 + (11 * (13 / 11))",
      "(13 - (11 - 11)) + 11",
      "((11 + 13) - 11) + 11",
      "((13 + 11) * 11) / 11",
      "((11 / 11) * 13) + 11",
      "11 - ((11 - 13) - 11)",
      "11 + (11 / (11 / 13))",
      "11 - (11 - (11 + 13))",
      "(13 * (11 / 11)) + 11",
      "11 + (13 - (11 - 11))",
      "(11 / (11 / 11)) + 13",
      "(13 / (11 / 11)) + 11",
      "11 + (11 - (11 - 13))",
      "(13 + 11) * (11 / 11)",
      "((13 + 11) + 11) - 11",
      "(13 + (11 - 11)) + 11",
      "((13 + 11) / 11) * 11",
      "(11 + 13) - (11 - 11)",
      "((11 + 13) / 11) * 11",
      "11 / (11 / (11 + 13))",
      "(11 * (13 / 11)) + 11",
      "(11 * (11 / 11)) + 13",
      "13 - (11 - (11 + 11))",
      "((11 * 11) / 11) + 13",
      "(11 * (11 + 13)) / 11",
      "(11 + 13) + (11 - 11)",
      "13 + (11 + (11 - 11))",
      "((11 / 11) * 11) + 13",
      "11 + (11 + (13 - 11))",
      "(11 * (13 + 11)) / 11",
      "(11 + (11 + 13)) - 11",
      "13 + ((11 + 11) - 11)",
      "11 + ((13 + 11) - 11)"
    ]
  },
  "11 11 12 12": {
    "cards": "11 11 12 12",
    "has_solution": "Y",
    "num_solutions": 69,
    "solutions": [
      "(12 + (12 + 11)) - 11",
      "(12 - 11) + (12 + 11)",
      "((12 + 11) + 12) - 11",
      "((12 / 11) * 11) + 12",
      "12 - (11 - (12 + 11))",
      "((12 + 11) - 11) + 12",
      "(12 + 12) + (11 - 11)",
      "12 + ((11 * 12) / 11)",
      "((11 / 11) * 12) + 12",
      "(12 + (11 + 12)) - 11",
      "(12 - 11) + (11 + 12)",
      "(12 + (12 - 11)) + 11",
      "12 + ((12 - 11) + 11)",
      "((12 - 11) + 11) + 12",
      "12 + ((12 / 11) * 11)",
      "((11 + 12) - 11) + 12",
      "(12 + 11) - (11 - 12)",
      "11 / (11 / (12 + 12))",
      "(12 + (11 - 11)) + 12",
      "12 + (11 / (11 / 12))",
      "12 + ((11 / 11) * 12)",
      "(11 / (11 / 12)) + 12",
      "((12 + 12) - 11) + 11",
      "12 - ((11 - 12) - 11)",
      "((12 + 12) / 11) * 11",
      "11 * ((12 + 12) / 11)",
      "(12 / (11 / 11)) + 12",
      "12 + (12 + (11 - 11))",
      "(12 + 12) / (11 / 11)",
      "(11 / 11) * (12 + 12)",
      "12 + ((11 - 11) + 12)",
      "12 + (12 - (11 - 11))",
      "(11 + (12 - 11)) + 12",
      "(11 + 12) + (12 - 11)",
      "(12 - (11 - 12)) + 11",
      "12 - ((11 - 11) - 12)",
      "((12 * 11) / 11) + 12",
      "11 - ((11 - 12) - 12)",
      "12 + (11 - (11 - 12))",
      "11 - (11 - (12 + 12))",
      "11 + (12 + (12 - 11))",
      "(12 + 11) + (12 - 11)",
      "12 + ((12 + 11) - 11)",
      "((12 - 11) + 12) + 11",
      "((11 + 12) + 12) - 11",
      "(11 - (11 - 12)) + 12",
      "12 + (12 * (11 / 11))",
      "((12 + 12) + 11) - 11",
      "12 + (12 / (11 / 11))",
      "12 - (11 - (11 + 12))",
      "12 + (11 * (12 / 11))",
      "(11 + 12) - (11 - 12)",
      "((12 + 12) * 11) / 11",
      "(12 + 12) * (11 / 11)",
      "(12 * (11 / 11)) + 12",
      "12 + ((12 * 11) / 11)",
      "((11 * 12) / 11) + 12",
      "12 + ((11 + 12) - 11)",
      "11 + (12 - (11 - 12))",
      "((11 - 11) + 12) + 12",
      "(12 - (11 - 11)) + 12",
      "(11 * (12 / 11)) + 12",
      "11 + ((12 + 12) - 11)",
      "(11 - 11) + (12 + 12)",
      "12 + (11 + (12 - 11))",
      "(11 * (12 + 12)) / 11",
      "11 + ((12 - 11) + 12)",
      "(11 + (12 + 12)) - 11",
      "(12 + 12) - (11 - 11)"
    ]
  },
  "11 11 12 13": {
    "cards": "11 11 12 13",
    "has_solution": "Y",
    "num_solutions": 32,
    "solutions": [
      "13 + ((12 - 11) * 11)",
      "(13 / (12 - 11)) + 11",
      "12 + (13 - (11 / 11))",
      "11 + (13 / (12 - 11))",
      "(13 + 11) * (12 - 11)",
      "(13 * (12 - 11)) + 11",
      "11 - (13 * (11 - 12))",
      "13 + (11 * (12 - 11))",
      "13 - ((11 - 12) * 11)",
      "((12 - 11) * 11) + 13",
      "((12 - 11) * 13) + 11",
      "13 + (12 - (11 / 11))",
      "(12 + 13) - (11 / 11)",
      "(12 - 11) * (11 + 13)",
      "(11 / (12 - 11)) + 13",
      "(13 + 12) - (11 / 11)",
      "11 - ((11 - 12) * 13)",
      "(13 - (11 / 11)) + 12",
      "13 - (11 * (11 - 12))",
      "(11 * (12 - 11)) + 13",
      "11 + ((12 - 11) * 13)",
      "13 - (11 / (11 - 12))",
      "(12 - (11 / 11)) + 13",
      "(13 + 11) / (12 - 11)",
      "(11 + 13) * (12 - 11)",
      "(11 + 13) / (12 - 11)",
      "13 + (11 / (12 - 11))",
      "(12 - 11) * (13 + 11)",
      "12 - ((11 / 11) - 13)",
      "11 - (13 / (11 - 12))",
      "13 - ((11 / 11) - 12)",
      "11 + (13 * (12 - 11))"
    ]
  },
  "11 11 13 13": {
    "cards": "11 11 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  },
  "11 12 12 12": {
    "cards": "11 12 12 12",
    "has_solution": "Y",
    "num_solutions": 24,
    "solutions": [
      "(12 / 12) + (11 + 12)",
      "(12 + 12) / (12 - 11)",
      "12 + (12 * (12 - 11))",
      "12 - (12 / (11 - 12))",
      "((12 / 12) + 12) + 11",
      "((12 / 12) + 11) + 12",
      "12 + (12 / (12 - 11))",
      "(12 - 11) * (12 + 12)",
      "(12 / (12 - 11)) + 12",
      "12 + ((12 - 11) * 12)",
      "11 + ((12 / 12) + 12)",
      "(12 + 11) + (12 / 12)",
      "(12 * (12 - 11)) + 12",
      "12 - ((11 - 12) * 12)",
      "(12 + (12 / 12)) + 11",
      "12 + (11 + (12 / 12))",
      "((12 - 11) * 12) + 12",
      "12 - (12 * (11 - 12))",
      "12 + ((12 / 12) + 11)",
      "(11 + (12 / 12)) + 12",
      "11 + (12 + (12 / 12))",
      "(11 + 12) + (12 / 12)",
      "(12 + 12) * (12 - 11)",
      "(12 / 12) + (12 + 11)"
    ]
  },
  "11 12 12 13": {
    "cards": "11 12 12 13",
    "has_solution": "Y",
    "num_solutions": 142,
    "solutions": [
      "((13 / 12) * 12) + 11",
      "12 + (13 - (12 - 11))",
      "13 + (12 * (11 / 12))",
      "((11 + 12) - 12) + 13",
      "(13 + 11) + (12 - 12)",
      "(12 - (12 - 11)) + 13",
      "((13 + 11) - 12) + 12",
      "(13 + 12) + (11 - 12)",
      "(11 + 13) * (12 / 12)",
      "(12 + 11) - (12 - 13)",
      "11 + ((13 / 12) * 12)",
      "11 + ((12 * 13) / 12)",
      "((11 / 12) * 12) + 13",
      "13 + ((11 * 12) / 12)",
      "(12 + 13) - (12 - 11)",
      "11 - ((12 - 12) - 13)",
      "12 / (12 / (11 + 13))",
      "13 + ((12 - 12) + 11)",
      "(13 + (12 + 11)) - 12",
      "(13 - 12) + (11 + 12)",
      "13 + ((11 / 12) * 12)",
      "12 + ((13 - 12) + 11)",
      "13 + (11 * (12 / 12))",
      "(13 * 12) - (12 * 11)",
      "(12 * (11 + 13)) / 12",
      "((12 + 11) - 12) + 13",
      "(13 + (11 + 12)) - 12",
      "((11 + 13) * 12) / 12",
      "(12 + 11) + (13 - 12)",
      "13 + ((12 + 11) - 12)",
      "(13 / (12 / 12)) + 11",
      "11 + (13 / (12 / 12))",
      "13 - ((12 - 12) - 11)",
      "13 + ((12 * 11) / 12)",
      "((13 + 11) / 12) * 12",
      "((12 + 13) - 12) + 11",
      "11 + (12 * (13 / 12))",
      "(11 + 13) - (12 - 12)",
      "(12 + (11 - 12)) + 13",
      "(11 + (12 - 12)) + 13",
      "(12 - (12 - 13)) + 11",
      "((12 / 12) * 13) + 11",
      "13 + (12 / (12 / 11))",
      "(12 * (11 / 12)) + 13",
      "12 * ((13 + 11) / 12)",
      "12 / (12 / (13 + 11))",
      "((11 + 12) + 13) - 12",
      "12 + ((11 - 12) + 13)",
      "12 * ((11 + 13) / 12)",
      "(12 * 13) - (12 * 11)",
      "(12 + 13) + (11 - 12)",
      "12 + ((13 + 11) - 12)",
      "((12 * 13) / 12) + 11",
      "11 + (13 * (12 / 12))",
      "(12 * (13 + 11)) / 12",
      "((13 - 12) + 11) + 12",
      "(12 - 12) + (13 + 11)",
      "((12 * 11) / 12) + 13",
      "11 + (12 - (12 - 13))",
      "(12 + (13 + 11)) - 12",
      "11 - (12 - (13 + 12))",
      "((11 + 13) - 12) + 12",
      "(13 - 12) + (12 + 11)",
      "12 - ((12 - 13) - 11)",
      "(11 + 13) + (12 - 12)",
      "((11 + 13) + 12) - 12",
      "13 + (12 + (11 - 12))",
      "11 + (13 + (12 - 12))",
      "(11 + (13 - 12)) + 12",
      "(11 - 12) + (12 + 13)",
      "((12 + 13) + 11) - 12",
      "((11 + 13) / 12) * 12",
      "((12 - 12) + 13) + 11",
      "(13 + 11) - (12 - 12)",
      "13 - (12 - (12 + 11))",
      "(11 * (12 / 12)) + 13",
      "11 + (12 + (13 - 12))",
      "11 + ((12 / 12) * 13)",
      "((13 - 12) + 12) + 11",
      "11 + ((13 - 12) + 12)",
      "(12 - 12) + (11 + 13)",
      "(11 + 13) / (12 / 12)",
      "(12 / 12) * (11 + 13)",
      "(13 + (11 - 12)) + 12",
      "((13 + 11) + 12) - 12",
      "12 + (11 + (13 - 12))",
      "(12 / (12 / 11)) + 13",
      "(11 + 12) + (13 - 12)",
      "13 + (12 - (12 - 11))",
      "(13 + (12 - 12)) + 11",
      "13 + (11 + (12 - 12))",
      "13 + (11 - (12 - 12))",
      "13 + ((11 - 12) + 12)",
      "(12 * (13 / 12)) + 11",
      "((12 / 12) * 11) + 13",
      "11 - (12 - (12 + 13))",
      "11 + (12 / (12 / 13))",
      "(11 / (12 / 12)) + 13",
      "13 - ((12 - 11) - 12)",
      "12 - ((12 - 11) - 13)",
      "(13 * (12 / 12)) + 11",
      "(12 / 12) * (13 + 11)",
      "((13 + 12) - 12) + 11",
      "((11 - 12) + 12) + 13",
      "12 - (12 - (13 + 11))",
      "12 + (13 + (11 - 12))",
      "(11 - 12) + (13 + 12)",
      "((12 + 11) + 13) - 12",
      "11 + ((12 + 13) - 12)",
      "11 + ((12 - 12) + 13)",
      "(13 - (12 - 12)) + 11",
      "11 + ((13 * 12) / 12)",
      "(11 - (12 - 13)) + 12",
      "(13 - (12 - 11)) + 12",
      "(11 - (12 - 12)) + 13",
      "(13 * 12) - (11 * 12)",
      "((13 + 12) + 11) - 12",
      "((13 * 12) / 12) + 11",
      "12 + (11 - (12 - 13))",
      "11 + (13 - (12 - 12))",
      "(13 + 12) - (12 - 11)",
      "(12 + (11 + 13)) - 12",
      "((12 - 12) + 11) + 13",
      "12 + ((11 + 13) - 12)",
      "11 - ((12 - 13) - 12)",
      "(12 / (12 / 13)) + 11",
      "((11 * 12) / 12) + 13",
      "(12 + (13 - 12)) + 11",
      "13 + (11 / (12 / 12))",
      "(11 + (13 + 12)) - 12",
      "13 + ((12 / 12) * 11)",
      "((13 + 11) * 12) / 12",
      "13 + ((11 + 12) - 12)",
      "13 - (12 - (11 + 12))",
      "(11 + (12 + 13)) - 12",
      "(11 + 12) - (12 - 13)",
      "(13 + 11) / (12 / 12)",
      "(13 + 11) * (12 / 12)",
      "((11 - 12) + 13) + 12",
      "11 + ((13 + 12) - 12)",
      "(12 * 13) - (11 * 12)",
      "12 - (12 - (11 + 13))"
    ]
  },
  "11 12 13 13": {
    "cards": "11 12 13 13",
    "has_solution": "Y",
    "num_solutions": 36,
    "solutions": [
      "11 + (12 + (13 / 13))",
      "13 + (11 * (13 - 12))",
      "11 - ((12 - 13) * 13)",
      "((13 - 12) * 13) + 11",
      "(11 + (13 / 13)) + 12",
      "(13 / 13) + (11 + 12)",
      "(11 + 12) + (13 / 13)",
      "11 - (13 / (12 - 13))",
      "11 + ((13 - 12) * 13)",
      "(12 + (13 / 13)) + 11",
      "13 - ((12 - 13) * 11)",
      "(11 + 13) * (13 - 12)",
      "(13 + 11) / (13 - 12)",
      "13 + ((13 - 12) * 11)",
      "(13 / 13) + (12 + 11)",
      "11 + (13 * (13 - 12))",
      "(11 / (13 - 12)) + 13",
      "(12 + 11) + (13 / 13)",
      "13 - (11 * (12 - 13))",
      "11 + (13 / (13 - 12))",
      "(13 / (13 - 12)) + 11",
      "(13 - 12) * (13 + 11)",
      "((13 / 13) + 12) + 11",
      "(11 * (13 - 12)) + 13",
      "13 + (11 / (13 - 12))",
      "11 + ((13 / 13) + 12)",
      "(13 - 12) * (11 + 13)",
      "((13 / 13) + 11) + 12",
      "(11 + 13) / (13 - 12)",
      "12 + ((13 / 13) + 11)",
      "13 - (11 / (12 - 13))",
      "12 + (11 + (13 / 13))",
      "((13 - 12) * 11) + 13",
      "(13 + 11) * (13 - 12)",
      "(13 * (13 - 12)) + 11",
      "11 - (13 * (12 - 13))"
    ]
  },
  "11 13 13 13": {
    "cards": "11 13 13 13",
    "has_solution": "Y",
    "num_solutions": 85,
    "solutions": [
      "(13 * (11 + 13)) / 13",
      "(13 / (13 / 13)) + 11",
      "(13 * (13 / 13)) + 11",
      "((11 + 13) + 13) - 13",
      "((13 + 13) + 11) - 13",
      "(13 + 11) + (13 - 13)",
      "((13 + 11) / 13) * 13",
      "((11 + 13) - 13) + 13",
      "((11 + 13) / 13) * 13",
      "13 + ((13 / 13) * 11)",
      "(11 + 13) + (13 - 13)",
      "(13 / 13) * (13 + 11)",
      "13 + ((11 - 13) + 13)",
      "(11 - 13) + (13 + 13)",
      "13 + (11 + (13 - 13))",
      "13 - (13 - (11 + 13))",
      "11 - (13 - (13 + 13))",
      "13 + (13 - (13 - 11))",
      "13 / (13 / (13 + 11))",
      "(13 * (11 / 13)) + 13",
      "13 - (13 - (13 + 11))",
      "((11 + 13) * 13) / 13",
      "13 + ((11 / 13) * 13)",
      "((13 + 11) + 13) - 13",
      "(11 + 13) * (13 / 13)",
      "13 + ((13 - 13) + 11)",
      "13 - ((13 - 11) - 13)",
      "13 + (13 + (11 - 13))",
      "(13 + 13) + (11 - 13)",
      "13 * ((11 + 13) / 13)",
      "((13 - 13) + 11) + 13",
      "11 + ((13 + 13) - 13)",
      "(13 + (13 - 13)) + 11",
      "13 + (13 * (11 / 13))",
      "13 + (11 - (13 - 13))",
      "(13 / (13 / 11)) + 13",
      "(11 - (13 - 13)) + 13",
      "11 + ((13 - 13) + 13)",
      "13 + ((11 + 13) - 13)",
      "(13 - (13 - 11)) + 13",
      "(11 + (13 + 13)) - 13",
      "(13 / 13) * (11 + 13)",
      "11 + (13 / (13 / 13))",
      "13 - ((13 - 13) - 11)",
      "(13 + (11 + 13)) - 13",
      "((13 + 11) - 13) + 13",
      "(11 + 13) - (13 - 13)",
      "13 + ((13 + 11) - 13)",
      "13 / (13 / (11 + 13))",
      "((13 + 11) * 13) / 13",
      "((13 + 13) - 13) + 11",
      "11 + ((13 / 13) * 13)",
      "(13 + 11) / (13 / 13)",
      "13 + (13 / (13 / 11))",
      "(11 + 13) / (13 / 13)",
      "11 - ((13 - 13) - 13)",
      "13 + (11 * (13 / 13))",
      "((11 / 13) * 13) + 13",
      "13 + ((13 * 11) / 13)",
      "((13 / 13) * 11) + 13",
      "13 + ((11 * 13) / 13)",
      "(13 + 11) - (13 - 13)",
      "((11 * 13) / 13) + 13",
      "(13 + 11) * (13 / 13)",
      "(11 * (13 / 13)) + 13",
      "13 + (11 / (13 / 13))",
      "((13 * 11) / 13) + 13",
      "((13 * 13) / 13) + 11",
      "((13 - 13) + 13) + 11",
      "(13 - (13 - 13)) + 11",
      "(13 + (13 + 11)) - 13",
      "(11 + (13 - 13)) + 13",
      "(13 * (13 + 11)) / 13",
      "(13 + (11 - 13)) + 13",
      "(11 / (13 / 13)) + 13",
      "((13 / 13) * 13) + 11",
      "((11 - 13) + 13) + 13",
      "13 * ((13 + 11) / 13)",
      "(13 + 13) - (13 - 11)",
      "11 + (13 * (13 / 13))",
      "(13 - 13) + (13 + 11)",
      "11 + (13 - (13 - 13))",
      "(13 - 13) + (11 + 13)",
      "11 + (13 + (13 - 13))",
      "11 + ((13 * 13) / 13)"
    ]
  },
  "12 12 12 12": {
    "cards": "12 12 12 12",
    "has_solution": "Y",
    "num_solutions": 31,
    "solutions": [
      "12 - ((12 - 12) - 12)",
      "12 + (12 + (12 - 12))",
      "12 + (12 / (12 / 12))",
      "((12 / 12) * 12) + 12",
      "(12 + (12 + 12)) - 12",
      "(12 - 12) + (12 + 12)",
      "12 + ((12 * 12) / 12)",
      "((12 * 12) / 12) + 12",
      "((12 + 12) - 12) + 12",
      "((12 + 12) * 12) / 12",
      "12 + ((12 + 12) - 12)",
      "(12 + 12) + (12 - 12)",
      "12 + (12 * (12 / 12))",
      "12 + ((12 / 12) * 12)",
      "((12 - 12) + 12) + 12",
      "(12 / 12) * (12 + 12)",
      "12 * ((12 + 12) / 12)",
      "12 + ((12 - 12) + 12)",
      "(12 + 12) - (12 - 12)",
      "(12 - (12 - 12)) + 12",
      "((12 + 12) + 12) - 12",
      "12 / (12 / (12 + 12))",
      "(12 * (12 + 12)) / 12",
      "12 - (12 - (12 + 12))",
      "((12 + 12) / 12) * 12",
      "(12 + 12) / (12 / 12)",
      "(12 / (12 / 12)) + 12",
      "12 + (12 - (12 - 12))",
      "(12 + (12 - 12)) + 12",
      "(12 * (12 / 12)) + 12",
      "(12 + 12) * (12 / 12)"
    ]
  },
  "12 12 12 13": {
    "cards": "12 12 12 13",
    "has_solution": "Y",
    "num_solutions": 20,
    "solutions": [
      "12 - ((12 / 12) - 13)",
      "12 + ((13 - 12) * 12)",
      "12 - ((12 - 13) * 12)",
      "(12 + 12) / (13 - 12)",
      "12 + (12 * (13 - 12))",
      "13 - ((12 / 12) - 12)",
      "12 + (12 / (13 - 12))",
      "(12 + 12) * (13 - 12)",
      "12 - (12 / (12 - 13))",
      "(13 - 12) * (12 + 12)",
      "12 + (13 - (12 / 12))",
      "(13 + 12) - (12 / 12)",
      "(12 - (12 / 12)) + 13",
      "(13 - (12 / 12)) + 12",
      "(12 / (13 - 12)) + 12",
      "(12 + 13) - (12 / 12)",
      "((13 - 12) * 12) + 12",
      "12 - (12 * (12 - 13))",
      "(12 * (13 - 12)) + 12",
      "13 + (12 - (12 / 12))"
    ]
  },
  "12 12 13 13": {
    "cards": "12 12 13 13",
    "has_solution": "Y",
    "num_solutions": 69,
    "solutions": [
      "12 + ((13 / 13) * 12)",
      "(13 + 12) - (13 - 12)",
      "12 + ((13 - 13) + 12)",
      "12 + (13 + (12 - 13))",
      "((12 + 13) - 13) + 12",
      "((12 * 13) / 13) + 12",
      "(12 + (13 - 13)) + 12",
      "(13 - 13) + (12 + 12)",
      "12 + (13 / (13 / 12))",
      "(13 + (12 - 13)) + 12",
      "12 - (13 - (12 + 13))",
      "(13 / 13) * (12 + 12)",
      "((13 + 12) + 12) - 13",
      "12 + (12 - (13 - 13))",
      "(13 * (12 / 13)) + 12",
      "13 / (13 / (12 + 12))",
      "13 - ((13 - 12) - 12)",
      "13 + (12 + (12 - 13))",
      "((12 - 13) + 12) + 13",
      "(12 - 13) + (12 + 13)",
      "((12 + 13) + 12) - 13",
      "((12 + 12) - 13) + 13",
      "(12 + (12 + 13)) - 13",
      "12 + ((12 / 13) * 13)",
      "(12 + 12) * (13 / 13)",
      "(13 + 12) + (12 - 13)",
      "(13 + (12 + 12)) - 13",
      "12 + ((12 + 13) - 13)",
      "((13 - 13) + 12) + 12",
      "(13 - (13 - 12)) + 12",
      "(12 + 12) / (13 / 13)",
      "13 - (13 - (12 + 12))",
      "12 + ((13 * 12) / 13)",
      "(12 * (13 / 13)) + 12",
      "((12 / 13) * 13) + 12",
      "(12 + 12) + (13 - 13)",
      "(12 + 13) + (12 - 13)",
      "12 - (13 - (13 + 12))",
      "((13 * 12) / 13) + 12",
      "((13 + 12) - 13) + 12",
      "12 + (13 - (13 - 12))",
      "13 + ((12 + 12) - 13)",
      "(12 - (13 - 13)) + 12",
      "((12 + 12) + 13) - 13",
      "12 + (12 + (13 - 13))",
      "(12 + 13) - (13 - 12)",
      "(12 - 13) + (13 + 12)",
      "(13 / (13 / 12)) + 12",
      "13 + (12 - (13 - 12))",
      "12 + ((12 - 13) + 13)",
      "((12 + 12) / 13) * 13",
      "(12 - (13 - 12)) + 13",
      "((13 / 13) * 12) + 12",
      "12 - ((13 - 13) - 12)",
      "((12 - 13) + 13) + 12",
      "((12 + 12) * 13) / 13",
      "12 + (12 * (13 / 13))",
      "12 + (13 * (12 / 13))",
      "13 * ((12 + 12) / 13)",
      "(13 * (12 + 12)) / 13",
      "12 + ((12 * 13) / 13)",
      "12 + (12 / (13 / 13))",
      "(12 + 12) - (13 - 13)",
      "(12 + (13 + 12)) - 13",
      "12 - ((13 - 12) - 13)",
      "(12 / (13 / 13)) + 12",
      "12 + ((13 + 12) - 13)",
      "13 + ((12 - 13) + 12)",
      "(12 + (12 - 13)) + 13"
    ]
  },
  "12 13 13 13": {
    "cards": "12 13 13 13",
    "has_solution": "Y",
    "num_solutions": 16,
    "solutions": [
      "13 - ((13 / 13) - 12)",
      "(13 + 13) / (13 / 12)",
      "12 - ((13 / 13) - 13)",
      "(12 * (13 + 13)) / 13",
      "12 * ((13 + 13) / 13)",
      "12 / (13 / (13 + 13))",
      "(12 / 13) * (13 + 13)",
      "(12 + 13) - (13 / 13)",
      "12 + (13 - (13 / 13))",
      "(12 - (13 / 13)) + 13",
      "13 + (12 - (13 / 13))",
      "(13 - (13 / 13)) + 12",
      "(13 + 12) - (13 / 13)",
      "((13 + 13) / 13) * 12",
      "(13 + 13) * (12 / 13)",
      "((13 + 13) * 12) / 13"
    ]
  },
  "13 13 13 13": {
    "cards": "13 13 13 13",
    "has_solution": "N",
    "num_solutions": 0,
    "solutions": []
  }
}